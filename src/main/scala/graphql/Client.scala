package graphql

import caliban.client.CalibanClientError.DecodingError
import caliban.client.FieldBuilder._
import caliban.client.Operations.{RootMutation, RootQuery}
import caliban.client.SelectionBuilder.Field
import caliban.client.Value.{EnumValue, ListValue, NullValue, ObjectValue, StringValue}
import caliban.client._

object Client {

  type Date = String

  type DateTime = String

  type GitObjectID = String

  type GitRefname = String

  type GitSSHRemote = String

  type GitTimestamp = String

  type HTML = String

  type PreciseDateTime = String

  type URI = String

  type X509Certificate = String

  sealed trait ActionExecutionCapabilitySetting
    extends scala.Product
      with scala.Serializable

  object ActionExecutionCapabilitySetting {

    case object ALL_ACTIONS extends ActionExecutionCapabilitySetting

    case object DISABLED extends ActionExecutionCapabilitySetting

    case object LOCAL_ACTIONS_ONLY extends ActionExecutionCapabilitySetting

    case object NO_POLICY extends ActionExecutionCapabilitySetting

    implicit val decoder: ScalarDecoder[ActionExecutionCapabilitySetting] = {
      case StringValue("ALL_ACTIONS") =>
        Right(ActionExecutionCapabilitySetting.ALL_ACTIONS)
      case StringValue("DISABLED") =>
        Right(ActionExecutionCapabilitySetting.DISABLED)
      case StringValue("LOCAL_ACTIONS_ONLY") =>
        Right(ActionExecutionCapabilitySetting.LOCAL_ACTIONS_ONLY)
      case StringValue("NO_POLICY") =>
        Right(ActionExecutionCapabilitySetting.NO_POLICY)
      case other =>
        Left(
          DecodingError(
            s"Can't build ActionExecutionCapabilitySetting from input $other"
          )
        )
    }
    implicit val encoder: ArgEncoder[ActionExecutionCapabilitySetting] =
      new ArgEncoder[ActionExecutionCapabilitySetting] {
        override def encode(value: ActionExecutionCapabilitySetting): Value =
          value match {
            case ActionExecutionCapabilitySetting.ALL_ACTIONS =>
              EnumValue("ALL_ACTIONS")
            case ActionExecutionCapabilitySetting.DISABLED =>
              EnumValue("DISABLED")
            case ActionExecutionCapabilitySetting.LOCAL_ACTIONS_ONLY =>
              EnumValue("LOCAL_ACTIONS_ONLY")
            case ActionExecutionCapabilitySetting.NO_POLICY =>
              EnumValue("NO_POLICY")
          }

        override def typeName: String = "ActionExecutionCapabilitySetting"
      }
  }

  sealed trait AuditLogOrderField extends scala.Product with scala.Serializable

  object AuditLogOrderField {

    case object CREATED_AT extends AuditLogOrderField

    implicit val decoder: ScalarDecoder[AuditLogOrderField] = {
      case StringValue("CREATED_AT") => Right(AuditLogOrderField.CREATED_AT)
      case other =>
        Left(DecodingError(s"Can't build AuditLogOrderField from input $other"))
    }
    implicit val encoder: ArgEncoder[AuditLogOrderField] =
      new ArgEncoder[AuditLogOrderField] {
        override def encode(value: AuditLogOrderField): Value = value match {
          case AuditLogOrderField.CREATED_AT => EnumValue("CREATED_AT")
        }

        override def typeName: String = "AuditLogOrderField"
      }
  }

  sealed trait CheckAnnotationLevel
    extends scala.Product
      with scala.Serializable

  object CheckAnnotationLevel {

    case object FAILURE extends CheckAnnotationLevel

    case object NOTICE extends CheckAnnotationLevel

    case object WARNING extends CheckAnnotationLevel

    implicit val decoder: ScalarDecoder[CheckAnnotationLevel] = {
      case StringValue("FAILURE") => Right(CheckAnnotationLevel.FAILURE)
      case StringValue("NOTICE") => Right(CheckAnnotationLevel.NOTICE)
      case StringValue("WARNING") => Right(CheckAnnotationLevel.WARNING)
      case other =>
        Left(
          DecodingError(s"Can't build CheckAnnotationLevel from input $other")
        )
    }
    implicit val encoder: ArgEncoder[CheckAnnotationLevel] =
      new ArgEncoder[CheckAnnotationLevel] {
        override def encode(value: CheckAnnotationLevel): Value = value match {
          case CheckAnnotationLevel.FAILURE => EnumValue("FAILURE")
          case CheckAnnotationLevel.NOTICE => EnumValue("NOTICE")
          case CheckAnnotationLevel.WARNING => EnumValue("WARNING")
        }

        override def typeName: String = "CheckAnnotationLevel"
      }
  }

  sealed trait CheckConclusionState
    extends scala.Product
      with scala.Serializable

  object CheckConclusionState {

    case object ACTION_REQUIRED extends CheckConclusionState

    case object CANCELLED extends CheckConclusionState

    case object FAILURE extends CheckConclusionState

    case object NEUTRAL extends CheckConclusionState

    case object SKIPPED extends CheckConclusionState

    case object STALE extends CheckConclusionState

    case object SUCCESS extends CheckConclusionState

    case object TIMED_OUT extends CheckConclusionState

    implicit val decoder: ScalarDecoder[CheckConclusionState] = {
      case StringValue("ACTION_REQUIRED") =>
        Right(CheckConclusionState.ACTION_REQUIRED)
      case StringValue("CANCELLED") => Right(CheckConclusionState.CANCELLED)
      case StringValue("FAILURE") => Right(CheckConclusionState.FAILURE)
      case StringValue("NEUTRAL") => Right(CheckConclusionState.NEUTRAL)
      case StringValue("SKIPPED") => Right(CheckConclusionState.SKIPPED)
      case StringValue("STALE") => Right(CheckConclusionState.STALE)
      case StringValue("SUCCESS") => Right(CheckConclusionState.SUCCESS)
      case StringValue("TIMED_OUT") => Right(CheckConclusionState.TIMED_OUT)
      case other =>
        Left(
          DecodingError(s"Can't build CheckConclusionState from input $other")
        )
    }
    implicit val encoder: ArgEncoder[CheckConclusionState] =
      new ArgEncoder[CheckConclusionState] {
        override def encode(value: CheckConclusionState): Value = value match {
          case CheckConclusionState.ACTION_REQUIRED =>
            EnumValue("ACTION_REQUIRED")
          case CheckConclusionState.CANCELLED => EnumValue("CANCELLED")
          case CheckConclusionState.FAILURE => EnumValue("FAILURE")
          case CheckConclusionState.NEUTRAL => EnumValue("NEUTRAL")
          case CheckConclusionState.SKIPPED => EnumValue("SKIPPED")
          case CheckConclusionState.STALE => EnumValue("STALE")
          case CheckConclusionState.SUCCESS => EnumValue("SUCCESS")
          case CheckConclusionState.TIMED_OUT => EnumValue("TIMED_OUT")
        }

        override def typeName: String = "CheckConclusionState"
      }
  }

  sealed trait CheckRunType extends scala.Product with scala.Serializable

  object CheckRunType {

    case object ALL extends CheckRunType

    case object LATEST extends CheckRunType

    implicit val decoder: ScalarDecoder[CheckRunType] = {
      case StringValue("ALL") => Right(CheckRunType.ALL)
      case StringValue("LATEST") => Right(CheckRunType.LATEST)
      case other =>
        Left(DecodingError(s"Can't build CheckRunType from input $other"))
    }
    implicit val encoder: ArgEncoder[CheckRunType] =
      new ArgEncoder[CheckRunType] {
        override def encode(value: CheckRunType): Value = value match {
          case CheckRunType.ALL => EnumValue("ALL")
          case CheckRunType.LATEST => EnumValue("LATEST")
        }

        override def typeName: String = "CheckRunType"
      }
  }

  sealed trait CheckStatusState extends scala.Product with scala.Serializable

  object CheckStatusState {

    case object COMPLETED extends CheckStatusState

    case object IN_PROGRESS extends CheckStatusState

    case object QUEUED extends CheckStatusState

    case object REQUESTED extends CheckStatusState

    implicit val decoder: ScalarDecoder[CheckStatusState] = {
      case StringValue("COMPLETED") => Right(CheckStatusState.COMPLETED)
      case StringValue("IN_PROGRESS") => Right(CheckStatusState.IN_PROGRESS)
      case StringValue("QUEUED") => Right(CheckStatusState.QUEUED)
      case StringValue("REQUESTED") => Right(CheckStatusState.REQUESTED)
      case other =>
        Left(DecodingError(s"Can't build CheckStatusState from input $other"))
    }
    implicit val encoder: ArgEncoder[CheckStatusState] =
      new ArgEncoder[CheckStatusState] {
        override def encode(value: CheckStatusState): Value = value match {
          case CheckStatusState.COMPLETED => EnumValue("COMPLETED")
          case CheckStatusState.IN_PROGRESS => EnumValue("IN_PROGRESS")
          case CheckStatusState.QUEUED => EnumValue("QUEUED")
          case CheckStatusState.REQUESTED => EnumValue("REQUESTED")
        }

        override def typeName: String = "CheckStatusState"
      }
  }

  sealed trait CollaboratorAffiliation
    extends scala.Product
      with scala.Serializable

  object CollaboratorAffiliation {

    case object ALL extends CollaboratorAffiliation

    case object DIRECT extends CollaboratorAffiliation

    case object OUTSIDE extends CollaboratorAffiliation

    implicit val decoder: ScalarDecoder[CollaboratorAffiliation] = {
      case StringValue("ALL") => Right(CollaboratorAffiliation.ALL)
      case StringValue("DIRECT") => Right(CollaboratorAffiliation.DIRECT)
      case StringValue("OUTSIDE") => Right(CollaboratorAffiliation.OUTSIDE)
      case other =>
        Left(
          DecodingError(
            s"Can't build CollaboratorAffiliation from input $other"
          )
        )
    }
    implicit val encoder: ArgEncoder[CollaboratorAffiliation] =
      new ArgEncoder[CollaboratorAffiliation] {
        override def encode(value: CollaboratorAffiliation): Value =
          value match {
            case CollaboratorAffiliation.ALL => EnumValue("ALL")
            case CollaboratorAffiliation.DIRECT => EnumValue("DIRECT")
            case CollaboratorAffiliation.OUTSIDE => EnumValue("OUTSIDE")
          }

        override def typeName: String = "CollaboratorAffiliation"
      }
  }

  sealed trait CommentAuthorAssociation
    extends scala.Product
      with scala.Serializable

  object CommentAuthorAssociation {

    case object COLLABORATOR extends CommentAuthorAssociation

    case object CONTRIBUTOR extends CommentAuthorAssociation

    case object FIRST_TIMER extends CommentAuthorAssociation

    case object FIRST_TIME_CONTRIBUTOR extends CommentAuthorAssociation

    case object MANNEQUIN extends CommentAuthorAssociation

    case object MEMBER extends CommentAuthorAssociation

    case object NONE extends CommentAuthorAssociation

    case object OWNER extends CommentAuthorAssociation

    implicit val decoder: ScalarDecoder[CommentAuthorAssociation] = {
      case StringValue("COLLABORATOR") =>
        Right(CommentAuthorAssociation.COLLABORATOR)
      case StringValue("CONTRIBUTOR") =>
        Right(CommentAuthorAssociation.CONTRIBUTOR)
      case StringValue("FIRST_TIMER") =>
        Right(CommentAuthorAssociation.FIRST_TIMER)
      case StringValue("FIRST_TIME_CONTRIBUTOR") =>
        Right(CommentAuthorAssociation.FIRST_TIME_CONTRIBUTOR)
      case StringValue("MANNEQUIN") => Right(CommentAuthorAssociation.MANNEQUIN)
      case StringValue("MEMBER") => Right(CommentAuthorAssociation.MEMBER)
      case StringValue("NONE") => Right(CommentAuthorAssociation.NONE)
      case StringValue("OWNER") => Right(CommentAuthorAssociation.OWNER)
      case other =>
        Left(
          DecodingError(
            s"Can't build CommentAuthorAssociation from input $other"
          )
        )
    }
    implicit val encoder: ArgEncoder[CommentAuthorAssociation] =
      new ArgEncoder[CommentAuthorAssociation] {
        override def encode(value: CommentAuthorAssociation): Value =
          value match {
            case CommentAuthorAssociation.COLLABORATOR =>
              EnumValue("COLLABORATOR")
            case CommentAuthorAssociation.CONTRIBUTOR =>
              EnumValue("CONTRIBUTOR")
            case CommentAuthorAssociation.FIRST_TIMER =>
              EnumValue("FIRST_TIMER")
            case CommentAuthorAssociation.FIRST_TIME_CONTRIBUTOR =>
              EnumValue("FIRST_TIME_CONTRIBUTOR")
            case CommentAuthorAssociation.MANNEQUIN => EnumValue("MANNEQUIN")
            case CommentAuthorAssociation.MEMBER => EnumValue("MEMBER")
            case CommentAuthorAssociation.NONE => EnumValue("NONE")
            case CommentAuthorAssociation.OWNER => EnumValue("OWNER")
          }

        override def typeName: String = "CommentAuthorAssociation"
      }
  }

  sealed trait CommentCannotUpdateReason
    extends scala.Product
      with scala.Serializable

  object CommentCannotUpdateReason {

    case object ARCHIVED extends CommentCannotUpdateReason

    case object DENIED extends CommentCannotUpdateReason

    case object INSUFFICIENT_ACCESS extends CommentCannotUpdateReason

    case object LOCKED extends CommentCannotUpdateReason

    case object LOGIN_REQUIRED extends CommentCannotUpdateReason

    case object MAINTENANCE extends CommentCannotUpdateReason

    case object VERIFIED_EMAIL_REQUIRED extends CommentCannotUpdateReason

    implicit val decoder: ScalarDecoder[CommentCannotUpdateReason] = {
      case StringValue("ARCHIVED") => Right(CommentCannotUpdateReason.ARCHIVED)
      case StringValue("DENIED") => Right(CommentCannotUpdateReason.DENIED)
      case StringValue("INSUFFICIENT_ACCESS") =>
        Right(CommentCannotUpdateReason.INSUFFICIENT_ACCESS)
      case StringValue("LOCKED") => Right(CommentCannotUpdateReason.LOCKED)
      case StringValue("LOGIN_REQUIRED") =>
        Right(CommentCannotUpdateReason.LOGIN_REQUIRED)
      case StringValue("MAINTENANCE") =>
        Right(CommentCannotUpdateReason.MAINTENANCE)
      case StringValue("VERIFIED_EMAIL_REQUIRED") =>
        Right(CommentCannotUpdateReason.VERIFIED_EMAIL_REQUIRED)
      case other =>
        Left(
          DecodingError(
            s"Can't build CommentCannotUpdateReason from input $other"
          )
        )
    }
    implicit val encoder: ArgEncoder[CommentCannotUpdateReason] =
      new ArgEncoder[CommentCannotUpdateReason] {
        override def encode(value: CommentCannotUpdateReason): Value =
          value match {
            case CommentCannotUpdateReason.ARCHIVED => EnumValue("ARCHIVED")
            case CommentCannotUpdateReason.DENIED => EnumValue("DENIED")
            case CommentCannotUpdateReason.INSUFFICIENT_ACCESS =>
              EnumValue("INSUFFICIENT_ACCESS")
            case CommentCannotUpdateReason.LOCKED => EnumValue("LOCKED")
            case CommentCannotUpdateReason.LOGIN_REQUIRED =>
              EnumValue("LOGIN_REQUIRED")
            case CommentCannotUpdateReason.MAINTENANCE =>
              EnumValue("MAINTENANCE")
            case CommentCannotUpdateReason.VERIFIED_EMAIL_REQUIRED =>
              EnumValue("VERIFIED_EMAIL_REQUIRED")
          }

        override def typeName: String = "CommentCannotUpdateReason"
      }
  }

  sealed trait CommitContributionOrderField
    extends scala.Product
      with scala.Serializable

  object CommitContributionOrderField {

    case object COMMIT_COUNT extends CommitContributionOrderField

    case object OCCURRED_AT extends CommitContributionOrderField

    implicit val decoder: ScalarDecoder[CommitContributionOrderField] = {
      case StringValue("COMMIT_COUNT") =>
        Right(CommitContributionOrderField.COMMIT_COUNT)
      case StringValue("OCCURRED_AT") =>
        Right(CommitContributionOrderField.OCCURRED_AT)
      case other =>
        Left(
          DecodingError(
            s"Can't build CommitContributionOrderField from input $other"
          )
        )
    }
    implicit val encoder: ArgEncoder[CommitContributionOrderField] =
      new ArgEncoder[CommitContributionOrderField] {
        override def encode(value: CommitContributionOrderField): Value =
          value match {
            case CommitContributionOrderField.COMMIT_COUNT =>
              EnumValue("COMMIT_COUNT")
            case CommitContributionOrderField.OCCURRED_AT =>
              EnumValue("OCCURRED_AT")
          }

        override def typeName: String = "CommitContributionOrderField"
      }
  }

  sealed trait DefaultRepositoryPermissionField
    extends scala.Product
      with scala.Serializable

  object DefaultRepositoryPermissionField {

    case object ADMIN extends DefaultRepositoryPermissionField

    case object NONE extends DefaultRepositoryPermissionField

    case object READ extends DefaultRepositoryPermissionField

    case object WRITE extends DefaultRepositoryPermissionField

    implicit val decoder: ScalarDecoder[DefaultRepositoryPermissionField] = {
      case StringValue("ADMIN") => Right(DefaultRepositoryPermissionField.ADMIN)
      case StringValue("NONE") => Right(DefaultRepositoryPermissionField.NONE)
      case StringValue("READ") => Right(DefaultRepositoryPermissionField.READ)
      case StringValue("WRITE") => Right(DefaultRepositoryPermissionField.WRITE)
      case other =>
        Left(
          DecodingError(
            s"Can't build DefaultRepositoryPermissionField from input $other"
          )
        )
    }
    implicit val encoder: ArgEncoder[DefaultRepositoryPermissionField] =
      new ArgEncoder[DefaultRepositoryPermissionField] {
        override def encode(value: DefaultRepositoryPermissionField): Value =
          value match {
            case DefaultRepositoryPermissionField.ADMIN => EnumValue("ADMIN")
            case DefaultRepositoryPermissionField.NONE => EnumValue("NONE")
            case DefaultRepositoryPermissionField.READ => EnumValue("READ")
            case DefaultRepositoryPermissionField.WRITE => EnumValue("WRITE")
          }

        override def typeName: String = "DefaultRepositoryPermissionField"
      }
  }

  sealed trait DeploymentOrderField
    extends scala.Product
      with scala.Serializable

  object DeploymentOrderField {

    case object CREATED_AT extends DeploymentOrderField

    implicit val decoder: ScalarDecoder[DeploymentOrderField] = {
      case StringValue("CREATED_AT") => Right(DeploymentOrderField.CREATED_AT)
      case other =>
        Left(
          DecodingError(s"Can't build DeploymentOrderField from input $other")
        )
    }
    implicit val encoder: ArgEncoder[DeploymentOrderField] =
      new ArgEncoder[DeploymentOrderField] {
        override def encode(value: DeploymentOrderField): Value = value match {
          case DeploymentOrderField.CREATED_AT => EnumValue("CREATED_AT")
        }

        override def typeName: String = "DeploymentOrderField"
      }
  }

  sealed trait DeploymentState extends scala.Product with scala.Serializable

  object DeploymentState {

    case object ABANDONED extends DeploymentState

    case object ACTIVE extends DeploymentState

    case object DESTROYED extends DeploymentState

    case object ERROR extends DeploymentState

    case object FAILURE extends DeploymentState

    case object INACTIVE extends DeploymentState

    case object IN_PROGRESS extends DeploymentState

    case object PENDING extends DeploymentState

    case object QUEUED extends DeploymentState

    implicit val decoder: ScalarDecoder[DeploymentState] = {
      case StringValue("ABANDONED") => Right(DeploymentState.ABANDONED)
      case StringValue("ACTIVE") => Right(DeploymentState.ACTIVE)
      case StringValue("DESTROYED") => Right(DeploymentState.DESTROYED)
      case StringValue("ERROR") => Right(DeploymentState.ERROR)
      case StringValue("FAILURE") => Right(DeploymentState.FAILURE)
      case StringValue("INACTIVE") => Right(DeploymentState.INACTIVE)
      case StringValue("IN_PROGRESS") => Right(DeploymentState.IN_PROGRESS)
      case StringValue("PENDING") => Right(DeploymentState.PENDING)
      case StringValue("QUEUED") => Right(DeploymentState.QUEUED)
      case other =>
        Left(DecodingError(s"Can't build DeploymentState from input $other"))
    }
    implicit val encoder: ArgEncoder[DeploymentState] =
      new ArgEncoder[DeploymentState] {
        override def encode(value: DeploymentState): Value = value match {
          case DeploymentState.ABANDONED => EnumValue("ABANDONED")
          case DeploymentState.ACTIVE => EnumValue("ACTIVE")
          case DeploymentState.DESTROYED => EnumValue("DESTROYED")
          case DeploymentState.ERROR => EnumValue("ERROR")
          case DeploymentState.FAILURE => EnumValue("FAILURE")
          case DeploymentState.INACTIVE => EnumValue("INACTIVE")
          case DeploymentState.IN_PROGRESS => EnumValue("IN_PROGRESS")
          case DeploymentState.PENDING => EnumValue("PENDING")
          case DeploymentState.QUEUED => EnumValue("QUEUED")
        }

        override def typeName: String = "DeploymentState"
      }
  }

  sealed trait DeploymentStatusState
    extends scala.Product
      with scala.Serializable

  object DeploymentStatusState {

    case object ERROR extends DeploymentStatusState

    case object FAILURE extends DeploymentStatusState

    case object INACTIVE extends DeploymentStatusState

    case object IN_PROGRESS extends DeploymentStatusState

    case object PENDING extends DeploymentStatusState

    case object QUEUED extends DeploymentStatusState

    case object SUCCESS extends DeploymentStatusState

    implicit val decoder: ScalarDecoder[DeploymentStatusState] = {
      case StringValue("ERROR") => Right(DeploymentStatusState.ERROR)
      case StringValue("FAILURE") => Right(DeploymentStatusState.FAILURE)
      case StringValue("INACTIVE") => Right(DeploymentStatusState.INACTIVE)
      case StringValue("IN_PROGRESS") =>
        Right(DeploymentStatusState.IN_PROGRESS)
      case StringValue("PENDING") => Right(DeploymentStatusState.PENDING)
      case StringValue("QUEUED") => Right(DeploymentStatusState.QUEUED)
      case StringValue("SUCCESS") => Right(DeploymentStatusState.SUCCESS)
      case other =>
        Left(
          DecodingError(s"Can't build DeploymentStatusState from input $other")
        )
    }
    implicit val encoder: ArgEncoder[DeploymentStatusState] =
      new ArgEncoder[DeploymentStatusState] {
        override def encode(value: DeploymentStatusState): Value = value match {
          case DeploymentStatusState.ERROR => EnumValue("ERROR")
          case DeploymentStatusState.FAILURE => EnumValue("FAILURE")
          case DeploymentStatusState.INACTIVE => EnumValue("INACTIVE")
          case DeploymentStatusState.IN_PROGRESS => EnumValue("IN_PROGRESS")
          case DeploymentStatusState.PENDING => EnumValue("PENDING")
          case DeploymentStatusState.QUEUED => EnumValue("QUEUED")
          case DeploymentStatusState.SUCCESS => EnumValue("SUCCESS")
        }

        override def typeName: String = "DeploymentStatusState"
      }
  }

  sealed trait DiffSide extends scala.Product with scala.Serializable

  object DiffSide {

    case object LEFT extends DiffSide

    case object RIGHT extends DiffSide

    implicit val decoder: ScalarDecoder[DiffSide] = {
      case StringValue("LEFT") => Right(DiffSide.LEFT)
      case StringValue("RIGHT") => Right(DiffSide.RIGHT)
      case other =>
        Left(DecodingError(s"Can't build DiffSide from input $other"))
    }
    implicit val encoder: ArgEncoder[DiffSide] = new ArgEncoder[DiffSide] {
      override def encode(value: DiffSide): Value = value match {
        case DiffSide.LEFT => EnumValue("LEFT")
        case DiffSide.RIGHT => EnumValue("RIGHT")
      }

      override def typeName: String = "DiffSide"
    }
  }

  sealed trait EnterpriseAdministratorInvitationOrderField
    extends scala.Product
      with scala.Serializable

  object EnterpriseAdministratorInvitationOrderField {

    case object CREATED_AT extends EnterpriseAdministratorInvitationOrderField

    implicit val decoder
    : ScalarDecoder[EnterpriseAdministratorInvitationOrderField] = {
      case StringValue("CREATED_AT") =>
        Right(EnterpriseAdministratorInvitationOrderField.CREATED_AT)
      case other =>
        Left(
          DecodingError(
            s"Can't build EnterpriseAdministratorInvitationOrderField from input $other"
          )
        )
    }
    implicit val encoder
    : ArgEncoder[EnterpriseAdministratorInvitationOrderField] =
      new ArgEncoder[EnterpriseAdministratorInvitationOrderField] {
        override def encode(
                             value: EnterpriseAdministratorInvitationOrderField
                           ): Value = value match {
          case EnterpriseAdministratorInvitationOrderField.CREATED_AT =>
            EnumValue("CREATED_AT")
        }

        override def typeName: String =
          "EnterpriseAdministratorInvitationOrderField"
      }
  }

  sealed trait EnterpriseAdministratorRole
    extends scala.Product
      with scala.Serializable

  object EnterpriseAdministratorRole {

    case object BILLING_MANAGER extends EnterpriseAdministratorRole

    case object OWNER extends EnterpriseAdministratorRole

    implicit val decoder: ScalarDecoder[EnterpriseAdministratorRole] = {
      case StringValue("BILLING_MANAGER") =>
        Right(EnterpriseAdministratorRole.BILLING_MANAGER)
      case StringValue("OWNER") => Right(EnterpriseAdministratorRole.OWNER)
      case other =>
        Left(
          DecodingError(
            s"Can't build EnterpriseAdministratorRole from input $other"
          )
        )
    }
    implicit val encoder: ArgEncoder[EnterpriseAdministratorRole] =
      new ArgEncoder[EnterpriseAdministratorRole] {
        override def encode(value: EnterpriseAdministratorRole): Value =
          value match {
            case EnterpriseAdministratorRole.BILLING_MANAGER =>
              EnumValue("BILLING_MANAGER")
            case EnterpriseAdministratorRole.OWNER => EnumValue("OWNER")
          }

        override def typeName: String = "EnterpriseAdministratorRole"
      }
  }

  sealed trait EnterpriseDefaultRepositoryPermissionSettingValue
    extends scala.Product
      with scala.Serializable

  object EnterpriseDefaultRepositoryPermissionSettingValue {

    case object ADMIN extends EnterpriseDefaultRepositoryPermissionSettingValue

    case object NONE extends EnterpriseDefaultRepositoryPermissionSettingValue

    case object NO_POLICY
      extends EnterpriseDefaultRepositoryPermissionSettingValue

    case object READ extends EnterpriseDefaultRepositoryPermissionSettingValue

    case object WRITE extends EnterpriseDefaultRepositoryPermissionSettingValue

    implicit val decoder
    : ScalarDecoder[EnterpriseDefaultRepositoryPermissionSettingValue] = {
      case StringValue("ADMIN") =>
        Right(EnterpriseDefaultRepositoryPermissionSettingValue.ADMIN)
      case StringValue("NONE") =>
        Right(EnterpriseDefaultRepositoryPermissionSettingValue.NONE)
      case StringValue("NO_POLICY") =>
        Right(EnterpriseDefaultRepositoryPermissionSettingValue.NO_POLICY)
      case StringValue("READ") =>
        Right(EnterpriseDefaultRepositoryPermissionSettingValue.READ)
      case StringValue("WRITE") =>
        Right(EnterpriseDefaultRepositoryPermissionSettingValue.WRITE)
      case other =>
        Left(
          DecodingError(
            s"Can't build EnterpriseDefaultRepositoryPermissionSettingValue from input $other"
          )
        )
    }
    implicit val encoder
    : ArgEncoder[EnterpriseDefaultRepositoryPermissionSettingValue] =
      new ArgEncoder[EnterpriseDefaultRepositoryPermissionSettingValue] {
        override def encode(
                             value: EnterpriseDefaultRepositoryPermissionSettingValue
                           ): Value = value match {
          case EnterpriseDefaultRepositoryPermissionSettingValue.ADMIN =>
            EnumValue("ADMIN")
          case EnterpriseDefaultRepositoryPermissionSettingValue.NONE =>
            EnumValue("NONE")
          case EnterpriseDefaultRepositoryPermissionSettingValue.NO_POLICY =>
            EnumValue("NO_POLICY")
          case EnterpriseDefaultRepositoryPermissionSettingValue.READ =>
            EnumValue("READ")
          case EnterpriseDefaultRepositoryPermissionSettingValue.WRITE =>
            EnumValue("WRITE")
        }

        override def typeName: String =
          "EnterpriseDefaultRepositoryPermissionSettingValue"
      }
  }

  sealed trait EnterpriseEnabledDisabledSettingValue
    extends scala.Product
      with scala.Serializable

  object EnterpriseEnabledDisabledSettingValue {

    case object DISABLED extends EnterpriseEnabledDisabledSettingValue

    case object ENABLED extends EnterpriseEnabledDisabledSettingValue

    case object NO_POLICY extends EnterpriseEnabledDisabledSettingValue

    implicit val decoder
    : ScalarDecoder[EnterpriseEnabledDisabledSettingValue] = {
      case StringValue("DISABLED") =>
        Right(EnterpriseEnabledDisabledSettingValue.DISABLED)
      case StringValue("ENABLED") =>
        Right(EnterpriseEnabledDisabledSettingValue.ENABLED)
      case StringValue("NO_POLICY") =>
        Right(EnterpriseEnabledDisabledSettingValue.NO_POLICY)
      case other =>
        Left(
          DecodingError(
            s"Can't build EnterpriseEnabledDisabledSettingValue from input $other"
          )
        )
    }
    implicit val encoder: ArgEncoder[EnterpriseEnabledDisabledSettingValue] =
      new ArgEncoder[EnterpriseEnabledDisabledSettingValue] {
        override def encode(
                             value: EnterpriseEnabledDisabledSettingValue
                           ): Value = value match {
          case EnterpriseEnabledDisabledSettingValue.DISABLED =>
            EnumValue("DISABLED")
          case EnterpriseEnabledDisabledSettingValue.ENABLED =>
            EnumValue("ENABLED")
          case EnterpriseEnabledDisabledSettingValue.NO_POLICY =>
            EnumValue("NO_POLICY")
        }

        override def typeName: String = "EnterpriseEnabledDisabledSettingValue"
      }
  }

  sealed trait EnterpriseEnabledSettingValue
    extends scala.Product
      with scala.Serializable

  object EnterpriseEnabledSettingValue {

    case object ENABLED extends EnterpriseEnabledSettingValue

    case object NO_POLICY extends EnterpriseEnabledSettingValue

    implicit val decoder: ScalarDecoder[EnterpriseEnabledSettingValue] = {
      case StringValue("ENABLED") =>
        Right(EnterpriseEnabledSettingValue.ENABLED)
      case StringValue("NO_POLICY") =>
        Right(EnterpriseEnabledSettingValue.NO_POLICY)
      case other =>
        Left(
          DecodingError(
            s"Can't build EnterpriseEnabledSettingValue from input $other"
          )
        )
    }
    implicit val encoder: ArgEncoder[EnterpriseEnabledSettingValue] =
      new ArgEncoder[EnterpriseEnabledSettingValue] {
        override def encode(value: EnterpriseEnabledSettingValue): Value =
          value match {
            case EnterpriseEnabledSettingValue.ENABLED => EnumValue("ENABLED")
            case EnterpriseEnabledSettingValue.NO_POLICY =>
              EnumValue("NO_POLICY")
          }

        override def typeName: String = "EnterpriseEnabledSettingValue"
      }
  }

  sealed trait EnterpriseMemberOrderField
    extends scala.Product
      with scala.Serializable

  object EnterpriseMemberOrderField {

    case object CREATED_AT extends EnterpriseMemberOrderField

    case object LOGIN extends EnterpriseMemberOrderField

    implicit val decoder: ScalarDecoder[EnterpriseMemberOrderField] = {
      case StringValue("CREATED_AT") =>
        Right(EnterpriseMemberOrderField.CREATED_AT)
      case StringValue("LOGIN") => Right(EnterpriseMemberOrderField.LOGIN)
      case other =>
        Left(
          DecodingError(
            s"Can't build EnterpriseMemberOrderField from input $other"
          )
        )
    }
    implicit val encoder: ArgEncoder[EnterpriseMemberOrderField] =
      new ArgEncoder[EnterpriseMemberOrderField] {
        override def encode(value: EnterpriseMemberOrderField): Value =
          value match {
            case EnterpriseMemberOrderField.CREATED_AT =>
              EnumValue("CREATED_AT")
            case EnterpriseMemberOrderField.LOGIN => EnumValue("LOGIN")
          }

        override def typeName: String = "EnterpriseMemberOrderField"
      }
  }

  sealed trait EnterpriseMembersCanCreateRepositoriesSettingValue
    extends scala.Product
      with scala.Serializable

  object EnterpriseMembersCanCreateRepositoriesSettingValue {

    case object ALL extends EnterpriseMembersCanCreateRepositoriesSettingValue

    case object DISABLED
      extends EnterpriseMembersCanCreateRepositoriesSettingValue

    case object NO_POLICY
      extends EnterpriseMembersCanCreateRepositoriesSettingValue

    case object PRIVATE
      extends EnterpriseMembersCanCreateRepositoriesSettingValue

    case object PUBLIC
      extends EnterpriseMembersCanCreateRepositoriesSettingValue

    implicit val decoder
    : ScalarDecoder[EnterpriseMembersCanCreateRepositoriesSettingValue] = {
      case StringValue("ALL") =>
        Right(EnterpriseMembersCanCreateRepositoriesSettingValue.ALL)
      case StringValue("DISABLED") =>
        Right(EnterpriseMembersCanCreateRepositoriesSettingValue.DISABLED)
      case StringValue("NO_POLICY") =>
        Right(EnterpriseMembersCanCreateRepositoriesSettingValue.NO_POLICY)
      case StringValue("PRIVATE") =>
        Right(EnterpriseMembersCanCreateRepositoriesSettingValue.PRIVATE)
      case StringValue("PUBLIC") =>
        Right(EnterpriseMembersCanCreateRepositoriesSettingValue.PUBLIC)
      case other =>
        Left(
          DecodingError(
            s"Can't build EnterpriseMembersCanCreateRepositoriesSettingValue from input $other"
          )
        )
    }
    implicit val encoder
    : ArgEncoder[EnterpriseMembersCanCreateRepositoriesSettingValue] =
      new ArgEncoder[EnterpriseMembersCanCreateRepositoriesSettingValue] {
        override def encode(
                             value: EnterpriseMembersCanCreateRepositoriesSettingValue
                           ): Value = value match {
          case EnterpriseMembersCanCreateRepositoriesSettingValue.ALL =>
            EnumValue("ALL")
          case EnterpriseMembersCanCreateRepositoriesSettingValue.DISABLED =>
            EnumValue("DISABLED")
          case EnterpriseMembersCanCreateRepositoriesSettingValue.NO_POLICY =>
            EnumValue("NO_POLICY")
          case EnterpriseMembersCanCreateRepositoriesSettingValue.PRIVATE =>
            EnumValue("PRIVATE")
          case EnterpriseMembersCanCreateRepositoriesSettingValue.PUBLIC =>
            EnumValue("PUBLIC")
        }

        override def typeName: String =
          "EnterpriseMembersCanCreateRepositoriesSettingValue"
      }
  }

  sealed trait EnterpriseMembersCanMakePurchasesSettingValue
    extends scala.Product
      with scala.Serializable

  object EnterpriseMembersCanMakePurchasesSettingValue {

    case object DISABLED extends EnterpriseMembersCanMakePurchasesSettingValue

    case object ENABLED extends EnterpriseMembersCanMakePurchasesSettingValue

    implicit val decoder
    : ScalarDecoder[EnterpriseMembersCanMakePurchasesSettingValue] = {
      case StringValue("DISABLED") =>
        Right(EnterpriseMembersCanMakePurchasesSettingValue.DISABLED)
      case StringValue("ENABLED") =>
        Right(EnterpriseMembersCanMakePurchasesSettingValue.ENABLED)
      case other =>
        Left(
          DecodingError(
            s"Can't build EnterpriseMembersCanMakePurchasesSettingValue from input $other"
          )
        )
    }
    implicit val encoder
    : ArgEncoder[EnterpriseMembersCanMakePurchasesSettingValue] =
      new ArgEncoder[EnterpriseMembersCanMakePurchasesSettingValue] {
        override def encode(
                             value: EnterpriseMembersCanMakePurchasesSettingValue
                           ): Value = value match {
          case EnterpriseMembersCanMakePurchasesSettingValue.DISABLED =>
            EnumValue("DISABLED")
          case EnterpriseMembersCanMakePurchasesSettingValue.ENABLED =>
            EnumValue("ENABLED")
        }

        override def typeName: String =
          "EnterpriseMembersCanMakePurchasesSettingValue"
      }
  }

  sealed trait EnterpriseServerInstallationOrderField
    extends scala.Product
      with scala.Serializable

  object EnterpriseServerInstallationOrderField {

    case object CREATED_AT extends EnterpriseServerInstallationOrderField

    case object CUSTOMER_NAME extends EnterpriseServerInstallationOrderField

    case object HOST_NAME extends EnterpriseServerInstallationOrderField

    implicit val decoder
    : ScalarDecoder[EnterpriseServerInstallationOrderField] = {
      case StringValue("CREATED_AT") =>
        Right(EnterpriseServerInstallationOrderField.CREATED_AT)
      case StringValue("CUSTOMER_NAME") =>
        Right(EnterpriseServerInstallationOrderField.CUSTOMER_NAME)
      case StringValue("HOST_NAME") =>
        Right(EnterpriseServerInstallationOrderField.HOST_NAME)
      case other =>
        Left(
          DecodingError(
            s"Can't build EnterpriseServerInstallationOrderField from input $other"
          )
        )
    }
    implicit val encoder: ArgEncoder[EnterpriseServerInstallationOrderField] =
      new ArgEncoder[EnterpriseServerInstallationOrderField] {
        override def encode(
                             value: EnterpriseServerInstallationOrderField
                           ): Value = value match {
          case EnterpriseServerInstallationOrderField.CREATED_AT =>
            EnumValue("CREATED_AT")
          case EnterpriseServerInstallationOrderField.CUSTOMER_NAME =>
            EnumValue("CUSTOMER_NAME")
          case EnterpriseServerInstallationOrderField.HOST_NAME =>
            EnumValue("HOST_NAME")
        }

        override def typeName: String = "EnterpriseServerInstallationOrderField"
      }
  }

  sealed trait EnterpriseServerUserAccountEmailOrderField
    extends scala.Product
      with scala.Serializable

  object EnterpriseServerUserAccountEmailOrderField {

    case object EMAIL extends EnterpriseServerUserAccountEmailOrderField

    implicit val decoder
    : ScalarDecoder[EnterpriseServerUserAccountEmailOrderField] = {
      case StringValue("EMAIL") =>
        Right(EnterpriseServerUserAccountEmailOrderField.EMAIL)
      case other =>
        Left(
          DecodingError(
            s"Can't build EnterpriseServerUserAccountEmailOrderField from input $other"
          )
        )
    }
    implicit val encoder
    : ArgEncoder[EnterpriseServerUserAccountEmailOrderField] =
      new ArgEncoder[EnterpriseServerUserAccountEmailOrderField] {
        override def encode(
                             value: EnterpriseServerUserAccountEmailOrderField
                           ): Value = value match {
          case EnterpriseServerUserAccountEmailOrderField.EMAIL =>
            EnumValue("EMAIL")
        }

        override def typeName: String =
          "EnterpriseServerUserAccountEmailOrderField"
      }
  }

  sealed trait EnterpriseServerUserAccountOrderField
    extends scala.Product
      with scala.Serializable

  object EnterpriseServerUserAccountOrderField {

    case object LOGIN extends EnterpriseServerUserAccountOrderField

    case object REMOTE_CREATED_AT extends EnterpriseServerUserAccountOrderField

    implicit val decoder
    : ScalarDecoder[EnterpriseServerUserAccountOrderField] = {
      case StringValue("LOGIN") =>
        Right(EnterpriseServerUserAccountOrderField.LOGIN)
      case StringValue("REMOTE_CREATED_AT") =>
        Right(EnterpriseServerUserAccountOrderField.REMOTE_CREATED_AT)
      case other =>
        Left(
          DecodingError(
            s"Can't build EnterpriseServerUserAccountOrderField from input $other"
          )
        )
    }
    implicit val encoder: ArgEncoder[EnterpriseServerUserAccountOrderField] =
      new ArgEncoder[EnterpriseServerUserAccountOrderField] {
        override def encode(
                             value: EnterpriseServerUserAccountOrderField
                           ): Value = value match {
          case EnterpriseServerUserAccountOrderField.LOGIN => EnumValue("LOGIN")
          case EnterpriseServerUserAccountOrderField.REMOTE_CREATED_AT =>
            EnumValue("REMOTE_CREATED_AT")
        }

        override def typeName: String = "EnterpriseServerUserAccountOrderField"
      }
  }

  sealed trait EnterpriseServerUserAccountsUploadOrderField
    extends scala.Product
      with scala.Serializable

  object EnterpriseServerUserAccountsUploadOrderField {

    case object CREATED_AT extends EnterpriseServerUserAccountsUploadOrderField

    implicit val decoder
    : ScalarDecoder[EnterpriseServerUserAccountsUploadOrderField] = {
      case StringValue("CREATED_AT") =>
        Right(EnterpriseServerUserAccountsUploadOrderField.CREATED_AT)
      case other =>
        Left(
          DecodingError(
            s"Can't build EnterpriseServerUserAccountsUploadOrderField from input $other"
          )
        )
    }
    implicit val encoder
    : ArgEncoder[EnterpriseServerUserAccountsUploadOrderField] =
      new ArgEncoder[EnterpriseServerUserAccountsUploadOrderField] {
        override def encode(
                             value: EnterpriseServerUserAccountsUploadOrderField
                           ): Value = value match {
          case EnterpriseServerUserAccountsUploadOrderField.CREATED_AT =>
            EnumValue("CREATED_AT")
        }

        override def typeName: String =
          "EnterpriseServerUserAccountsUploadOrderField"
      }
  }

  sealed trait EnterpriseServerUserAccountsUploadSyncState
    extends scala.Product
      with scala.Serializable

  object EnterpriseServerUserAccountsUploadSyncState {

    case object FAILURE extends EnterpriseServerUserAccountsUploadSyncState

    case object PENDING extends EnterpriseServerUserAccountsUploadSyncState

    case object SUCCESS extends EnterpriseServerUserAccountsUploadSyncState

    implicit val decoder
    : ScalarDecoder[EnterpriseServerUserAccountsUploadSyncState] = {
      case StringValue("FAILURE") =>
        Right(EnterpriseServerUserAccountsUploadSyncState.FAILURE)
      case StringValue("PENDING") =>
        Right(EnterpriseServerUserAccountsUploadSyncState.PENDING)
      case StringValue("SUCCESS") =>
        Right(EnterpriseServerUserAccountsUploadSyncState.SUCCESS)
      case other =>
        Left(
          DecodingError(
            s"Can't build EnterpriseServerUserAccountsUploadSyncState from input $other"
          )
        )
    }
    implicit val encoder
    : ArgEncoder[EnterpriseServerUserAccountsUploadSyncState] =
      new ArgEncoder[EnterpriseServerUserAccountsUploadSyncState] {
        override def encode(
                             value: EnterpriseServerUserAccountsUploadSyncState
                           ): Value = value match {
          case EnterpriseServerUserAccountsUploadSyncState.FAILURE =>
            EnumValue("FAILURE")
          case EnterpriseServerUserAccountsUploadSyncState.PENDING =>
            EnumValue("PENDING")
          case EnterpriseServerUserAccountsUploadSyncState.SUCCESS =>
            EnumValue("SUCCESS")
        }

        override def typeName: String =
          "EnterpriseServerUserAccountsUploadSyncState"
      }
  }

  sealed trait EnterpriseUserAccountMembershipRole
    extends scala.Product
      with scala.Serializable

  object EnterpriseUserAccountMembershipRole {

    case object MEMBER extends EnterpriseUserAccountMembershipRole

    case object OWNER extends EnterpriseUserAccountMembershipRole

    implicit val decoder: ScalarDecoder[EnterpriseUserAccountMembershipRole] = {
      case StringValue("MEMBER") =>
        Right(EnterpriseUserAccountMembershipRole.MEMBER)
      case StringValue("OWNER") =>
        Right(EnterpriseUserAccountMembershipRole.OWNER)
      case other =>
        Left(
          DecodingError(
            s"Can't build EnterpriseUserAccountMembershipRole from input $other"
          )
        )
    }
    implicit val encoder: ArgEncoder[EnterpriseUserAccountMembershipRole] =
      new ArgEncoder[EnterpriseUserAccountMembershipRole] {
        override def encode(value: EnterpriseUserAccountMembershipRole): Value =
          value match {
            case EnterpriseUserAccountMembershipRole.MEMBER =>
              EnumValue("MEMBER")
            case EnterpriseUserAccountMembershipRole.OWNER => EnumValue("OWNER")
          }

        override def typeName: String = "EnterpriseUserAccountMembershipRole"
      }
  }

  sealed trait EnterpriseUserDeployment
    extends scala.Product
      with scala.Serializable

  object EnterpriseUserDeployment {

    case object CLOUD extends EnterpriseUserDeployment

    case object SERVER extends EnterpriseUserDeployment

    implicit val decoder: ScalarDecoder[EnterpriseUserDeployment] = {
      case StringValue("CLOUD") => Right(EnterpriseUserDeployment.CLOUD)
      case StringValue("SERVER") => Right(EnterpriseUserDeployment.SERVER)
      case other =>
        Left(
          DecodingError(
            s"Can't build EnterpriseUserDeployment from input $other"
          )
        )
    }
    implicit val encoder: ArgEncoder[EnterpriseUserDeployment] =
      new ArgEncoder[EnterpriseUserDeployment] {
        override def encode(value: EnterpriseUserDeployment): Value =
          value match {
            case EnterpriseUserDeployment.CLOUD => EnumValue("CLOUD")
            case EnterpriseUserDeployment.SERVER => EnumValue("SERVER")
          }

        override def typeName: String = "EnterpriseUserDeployment"
      }
  }

  sealed trait FundingPlatform extends scala.Product with scala.Serializable

  object FundingPlatform {

    case object COMMUNITY_BRIDGE extends FundingPlatform

    case object CUSTOM extends FundingPlatform

    case object GITHUB extends FundingPlatform

    case object ISSUEHUNT extends FundingPlatform

    case object KO_FI extends FundingPlatform

    case object LIBERAPAY extends FundingPlatform

    case object OPEN_COLLECTIVE extends FundingPlatform

    case object OTECHIE extends FundingPlatform

    case object PATREON extends FundingPlatform

    case object TIDELIFT extends FundingPlatform

    implicit val decoder: ScalarDecoder[FundingPlatform] = {
      case StringValue("COMMUNITY_BRIDGE") =>
        Right(FundingPlatform.COMMUNITY_BRIDGE)
      case StringValue("CUSTOM") => Right(FundingPlatform.CUSTOM)
      case StringValue("GITHUB") => Right(FundingPlatform.GITHUB)
      case StringValue("ISSUEHUNT") => Right(FundingPlatform.ISSUEHUNT)
      case StringValue("KO_FI") => Right(FundingPlatform.KO_FI)
      case StringValue("LIBERAPAY") => Right(FundingPlatform.LIBERAPAY)
      case StringValue("OPEN_COLLECTIVE") =>
        Right(FundingPlatform.OPEN_COLLECTIVE)
      case StringValue("OTECHIE") => Right(FundingPlatform.OTECHIE)
      case StringValue("PATREON") => Right(FundingPlatform.PATREON)
      case StringValue("TIDELIFT") => Right(FundingPlatform.TIDELIFT)
      case other =>
        Left(DecodingError(s"Can't build FundingPlatform from input $other"))
    }
    implicit val encoder: ArgEncoder[FundingPlatform] =
      new ArgEncoder[FundingPlatform] {
        override def encode(value: FundingPlatform): Value = value match {
          case FundingPlatform.COMMUNITY_BRIDGE => EnumValue("COMMUNITY_BRIDGE")
          case FundingPlatform.CUSTOM => EnumValue("CUSTOM")
          case FundingPlatform.GITHUB => EnumValue("GITHUB")
          case FundingPlatform.ISSUEHUNT => EnumValue("ISSUEHUNT")
          case FundingPlatform.KO_FI => EnumValue("KO_FI")
          case FundingPlatform.LIBERAPAY => EnumValue("LIBERAPAY")
          case FundingPlatform.OPEN_COLLECTIVE => EnumValue("OPEN_COLLECTIVE")
          case FundingPlatform.OTECHIE => EnumValue("OTECHIE")
          case FundingPlatform.PATREON => EnumValue("PATREON")
          case FundingPlatform.TIDELIFT => EnumValue("TIDELIFT")
        }

        override def typeName: String = "FundingPlatform"
      }
  }

  sealed trait GistOrderField extends scala.Product with scala.Serializable

  object GistOrderField {

    case object CREATED_AT extends GistOrderField

    case object PUSHED_AT extends GistOrderField

    case object UPDATED_AT extends GistOrderField

    implicit val decoder: ScalarDecoder[GistOrderField] = {
      case StringValue("CREATED_AT") => Right(GistOrderField.CREATED_AT)
      case StringValue("PUSHED_AT") => Right(GistOrderField.PUSHED_AT)
      case StringValue("UPDATED_AT") => Right(GistOrderField.UPDATED_AT)
      case other =>
        Left(DecodingError(s"Can't build GistOrderField from input $other"))
    }
    implicit val encoder: ArgEncoder[GistOrderField] =
      new ArgEncoder[GistOrderField] {
        override def encode(value: GistOrderField): Value = value match {
          case GistOrderField.CREATED_AT => EnumValue("CREATED_AT")
          case GistOrderField.PUSHED_AT => EnumValue("PUSHED_AT")
          case GistOrderField.UPDATED_AT => EnumValue("UPDATED_AT")
        }

        override def typeName: String = "GistOrderField"
      }
  }

  sealed trait GistPrivacy extends scala.Product with scala.Serializable

  object GistPrivacy {

    case object ALL extends GistPrivacy

    case object PUBLIC extends GistPrivacy

    case object SECRET extends GistPrivacy

    implicit val decoder: ScalarDecoder[GistPrivacy] = {
      case StringValue("ALL") => Right(GistPrivacy.ALL)
      case StringValue("PUBLIC") => Right(GistPrivacy.PUBLIC)
      case StringValue("SECRET") => Right(GistPrivacy.SECRET)
      case other =>
        Left(DecodingError(s"Can't build GistPrivacy from input $other"))
    }
    implicit val encoder: ArgEncoder[GistPrivacy] =
      new ArgEncoder[GistPrivacy] {
        override def encode(value: GistPrivacy): Value = value match {
          case GistPrivacy.ALL => EnumValue("ALL")
          case GistPrivacy.PUBLIC => EnumValue("PUBLIC")
          case GistPrivacy.SECRET => EnumValue("SECRET")
        }

        override def typeName: String = "GistPrivacy"
      }
  }

  sealed trait GitSignatureState extends scala.Product with scala.Serializable

  object GitSignatureState {

    case object BAD_CERT extends GitSignatureState

    case object BAD_EMAIL extends GitSignatureState

    case object EXPIRED_KEY extends GitSignatureState

    case object GPGVERIFY_ERROR extends GitSignatureState

    case object GPGVERIFY_UNAVAILABLE extends GitSignatureState

    case object INVALID extends GitSignatureState

    case object MALFORMED_SIG extends GitSignatureState

    case object NOT_SIGNING_KEY extends GitSignatureState

    case object NO_USER extends GitSignatureState

    case object OCSP_ERROR extends GitSignatureState

    case object OCSP_PENDING extends GitSignatureState

    case object OCSP_REVOKED extends GitSignatureState

    case object UNKNOWN_KEY extends GitSignatureState

    case object UNKNOWN_SIG_TYPE extends GitSignatureState

    case object UNSIGNED extends GitSignatureState

    case object UNVERIFIED_EMAIL extends GitSignatureState

    case object VALID extends GitSignatureState

    implicit val decoder: ScalarDecoder[GitSignatureState] = {
      case StringValue("BAD_CERT") => Right(GitSignatureState.BAD_CERT)
      case StringValue("BAD_EMAIL") => Right(GitSignatureState.BAD_EMAIL)
      case StringValue("EXPIRED_KEY") => Right(GitSignatureState.EXPIRED_KEY)
      case StringValue("GPGVERIFY_ERROR") =>
        Right(GitSignatureState.GPGVERIFY_ERROR)
      case StringValue("GPGVERIFY_UNAVAILABLE") =>
        Right(GitSignatureState.GPGVERIFY_UNAVAILABLE)
      case StringValue("INVALID") => Right(GitSignatureState.INVALID)
      case StringValue("MALFORMED_SIG") =>
        Right(GitSignatureState.MALFORMED_SIG)
      case StringValue("NOT_SIGNING_KEY") =>
        Right(GitSignatureState.NOT_SIGNING_KEY)
      case StringValue("NO_USER") => Right(GitSignatureState.NO_USER)
      case StringValue("OCSP_ERROR") => Right(GitSignatureState.OCSP_ERROR)
      case StringValue("OCSP_PENDING") => Right(GitSignatureState.OCSP_PENDING)
      case StringValue("OCSP_REVOKED") => Right(GitSignatureState.OCSP_REVOKED)
      case StringValue("UNKNOWN_KEY") => Right(GitSignatureState.UNKNOWN_KEY)
      case StringValue("UNKNOWN_SIG_TYPE") =>
        Right(GitSignatureState.UNKNOWN_SIG_TYPE)
      case StringValue("UNSIGNED") => Right(GitSignatureState.UNSIGNED)
      case StringValue("UNVERIFIED_EMAIL") =>
        Right(GitSignatureState.UNVERIFIED_EMAIL)
      case StringValue("VALID") => Right(GitSignatureState.VALID)
      case other =>
        Left(DecodingError(s"Can't build GitSignatureState from input $other"))
    }
    implicit val encoder: ArgEncoder[GitSignatureState] =
      new ArgEncoder[GitSignatureState] {
        override def encode(value: GitSignatureState): Value = value match {
          case GitSignatureState.BAD_CERT => EnumValue("BAD_CERT")
          case GitSignatureState.BAD_EMAIL => EnumValue("BAD_EMAIL")
          case GitSignatureState.EXPIRED_KEY => EnumValue("EXPIRED_KEY")
          case GitSignatureState.GPGVERIFY_ERROR => EnumValue("GPGVERIFY_ERROR")
          case GitSignatureState.GPGVERIFY_UNAVAILABLE =>
            EnumValue("GPGVERIFY_UNAVAILABLE")
          case GitSignatureState.INVALID => EnumValue("INVALID")
          case GitSignatureState.MALFORMED_SIG => EnumValue("MALFORMED_SIG")
          case GitSignatureState.NOT_SIGNING_KEY => EnumValue("NOT_SIGNING_KEY")
          case GitSignatureState.NO_USER => EnumValue("NO_USER")
          case GitSignatureState.OCSP_ERROR => EnumValue("OCSP_ERROR")
          case GitSignatureState.OCSP_PENDING => EnumValue("OCSP_PENDING")
          case GitSignatureState.OCSP_REVOKED => EnumValue("OCSP_REVOKED")
          case GitSignatureState.UNKNOWN_KEY => EnumValue("UNKNOWN_KEY")
          case GitSignatureState.UNKNOWN_SIG_TYPE =>
            EnumValue("UNKNOWN_SIG_TYPE")
          case GitSignatureState.UNSIGNED => EnumValue("UNSIGNED")
          case GitSignatureState.UNVERIFIED_EMAIL =>
            EnumValue("UNVERIFIED_EMAIL")
          case GitSignatureState.VALID => EnumValue("VALID")
        }

        override def typeName: String = "GitSignatureState"
      }
  }

  sealed trait IdentityProviderConfigurationState
    extends scala.Product
      with scala.Serializable

  object IdentityProviderConfigurationState {

    case object CONFIGURED extends IdentityProviderConfigurationState

    case object ENFORCED extends IdentityProviderConfigurationState

    case object UNCONFIGURED extends IdentityProviderConfigurationState

    implicit val decoder: ScalarDecoder[IdentityProviderConfigurationState] = {
      case StringValue("CONFIGURED") =>
        Right(IdentityProviderConfigurationState.CONFIGURED)
      case StringValue("ENFORCED") =>
        Right(IdentityProviderConfigurationState.ENFORCED)
      case StringValue("UNCONFIGURED") =>
        Right(IdentityProviderConfigurationState.UNCONFIGURED)
      case other =>
        Left(
          DecodingError(
            s"Can't build IdentityProviderConfigurationState from input $other"
          )
        )
    }
    implicit val encoder: ArgEncoder[IdentityProviderConfigurationState] =
      new ArgEncoder[IdentityProviderConfigurationState] {
        override def encode(value: IdentityProviderConfigurationState): Value =
          value match {
            case IdentityProviderConfigurationState.CONFIGURED =>
              EnumValue("CONFIGURED")
            case IdentityProviderConfigurationState.ENFORCED =>
              EnumValue("ENFORCED")
            case IdentityProviderConfigurationState.UNCONFIGURED =>
              EnumValue("UNCONFIGURED")
          }

        override def typeName: String = "IdentityProviderConfigurationState"
      }
  }

  sealed trait IpAllowListEnabledSettingValue
    extends scala.Product
      with scala.Serializable

  object IpAllowListEnabledSettingValue {

    case object DISABLED extends IpAllowListEnabledSettingValue

    case object ENABLED extends IpAllowListEnabledSettingValue

    implicit val decoder: ScalarDecoder[IpAllowListEnabledSettingValue] = {
      case StringValue("DISABLED") =>
        Right(IpAllowListEnabledSettingValue.DISABLED)
      case StringValue("ENABLED") =>
        Right(IpAllowListEnabledSettingValue.ENABLED)
      case other =>
        Left(
          DecodingError(
            s"Can't build IpAllowListEnabledSettingValue from input $other"
          )
        )
    }
    implicit val encoder: ArgEncoder[IpAllowListEnabledSettingValue] =
      new ArgEncoder[IpAllowListEnabledSettingValue] {
        override def encode(value: IpAllowListEnabledSettingValue): Value =
          value match {
            case IpAllowListEnabledSettingValue.DISABLED =>
              EnumValue("DISABLED")
            case IpAllowListEnabledSettingValue.ENABLED => EnumValue("ENABLED")
          }

        override def typeName: String = "IpAllowListEnabledSettingValue"
      }
  }

  sealed trait IpAllowListEntryOrderField
    extends scala.Product
      with scala.Serializable

  object IpAllowListEntryOrderField {

    case object ALLOW_LIST_VALUE extends IpAllowListEntryOrderField

    case object CREATED_AT extends IpAllowListEntryOrderField

    implicit val decoder: ScalarDecoder[IpAllowListEntryOrderField] = {
      case StringValue("ALLOW_LIST_VALUE") =>
        Right(IpAllowListEntryOrderField.ALLOW_LIST_VALUE)
      case StringValue("CREATED_AT") =>
        Right(IpAllowListEntryOrderField.CREATED_AT)
      case other =>
        Left(
          DecodingError(
            s"Can't build IpAllowListEntryOrderField from input $other"
          )
        )
    }
    implicit val encoder: ArgEncoder[IpAllowListEntryOrderField] =
      new ArgEncoder[IpAllowListEntryOrderField] {
        override def encode(value: IpAllowListEntryOrderField): Value =
          value match {
            case IpAllowListEntryOrderField.ALLOW_LIST_VALUE =>
              EnumValue("ALLOW_LIST_VALUE")
            case IpAllowListEntryOrderField.CREATED_AT =>
              EnumValue("CREATED_AT")
          }

        override def typeName: String = "IpAllowListEntryOrderField"
      }
  }

  sealed trait IssueOrderField extends scala.Product with scala.Serializable

  object IssueOrderField {

    case object COMMENTS extends IssueOrderField

    case object CREATED_AT extends IssueOrderField

    case object UPDATED_AT extends IssueOrderField

    implicit val decoder: ScalarDecoder[IssueOrderField] = {
      case StringValue("COMMENTS") => Right(IssueOrderField.COMMENTS)
      case StringValue("CREATED_AT") => Right(IssueOrderField.CREATED_AT)
      case StringValue("UPDATED_AT") => Right(IssueOrderField.UPDATED_AT)
      case other =>
        Left(DecodingError(s"Can't build IssueOrderField from input $other"))
    }
    implicit val encoder: ArgEncoder[IssueOrderField] =
      new ArgEncoder[IssueOrderField] {
        override def encode(value: IssueOrderField): Value = value match {
          case IssueOrderField.COMMENTS => EnumValue("COMMENTS")
          case IssueOrderField.CREATED_AT => EnumValue("CREATED_AT")
          case IssueOrderField.UPDATED_AT => EnumValue("UPDATED_AT")
        }

        override def typeName: String = "IssueOrderField"
      }
  }

  sealed trait IssueState extends scala.Product with scala.Serializable

  object IssueState {

    case object CLOSED extends IssueState

    case object OPEN extends IssueState

    implicit val decoder: ScalarDecoder[IssueState] = {
      case StringValue("CLOSED") => Right(IssueState.CLOSED)
      case StringValue("OPEN") => Right(IssueState.OPEN)
      case other =>
        Left(DecodingError(s"Can't build IssueState from input $other"))
    }
    implicit val encoder: ArgEncoder[IssueState] = new ArgEncoder[IssueState] {
      override def encode(value: IssueState): Value = value match {
        case IssueState.CLOSED => EnumValue("CLOSED")
        case IssueState.OPEN => EnumValue("OPEN")
      }

      override def typeName: String = "IssueState"
    }
  }

  sealed trait IssueTimelineItemsItemType
    extends scala.Product
      with scala.Serializable

  object IssueTimelineItemsItemType {

    case object ADDED_TO_PROJECT_EVENT extends IssueTimelineItemsItemType

    case object ASSIGNED_EVENT extends IssueTimelineItemsItemType

    case object CLOSED_EVENT extends IssueTimelineItemsItemType

    case object COMMENT_DELETED_EVENT extends IssueTimelineItemsItemType

    case object CONNECTED_EVENT extends IssueTimelineItemsItemType

    case object CONVERTED_NOTE_TO_ISSUE_EVENT extends IssueTimelineItemsItemType

    case object CROSS_REFERENCED_EVENT extends IssueTimelineItemsItemType

    case object DEMILESTONED_EVENT extends IssueTimelineItemsItemType

    case object DISCONNECTED_EVENT extends IssueTimelineItemsItemType

    case object ISSUE_COMMENT extends IssueTimelineItemsItemType

    case object LABELED_EVENT extends IssueTimelineItemsItemType

    case object LOCKED_EVENT extends IssueTimelineItemsItemType

    case object MARKED_AS_DUPLICATE_EVENT extends IssueTimelineItemsItemType

    case object MENTIONED_EVENT extends IssueTimelineItemsItemType

    case object MILESTONED_EVENT extends IssueTimelineItemsItemType

    case object MOVED_COLUMNS_IN_PROJECT_EVENT
      extends IssueTimelineItemsItemType

    case object PINNED_EVENT extends IssueTimelineItemsItemType

    case object REFERENCED_EVENT extends IssueTimelineItemsItemType

    case object REMOVED_FROM_PROJECT_EVENT extends IssueTimelineItemsItemType

    case object RENAMED_TITLE_EVENT extends IssueTimelineItemsItemType

    case object REOPENED_EVENT extends IssueTimelineItemsItemType

    case object SUBSCRIBED_EVENT extends IssueTimelineItemsItemType

    case object TRANSFERRED_EVENT extends IssueTimelineItemsItemType

    case object UNASSIGNED_EVENT extends IssueTimelineItemsItemType

    case object UNLABELED_EVENT extends IssueTimelineItemsItemType

    case object UNLOCKED_EVENT extends IssueTimelineItemsItemType

    case object UNMARKED_AS_DUPLICATE_EVENT extends IssueTimelineItemsItemType

    case object UNPINNED_EVENT extends IssueTimelineItemsItemType

    case object UNSUBSCRIBED_EVENT extends IssueTimelineItemsItemType

    case object USER_BLOCKED_EVENT extends IssueTimelineItemsItemType

    implicit val decoder: ScalarDecoder[IssueTimelineItemsItemType] = {
      case StringValue("ADDED_TO_PROJECT_EVENT") =>
        Right(IssueTimelineItemsItemType.ADDED_TO_PROJECT_EVENT)
      case StringValue("ASSIGNED_EVENT") =>
        Right(IssueTimelineItemsItemType.ASSIGNED_EVENT)
      case StringValue("CLOSED_EVENT") =>
        Right(IssueTimelineItemsItemType.CLOSED_EVENT)
      case StringValue("COMMENT_DELETED_EVENT") =>
        Right(IssueTimelineItemsItemType.COMMENT_DELETED_EVENT)
      case StringValue("CONNECTED_EVENT") =>
        Right(IssueTimelineItemsItemType.CONNECTED_EVENT)
      case StringValue("CONVERTED_NOTE_TO_ISSUE_EVENT") =>
        Right(IssueTimelineItemsItemType.CONVERTED_NOTE_TO_ISSUE_EVENT)
      case StringValue("CROSS_REFERENCED_EVENT") =>
        Right(IssueTimelineItemsItemType.CROSS_REFERENCED_EVENT)
      case StringValue("DEMILESTONED_EVENT") =>
        Right(IssueTimelineItemsItemType.DEMILESTONED_EVENT)
      case StringValue("DISCONNECTED_EVENT") =>
        Right(IssueTimelineItemsItemType.DISCONNECTED_EVENT)
      case StringValue("ISSUE_COMMENT") =>
        Right(IssueTimelineItemsItemType.ISSUE_COMMENT)
      case StringValue("LABELED_EVENT") =>
        Right(IssueTimelineItemsItemType.LABELED_EVENT)
      case StringValue("LOCKED_EVENT") =>
        Right(IssueTimelineItemsItemType.LOCKED_EVENT)
      case StringValue("MARKED_AS_DUPLICATE_EVENT") =>
        Right(IssueTimelineItemsItemType.MARKED_AS_DUPLICATE_EVENT)
      case StringValue("MENTIONED_EVENT") =>
        Right(IssueTimelineItemsItemType.MENTIONED_EVENT)
      case StringValue("MILESTONED_EVENT") =>
        Right(IssueTimelineItemsItemType.MILESTONED_EVENT)
      case StringValue("MOVED_COLUMNS_IN_PROJECT_EVENT") =>
        Right(IssueTimelineItemsItemType.MOVED_COLUMNS_IN_PROJECT_EVENT)
      case StringValue("PINNED_EVENT") =>
        Right(IssueTimelineItemsItemType.PINNED_EVENT)
      case StringValue("REFERENCED_EVENT") =>
        Right(IssueTimelineItemsItemType.REFERENCED_EVENT)
      case StringValue("REMOVED_FROM_PROJECT_EVENT") =>
        Right(IssueTimelineItemsItemType.REMOVED_FROM_PROJECT_EVENT)
      case StringValue("RENAMED_TITLE_EVENT") =>
        Right(IssueTimelineItemsItemType.RENAMED_TITLE_EVENT)
      case StringValue("REOPENED_EVENT") =>
        Right(IssueTimelineItemsItemType.REOPENED_EVENT)
      case StringValue("SUBSCRIBED_EVENT") =>
        Right(IssueTimelineItemsItemType.SUBSCRIBED_EVENT)
      case StringValue("TRANSFERRED_EVENT") =>
        Right(IssueTimelineItemsItemType.TRANSFERRED_EVENT)
      case StringValue("UNASSIGNED_EVENT") =>
        Right(IssueTimelineItemsItemType.UNASSIGNED_EVENT)
      case StringValue("UNLABELED_EVENT") =>
        Right(IssueTimelineItemsItemType.UNLABELED_EVENT)
      case StringValue("UNLOCKED_EVENT") =>
        Right(IssueTimelineItemsItemType.UNLOCKED_EVENT)
      case StringValue("UNMARKED_AS_DUPLICATE_EVENT") =>
        Right(IssueTimelineItemsItemType.UNMARKED_AS_DUPLICATE_EVENT)
      case StringValue("UNPINNED_EVENT") =>
        Right(IssueTimelineItemsItemType.UNPINNED_EVENT)
      case StringValue("UNSUBSCRIBED_EVENT") =>
        Right(IssueTimelineItemsItemType.UNSUBSCRIBED_EVENT)
      case StringValue("USER_BLOCKED_EVENT") =>
        Right(IssueTimelineItemsItemType.USER_BLOCKED_EVENT)
      case other =>
        Left(
          DecodingError(
            s"Can't build IssueTimelineItemsItemType from input $other"
          )
        )
    }
    implicit val encoder: ArgEncoder[IssueTimelineItemsItemType] =
      new ArgEncoder[IssueTimelineItemsItemType] {
        override def encode(value: IssueTimelineItemsItemType): Value =
          value match {
            case IssueTimelineItemsItemType.ADDED_TO_PROJECT_EVENT =>
              EnumValue("ADDED_TO_PROJECT_EVENT")
            case IssueTimelineItemsItemType.ASSIGNED_EVENT =>
              EnumValue("ASSIGNED_EVENT")
            case IssueTimelineItemsItemType.CLOSED_EVENT =>
              EnumValue("CLOSED_EVENT")
            case IssueTimelineItemsItemType.COMMENT_DELETED_EVENT =>
              EnumValue("COMMENT_DELETED_EVENT")
            case IssueTimelineItemsItemType.CONNECTED_EVENT =>
              EnumValue("CONNECTED_EVENT")
            case IssueTimelineItemsItemType.CONVERTED_NOTE_TO_ISSUE_EVENT =>
              EnumValue("CONVERTED_NOTE_TO_ISSUE_EVENT")
            case IssueTimelineItemsItemType.CROSS_REFERENCED_EVENT =>
              EnumValue("CROSS_REFERENCED_EVENT")
            case IssueTimelineItemsItemType.DEMILESTONED_EVENT =>
              EnumValue("DEMILESTONED_EVENT")
            case IssueTimelineItemsItemType.DISCONNECTED_EVENT =>
              EnumValue("DISCONNECTED_EVENT")
            case IssueTimelineItemsItemType.ISSUE_COMMENT =>
              EnumValue("ISSUE_COMMENT")
            case IssueTimelineItemsItemType.LABELED_EVENT =>
              EnumValue("LABELED_EVENT")
            case IssueTimelineItemsItemType.LOCKED_EVENT =>
              EnumValue("LOCKED_EVENT")
            case IssueTimelineItemsItemType.MARKED_AS_DUPLICATE_EVENT =>
              EnumValue("MARKED_AS_DUPLICATE_EVENT")
            case IssueTimelineItemsItemType.MENTIONED_EVENT =>
              EnumValue("MENTIONED_EVENT")
            case IssueTimelineItemsItemType.MILESTONED_EVENT =>
              EnumValue("MILESTONED_EVENT")
            case IssueTimelineItemsItemType.MOVED_COLUMNS_IN_PROJECT_EVENT =>
              EnumValue("MOVED_COLUMNS_IN_PROJECT_EVENT")
            case IssueTimelineItemsItemType.PINNED_EVENT =>
              EnumValue("PINNED_EVENT")
            case IssueTimelineItemsItemType.REFERENCED_EVENT =>
              EnumValue("REFERENCED_EVENT")
            case IssueTimelineItemsItemType.REMOVED_FROM_PROJECT_EVENT =>
              EnumValue("REMOVED_FROM_PROJECT_EVENT")
            case IssueTimelineItemsItemType.RENAMED_TITLE_EVENT =>
              EnumValue("RENAMED_TITLE_EVENT")
            case IssueTimelineItemsItemType.REOPENED_EVENT =>
              EnumValue("REOPENED_EVENT")
            case IssueTimelineItemsItemType.SUBSCRIBED_EVENT =>
              EnumValue("SUBSCRIBED_EVENT")
            case IssueTimelineItemsItemType.TRANSFERRED_EVENT =>
              EnumValue("TRANSFERRED_EVENT")
            case IssueTimelineItemsItemType.UNASSIGNED_EVENT =>
              EnumValue("UNASSIGNED_EVENT")
            case IssueTimelineItemsItemType.UNLABELED_EVENT =>
              EnumValue("UNLABELED_EVENT")
            case IssueTimelineItemsItemType.UNLOCKED_EVENT =>
              EnumValue("UNLOCKED_EVENT")
            case IssueTimelineItemsItemType.UNMARKED_AS_DUPLICATE_EVENT =>
              EnumValue("UNMARKED_AS_DUPLICATE_EVENT")
            case IssueTimelineItemsItemType.UNPINNED_EVENT =>
              EnumValue("UNPINNED_EVENT")
            case IssueTimelineItemsItemType.UNSUBSCRIBED_EVENT =>
              EnumValue("UNSUBSCRIBED_EVENT")
            case IssueTimelineItemsItemType.USER_BLOCKED_EVENT =>
              EnumValue("USER_BLOCKED_EVENT")
          }

        override def typeName: String = "IssueTimelineItemsItemType"
      }
  }

  sealed trait LabelOrderField extends scala.Product with scala.Serializable

  object LabelOrderField {

    case object CREATED_AT extends LabelOrderField

    case object NAME extends LabelOrderField

    implicit val decoder: ScalarDecoder[LabelOrderField] = {
      case StringValue("CREATED_AT") => Right(LabelOrderField.CREATED_AT)
      case StringValue("NAME") => Right(LabelOrderField.NAME)
      case other =>
        Left(DecodingError(s"Can't build LabelOrderField from input $other"))
    }
    implicit val encoder: ArgEncoder[LabelOrderField] =
      new ArgEncoder[LabelOrderField] {
        override def encode(value: LabelOrderField): Value = value match {
          case LabelOrderField.CREATED_AT => EnumValue("CREATED_AT")
          case LabelOrderField.NAME => EnumValue("NAME")
        }

        override def typeName: String = "LabelOrderField"
      }
  }

  sealed trait LanguageOrderField extends scala.Product with scala.Serializable

  object LanguageOrderField {

    case object SIZE extends LanguageOrderField

    implicit val decoder: ScalarDecoder[LanguageOrderField] = {
      case StringValue("SIZE") => Right(LanguageOrderField.SIZE)
      case other =>
        Left(DecodingError(s"Can't build LanguageOrderField from input $other"))
    }
    implicit val encoder: ArgEncoder[LanguageOrderField] =
      new ArgEncoder[LanguageOrderField] {
        override def encode(value: LanguageOrderField): Value = value match {
          case LanguageOrderField.SIZE => EnumValue("SIZE")
        }

        override def typeName: String = "LanguageOrderField"
      }
  }

  sealed trait LockReason extends scala.Product with scala.Serializable

  object LockReason {

    case object OFF_TOPIC extends LockReason

    case object RESOLVED extends LockReason

    case object SPAM extends LockReason

    case object TOO_HEATED extends LockReason

    implicit val decoder: ScalarDecoder[LockReason] = {
      case StringValue("OFF_TOPIC") => Right(LockReason.OFF_TOPIC)
      case StringValue("RESOLVED") => Right(LockReason.RESOLVED)
      case StringValue("SPAM") => Right(LockReason.SPAM)
      case StringValue("TOO_HEATED") => Right(LockReason.TOO_HEATED)
      case other =>
        Left(DecodingError(s"Can't build LockReason from input $other"))
    }
    implicit val encoder: ArgEncoder[LockReason] = new ArgEncoder[LockReason] {
      override def encode(value: LockReason): Value = value match {
        case LockReason.OFF_TOPIC => EnumValue("OFF_TOPIC")
        case LockReason.RESOLVED => EnumValue("RESOLVED")
        case LockReason.SPAM => EnumValue("SPAM")
        case LockReason.TOO_HEATED => EnumValue("TOO_HEATED")
      }

      override def typeName: String = "LockReason"
    }
  }

  sealed trait MergeStateStatus extends scala.Product with scala.Serializable

  object MergeStateStatus {

    case object BEHIND extends MergeStateStatus

    case object BLOCKED extends MergeStateStatus

    case object CLEAN extends MergeStateStatus

    case object DIRTY extends MergeStateStatus

    case object DRAFT extends MergeStateStatus

    case object HAS_HOOKS extends MergeStateStatus

    case object UNKNOWN extends MergeStateStatus

    case object UNSTABLE extends MergeStateStatus

    implicit val decoder: ScalarDecoder[MergeStateStatus] = {
      case StringValue("BEHIND") => Right(MergeStateStatus.BEHIND)
      case StringValue("BLOCKED") => Right(MergeStateStatus.BLOCKED)
      case StringValue("CLEAN") => Right(MergeStateStatus.CLEAN)
      case StringValue("DIRTY") => Right(MergeStateStatus.DIRTY)
      case StringValue("DRAFT") => Right(MergeStateStatus.DRAFT)
      case StringValue("HAS_HOOKS") => Right(MergeStateStatus.HAS_HOOKS)
      case StringValue("UNKNOWN") => Right(MergeStateStatus.UNKNOWN)
      case StringValue("UNSTABLE") => Right(MergeStateStatus.UNSTABLE)
      case other =>
        Left(DecodingError(s"Can't build MergeStateStatus from input $other"))
    }
    implicit val encoder: ArgEncoder[MergeStateStatus] =
      new ArgEncoder[MergeStateStatus] {
        override def encode(value: MergeStateStatus): Value = value match {
          case MergeStateStatus.BEHIND => EnumValue("BEHIND")
          case MergeStateStatus.BLOCKED => EnumValue("BLOCKED")
          case MergeStateStatus.CLEAN => EnumValue("CLEAN")
          case MergeStateStatus.DIRTY => EnumValue("DIRTY")
          case MergeStateStatus.DRAFT => EnumValue("DRAFT")
          case MergeStateStatus.HAS_HOOKS => EnumValue("HAS_HOOKS")
          case MergeStateStatus.UNKNOWN => EnumValue("UNKNOWN")
          case MergeStateStatus.UNSTABLE => EnumValue("UNSTABLE")
        }

        override def typeName: String = "MergeStateStatus"
      }
  }

  sealed trait MergeableState extends scala.Product with scala.Serializable

  object MergeableState {

    case object CONFLICTING extends MergeableState

    case object MERGEABLE extends MergeableState

    case object UNKNOWN extends MergeableState

    implicit val decoder: ScalarDecoder[MergeableState] = {
      case StringValue("CONFLICTING") => Right(MergeableState.CONFLICTING)
      case StringValue("MERGEABLE") => Right(MergeableState.MERGEABLE)
      case StringValue("UNKNOWN") => Right(MergeableState.UNKNOWN)
      case other =>
        Left(DecodingError(s"Can't build MergeableState from input $other"))
    }
    implicit val encoder: ArgEncoder[MergeableState] =
      new ArgEncoder[MergeableState] {
        override def encode(value: MergeableState): Value = value match {
          case MergeableState.CONFLICTING => EnumValue("CONFLICTING")
          case MergeableState.MERGEABLE => EnumValue("MERGEABLE")
          case MergeableState.UNKNOWN => EnumValue("UNKNOWN")
        }

        override def typeName: String = "MergeableState"
      }
  }

  sealed trait MilestoneOrderField extends scala.Product with scala.Serializable

  object MilestoneOrderField {

    case object CREATED_AT extends MilestoneOrderField

    case object DUE_DATE extends MilestoneOrderField

    case object NUMBER extends MilestoneOrderField

    case object UPDATED_AT extends MilestoneOrderField

    implicit val decoder: ScalarDecoder[MilestoneOrderField] = {
      case StringValue("CREATED_AT") => Right(MilestoneOrderField.CREATED_AT)
      case StringValue("DUE_DATE") => Right(MilestoneOrderField.DUE_DATE)
      case StringValue("NUMBER") => Right(MilestoneOrderField.NUMBER)
      case StringValue("UPDATED_AT") => Right(MilestoneOrderField.UPDATED_AT)
      case other =>
        Left(
          DecodingError(s"Can't build MilestoneOrderField from input $other")
        )
    }
    implicit val encoder: ArgEncoder[MilestoneOrderField] =
      new ArgEncoder[MilestoneOrderField] {
        override def encode(value: MilestoneOrderField): Value = value match {
          case MilestoneOrderField.CREATED_AT => EnumValue("CREATED_AT")
          case MilestoneOrderField.DUE_DATE => EnumValue("DUE_DATE")
          case MilestoneOrderField.NUMBER => EnumValue("NUMBER")
          case MilestoneOrderField.UPDATED_AT => EnumValue("UPDATED_AT")
        }

        override def typeName: String = "MilestoneOrderField"
      }
  }

  sealed trait MilestoneState extends scala.Product with scala.Serializable

  object MilestoneState {

    case object CLOSED extends MilestoneState

    case object OPEN extends MilestoneState

    implicit val decoder: ScalarDecoder[MilestoneState] = {
      case StringValue("CLOSED") => Right(MilestoneState.CLOSED)
      case StringValue("OPEN") => Right(MilestoneState.OPEN)
      case other =>
        Left(DecodingError(s"Can't build MilestoneState from input $other"))
    }
    implicit val encoder: ArgEncoder[MilestoneState] =
      new ArgEncoder[MilestoneState] {
        override def encode(value: MilestoneState): Value = value match {
          case MilestoneState.CLOSED => EnumValue("CLOSED")
          case MilestoneState.OPEN => EnumValue("OPEN")
        }

        override def typeName: String = "MilestoneState"
      }
  }

  sealed trait OauthApplicationCreateAuditEntryState
    extends scala.Product
      with scala.Serializable

  object OauthApplicationCreateAuditEntryState {

    case object ACTIVE extends OauthApplicationCreateAuditEntryState

    case object PENDING_DELETION extends OauthApplicationCreateAuditEntryState

    case object SUSPENDED extends OauthApplicationCreateAuditEntryState

    implicit val decoder
    : ScalarDecoder[OauthApplicationCreateAuditEntryState] = {
      case StringValue("ACTIVE") =>
        Right(OauthApplicationCreateAuditEntryState.ACTIVE)
      case StringValue("PENDING_DELETION") =>
        Right(OauthApplicationCreateAuditEntryState.PENDING_DELETION)
      case StringValue("SUSPENDED") =>
        Right(OauthApplicationCreateAuditEntryState.SUSPENDED)
      case other =>
        Left(
          DecodingError(
            s"Can't build OauthApplicationCreateAuditEntryState from input $other"
          )
        )
    }
    implicit val encoder: ArgEncoder[OauthApplicationCreateAuditEntryState] =
      new ArgEncoder[OauthApplicationCreateAuditEntryState] {
        override def encode(
                             value: OauthApplicationCreateAuditEntryState
                           ): Value = value match {
          case OauthApplicationCreateAuditEntryState.ACTIVE =>
            EnumValue("ACTIVE")
          case OauthApplicationCreateAuditEntryState.PENDING_DELETION =>
            EnumValue("PENDING_DELETION")
          case OauthApplicationCreateAuditEntryState.SUSPENDED =>
            EnumValue("SUSPENDED")
        }

        override def typeName: String = "OauthApplicationCreateAuditEntryState"
      }
  }

  sealed trait OperationType extends scala.Product with scala.Serializable

  object OperationType {

    case object ACCESS extends OperationType

    case object AUTHENTICATION extends OperationType

    case object CREATE extends OperationType

    case object MODIFY extends OperationType

    case object REMOVE extends OperationType

    case object RESTORE extends OperationType

    case object TRANSFER extends OperationType

    implicit val decoder: ScalarDecoder[OperationType] = {
      case StringValue("ACCESS") => Right(OperationType.ACCESS)
      case StringValue("AUTHENTICATION") => Right(OperationType.AUTHENTICATION)
      case StringValue("CREATE") => Right(OperationType.CREATE)
      case StringValue("MODIFY") => Right(OperationType.MODIFY)
      case StringValue("REMOVE") => Right(OperationType.REMOVE)
      case StringValue("RESTORE") => Right(OperationType.RESTORE)
      case StringValue("TRANSFER") => Right(OperationType.TRANSFER)
      case other =>
        Left(DecodingError(s"Can't build OperationType from input $other"))
    }
    implicit val encoder: ArgEncoder[OperationType] =
      new ArgEncoder[OperationType] {
        override def encode(value: OperationType): Value = value match {
          case OperationType.ACCESS => EnumValue("ACCESS")
          case OperationType.AUTHENTICATION => EnumValue("AUTHENTICATION")
          case OperationType.CREATE => EnumValue("CREATE")
          case OperationType.MODIFY => EnumValue("MODIFY")
          case OperationType.REMOVE => EnumValue("REMOVE")
          case OperationType.RESTORE => EnumValue("RESTORE")
          case OperationType.TRANSFER => EnumValue("TRANSFER")
        }

        override def typeName: String = "OperationType"
      }
  }

  sealed trait OrderDirection extends scala.Product with scala.Serializable

  object OrderDirection {

    case object ASC extends OrderDirection

    case object DESC extends OrderDirection

    implicit val decoder: ScalarDecoder[OrderDirection] = {
      case StringValue("ASC") => Right(OrderDirection.ASC)
      case StringValue("DESC") => Right(OrderDirection.DESC)
      case other =>
        Left(DecodingError(s"Can't build OrderDirection from input $other"))
    }
    implicit val encoder: ArgEncoder[OrderDirection] =
      new ArgEncoder[OrderDirection] {
        override def encode(value: OrderDirection): Value = value match {
          case OrderDirection.ASC => EnumValue("ASC")
          case OrderDirection.DESC => EnumValue("DESC")
        }

        override def typeName: String = "OrderDirection"
      }
  }

  sealed trait OrgAddMemberAuditEntryPermission
    extends scala.Product
      with scala.Serializable

  object OrgAddMemberAuditEntryPermission {

    case object ADMIN extends OrgAddMemberAuditEntryPermission

    case object READ extends OrgAddMemberAuditEntryPermission

    implicit val decoder: ScalarDecoder[OrgAddMemberAuditEntryPermission] = {
      case StringValue("ADMIN") => Right(OrgAddMemberAuditEntryPermission.ADMIN)
      case StringValue("READ") => Right(OrgAddMemberAuditEntryPermission.READ)
      case other =>
        Left(
          DecodingError(
            s"Can't build OrgAddMemberAuditEntryPermission from input $other"
          )
        )
    }
    implicit val encoder: ArgEncoder[OrgAddMemberAuditEntryPermission] =
      new ArgEncoder[OrgAddMemberAuditEntryPermission] {
        override def encode(value: OrgAddMemberAuditEntryPermission): Value =
          value match {
            case OrgAddMemberAuditEntryPermission.ADMIN => EnumValue("ADMIN")
            case OrgAddMemberAuditEntryPermission.READ => EnumValue("READ")
          }

        override def typeName: String = "OrgAddMemberAuditEntryPermission"
      }
  }

  sealed trait OrgCreateAuditEntryBillingPlan
    extends scala.Product
      with scala.Serializable

  object OrgCreateAuditEntryBillingPlan {

    case object BUSINESS extends OrgCreateAuditEntryBillingPlan

    case object BUSINESS_PLUS extends OrgCreateAuditEntryBillingPlan

    case object FREE extends OrgCreateAuditEntryBillingPlan

    case object TIERED_PER_SEAT extends OrgCreateAuditEntryBillingPlan

    case object UNLIMITED extends OrgCreateAuditEntryBillingPlan

    implicit val decoder: ScalarDecoder[OrgCreateAuditEntryBillingPlan] = {
      case StringValue("BUSINESS") =>
        Right(OrgCreateAuditEntryBillingPlan.BUSINESS)
      case StringValue("BUSINESS_PLUS") =>
        Right(OrgCreateAuditEntryBillingPlan.BUSINESS_PLUS)
      case StringValue("FREE") => Right(OrgCreateAuditEntryBillingPlan.FREE)
      case StringValue("TIERED_PER_SEAT") =>
        Right(OrgCreateAuditEntryBillingPlan.TIERED_PER_SEAT)
      case StringValue("UNLIMITED") =>
        Right(OrgCreateAuditEntryBillingPlan.UNLIMITED)
      case other =>
        Left(
          DecodingError(
            s"Can't build OrgCreateAuditEntryBillingPlan from input $other"
          )
        )
    }
    implicit val encoder: ArgEncoder[OrgCreateAuditEntryBillingPlan] =
      new ArgEncoder[OrgCreateAuditEntryBillingPlan] {
        override def encode(value: OrgCreateAuditEntryBillingPlan): Value =
          value match {
            case OrgCreateAuditEntryBillingPlan.BUSINESS =>
              EnumValue("BUSINESS")
            case OrgCreateAuditEntryBillingPlan.BUSINESS_PLUS =>
              EnumValue("BUSINESS_PLUS")
            case OrgCreateAuditEntryBillingPlan.FREE => EnumValue("FREE")
            case OrgCreateAuditEntryBillingPlan.TIERED_PER_SEAT =>
              EnumValue("TIERED_PER_SEAT")
            case OrgCreateAuditEntryBillingPlan.UNLIMITED =>
              EnumValue("UNLIMITED")
          }

        override def typeName: String = "OrgCreateAuditEntryBillingPlan"
      }
  }

  sealed trait OrgRemoveBillingManagerAuditEntryReason
    extends scala.Product
      with scala.Serializable

  object OrgRemoveBillingManagerAuditEntryReason {

    case object SAML_EXTERNAL_IDENTITY_MISSING
      extends OrgRemoveBillingManagerAuditEntryReason

    case object SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY
      extends OrgRemoveBillingManagerAuditEntryReason

    case object TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE
      extends OrgRemoveBillingManagerAuditEntryReason

    implicit val decoder
    : ScalarDecoder[OrgRemoveBillingManagerAuditEntryReason] = {
      case StringValue("SAML_EXTERNAL_IDENTITY_MISSING") =>
        Right(
          OrgRemoveBillingManagerAuditEntryReason.SAML_EXTERNAL_IDENTITY_MISSING
        )
      case StringValue("SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY") =>
        Right(
          OrgRemoveBillingManagerAuditEntryReason.SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY
        )
      case StringValue("TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE") =>
        Right(
          OrgRemoveBillingManagerAuditEntryReason.TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE
        )
      case other =>
        Left(
          DecodingError(
            s"Can't build OrgRemoveBillingManagerAuditEntryReason from input $other"
          )
        )
    }
    implicit val encoder: ArgEncoder[OrgRemoveBillingManagerAuditEntryReason] =
      new ArgEncoder[OrgRemoveBillingManagerAuditEntryReason] {
        override def encode(
                             value: OrgRemoveBillingManagerAuditEntryReason
                           ): Value = value match {
          case OrgRemoveBillingManagerAuditEntryReason.SAML_EXTERNAL_IDENTITY_MISSING =>
            EnumValue("SAML_EXTERNAL_IDENTITY_MISSING")
          case OrgRemoveBillingManagerAuditEntryReason.SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY =>
            EnumValue("SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY")
          case OrgRemoveBillingManagerAuditEntryReason.TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE =>
            EnumValue("TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE")
        }

        override def typeName: String =
          "OrgRemoveBillingManagerAuditEntryReason"
      }
  }

  sealed trait OrgRemoveMemberAuditEntryMembershipType
    extends scala.Product
      with scala.Serializable

  object OrgRemoveMemberAuditEntryMembershipType {

    case object ADMIN extends OrgRemoveMemberAuditEntryMembershipType

    case object BILLING_MANAGER extends OrgRemoveMemberAuditEntryMembershipType

    case object DIRECT_MEMBER extends OrgRemoveMemberAuditEntryMembershipType

    case object OUTSIDE_COLLABORATOR
      extends OrgRemoveMemberAuditEntryMembershipType

    case object UNAFFILIATED extends OrgRemoveMemberAuditEntryMembershipType

    implicit val decoder
    : ScalarDecoder[OrgRemoveMemberAuditEntryMembershipType] = {
      case StringValue("ADMIN") =>
        Right(OrgRemoveMemberAuditEntryMembershipType.ADMIN)
      case StringValue("BILLING_MANAGER") =>
        Right(OrgRemoveMemberAuditEntryMembershipType.BILLING_MANAGER)
      case StringValue("DIRECT_MEMBER") =>
        Right(OrgRemoveMemberAuditEntryMembershipType.DIRECT_MEMBER)
      case StringValue("OUTSIDE_COLLABORATOR") =>
        Right(OrgRemoveMemberAuditEntryMembershipType.OUTSIDE_COLLABORATOR)
      case StringValue("UNAFFILIATED") =>
        Right(OrgRemoveMemberAuditEntryMembershipType.UNAFFILIATED)
      case other =>
        Left(
          DecodingError(
            s"Can't build OrgRemoveMemberAuditEntryMembershipType from input $other"
          )
        )
    }
    implicit val encoder: ArgEncoder[OrgRemoveMemberAuditEntryMembershipType] =
      new ArgEncoder[OrgRemoveMemberAuditEntryMembershipType] {
        override def encode(
                             value: OrgRemoveMemberAuditEntryMembershipType
                           ): Value = value match {
          case OrgRemoveMemberAuditEntryMembershipType.ADMIN =>
            EnumValue("ADMIN")
          case OrgRemoveMemberAuditEntryMembershipType.BILLING_MANAGER =>
            EnumValue("BILLING_MANAGER")
          case OrgRemoveMemberAuditEntryMembershipType.DIRECT_MEMBER =>
            EnumValue("DIRECT_MEMBER")
          case OrgRemoveMemberAuditEntryMembershipType.OUTSIDE_COLLABORATOR =>
            EnumValue("OUTSIDE_COLLABORATOR")
          case OrgRemoveMemberAuditEntryMembershipType.UNAFFILIATED =>
            EnumValue("UNAFFILIATED")
        }

        override def typeName: String =
          "OrgRemoveMemberAuditEntryMembershipType"
      }
  }

  sealed trait OrgRemoveMemberAuditEntryReason
    extends scala.Product
      with scala.Serializable

  object OrgRemoveMemberAuditEntryReason {

    case object SAML_EXTERNAL_IDENTITY_MISSING
      extends OrgRemoveMemberAuditEntryReason

    case object SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY
      extends OrgRemoveMemberAuditEntryReason

    case object TWO_FACTOR_ACCOUNT_RECOVERY
      extends OrgRemoveMemberAuditEntryReason

    case object TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE
      extends OrgRemoveMemberAuditEntryReason

    case object USER_ACCOUNT_DELETED extends OrgRemoveMemberAuditEntryReason

    implicit val decoder: ScalarDecoder[OrgRemoveMemberAuditEntryReason] = {
      case StringValue("SAML_EXTERNAL_IDENTITY_MISSING") =>
        Right(OrgRemoveMemberAuditEntryReason.SAML_EXTERNAL_IDENTITY_MISSING)
      case StringValue("SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY") =>
        Right(
          OrgRemoveMemberAuditEntryReason.SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY
        )
      case StringValue("TWO_FACTOR_ACCOUNT_RECOVERY") =>
        Right(OrgRemoveMemberAuditEntryReason.TWO_FACTOR_ACCOUNT_RECOVERY)
      case StringValue("TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE") =>
        Right(
          OrgRemoveMemberAuditEntryReason.TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE
        )
      case StringValue("USER_ACCOUNT_DELETED") =>
        Right(OrgRemoveMemberAuditEntryReason.USER_ACCOUNT_DELETED)
      case other =>
        Left(
          DecodingError(
            s"Can't build OrgRemoveMemberAuditEntryReason from input $other"
          )
        )
    }
    implicit val encoder: ArgEncoder[OrgRemoveMemberAuditEntryReason] =
      new ArgEncoder[OrgRemoveMemberAuditEntryReason] {
        override def encode(value: OrgRemoveMemberAuditEntryReason): Value =
          value match {
            case OrgRemoveMemberAuditEntryReason.SAML_EXTERNAL_IDENTITY_MISSING =>
              EnumValue("SAML_EXTERNAL_IDENTITY_MISSING")
            case OrgRemoveMemberAuditEntryReason.SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY =>
              EnumValue("SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY")
            case OrgRemoveMemberAuditEntryReason.TWO_FACTOR_ACCOUNT_RECOVERY =>
              EnumValue("TWO_FACTOR_ACCOUNT_RECOVERY")
            case OrgRemoveMemberAuditEntryReason.TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE =>
              EnumValue("TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE")
            case OrgRemoveMemberAuditEntryReason.USER_ACCOUNT_DELETED =>
              EnumValue("USER_ACCOUNT_DELETED")
          }

        override def typeName: String = "OrgRemoveMemberAuditEntryReason"
      }
  }

  sealed trait OrgRemoveOutsideCollaboratorAuditEntryMembershipType
    extends scala.Product
      with scala.Serializable

  object OrgRemoveOutsideCollaboratorAuditEntryMembershipType {

    case object BILLING_MANAGER
      extends OrgRemoveOutsideCollaboratorAuditEntryMembershipType

    case object OUTSIDE_COLLABORATOR
      extends OrgRemoveOutsideCollaboratorAuditEntryMembershipType

    case object UNAFFILIATED
      extends OrgRemoveOutsideCollaboratorAuditEntryMembershipType

    implicit val decoder: ScalarDecoder[
      OrgRemoveOutsideCollaboratorAuditEntryMembershipType
    ] = {
      case StringValue("BILLING_MANAGER") =>
        Right(
          OrgRemoveOutsideCollaboratorAuditEntryMembershipType.BILLING_MANAGER
        )
      case StringValue("OUTSIDE_COLLABORATOR") =>
        Right(
          OrgRemoveOutsideCollaboratorAuditEntryMembershipType.OUTSIDE_COLLABORATOR
        )
      case StringValue("UNAFFILIATED") =>
        Right(OrgRemoveOutsideCollaboratorAuditEntryMembershipType.UNAFFILIATED)
      case other =>
        Left(
          DecodingError(
            s"Can't build OrgRemoveOutsideCollaboratorAuditEntryMembershipType from input $other"
          )
        )
    }
    implicit val encoder
    : ArgEncoder[OrgRemoveOutsideCollaboratorAuditEntryMembershipType] =
      new ArgEncoder[OrgRemoveOutsideCollaboratorAuditEntryMembershipType] {
        override def encode(
                             value: OrgRemoveOutsideCollaboratorAuditEntryMembershipType
                           ): Value = value match {
          case OrgRemoveOutsideCollaboratorAuditEntryMembershipType.BILLING_MANAGER =>
            EnumValue("BILLING_MANAGER")
          case OrgRemoveOutsideCollaboratorAuditEntryMembershipType.OUTSIDE_COLLABORATOR =>
            EnumValue("OUTSIDE_COLLABORATOR")
          case OrgRemoveOutsideCollaboratorAuditEntryMembershipType.UNAFFILIATED =>
            EnumValue("UNAFFILIATED")
        }

        override def typeName: String =
          "OrgRemoveOutsideCollaboratorAuditEntryMembershipType"
      }
  }

  sealed trait OrgRemoveOutsideCollaboratorAuditEntryReason
    extends scala.Product
      with scala.Serializable

  object OrgRemoveOutsideCollaboratorAuditEntryReason {

    case object SAML_EXTERNAL_IDENTITY_MISSING
      extends OrgRemoveOutsideCollaboratorAuditEntryReason

    case object TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE
      extends OrgRemoveOutsideCollaboratorAuditEntryReason

    implicit val decoder
    : ScalarDecoder[OrgRemoveOutsideCollaboratorAuditEntryReason] = {
      case StringValue("SAML_EXTERNAL_IDENTITY_MISSING") =>
        Right(
          OrgRemoveOutsideCollaboratorAuditEntryReason.SAML_EXTERNAL_IDENTITY_MISSING
        )
      case StringValue("TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE") =>
        Right(
          OrgRemoveOutsideCollaboratorAuditEntryReason.TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE
        )
      case other =>
        Left(
          DecodingError(
            s"Can't build OrgRemoveOutsideCollaboratorAuditEntryReason from input $other"
          )
        )
    }
    implicit val encoder
    : ArgEncoder[OrgRemoveOutsideCollaboratorAuditEntryReason] =
      new ArgEncoder[OrgRemoveOutsideCollaboratorAuditEntryReason] {
        override def encode(
                             value: OrgRemoveOutsideCollaboratorAuditEntryReason
                           ): Value = value match {
          case OrgRemoveOutsideCollaboratorAuditEntryReason.SAML_EXTERNAL_IDENTITY_MISSING =>
            EnumValue("SAML_EXTERNAL_IDENTITY_MISSING")
          case OrgRemoveOutsideCollaboratorAuditEntryReason.TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE =>
            EnumValue("TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE")
        }

        override def typeName: String =
          "OrgRemoveOutsideCollaboratorAuditEntryReason"
      }
  }

  sealed trait OrgUpdateDefaultRepositoryPermissionAuditEntryPermission
    extends scala.Product
      with scala.Serializable

  object OrgUpdateDefaultRepositoryPermissionAuditEntryPermission {

    case object ADMIN
      extends OrgUpdateDefaultRepositoryPermissionAuditEntryPermission

    case object NONE
      extends OrgUpdateDefaultRepositoryPermissionAuditEntryPermission

    case object READ
      extends OrgUpdateDefaultRepositoryPermissionAuditEntryPermission

    case object WRITE
      extends OrgUpdateDefaultRepositoryPermissionAuditEntryPermission

    implicit val decoder: ScalarDecoder[
      OrgUpdateDefaultRepositoryPermissionAuditEntryPermission
    ] = {
      case StringValue("ADMIN") =>
        Right(OrgUpdateDefaultRepositoryPermissionAuditEntryPermission.ADMIN)
      case StringValue("NONE") =>
        Right(OrgUpdateDefaultRepositoryPermissionAuditEntryPermission.NONE)
      case StringValue("READ") =>
        Right(OrgUpdateDefaultRepositoryPermissionAuditEntryPermission.READ)
      case StringValue("WRITE") =>
        Right(OrgUpdateDefaultRepositoryPermissionAuditEntryPermission.WRITE)
      case other =>
        Left(
          DecodingError(
            s"Can't build OrgUpdateDefaultRepositoryPermissionAuditEntryPermission from input $other"
          )
        )
    }
    implicit val encoder
    : ArgEncoder[OrgUpdateDefaultRepositoryPermissionAuditEntryPermission] =
      new ArgEncoder[OrgUpdateDefaultRepositoryPermissionAuditEntryPermission] {
        override def encode(
                             value: OrgUpdateDefaultRepositoryPermissionAuditEntryPermission
                           ): Value = value match {
          case OrgUpdateDefaultRepositoryPermissionAuditEntryPermission.ADMIN =>
            EnumValue("ADMIN")
          case OrgUpdateDefaultRepositoryPermissionAuditEntryPermission.NONE =>
            EnumValue("NONE")
          case OrgUpdateDefaultRepositoryPermissionAuditEntryPermission.READ =>
            EnumValue("READ")
          case OrgUpdateDefaultRepositoryPermissionAuditEntryPermission.WRITE =>
            EnumValue("WRITE")
        }

        override def typeName: String =
          "OrgUpdateDefaultRepositoryPermissionAuditEntryPermission"
      }
  }

  sealed trait OrgUpdateMemberAuditEntryPermission
    extends scala.Product
      with scala.Serializable

  object OrgUpdateMemberAuditEntryPermission {

    case object ADMIN extends OrgUpdateMemberAuditEntryPermission

    case object READ extends OrgUpdateMemberAuditEntryPermission

    implicit val decoder: ScalarDecoder[OrgUpdateMemberAuditEntryPermission] = {
      case StringValue("ADMIN") =>
        Right(OrgUpdateMemberAuditEntryPermission.ADMIN)
      case StringValue("READ") =>
        Right(OrgUpdateMemberAuditEntryPermission.READ)
      case other =>
        Left(
          DecodingError(
            s"Can't build OrgUpdateMemberAuditEntryPermission from input $other"
          )
        )
    }
    implicit val encoder: ArgEncoder[OrgUpdateMemberAuditEntryPermission] =
      new ArgEncoder[OrgUpdateMemberAuditEntryPermission] {
        override def encode(value: OrgUpdateMemberAuditEntryPermission): Value =
          value match {
            case OrgUpdateMemberAuditEntryPermission.ADMIN => EnumValue("ADMIN")
            case OrgUpdateMemberAuditEntryPermission.READ => EnumValue("READ")
          }

        override def typeName: String = "OrgUpdateMemberAuditEntryPermission"
      }
  }

  sealed trait OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility
    extends scala.Product
      with scala.Serializable

  object OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility {

    case object ALL
      extends OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility

    case object INTERNAL
      extends OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility

    case object NONE
      extends OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility

    case object PRIVATE
      extends OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility

    case object PRIVATE_INTERNAL
      extends OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility

    case object PUBLIC
      extends OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility

    case object PUBLIC_INTERNAL
      extends OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility

    case object PUBLIC_PRIVATE
      extends OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility

    implicit val decoder: ScalarDecoder[
      OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility
    ] = {
      case StringValue("ALL") =>
        Right(
          OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility.ALL
        )
      case StringValue("INTERNAL") =>
        Right(
          OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility.INTERNAL
        )
      case StringValue("NONE") =>
        Right(
          OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility.NONE
        )
      case StringValue("PRIVATE") =>
        Right(
          OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility.PRIVATE
        )
      case StringValue("PRIVATE_INTERNAL") =>
        Right(
          OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility.PRIVATE_INTERNAL
        )
      case StringValue("PUBLIC") =>
        Right(
          OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility.PUBLIC
        )
      case StringValue("PUBLIC_INTERNAL") =>
        Right(
          OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility.PUBLIC_INTERNAL
        )
      case StringValue("PUBLIC_PRIVATE") =>
        Right(
          OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility.PUBLIC_PRIVATE
        )
      case other =>
        Left(
          DecodingError(
            s"Can't build OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility from input $other"
          )
        )
    }
    implicit val encoder: ArgEncoder[
      OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility
    ] = new ArgEncoder[
      OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility
    ] {
      override def encode(
                           value: OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility
                         ): Value = value match {
        case OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility.ALL =>
          EnumValue("ALL")
        case OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility.INTERNAL =>
          EnumValue("INTERNAL")
        case OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility.NONE =>
          EnumValue("NONE")
        case OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility.PRIVATE =>
          EnumValue("PRIVATE")
        case OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility.PRIVATE_INTERNAL =>
          EnumValue("PRIVATE_INTERNAL")
        case OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility.PUBLIC =>
          EnumValue("PUBLIC")
        case OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility.PUBLIC_INTERNAL =>
          EnumValue("PUBLIC_INTERNAL")
        case OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility.PUBLIC_PRIVATE =>
          EnumValue("PUBLIC_PRIVATE")
      }

      override def typeName: String =
        "OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility"
    }
  }

  sealed trait OrganizationInvitationRole
    extends scala.Product
      with scala.Serializable

  object OrganizationInvitationRole {

    case object ADMIN extends OrganizationInvitationRole

    case object BILLING_MANAGER extends OrganizationInvitationRole

    case object DIRECT_MEMBER extends OrganizationInvitationRole

    case object REINSTATE extends OrganizationInvitationRole

    implicit val decoder: ScalarDecoder[OrganizationInvitationRole] = {
      case StringValue("ADMIN") => Right(OrganizationInvitationRole.ADMIN)
      case StringValue("BILLING_MANAGER") =>
        Right(OrganizationInvitationRole.BILLING_MANAGER)
      case StringValue("DIRECT_MEMBER") =>
        Right(OrganizationInvitationRole.DIRECT_MEMBER)
      case StringValue("REINSTATE") =>
        Right(OrganizationInvitationRole.REINSTATE)
      case other =>
        Left(
          DecodingError(
            s"Can't build OrganizationInvitationRole from input $other"
          )
        )
    }
    implicit val encoder: ArgEncoder[OrganizationInvitationRole] =
      new ArgEncoder[OrganizationInvitationRole] {
        override def encode(value: OrganizationInvitationRole): Value =
          value match {
            case OrganizationInvitationRole.ADMIN => EnumValue("ADMIN")
            case OrganizationInvitationRole.BILLING_MANAGER =>
              EnumValue("BILLING_MANAGER")
            case OrganizationInvitationRole.DIRECT_MEMBER =>
              EnumValue("DIRECT_MEMBER")
            case OrganizationInvitationRole.REINSTATE => EnumValue("REINSTATE")
          }

        override def typeName: String = "OrganizationInvitationRole"
      }
  }

  sealed trait OrganizationInvitationType
    extends scala.Product
      with scala.Serializable

  object OrganizationInvitationType {

    case object EMAIL extends OrganizationInvitationType

    case object USER extends OrganizationInvitationType

    implicit val decoder: ScalarDecoder[OrganizationInvitationType] = {
      case StringValue("EMAIL") => Right(OrganizationInvitationType.EMAIL)
      case StringValue("USER") => Right(OrganizationInvitationType.USER)
      case other =>
        Left(
          DecodingError(
            s"Can't build OrganizationInvitationType from input $other"
          )
        )
    }
    implicit val encoder: ArgEncoder[OrganizationInvitationType] =
      new ArgEncoder[OrganizationInvitationType] {
        override def encode(value: OrganizationInvitationType): Value =
          value match {
            case OrganizationInvitationType.EMAIL => EnumValue("EMAIL")
            case OrganizationInvitationType.USER => EnumValue("USER")
          }

        override def typeName: String = "OrganizationInvitationType"
      }
  }

  sealed trait OrganizationMemberRole
    extends scala.Product
      with scala.Serializable

  object OrganizationMemberRole {

    case object ADMIN extends OrganizationMemberRole

    case object MEMBER extends OrganizationMemberRole

    implicit val decoder: ScalarDecoder[OrganizationMemberRole] = {
      case StringValue("ADMIN") => Right(OrganizationMemberRole.ADMIN)
      case StringValue("MEMBER") => Right(OrganizationMemberRole.MEMBER)
      case other =>
        Left(
          DecodingError(s"Can't build OrganizationMemberRole from input $other")
        )
    }
    implicit val encoder: ArgEncoder[OrganizationMemberRole] =
      new ArgEncoder[OrganizationMemberRole] {
        override def encode(value: OrganizationMemberRole): Value =
          value match {
            case OrganizationMemberRole.ADMIN => EnumValue("ADMIN")
            case OrganizationMemberRole.MEMBER => EnumValue("MEMBER")
          }

        override def typeName: String = "OrganizationMemberRole"
      }
  }

  sealed trait OrganizationMembersCanCreateRepositoriesSettingValue
    extends scala.Product
      with scala.Serializable

  object OrganizationMembersCanCreateRepositoriesSettingValue {

    case object ALL extends OrganizationMembersCanCreateRepositoriesSettingValue

    case object DISABLED
      extends OrganizationMembersCanCreateRepositoriesSettingValue

    case object PRIVATE
      extends OrganizationMembersCanCreateRepositoriesSettingValue

    implicit val decoder: ScalarDecoder[
      OrganizationMembersCanCreateRepositoriesSettingValue
    ] = {
      case StringValue("ALL") =>
        Right(OrganizationMembersCanCreateRepositoriesSettingValue.ALL)
      case StringValue("DISABLED") =>
        Right(OrganizationMembersCanCreateRepositoriesSettingValue.DISABLED)
      case StringValue("PRIVATE") =>
        Right(OrganizationMembersCanCreateRepositoriesSettingValue.PRIVATE)
      case other =>
        Left(
          DecodingError(
            s"Can't build OrganizationMembersCanCreateRepositoriesSettingValue from input $other"
          )
        )
    }
    implicit val encoder
    : ArgEncoder[OrganizationMembersCanCreateRepositoriesSettingValue] =
      new ArgEncoder[OrganizationMembersCanCreateRepositoriesSettingValue] {
        override def encode(
                             value: OrganizationMembersCanCreateRepositoriesSettingValue
                           ): Value = value match {
          case OrganizationMembersCanCreateRepositoriesSettingValue.ALL =>
            EnumValue("ALL")
          case OrganizationMembersCanCreateRepositoriesSettingValue.DISABLED =>
            EnumValue("DISABLED")
          case OrganizationMembersCanCreateRepositoriesSettingValue.PRIVATE =>
            EnumValue("PRIVATE")
        }

        override def typeName: String =
          "OrganizationMembersCanCreateRepositoriesSettingValue"
      }
  }

  sealed trait OrganizationOrderField
    extends scala.Product
      with scala.Serializable

  object OrganizationOrderField {

    case object CREATED_AT extends OrganizationOrderField

    case object LOGIN extends OrganizationOrderField

    implicit val decoder: ScalarDecoder[OrganizationOrderField] = {
      case StringValue("CREATED_AT") => Right(OrganizationOrderField.CREATED_AT)
      case StringValue("LOGIN") => Right(OrganizationOrderField.LOGIN)
      case other =>
        Left(
          DecodingError(s"Can't build OrganizationOrderField from input $other")
        )
    }
    implicit val encoder: ArgEncoder[OrganizationOrderField] =
      new ArgEncoder[OrganizationOrderField] {
        override def encode(value: OrganizationOrderField): Value =
          value match {
            case OrganizationOrderField.CREATED_AT => EnumValue("CREATED_AT")
            case OrganizationOrderField.LOGIN => EnumValue("LOGIN")
          }

        override def typeName: String = "OrganizationOrderField"
      }
  }

  sealed trait PackageFileOrderField
    extends scala.Product
      with scala.Serializable

  object PackageFileOrderField {

    case object CREATED_AT extends PackageFileOrderField

    implicit val decoder: ScalarDecoder[PackageFileOrderField] = {
      case StringValue("CREATED_AT") => Right(PackageFileOrderField.CREATED_AT)
      case other =>
        Left(
          DecodingError(s"Can't build PackageFileOrderField from input $other")
        )
    }
    implicit val encoder: ArgEncoder[PackageFileOrderField] =
      new ArgEncoder[PackageFileOrderField] {
        override def encode(value: PackageFileOrderField): Value = value match {
          case PackageFileOrderField.CREATED_AT => EnumValue("CREATED_AT")
        }

        override def typeName: String = "PackageFileOrderField"
      }
  }

  sealed trait PackageOrderField extends scala.Product with scala.Serializable

  object PackageOrderField {

    case object CREATED_AT extends PackageOrderField

    implicit val decoder: ScalarDecoder[PackageOrderField] = {
      case StringValue("CREATED_AT") => Right(PackageOrderField.CREATED_AT)
      case other =>
        Left(DecodingError(s"Can't build PackageOrderField from input $other"))
    }
    implicit val encoder: ArgEncoder[PackageOrderField] =
      new ArgEncoder[PackageOrderField] {
        override def encode(value: PackageOrderField): Value = value match {
          case PackageOrderField.CREATED_AT => EnumValue("CREATED_AT")
        }

        override def typeName: String = "PackageOrderField"
      }
  }

  sealed trait PackageType extends scala.Product with scala.Serializable

  object PackageType {

    case object DEBIAN extends PackageType

    case object DOCKER extends PackageType

    case object MAVEN extends PackageType

    case object NPM extends PackageType

    case object NUGET extends PackageType

    case object PYPI extends PackageType

    case object RUBYGEMS extends PackageType

    implicit val decoder: ScalarDecoder[PackageType] = {
      case StringValue("DEBIAN") => Right(PackageType.DEBIAN)
      case StringValue("DOCKER") => Right(PackageType.DOCKER)
      case StringValue("MAVEN") => Right(PackageType.MAVEN)
      case StringValue("NPM") => Right(PackageType.NPM)
      case StringValue("NUGET") => Right(PackageType.NUGET)
      case StringValue("PYPI") => Right(PackageType.PYPI)
      case StringValue("RUBYGEMS") => Right(PackageType.RUBYGEMS)
      case other =>
        Left(DecodingError(s"Can't build PackageType from input $other"))
    }
    implicit val encoder: ArgEncoder[PackageType] =
      new ArgEncoder[PackageType] {
        override def encode(value: PackageType): Value = value match {
          case PackageType.DEBIAN => EnumValue("DEBIAN")
          case PackageType.DOCKER => EnumValue("DOCKER")
          case PackageType.MAVEN => EnumValue("MAVEN")
          case PackageType.NPM => EnumValue("NPM")
          case PackageType.NUGET => EnumValue("NUGET")
          case PackageType.PYPI => EnumValue("PYPI")
          case PackageType.RUBYGEMS => EnumValue("RUBYGEMS")
        }

        override def typeName: String = "PackageType"
      }
  }

  sealed trait PackageVersionOrderField
    extends scala.Product
      with scala.Serializable

  object PackageVersionOrderField {

    case object CREATED_AT extends PackageVersionOrderField

    implicit val decoder: ScalarDecoder[PackageVersionOrderField] = {
      case StringValue("CREATED_AT") =>
        Right(PackageVersionOrderField.CREATED_AT)
      case other =>
        Left(
          DecodingError(
            s"Can't build PackageVersionOrderField from input $other"
          )
        )
    }
    implicit val encoder: ArgEncoder[PackageVersionOrderField] =
      new ArgEncoder[PackageVersionOrderField] {
        override def encode(value: PackageVersionOrderField): Value =
          value match {
            case PackageVersionOrderField.CREATED_AT => EnumValue("CREATED_AT")
          }

        override def typeName: String = "PackageVersionOrderField"
      }
  }

  sealed trait PinnableItemType extends scala.Product with scala.Serializable

  object PinnableItemType {

    case object GIST extends PinnableItemType

    case object ISSUE extends PinnableItemType

    case object ORGANIZATION extends PinnableItemType

    case object PROJECT extends PinnableItemType

    case object PULL_REQUEST extends PinnableItemType

    case object REPOSITORY extends PinnableItemType

    case object TEAM extends PinnableItemType

    case object USER extends PinnableItemType

    implicit val decoder: ScalarDecoder[PinnableItemType] = {
      case StringValue("GIST") => Right(PinnableItemType.GIST)
      case StringValue("ISSUE") => Right(PinnableItemType.ISSUE)
      case StringValue("ORGANIZATION") => Right(PinnableItemType.ORGANIZATION)
      case StringValue("PROJECT") => Right(PinnableItemType.PROJECT)
      case StringValue("PULL_REQUEST") => Right(PinnableItemType.PULL_REQUEST)
      case StringValue("REPOSITORY") => Right(PinnableItemType.REPOSITORY)
      case StringValue("TEAM") => Right(PinnableItemType.TEAM)
      case StringValue("USER") => Right(PinnableItemType.USER)
      case other =>
        Left(DecodingError(s"Can't build PinnableItemType from input $other"))
    }
    implicit val encoder: ArgEncoder[PinnableItemType] =
      new ArgEncoder[PinnableItemType] {
        override def encode(value: PinnableItemType): Value = value match {
          case PinnableItemType.GIST => EnumValue("GIST")
          case PinnableItemType.ISSUE => EnumValue("ISSUE")
          case PinnableItemType.ORGANIZATION => EnumValue("ORGANIZATION")
          case PinnableItemType.PROJECT => EnumValue("PROJECT")
          case PinnableItemType.PULL_REQUEST => EnumValue("PULL_REQUEST")
          case PinnableItemType.REPOSITORY => EnumValue("REPOSITORY")
          case PinnableItemType.TEAM => EnumValue("TEAM")
          case PinnableItemType.USER => EnumValue("USER")
        }

        override def typeName: String = "PinnableItemType"
      }
  }

  sealed trait ProjectCardArchivedState
    extends scala.Product
      with scala.Serializable

  object ProjectCardArchivedState {

    case object ARCHIVED extends ProjectCardArchivedState

    case object NOT_ARCHIVED extends ProjectCardArchivedState

    implicit val decoder: ScalarDecoder[ProjectCardArchivedState] = {
      case StringValue("ARCHIVED") => Right(ProjectCardArchivedState.ARCHIVED)
      case StringValue("NOT_ARCHIVED") =>
        Right(ProjectCardArchivedState.NOT_ARCHIVED)
      case other =>
        Left(
          DecodingError(
            s"Can't build ProjectCardArchivedState from input $other"
          )
        )
    }
    implicit val encoder: ArgEncoder[ProjectCardArchivedState] =
      new ArgEncoder[ProjectCardArchivedState] {
        override def encode(value: ProjectCardArchivedState): Value =
          value match {
            case ProjectCardArchivedState.ARCHIVED => EnumValue("ARCHIVED")
            case ProjectCardArchivedState.NOT_ARCHIVED =>
              EnumValue("NOT_ARCHIVED")
          }

        override def typeName: String = "ProjectCardArchivedState"
      }
  }

  sealed trait ProjectCardState extends scala.Product with scala.Serializable

  object ProjectCardState {

    case object CONTENT_ONLY extends ProjectCardState

    case object NOTE_ONLY extends ProjectCardState

    case object REDACTED extends ProjectCardState

    implicit val decoder: ScalarDecoder[ProjectCardState] = {
      case StringValue("CONTENT_ONLY") => Right(ProjectCardState.CONTENT_ONLY)
      case StringValue("NOTE_ONLY") => Right(ProjectCardState.NOTE_ONLY)
      case StringValue("REDACTED") => Right(ProjectCardState.REDACTED)
      case other =>
        Left(DecodingError(s"Can't build ProjectCardState from input $other"))
    }
    implicit val encoder: ArgEncoder[ProjectCardState] =
      new ArgEncoder[ProjectCardState] {
        override def encode(value: ProjectCardState): Value = value match {
          case ProjectCardState.CONTENT_ONLY => EnumValue("CONTENT_ONLY")
          case ProjectCardState.NOTE_ONLY => EnumValue("NOTE_ONLY")
          case ProjectCardState.REDACTED => EnumValue("REDACTED")
        }

        override def typeName: String = "ProjectCardState"
      }
  }

  sealed trait ProjectColumnPurpose
    extends scala.Product
      with scala.Serializable

  object ProjectColumnPurpose {

    case object DONE extends ProjectColumnPurpose

    case object IN_PROGRESS extends ProjectColumnPurpose

    case object TODO extends ProjectColumnPurpose

    implicit val decoder: ScalarDecoder[ProjectColumnPurpose] = {
      case StringValue("DONE") => Right(ProjectColumnPurpose.DONE)
      case StringValue("IN_PROGRESS") => Right(ProjectColumnPurpose.IN_PROGRESS)
      case StringValue("TODO") => Right(ProjectColumnPurpose.TODO)
      case other =>
        Left(
          DecodingError(s"Can't build ProjectColumnPurpose from input $other")
        )
    }
    implicit val encoder: ArgEncoder[ProjectColumnPurpose] =
      new ArgEncoder[ProjectColumnPurpose] {
        override def encode(value: ProjectColumnPurpose): Value = value match {
          case ProjectColumnPurpose.DONE => EnumValue("DONE")
          case ProjectColumnPurpose.IN_PROGRESS => EnumValue("IN_PROGRESS")
          case ProjectColumnPurpose.TODO => EnumValue("TODO")
        }

        override def typeName: String = "ProjectColumnPurpose"
      }
  }

  sealed trait ProjectOrderField extends scala.Product with scala.Serializable

  object ProjectOrderField {

    case object CREATED_AT extends ProjectOrderField

    case object NAME extends ProjectOrderField

    case object UPDATED_AT extends ProjectOrderField

    implicit val decoder: ScalarDecoder[ProjectOrderField] = {
      case StringValue("CREATED_AT") => Right(ProjectOrderField.CREATED_AT)
      case StringValue("NAME") => Right(ProjectOrderField.NAME)
      case StringValue("UPDATED_AT") => Right(ProjectOrderField.UPDATED_AT)
      case other =>
        Left(DecodingError(s"Can't build ProjectOrderField from input $other"))
    }
    implicit val encoder: ArgEncoder[ProjectOrderField] =
      new ArgEncoder[ProjectOrderField] {
        override def encode(value: ProjectOrderField): Value = value match {
          case ProjectOrderField.CREATED_AT => EnumValue("CREATED_AT")
          case ProjectOrderField.NAME => EnumValue("NAME")
          case ProjectOrderField.UPDATED_AT => EnumValue("UPDATED_AT")
        }

        override def typeName: String = "ProjectOrderField"
      }
  }

  sealed trait ProjectState extends scala.Product with scala.Serializable

  object ProjectState {

    case object CLOSED extends ProjectState

    case object OPEN extends ProjectState

    implicit val decoder: ScalarDecoder[ProjectState] = {
      case StringValue("CLOSED") => Right(ProjectState.CLOSED)
      case StringValue("OPEN") => Right(ProjectState.OPEN)
      case other =>
        Left(DecodingError(s"Can't build ProjectState from input $other"))
    }
    implicit val encoder: ArgEncoder[ProjectState] =
      new ArgEncoder[ProjectState] {
        override def encode(value: ProjectState): Value = value match {
          case ProjectState.CLOSED => EnumValue("CLOSED")
          case ProjectState.OPEN => EnumValue("OPEN")
        }

        override def typeName: String = "ProjectState"
      }
  }

  sealed trait ProjectTemplate extends scala.Product with scala.Serializable

  object ProjectTemplate {

    case object AUTOMATED_KANBAN_V2 extends ProjectTemplate

    case object AUTOMATED_REVIEWS_KANBAN extends ProjectTemplate

    case object BASIC_KANBAN extends ProjectTemplate

    case object BUG_TRIAGE extends ProjectTemplate

    implicit val decoder: ScalarDecoder[ProjectTemplate] = {
      case StringValue("AUTOMATED_KANBAN_V2") =>
        Right(ProjectTemplate.AUTOMATED_KANBAN_V2)
      case StringValue("AUTOMATED_REVIEWS_KANBAN") =>
        Right(ProjectTemplate.AUTOMATED_REVIEWS_KANBAN)
      case StringValue("BASIC_KANBAN") => Right(ProjectTemplate.BASIC_KANBAN)
      case StringValue("BUG_TRIAGE") => Right(ProjectTemplate.BUG_TRIAGE)
      case other =>
        Left(DecodingError(s"Can't build ProjectTemplate from input $other"))
    }
    implicit val encoder: ArgEncoder[ProjectTemplate] =
      new ArgEncoder[ProjectTemplate] {
        override def encode(value: ProjectTemplate): Value = value match {
          case ProjectTemplate.AUTOMATED_KANBAN_V2 =>
            EnumValue("AUTOMATED_KANBAN_V2")
          case ProjectTemplate.AUTOMATED_REVIEWS_KANBAN =>
            EnumValue("AUTOMATED_REVIEWS_KANBAN")
          case ProjectTemplate.BASIC_KANBAN => EnumValue("BASIC_KANBAN")
          case ProjectTemplate.BUG_TRIAGE => EnumValue("BUG_TRIAGE")
        }

        override def typeName: String = "ProjectTemplate"
      }
  }

  sealed trait PullRequestMergeMethod
    extends scala.Product
      with scala.Serializable

  object PullRequestMergeMethod {

    case object MERGE extends PullRequestMergeMethod

    case object REBASE extends PullRequestMergeMethod

    case object SQUASH extends PullRequestMergeMethod

    implicit val decoder: ScalarDecoder[PullRequestMergeMethod] = {
      case StringValue("MERGE") => Right(PullRequestMergeMethod.MERGE)
      case StringValue("REBASE") => Right(PullRequestMergeMethod.REBASE)
      case StringValue("SQUASH") => Right(PullRequestMergeMethod.SQUASH)
      case other =>
        Left(
          DecodingError(s"Can't build PullRequestMergeMethod from input $other")
        )
    }
    implicit val encoder: ArgEncoder[PullRequestMergeMethod] =
      new ArgEncoder[PullRequestMergeMethod] {
        override def encode(value: PullRequestMergeMethod): Value =
          value match {
            case PullRequestMergeMethod.MERGE => EnumValue("MERGE")
            case PullRequestMergeMethod.REBASE => EnumValue("REBASE")
            case PullRequestMergeMethod.SQUASH => EnumValue("SQUASH")
          }

        override def typeName: String = "PullRequestMergeMethod"
      }
  }

  sealed trait PullRequestOrderField
    extends scala.Product
      with scala.Serializable

  object PullRequestOrderField {

    case object CREATED_AT extends PullRequestOrderField

    case object UPDATED_AT extends PullRequestOrderField

    implicit val decoder: ScalarDecoder[PullRequestOrderField] = {
      case StringValue("CREATED_AT") => Right(PullRequestOrderField.CREATED_AT)
      case StringValue("UPDATED_AT") => Right(PullRequestOrderField.UPDATED_AT)
      case other =>
        Left(
          DecodingError(s"Can't build PullRequestOrderField from input $other")
        )
    }
    implicit val encoder: ArgEncoder[PullRequestOrderField] =
      new ArgEncoder[PullRequestOrderField] {
        override def encode(value: PullRequestOrderField): Value = value match {
          case PullRequestOrderField.CREATED_AT => EnumValue("CREATED_AT")
          case PullRequestOrderField.UPDATED_AT => EnumValue("UPDATED_AT")
        }

        override def typeName: String = "PullRequestOrderField"
      }
  }

  sealed trait PullRequestReviewCommentState
    extends scala.Product
      with scala.Serializable

  object PullRequestReviewCommentState {

    case object PENDING extends PullRequestReviewCommentState

    case object SUBMITTED extends PullRequestReviewCommentState

    implicit val decoder: ScalarDecoder[PullRequestReviewCommentState] = {
      case StringValue("PENDING") =>
        Right(PullRequestReviewCommentState.PENDING)
      case StringValue("SUBMITTED") =>
        Right(PullRequestReviewCommentState.SUBMITTED)
      case other =>
        Left(
          DecodingError(
            s"Can't build PullRequestReviewCommentState from input $other"
          )
        )
    }
    implicit val encoder: ArgEncoder[PullRequestReviewCommentState] =
      new ArgEncoder[PullRequestReviewCommentState] {
        override def encode(value: PullRequestReviewCommentState): Value =
          value match {
            case PullRequestReviewCommentState.PENDING => EnumValue("PENDING")
            case PullRequestReviewCommentState.SUBMITTED =>
              EnumValue("SUBMITTED")
          }

        override def typeName: String = "PullRequestReviewCommentState"
      }
  }

  sealed trait PullRequestReviewDecision
    extends scala.Product
      with scala.Serializable

  object PullRequestReviewDecision {

    case object APPROVED extends PullRequestReviewDecision

    case object CHANGES_REQUESTED extends PullRequestReviewDecision

    case object REVIEW_REQUIRED extends PullRequestReviewDecision

    implicit val decoder: ScalarDecoder[PullRequestReviewDecision] = {
      case StringValue("APPROVED") => Right(PullRequestReviewDecision.APPROVED)
      case StringValue("CHANGES_REQUESTED") =>
        Right(PullRequestReviewDecision.CHANGES_REQUESTED)
      case StringValue("REVIEW_REQUIRED") =>
        Right(PullRequestReviewDecision.REVIEW_REQUIRED)
      case other =>
        Left(
          DecodingError(
            s"Can't build PullRequestReviewDecision from input $other"
          )
        )
    }
    implicit val encoder: ArgEncoder[PullRequestReviewDecision] =
      new ArgEncoder[PullRequestReviewDecision] {
        override def encode(value: PullRequestReviewDecision): Value =
          value match {
            case PullRequestReviewDecision.APPROVED => EnumValue("APPROVED")
            case PullRequestReviewDecision.CHANGES_REQUESTED =>
              EnumValue("CHANGES_REQUESTED")
            case PullRequestReviewDecision.REVIEW_REQUIRED =>
              EnumValue("REVIEW_REQUIRED")
          }

        override def typeName: String = "PullRequestReviewDecision"
      }
  }

  sealed trait PullRequestReviewEvent
    extends scala.Product
      with scala.Serializable

  object PullRequestReviewEvent {

    case object APPROVE extends PullRequestReviewEvent

    case object COMMENT extends PullRequestReviewEvent

    case object DISMISS extends PullRequestReviewEvent

    case object REQUEST_CHANGES extends PullRequestReviewEvent

    implicit val decoder: ScalarDecoder[PullRequestReviewEvent] = {
      case StringValue("APPROVE") => Right(PullRequestReviewEvent.APPROVE)
      case StringValue("COMMENT") => Right(PullRequestReviewEvent.COMMENT)
      case StringValue("DISMISS") => Right(PullRequestReviewEvent.DISMISS)
      case StringValue("REQUEST_CHANGES") =>
        Right(PullRequestReviewEvent.REQUEST_CHANGES)
      case other =>
        Left(
          DecodingError(s"Can't build PullRequestReviewEvent from input $other")
        )
    }
    implicit val encoder: ArgEncoder[PullRequestReviewEvent] =
      new ArgEncoder[PullRequestReviewEvent] {
        override def encode(value: PullRequestReviewEvent): Value =
          value match {
            case PullRequestReviewEvent.APPROVE => EnumValue("APPROVE")
            case PullRequestReviewEvent.COMMENT => EnumValue("COMMENT")
            case PullRequestReviewEvent.DISMISS => EnumValue("DISMISS")
            case PullRequestReviewEvent.REQUEST_CHANGES =>
              EnumValue("REQUEST_CHANGES")
          }

        override def typeName: String = "PullRequestReviewEvent"
      }
  }

  sealed trait PullRequestReviewState
    extends scala.Product
      with scala.Serializable

  object PullRequestReviewState {

    case object APPROVED extends PullRequestReviewState

    case object CHANGES_REQUESTED extends PullRequestReviewState

    case object COMMENTED extends PullRequestReviewState

    case object DISMISSED extends PullRequestReviewState

    case object PENDING extends PullRequestReviewState

    implicit val decoder: ScalarDecoder[PullRequestReviewState] = {
      case StringValue("APPROVED") => Right(PullRequestReviewState.APPROVED)
      case StringValue("CHANGES_REQUESTED") =>
        Right(PullRequestReviewState.CHANGES_REQUESTED)
      case StringValue("COMMENTED") => Right(PullRequestReviewState.COMMENTED)
      case StringValue("DISMISSED") => Right(PullRequestReviewState.DISMISSED)
      case StringValue("PENDING") => Right(PullRequestReviewState.PENDING)
      case other =>
        Left(
          DecodingError(s"Can't build PullRequestReviewState from input $other")
        )
    }
    implicit val encoder: ArgEncoder[PullRequestReviewState] =
      new ArgEncoder[PullRequestReviewState] {
        override def encode(value: PullRequestReviewState): Value =
          value match {
            case PullRequestReviewState.APPROVED => EnumValue("APPROVED")
            case PullRequestReviewState.CHANGES_REQUESTED =>
              EnumValue("CHANGES_REQUESTED")
            case PullRequestReviewState.COMMENTED => EnumValue("COMMENTED")
            case PullRequestReviewState.DISMISSED => EnumValue("DISMISSED")
            case PullRequestReviewState.PENDING => EnumValue("PENDING")
          }

        override def typeName: String = "PullRequestReviewState"
      }
  }

  sealed trait PullRequestState extends scala.Product with scala.Serializable

  object PullRequestState {

    case object CLOSED extends PullRequestState

    case object MERGED extends PullRequestState

    case object OPEN extends PullRequestState

    implicit val decoder: ScalarDecoder[PullRequestState] = {
      case StringValue("CLOSED") => Right(PullRequestState.CLOSED)
      case StringValue("MERGED") => Right(PullRequestState.MERGED)
      case StringValue("OPEN") => Right(PullRequestState.OPEN)
      case other =>
        Left(DecodingError(s"Can't build PullRequestState from input $other"))
    }
    implicit val encoder: ArgEncoder[PullRequestState] =
      new ArgEncoder[PullRequestState] {
        override def encode(value: PullRequestState): Value = value match {
          case PullRequestState.CLOSED => EnumValue("CLOSED")
          case PullRequestState.MERGED => EnumValue("MERGED")
          case PullRequestState.OPEN => EnumValue("OPEN")
        }

        override def typeName: String = "PullRequestState"
      }
  }

  sealed trait PullRequestTimelineItemsItemType
    extends scala.Product
      with scala.Serializable

  object PullRequestTimelineItemsItemType {

    case object ADDED_TO_PROJECT_EVENT extends PullRequestTimelineItemsItemType

    case object ASSIGNED_EVENT extends PullRequestTimelineItemsItemType

    case object AUTOMATIC_BASE_CHANGE_FAILED_EVENT
      extends PullRequestTimelineItemsItemType

    case object AUTOMATIC_BASE_CHANGE_SUCCEEDED_EVENT
      extends PullRequestTimelineItemsItemType

    case object BASE_REF_CHANGED_EVENT extends PullRequestTimelineItemsItemType

    case object BASE_REF_DELETED_EVENT extends PullRequestTimelineItemsItemType

    case object BASE_REF_FORCE_PUSHED_EVENT
      extends PullRequestTimelineItemsItemType

    case object CLOSED_EVENT extends PullRequestTimelineItemsItemType

    case object COMMENT_DELETED_EVENT extends PullRequestTimelineItemsItemType

    case object CONNECTED_EVENT extends PullRequestTimelineItemsItemType

    case object CONVERTED_NOTE_TO_ISSUE_EVENT
      extends PullRequestTimelineItemsItemType

    case object CONVERT_TO_DRAFT_EVENT extends PullRequestTimelineItemsItemType

    case object CROSS_REFERENCED_EVENT extends PullRequestTimelineItemsItemType

    case object DEMILESTONED_EVENT extends PullRequestTimelineItemsItemType

    case object DEPLOYED_EVENT extends PullRequestTimelineItemsItemType

    case object DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT
      extends PullRequestTimelineItemsItemType

    case object DISCONNECTED_EVENT extends PullRequestTimelineItemsItemType

    case object HEAD_REF_DELETED_EVENT extends PullRequestTimelineItemsItemType

    case object HEAD_REF_FORCE_PUSHED_EVENT
      extends PullRequestTimelineItemsItemType

    case object HEAD_REF_RESTORED_EVENT extends PullRequestTimelineItemsItemType

    case object ISSUE_COMMENT extends PullRequestTimelineItemsItemType

    case object LABELED_EVENT extends PullRequestTimelineItemsItemType

    case object LOCKED_EVENT extends PullRequestTimelineItemsItemType

    case object MARKED_AS_DUPLICATE_EVENT
      extends PullRequestTimelineItemsItemType

    case object MENTIONED_EVENT extends PullRequestTimelineItemsItemType

    case object MERGED_EVENT extends PullRequestTimelineItemsItemType

    case object MILESTONED_EVENT extends PullRequestTimelineItemsItemType

    case object MOVED_COLUMNS_IN_PROJECT_EVENT
      extends PullRequestTimelineItemsItemType

    case object PINNED_EVENT extends PullRequestTimelineItemsItemType

    case object PULL_REQUEST_COMMIT extends PullRequestTimelineItemsItemType

    case object PULL_REQUEST_COMMIT_COMMENT_THREAD
      extends PullRequestTimelineItemsItemType

    case object PULL_REQUEST_REVIEW extends PullRequestTimelineItemsItemType

    case object PULL_REQUEST_REVIEW_THREAD
      extends PullRequestTimelineItemsItemType

    case object PULL_REQUEST_REVISION_MARKER
      extends PullRequestTimelineItemsItemType

    case object READY_FOR_REVIEW_EVENT extends PullRequestTimelineItemsItemType

    case object REFERENCED_EVENT extends PullRequestTimelineItemsItemType

    case object REMOVED_FROM_PROJECT_EVENT
      extends PullRequestTimelineItemsItemType

    case object RENAMED_TITLE_EVENT extends PullRequestTimelineItemsItemType

    case object REOPENED_EVENT extends PullRequestTimelineItemsItemType

    case object REVIEW_DISMISSED_EVENT extends PullRequestTimelineItemsItemType

    case object REVIEW_REQUESTED_EVENT extends PullRequestTimelineItemsItemType

    case object REVIEW_REQUEST_REMOVED_EVENT
      extends PullRequestTimelineItemsItemType

    case object SUBSCRIBED_EVENT extends PullRequestTimelineItemsItemType

    case object TRANSFERRED_EVENT extends PullRequestTimelineItemsItemType

    case object UNASSIGNED_EVENT extends PullRequestTimelineItemsItemType

    case object UNLABELED_EVENT extends PullRequestTimelineItemsItemType

    case object UNLOCKED_EVENT extends PullRequestTimelineItemsItemType

    case object UNMARKED_AS_DUPLICATE_EVENT
      extends PullRequestTimelineItemsItemType

    case object UNPINNED_EVENT extends PullRequestTimelineItemsItemType

    case object UNSUBSCRIBED_EVENT extends PullRequestTimelineItemsItemType

    case object USER_BLOCKED_EVENT extends PullRequestTimelineItemsItemType

    implicit val decoder: ScalarDecoder[PullRequestTimelineItemsItemType] = {
      case StringValue("ADDED_TO_PROJECT_EVENT") =>
        Right(PullRequestTimelineItemsItemType.ADDED_TO_PROJECT_EVENT)
      case StringValue("ASSIGNED_EVENT") =>
        Right(PullRequestTimelineItemsItemType.ASSIGNED_EVENT)
      case StringValue("AUTOMATIC_BASE_CHANGE_FAILED_EVENT") =>
        Right(
          PullRequestTimelineItemsItemType.AUTOMATIC_BASE_CHANGE_FAILED_EVENT
        )
      case StringValue("AUTOMATIC_BASE_CHANGE_SUCCEEDED_EVENT") =>
        Right(
          PullRequestTimelineItemsItemType.AUTOMATIC_BASE_CHANGE_SUCCEEDED_EVENT
        )
      case StringValue("BASE_REF_CHANGED_EVENT") =>
        Right(PullRequestTimelineItemsItemType.BASE_REF_CHANGED_EVENT)
      case StringValue("BASE_REF_DELETED_EVENT") =>
        Right(PullRequestTimelineItemsItemType.BASE_REF_DELETED_EVENT)
      case StringValue("BASE_REF_FORCE_PUSHED_EVENT") =>
        Right(PullRequestTimelineItemsItemType.BASE_REF_FORCE_PUSHED_EVENT)
      case StringValue("CLOSED_EVENT") =>
        Right(PullRequestTimelineItemsItemType.CLOSED_EVENT)
      case StringValue("COMMENT_DELETED_EVENT") =>
        Right(PullRequestTimelineItemsItemType.COMMENT_DELETED_EVENT)
      case StringValue("CONNECTED_EVENT") =>
        Right(PullRequestTimelineItemsItemType.CONNECTED_EVENT)
      case StringValue("CONVERTED_NOTE_TO_ISSUE_EVENT") =>
        Right(PullRequestTimelineItemsItemType.CONVERTED_NOTE_TO_ISSUE_EVENT)
      case StringValue("CONVERT_TO_DRAFT_EVENT") =>
        Right(PullRequestTimelineItemsItemType.CONVERT_TO_DRAFT_EVENT)
      case StringValue("CROSS_REFERENCED_EVENT") =>
        Right(PullRequestTimelineItemsItemType.CROSS_REFERENCED_EVENT)
      case StringValue("DEMILESTONED_EVENT") =>
        Right(PullRequestTimelineItemsItemType.DEMILESTONED_EVENT)
      case StringValue("DEPLOYED_EVENT") =>
        Right(PullRequestTimelineItemsItemType.DEPLOYED_EVENT)
      case StringValue("DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT") =>
        Right(
          PullRequestTimelineItemsItemType.DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT
        )
      case StringValue("DISCONNECTED_EVENT") =>
        Right(PullRequestTimelineItemsItemType.DISCONNECTED_EVENT)
      case StringValue("HEAD_REF_DELETED_EVENT") =>
        Right(PullRequestTimelineItemsItemType.HEAD_REF_DELETED_EVENT)
      case StringValue("HEAD_REF_FORCE_PUSHED_EVENT") =>
        Right(PullRequestTimelineItemsItemType.HEAD_REF_FORCE_PUSHED_EVENT)
      case StringValue("HEAD_REF_RESTORED_EVENT") =>
        Right(PullRequestTimelineItemsItemType.HEAD_REF_RESTORED_EVENT)
      case StringValue("ISSUE_COMMENT") =>
        Right(PullRequestTimelineItemsItemType.ISSUE_COMMENT)
      case StringValue("LABELED_EVENT") =>
        Right(PullRequestTimelineItemsItemType.LABELED_EVENT)
      case StringValue("LOCKED_EVENT") =>
        Right(PullRequestTimelineItemsItemType.LOCKED_EVENT)
      case StringValue("MARKED_AS_DUPLICATE_EVENT") =>
        Right(PullRequestTimelineItemsItemType.MARKED_AS_DUPLICATE_EVENT)
      case StringValue("MENTIONED_EVENT") =>
        Right(PullRequestTimelineItemsItemType.MENTIONED_EVENT)
      case StringValue("MERGED_EVENT") =>
        Right(PullRequestTimelineItemsItemType.MERGED_EVENT)
      case StringValue("MILESTONED_EVENT") =>
        Right(PullRequestTimelineItemsItemType.MILESTONED_EVENT)
      case StringValue("MOVED_COLUMNS_IN_PROJECT_EVENT") =>
        Right(PullRequestTimelineItemsItemType.MOVED_COLUMNS_IN_PROJECT_EVENT)
      case StringValue("PINNED_EVENT") =>
        Right(PullRequestTimelineItemsItemType.PINNED_EVENT)
      case StringValue("PULL_REQUEST_COMMIT") =>
        Right(PullRequestTimelineItemsItemType.PULL_REQUEST_COMMIT)
      case StringValue("PULL_REQUEST_COMMIT_COMMENT_THREAD") =>
        Right(
          PullRequestTimelineItemsItemType.PULL_REQUEST_COMMIT_COMMENT_THREAD
        )
      case StringValue("PULL_REQUEST_REVIEW") =>
        Right(PullRequestTimelineItemsItemType.PULL_REQUEST_REVIEW)
      case StringValue("PULL_REQUEST_REVIEW_THREAD") =>
        Right(PullRequestTimelineItemsItemType.PULL_REQUEST_REVIEW_THREAD)
      case StringValue("PULL_REQUEST_REVISION_MARKER") =>
        Right(PullRequestTimelineItemsItemType.PULL_REQUEST_REVISION_MARKER)
      case StringValue("READY_FOR_REVIEW_EVENT") =>
        Right(PullRequestTimelineItemsItemType.READY_FOR_REVIEW_EVENT)
      case StringValue("REFERENCED_EVENT") =>
        Right(PullRequestTimelineItemsItemType.REFERENCED_EVENT)
      case StringValue("REMOVED_FROM_PROJECT_EVENT") =>
        Right(PullRequestTimelineItemsItemType.REMOVED_FROM_PROJECT_EVENT)
      case StringValue("RENAMED_TITLE_EVENT") =>
        Right(PullRequestTimelineItemsItemType.RENAMED_TITLE_EVENT)
      case StringValue("REOPENED_EVENT") =>
        Right(PullRequestTimelineItemsItemType.REOPENED_EVENT)
      case StringValue("REVIEW_DISMISSED_EVENT") =>
        Right(PullRequestTimelineItemsItemType.REVIEW_DISMISSED_EVENT)
      case StringValue("REVIEW_REQUESTED_EVENT") =>
        Right(PullRequestTimelineItemsItemType.REVIEW_REQUESTED_EVENT)
      case StringValue("REVIEW_REQUEST_REMOVED_EVENT") =>
        Right(PullRequestTimelineItemsItemType.REVIEW_REQUEST_REMOVED_EVENT)
      case StringValue("SUBSCRIBED_EVENT") =>
        Right(PullRequestTimelineItemsItemType.SUBSCRIBED_EVENT)
      case StringValue("TRANSFERRED_EVENT") =>
        Right(PullRequestTimelineItemsItemType.TRANSFERRED_EVENT)
      case StringValue("UNASSIGNED_EVENT") =>
        Right(PullRequestTimelineItemsItemType.UNASSIGNED_EVENT)
      case StringValue("UNLABELED_EVENT") =>
        Right(PullRequestTimelineItemsItemType.UNLABELED_EVENT)
      case StringValue("UNLOCKED_EVENT") =>
        Right(PullRequestTimelineItemsItemType.UNLOCKED_EVENT)
      case StringValue("UNMARKED_AS_DUPLICATE_EVENT") =>
        Right(PullRequestTimelineItemsItemType.UNMARKED_AS_DUPLICATE_EVENT)
      case StringValue("UNPINNED_EVENT") =>
        Right(PullRequestTimelineItemsItemType.UNPINNED_EVENT)
      case StringValue("UNSUBSCRIBED_EVENT") =>
        Right(PullRequestTimelineItemsItemType.UNSUBSCRIBED_EVENT)
      case StringValue("USER_BLOCKED_EVENT") =>
        Right(PullRequestTimelineItemsItemType.USER_BLOCKED_EVENT)
      case other =>
        Left(
          DecodingError(
            s"Can't build PullRequestTimelineItemsItemType from input $other"
          )
        )
    }
    implicit val encoder: ArgEncoder[PullRequestTimelineItemsItemType] =
      new ArgEncoder[PullRequestTimelineItemsItemType] {
        override def encode(value: PullRequestTimelineItemsItemType): Value =
          value match {
            case PullRequestTimelineItemsItemType.ADDED_TO_PROJECT_EVENT =>
              EnumValue("ADDED_TO_PROJECT_EVENT")
            case PullRequestTimelineItemsItemType.ASSIGNED_EVENT =>
              EnumValue("ASSIGNED_EVENT")
            case PullRequestTimelineItemsItemType.AUTOMATIC_BASE_CHANGE_FAILED_EVENT =>
              EnumValue("AUTOMATIC_BASE_CHANGE_FAILED_EVENT")
            case PullRequestTimelineItemsItemType.AUTOMATIC_BASE_CHANGE_SUCCEEDED_EVENT =>
              EnumValue("AUTOMATIC_BASE_CHANGE_SUCCEEDED_EVENT")
            case PullRequestTimelineItemsItemType.BASE_REF_CHANGED_EVENT =>
              EnumValue("BASE_REF_CHANGED_EVENT")
            case PullRequestTimelineItemsItemType.BASE_REF_DELETED_EVENT =>
              EnumValue("BASE_REF_DELETED_EVENT")
            case PullRequestTimelineItemsItemType.BASE_REF_FORCE_PUSHED_EVENT =>
              EnumValue("BASE_REF_FORCE_PUSHED_EVENT")
            case PullRequestTimelineItemsItemType.CLOSED_EVENT =>
              EnumValue("CLOSED_EVENT")
            case PullRequestTimelineItemsItemType.COMMENT_DELETED_EVENT =>
              EnumValue("COMMENT_DELETED_EVENT")
            case PullRequestTimelineItemsItemType.CONNECTED_EVENT =>
              EnumValue("CONNECTED_EVENT")
            case PullRequestTimelineItemsItemType.CONVERTED_NOTE_TO_ISSUE_EVENT =>
              EnumValue("CONVERTED_NOTE_TO_ISSUE_EVENT")
            case PullRequestTimelineItemsItemType.CONVERT_TO_DRAFT_EVENT =>
              EnumValue("CONVERT_TO_DRAFT_EVENT")
            case PullRequestTimelineItemsItemType.CROSS_REFERENCED_EVENT =>
              EnumValue("CROSS_REFERENCED_EVENT")
            case PullRequestTimelineItemsItemType.DEMILESTONED_EVENT =>
              EnumValue("DEMILESTONED_EVENT")
            case PullRequestTimelineItemsItemType.DEPLOYED_EVENT =>
              EnumValue("DEPLOYED_EVENT")
            case PullRequestTimelineItemsItemType.DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT =>
              EnumValue("DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT")
            case PullRequestTimelineItemsItemType.DISCONNECTED_EVENT =>
              EnumValue("DISCONNECTED_EVENT")
            case PullRequestTimelineItemsItemType.HEAD_REF_DELETED_EVENT =>
              EnumValue("HEAD_REF_DELETED_EVENT")
            case PullRequestTimelineItemsItemType.HEAD_REF_FORCE_PUSHED_EVENT =>
              EnumValue("HEAD_REF_FORCE_PUSHED_EVENT")
            case PullRequestTimelineItemsItemType.HEAD_REF_RESTORED_EVENT =>
              EnumValue("HEAD_REF_RESTORED_EVENT")
            case PullRequestTimelineItemsItemType.ISSUE_COMMENT =>
              EnumValue("ISSUE_COMMENT")
            case PullRequestTimelineItemsItemType.LABELED_EVENT =>
              EnumValue("LABELED_EVENT")
            case PullRequestTimelineItemsItemType.LOCKED_EVENT =>
              EnumValue("LOCKED_EVENT")
            case PullRequestTimelineItemsItemType.MARKED_AS_DUPLICATE_EVENT =>
              EnumValue("MARKED_AS_DUPLICATE_EVENT")
            case PullRequestTimelineItemsItemType.MENTIONED_EVENT =>
              EnumValue("MENTIONED_EVENT")
            case PullRequestTimelineItemsItemType.MERGED_EVENT =>
              EnumValue("MERGED_EVENT")
            case PullRequestTimelineItemsItemType.MILESTONED_EVENT =>
              EnumValue("MILESTONED_EVENT")
            case PullRequestTimelineItemsItemType.MOVED_COLUMNS_IN_PROJECT_EVENT =>
              EnumValue("MOVED_COLUMNS_IN_PROJECT_EVENT")
            case PullRequestTimelineItemsItemType.PINNED_EVENT =>
              EnumValue("PINNED_EVENT")
            case PullRequestTimelineItemsItemType.PULL_REQUEST_COMMIT =>
              EnumValue("PULL_REQUEST_COMMIT")
            case PullRequestTimelineItemsItemType.PULL_REQUEST_COMMIT_COMMENT_THREAD =>
              EnumValue("PULL_REQUEST_COMMIT_COMMENT_THREAD")
            case PullRequestTimelineItemsItemType.PULL_REQUEST_REVIEW =>
              EnumValue("PULL_REQUEST_REVIEW")
            case PullRequestTimelineItemsItemType.PULL_REQUEST_REVIEW_THREAD =>
              EnumValue("PULL_REQUEST_REVIEW_THREAD")
            case PullRequestTimelineItemsItemType.PULL_REQUEST_REVISION_MARKER =>
              EnumValue("PULL_REQUEST_REVISION_MARKER")
            case PullRequestTimelineItemsItemType.READY_FOR_REVIEW_EVENT =>
              EnumValue("READY_FOR_REVIEW_EVENT")
            case PullRequestTimelineItemsItemType.REFERENCED_EVENT =>
              EnumValue("REFERENCED_EVENT")
            case PullRequestTimelineItemsItemType.REMOVED_FROM_PROJECT_EVENT =>
              EnumValue("REMOVED_FROM_PROJECT_EVENT")
            case PullRequestTimelineItemsItemType.RENAMED_TITLE_EVENT =>
              EnumValue("RENAMED_TITLE_EVENT")
            case PullRequestTimelineItemsItemType.REOPENED_EVENT =>
              EnumValue("REOPENED_EVENT")
            case PullRequestTimelineItemsItemType.REVIEW_DISMISSED_EVENT =>
              EnumValue("REVIEW_DISMISSED_EVENT")
            case PullRequestTimelineItemsItemType.REVIEW_REQUESTED_EVENT =>
              EnumValue("REVIEW_REQUESTED_EVENT")
            case PullRequestTimelineItemsItemType.REVIEW_REQUEST_REMOVED_EVENT =>
              EnumValue("REVIEW_REQUEST_REMOVED_EVENT")
            case PullRequestTimelineItemsItemType.SUBSCRIBED_EVENT =>
              EnumValue("SUBSCRIBED_EVENT")
            case PullRequestTimelineItemsItemType.TRANSFERRED_EVENT =>
              EnumValue("TRANSFERRED_EVENT")
            case PullRequestTimelineItemsItemType.UNASSIGNED_EVENT =>
              EnumValue("UNASSIGNED_EVENT")
            case PullRequestTimelineItemsItemType.UNLABELED_EVENT =>
              EnumValue("UNLABELED_EVENT")
            case PullRequestTimelineItemsItemType.UNLOCKED_EVENT =>
              EnumValue("UNLOCKED_EVENT")
            case PullRequestTimelineItemsItemType.UNMARKED_AS_DUPLICATE_EVENT =>
              EnumValue("UNMARKED_AS_DUPLICATE_EVENT")
            case PullRequestTimelineItemsItemType.UNPINNED_EVENT =>
              EnumValue("UNPINNED_EVENT")
            case PullRequestTimelineItemsItemType.UNSUBSCRIBED_EVENT =>
              EnumValue("UNSUBSCRIBED_EVENT")
            case PullRequestTimelineItemsItemType.USER_BLOCKED_EVENT =>
              EnumValue("USER_BLOCKED_EVENT")
          }

        override def typeName: String = "PullRequestTimelineItemsItemType"
      }
  }

  sealed trait PullRequestUpdateState
    extends scala.Product
      with scala.Serializable

  object PullRequestUpdateState {

    case object CLOSED extends PullRequestUpdateState

    case object OPEN extends PullRequestUpdateState

    implicit val decoder: ScalarDecoder[PullRequestUpdateState] = {
      case StringValue("CLOSED") => Right(PullRequestUpdateState.CLOSED)
      case StringValue("OPEN") => Right(PullRequestUpdateState.OPEN)
      case other =>
        Left(
          DecodingError(s"Can't build PullRequestUpdateState from input $other")
        )
    }
    implicit val encoder: ArgEncoder[PullRequestUpdateState] =
      new ArgEncoder[PullRequestUpdateState] {
        override def encode(value: PullRequestUpdateState): Value =
          value match {
            case PullRequestUpdateState.CLOSED => EnumValue("CLOSED")
            case PullRequestUpdateState.OPEN => EnumValue("OPEN")
          }

        override def typeName: String = "PullRequestUpdateState"
      }
  }

  sealed trait ReactionContent extends scala.Product with scala.Serializable

  object ReactionContent {

    case object CONFUSED extends ReactionContent

    case object EYES extends ReactionContent

    case object HEART extends ReactionContent

    case object HOORAY extends ReactionContent

    case object LAUGH extends ReactionContent

    case object ROCKET extends ReactionContent

    case object THUMBS_DOWN extends ReactionContent

    case object THUMBS_UP extends ReactionContent

    implicit val decoder: ScalarDecoder[ReactionContent] = {
      case StringValue("CONFUSED") => Right(ReactionContent.CONFUSED)
      case StringValue("EYES") => Right(ReactionContent.EYES)
      case StringValue("HEART") => Right(ReactionContent.HEART)
      case StringValue("HOORAY") => Right(ReactionContent.HOORAY)
      case StringValue("LAUGH") => Right(ReactionContent.LAUGH)
      case StringValue("ROCKET") => Right(ReactionContent.ROCKET)
      case StringValue("THUMBS_DOWN") => Right(ReactionContent.THUMBS_DOWN)
      case StringValue("THUMBS_UP") => Right(ReactionContent.THUMBS_UP)
      case other =>
        Left(DecodingError(s"Can't build ReactionContent from input $other"))
    }
    implicit val encoder: ArgEncoder[ReactionContent] =
      new ArgEncoder[ReactionContent] {
        override def encode(value: ReactionContent): Value = value match {
          case ReactionContent.CONFUSED => EnumValue("CONFUSED")
          case ReactionContent.EYES => EnumValue("EYES")
          case ReactionContent.HEART => EnumValue("HEART")
          case ReactionContent.HOORAY => EnumValue("HOORAY")
          case ReactionContent.LAUGH => EnumValue("LAUGH")
          case ReactionContent.ROCKET => EnumValue("ROCKET")
          case ReactionContent.THUMBS_DOWN => EnumValue("THUMBS_DOWN")
          case ReactionContent.THUMBS_UP => EnumValue("THUMBS_UP")
        }

        override def typeName: String = "ReactionContent"
      }
  }

  sealed trait ReactionOrderField extends scala.Product with scala.Serializable

  object ReactionOrderField {

    case object CREATED_AT extends ReactionOrderField

    implicit val decoder: ScalarDecoder[ReactionOrderField] = {
      case StringValue("CREATED_AT") => Right(ReactionOrderField.CREATED_AT)
      case other =>
        Left(DecodingError(s"Can't build ReactionOrderField from input $other"))
    }
    implicit val encoder: ArgEncoder[ReactionOrderField] =
      new ArgEncoder[ReactionOrderField] {
        override def encode(value: ReactionOrderField): Value = value match {
          case ReactionOrderField.CREATED_AT => EnumValue("CREATED_AT")
        }

        override def typeName: String = "ReactionOrderField"
      }
  }

  sealed trait RefOrderField extends scala.Product with scala.Serializable

  object RefOrderField {

    case object ALPHABETICAL extends RefOrderField

    case object TAG_COMMIT_DATE extends RefOrderField

    implicit val decoder: ScalarDecoder[RefOrderField] = {
      case StringValue("ALPHABETICAL") => Right(RefOrderField.ALPHABETICAL)
      case StringValue("TAG_COMMIT_DATE") =>
        Right(RefOrderField.TAG_COMMIT_DATE)
      case other =>
        Left(DecodingError(s"Can't build RefOrderField from input $other"))
    }
    implicit val encoder: ArgEncoder[RefOrderField] =
      new ArgEncoder[RefOrderField] {
        override def encode(value: RefOrderField): Value = value match {
          case RefOrderField.ALPHABETICAL => EnumValue("ALPHABETICAL")
          case RefOrderField.TAG_COMMIT_DATE => EnumValue("TAG_COMMIT_DATE")
        }

        override def typeName: String = "RefOrderField"
      }
  }

  sealed trait ReleaseOrderField extends scala.Product with scala.Serializable

  object ReleaseOrderField {

    case object CREATED_AT extends ReleaseOrderField

    case object NAME extends ReleaseOrderField

    implicit val decoder: ScalarDecoder[ReleaseOrderField] = {
      case StringValue("CREATED_AT") => Right(ReleaseOrderField.CREATED_AT)
      case StringValue("NAME") => Right(ReleaseOrderField.NAME)
      case other =>
        Left(DecodingError(s"Can't build ReleaseOrderField from input $other"))
    }
    implicit val encoder: ArgEncoder[ReleaseOrderField] =
      new ArgEncoder[ReleaseOrderField] {
        override def encode(value: ReleaseOrderField): Value = value match {
          case ReleaseOrderField.CREATED_AT => EnumValue("CREATED_AT")
          case ReleaseOrderField.NAME => EnumValue("NAME")
        }

        override def typeName: String = "ReleaseOrderField"
      }
  }

  sealed trait RepoAccessAuditEntryVisibility
    extends scala.Product
      with scala.Serializable

  object RepoAccessAuditEntryVisibility {

    case object INTERNAL extends RepoAccessAuditEntryVisibility

    case object PRIVATE extends RepoAccessAuditEntryVisibility

    case object PUBLIC extends RepoAccessAuditEntryVisibility

    implicit val decoder: ScalarDecoder[RepoAccessAuditEntryVisibility] = {
      case StringValue("INTERNAL") =>
        Right(RepoAccessAuditEntryVisibility.INTERNAL)
      case StringValue("PRIVATE") =>
        Right(RepoAccessAuditEntryVisibility.PRIVATE)
      case StringValue("PUBLIC") => Right(RepoAccessAuditEntryVisibility.PUBLIC)
      case other =>
        Left(
          DecodingError(
            s"Can't build RepoAccessAuditEntryVisibility from input $other"
          )
        )
    }
    implicit val encoder: ArgEncoder[RepoAccessAuditEntryVisibility] =
      new ArgEncoder[RepoAccessAuditEntryVisibility] {
        override def encode(value: RepoAccessAuditEntryVisibility): Value =
          value match {
            case RepoAccessAuditEntryVisibility.INTERNAL =>
              EnumValue("INTERNAL")
            case RepoAccessAuditEntryVisibility.PRIVATE => EnumValue("PRIVATE")
            case RepoAccessAuditEntryVisibility.PUBLIC => EnumValue("PUBLIC")
          }

        override def typeName: String = "RepoAccessAuditEntryVisibility"
      }
  }

  sealed trait RepoAddMemberAuditEntryVisibility
    extends scala.Product
      with scala.Serializable

  object RepoAddMemberAuditEntryVisibility {

    case object INTERNAL extends RepoAddMemberAuditEntryVisibility

    case object PRIVATE extends RepoAddMemberAuditEntryVisibility

    case object PUBLIC extends RepoAddMemberAuditEntryVisibility

    implicit val decoder: ScalarDecoder[RepoAddMemberAuditEntryVisibility] = {
      case StringValue("INTERNAL") =>
        Right(RepoAddMemberAuditEntryVisibility.INTERNAL)
      case StringValue("PRIVATE") =>
        Right(RepoAddMemberAuditEntryVisibility.PRIVATE)
      case StringValue("PUBLIC") =>
        Right(RepoAddMemberAuditEntryVisibility.PUBLIC)
      case other =>
        Left(
          DecodingError(
            s"Can't build RepoAddMemberAuditEntryVisibility from input $other"
          )
        )
    }
    implicit val encoder: ArgEncoder[RepoAddMemberAuditEntryVisibility] =
      new ArgEncoder[RepoAddMemberAuditEntryVisibility] {
        override def encode(value: RepoAddMemberAuditEntryVisibility): Value =
          value match {
            case RepoAddMemberAuditEntryVisibility.INTERNAL =>
              EnumValue("INTERNAL")
            case RepoAddMemberAuditEntryVisibility.PRIVATE =>
              EnumValue("PRIVATE")
            case RepoAddMemberAuditEntryVisibility.PUBLIC => EnumValue("PUBLIC")
          }

        override def typeName: String = "RepoAddMemberAuditEntryVisibility"
      }
  }

  sealed trait RepoArchivedAuditEntryVisibility
    extends scala.Product
      with scala.Serializable

  object RepoArchivedAuditEntryVisibility {

    case object INTERNAL extends RepoArchivedAuditEntryVisibility

    case object PRIVATE extends RepoArchivedAuditEntryVisibility

    case object PUBLIC extends RepoArchivedAuditEntryVisibility

    implicit val decoder: ScalarDecoder[RepoArchivedAuditEntryVisibility] = {
      case StringValue("INTERNAL") =>
        Right(RepoArchivedAuditEntryVisibility.INTERNAL)
      case StringValue("PRIVATE") =>
        Right(RepoArchivedAuditEntryVisibility.PRIVATE)
      case StringValue("PUBLIC") =>
        Right(RepoArchivedAuditEntryVisibility.PUBLIC)
      case other =>
        Left(
          DecodingError(
            s"Can't build RepoArchivedAuditEntryVisibility from input $other"
          )
        )
    }
    implicit val encoder: ArgEncoder[RepoArchivedAuditEntryVisibility] =
      new ArgEncoder[RepoArchivedAuditEntryVisibility] {
        override def encode(value: RepoArchivedAuditEntryVisibility): Value =
          value match {
            case RepoArchivedAuditEntryVisibility.INTERNAL =>
              EnumValue("INTERNAL")
            case RepoArchivedAuditEntryVisibility.PRIVATE =>
              EnumValue("PRIVATE")
            case RepoArchivedAuditEntryVisibility.PUBLIC => EnumValue("PUBLIC")
          }

        override def typeName: String = "RepoArchivedAuditEntryVisibility"
      }
  }

  sealed trait RepoChangeMergeSettingAuditEntryMergeType
    extends scala.Product
      with scala.Serializable

  object RepoChangeMergeSettingAuditEntryMergeType {

    case object MERGE extends RepoChangeMergeSettingAuditEntryMergeType

    case object REBASE extends RepoChangeMergeSettingAuditEntryMergeType

    case object SQUASH extends RepoChangeMergeSettingAuditEntryMergeType

    implicit val decoder
    : ScalarDecoder[RepoChangeMergeSettingAuditEntryMergeType] = {
      case StringValue("MERGE") =>
        Right(RepoChangeMergeSettingAuditEntryMergeType.MERGE)
      case StringValue("REBASE") =>
        Right(RepoChangeMergeSettingAuditEntryMergeType.REBASE)
      case StringValue("SQUASH") =>
        Right(RepoChangeMergeSettingAuditEntryMergeType.SQUASH)
      case other =>
        Left(
          DecodingError(
            s"Can't build RepoChangeMergeSettingAuditEntryMergeType from input $other"
          )
        )
    }
    implicit val encoder
    : ArgEncoder[RepoChangeMergeSettingAuditEntryMergeType] =
      new ArgEncoder[RepoChangeMergeSettingAuditEntryMergeType] {
        override def encode(
                             value: RepoChangeMergeSettingAuditEntryMergeType
                           ): Value = value match {
          case RepoChangeMergeSettingAuditEntryMergeType.MERGE =>
            EnumValue("MERGE")
          case RepoChangeMergeSettingAuditEntryMergeType.REBASE =>
            EnumValue("REBASE")
          case RepoChangeMergeSettingAuditEntryMergeType.SQUASH =>
            EnumValue("SQUASH")
        }

        override def typeName: String =
          "RepoChangeMergeSettingAuditEntryMergeType"
      }
  }

  sealed trait RepoCreateAuditEntryVisibility
    extends scala.Product
      with scala.Serializable

  object RepoCreateAuditEntryVisibility {

    case object INTERNAL extends RepoCreateAuditEntryVisibility

    case object PRIVATE extends RepoCreateAuditEntryVisibility

    case object PUBLIC extends RepoCreateAuditEntryVisibility

    implicit val decoder: ScalarDecoder[RepoCreateAuditEntryVisibility] = {
      case StringValue("INTERNAL") =>
        Right(RepoCreateAuditEntryVisibility.INTERNAL)
      case StringValue("PRIVATE") =>
        Right(RepoCreateAuditEntryVisibility.PRIVATE)
      case StringValue("PUBLIC") => Right(RepoCreateAuditEntryVisibility.PUBLIC)
      case other =>
        Left(
          DecodingError(
            s"Can't build RepoCreateAuditEntryVisibility from input $other"
          )
        )
    }
    implicit val encoder: ArgEncoder[RepoCreateAuditEntryVisibility] =
      new ArgEncoder[RepoCreateAuditEntryVisibility] {
        override def encode(value: RepoCreateAuditEntryVisibility): Value =
          value match {
            case RepoCreateAuditEntryVisibility.INTERNAL =>
              EnumValue("INTERNAL")
            case RepoCreateAuditEntryVisibility.PRIVATE => EnumValue("PRIVATE")
            case RepoCreateAuditEntryVisibility.PUBLIC => EnumValue("PUBLIC")
          }

        override def typeName: String = "RepoCreateAuditEntryVisibility"
      }
  }

  sealed trait RepoDestroyAuditEntryVisibility
    extends scala.Product
      with scala.Serializable

  object RepoDestroyAuditEntryVisibility {

    case object INTERNAL extends RepoDestroyAuditEntryVisibility

    case object PRIVATE extends RepoDestroyAuditEntryVisibility

    case object PUBLIC extends RepoDestroyAuditEntryVisibility

    implicit val decoder: ScalarDecoder[RepoDestroyAuditEntryVisibility] = {
      case StringValue("INTERNAL") =>
        Right(RepoDestroyAuditEntryVisibility.INTERNAL)
      case StringValue("PRIVATE") =>
        Right(RepoDestroyAuditEntryVisibility.PRIVATE)
      case StringValue("PUBLIC") =>
        Right(RepoDestroyAuditEntryVisibility.PUBLIC)
      case other =>
        Left(
          DecodingError(
            s"Can't build RepoDestroyAuditEntryVisibility from input $other"
          )
        )
    }
    implicit val encoder: ArgEncoder[RepoDestroyAuditEntryVisibility] =
      new ArgEncoder[RepoDestroyAuditEntryVisibility] {
        override def encode(value: RepoDestroyAuditEntryVisibility): Value =
          value match {
            case RepoDestroyAuditEntryVisibility.INTERNAL =>
              EnumValue("INTERNAL")
            case RepoDestroyAuditEntryVisibility.PRIVATE => EnumValue("PRIVATE")
            case RepoDestroyAuditEntryVisibility.PUBLIC => EnumValue("PUBLIC")
          }

        override def typeName: String = "RepoDestroyAuditEntryVisibility"
      }
  }

  sealed trait RepoRemoveMemberAuditEntryVisibility
    extends scala.Product
      with scala.Serializable

  object RepoRemoveMemberAuditEntryVisibility {

    case object INTERNAL extends RepoRemoveMemberAuditEntryVisibility

    case object PRIVATE extends RepoRemoveMemberAuditEntryVisibility

    case object PUBLIC extends RepoRemoveMemberAuditEntryVisibility

    implicit val decoder
    : ScalarDecoder[RepoRemoveMemberAuditEntryVisibility] = {
      case StringValue("INTERNAL") =>
        Right(RepoRemoveMemberAuditEntryVisibility.INTERNAL)
      case StringValue("PRIVATE") =>
        Right(RepoRemoveMemberAuditEntryVisibility.PRIVATE)
      case StringValue("PUBLIC") =>
        Right(RepoRemoveMemberAuditEntryVisibility.PUBLIC)
      case other =>
        Left(
          DecodingError(
            s"Can't build RepoRemoveMemberAuditEntryVisibility from input $other"
          )
        )
    }
    implicit val encoder: ArgEncoder[RepoRemoveMemberAuditEntryVisibility] =
      new ArgEncoder[RepoRemoveMemberAuditEntryVisibility] {
        override def encode(
                             value: RepoRemoveMemberAuditEntryVisibility
                           ): Value = value match {
          case RepoRemoveMemberAuditEntryVisibility.INTERNAL =>
            EnumValue("INTERNAL")
          case RepoRemoveMemberAuditEntryVisibility.PRIVATE =>
            EnumValue("PRIVATE")
          case RepoRemoveMemberAuditEntryVisibility.PUBLIC =>
            EnumValue("PUBLIC")
        }

        override def typeName: String = "RepoRemoveMemberAuditEntryVisibility"
      }
  }

  sealed trait ReportedContentClassifiers
    extends scala.Product
      with scala.Serializable

  object ReportedContentClassifiers {

    case object ABUSE extends ReportedContentClassifiers

    case object DUPLICATE extends ReportedContentClassifiers

    case object OFF_TOPIC extends ReportedContentClassifiers

    case object OUTDATED extends ReportedContentClassifiers

    case object RESOLVED extends ReportedContentClassifiers

    case object SPAM extends ReportedContentClassifiers

    implicit val decoder: ScalarDecoder[ReportedContentClassifiers] = {
      case StringValue("ABUSE") => Right(ReportedContentClassifiers.ABUSE)
      case StringValue("DUPLICATE") =>
        Right(ReportedContentClassifiers.DUPLICATE)
      case StringValue("OFF_TOPIC") =>
        Right(ReportedContentClassifiers.OFF_TOPIC)
      case StringValue("OUTDATED") => Right(ReportedContentClassifiers.OUTDATED)
      case StringValue("RESOLVED") => Right(ReportedContentClassifiers.RESOLVED)
      case StringValue("SPAM") => Right(ReportedContentClassifiers.SPAM)
      case other =>
        Left(
          DecodingError(
            s"Can't build ReportedContentClassifiers from input $other"
          )
        )
    }
    implicit val encoder: ArgEncoder[ReportedContentClassifiers] =
      new ArgEncoder[ReportedContentClassifiers] {
        override def encode(value: ReportedContentClassifiers): Value =
          value match {
            case ReportedContentClassifiers.ABUSE => EnumValue("ABUSE")
            case ReportedContentClassifiers.DUPLICATE => EnumValue("DUPLICATE")
            case ReportedContentClassifiers.OFF_TOPIC => EnumValue("OFF_TOPIC")
            case ReportedContentClassifiers.OUTDATED => EnumValue("OUTDATED")
            case ReportedContentClassifiers.RESOLVED => EnumValue("RESOLVED")
            case ReportedContentClassifiers.SPAM => EnumValue("SPAM")
          }

        override def typeName: String = "ReportedContentClassifiers"
      }
  }

  sealed trait RepositoryAffiliation
    extends scala.Product
      with scala.Serializable

  object RepositoryAffiliation {

    case object COLLABORATOR extends RepositoryAffiliation

    case object ORGANIZATION_MEMBER extends RepositoryAffiliation

    case object OWNER extends RepositoryAffiliation

    implicit val decoder: ScalarDecoder[RepositoryAffiliation] = {
      case StringValue("COLLABORATOR") =>
        Right(RepositoryAffiliation.COLLABORATOR)
      case StringValue("ORGANIZATION_MEMBER") =>
        Right(RepositoryAffiliation.ORGANIZATION_MEMBER)
      case StringValue("OWNER") => Right(RepositoryAffiliation.OWNER)
      case other =>
        Left(
          DecodingError(s"Can't build RepositoryAffiliation from input $other")
        )
    }
    implicit val encoder: ArgEncoder[RepositoryAffiliation] =
      new ArgEncoder[RepositoryAffiliation] {
        override def encode(value: RepositoryAffiliation): Value = value match {
          case RepositoryAffiliation.COLLABORATOR => EnumValue("COLLABORATOR")
          case RepositoryAffiliation.ORGANIZATION_MEMBER =>
            EnumValue("ORGANIZATION_MEMBER")
          case RepositoryAffiliation.OWNER => EnumValue("OWNER")
        }

        override def typeName: String = "RepositoryAffiliation"
      }
  }

  sealed trait RepositoryContributionType
    extends scala.Product
      with scala.Serializable

  object RepositoryContributionType {

    case object COMMIT extends RepositoryContributionType

    case object ISSUE extends RepositoryContributionType

    case object PULL_REQUEST extends RepositoryContributionType

    case object PULL_REQUEST_REVIEW extends RepositoryContributionType

    case object REPOSITORY extends RepositoryContributionType

    implicit val decoder: ScalarDecoder[RepositoryContributionType] = {
      case StringValue("COMMIT") => Right(RepositoryContributionType.COMMIT)
      case StringValue("ISSUE") => Right(RepositoryContributionType.ISSUE)
      case StringValue("PULL_REQUEST") =>
        Right(RepositoryContributionType.PULL_REQUEST)
      case StringValue("PULL_REQUEST_REVIEW") =>
        Right(RepositoryContributionType.PULL_REQUEST_REVIEW)
      case StringValue("REPOSITORY") =>
        Right(RepositoryContributionType.REPOSITORY)
      case other =>
        Left(
          DecodingError(
            s"Can't build RepositoryContributionType from input $other"
          )
        )
    }
    implicit val encoder: ArgEncoder[RepositoryContributionType] =
      new ArgEncoder[RepositoryContributionType] {
        override def encode(value: RepositoryContributionType): Value =
          value match {
            case RepositoryContributionType.COMMIT => EnumValue("COMMIT")
            case RepositoryContributionType.ISSUE => EnumValue("ISSUE")
            case RepositoryContributionType.PULL_REQUEST =>
              EnumValue("PULL_REQUEST")
            case RepositoryContributionType.PULL_REQUEST_REVIEW =>
              EnumValue("PULL_REQUEST_REVIEW")
            case RepositoryContributionType.REPOSITORY =>
              EnumValue("REPOSITORY")
          }

        override def typeName: String = "RepositoryContributionType"
      }
  }

  sealed trait RepositoryInvitationOrderField
    extends scala.Product
      with scala.Serializable

  object RepositoryInvitationOrderField {

    case object CREATED_AT extends RepositoryInvitationOrderField

    case object INVITEE_LOGIN extends RepositoryInvitationOrderField

    implicit val decoder: ScalarDecoder[RepositoryInvitationOrderField] = {
      case StringValue("CREATED_AT") =>
        Right(RepositoryInvitationOrderField.CREATED_AT)
      case StringValue("INVITEE_LOGIN") =>
        Right(RepositoryInvitationOrderField.INVITEE_LOGIN)
      case other =>
        Left(
          DecodingError(
            s"Can't build RepositoryInvitationOrderField from input $other"
          )
        )
    }
    implicit val encoder: ArgEncoder[RepositoryInvitationOrderField] =
      new ArgEncoder[RepositoryInvitationOrderField] {
        override def encode(value: RepositoryInvitationOrderField): Value =
          value match {
            case RepositoryInvitationOrderField.CREATED_AT =>
              EnumValue("CREATED_AT")
            case RepositoryInvitationOrderField.INVITEE_LOGIN =>
              EnumValue("INVITEE_LOGIN")
          }

        override def typeName: String = "RepositoryInvitationOrderField"
      }
  }

  sealed trait RepositoryLockReason
    extends scala.Product
      with scala.Serializable

  object RepositoryLockReason {

    case object BILLING extends RepositoryLockReason

    case object MIGRATING extends RepositoryLockReason

    case object MOVING extends RepositoryLockReason

    case object RENAME extends RepositoryLockReason

    implicit val decoder: ScalarDecoder[RepositoryLockReason] = {
      case StringValue("BILLING") => Right(RepositoryLockReason.BILLING)
      case StringValue("MIGRATING") => Right(RepositoryLockReason.MIGRATING)
      case StringValue("MOVING") => Right(RepositoryLockReason.MOVING)
      case StringValue("RENAME") => Right(RepositoryLockReason.RENAME)
      case other =>
        Left(
          DecodingError(s"Can't build RepositoryLockReason from input $other")
        )
    }
    implicit val encoder: ArgEncoder[RepositoryLockReason] =
      new ArgEncoder[RepositoryLockReason] {
        override def encode(value: RepositoryLockReason): Value = value match {
          case RepositoryLockReason.BILLING => EnumValue("BILLING")
          case RepositoryLockReason.MIGRATING => EnumValue("MIGRATING")
          case RepositoryLockReason.MOVING => EnumValue("MOVING")
          case RepositoryLockReason.RENAME => EnumValue("RENAME")
        }

        override def typeName: String = "RepositoryLockReason"
      }
  }

  sealed trait RepositoryOrderField
    extends scala.Product
      with scala.Serializable

  object RepositoryOrderField {

    case object CREATED_AT extends RepositoryOrderField

    case object NAME extends RepositoryOrderField

    case object PUSHED_AT extends RepositoryOrderField

    case object STARGAZERS extends RepositoryOrderField

    case object UPDATED_AT extends RepositoryOrderField

    implicit val decoder: ScalarDecoder[RepositoryOrderField] = {
      case StringValue("CREATED_AT") => Right(RepositoryOrderField.CREATED_AT)
      case StringValue("NAME") => Right(RepositoryOrderField.NAME)
      case StringValue("PUSHED_AT") => Right(RepositoryOrderField.PUSHED_AT)
      case StringValue("STARGAZERS") => Right(RepositoryOrderField.STARGAZERS)
      case StringValue("UPDATED_AT") => Right(RepositoryOrderField.UPDATED_AT)
      case other =>
        Left(
          DecodingError(s"Can't build RepositoryOrderField from input $other")
        )
    }
    implicit val encoder: ArgEncoder[RepositoryOrderField] =
      new ArgEncoder[RepositoryOrderField] {
        override def encode(value: RepositoryOrderField): Value = value match {
          case RepositoryOrderField.CREATED_AT => EnumValue("CREATED_AT")
          case RepositoryOrderField.NAME => EnumValue("NAME")
          case RepositoryOrderField.PUSHED_AT => EnumValue("PUSHED_AT")
          case RepositoryOrderField.STARGAZERS => EnumValue("STARGAZERS")
          case RepositoryOrderField.UPDATED_AT => EnumValue("UPDATED_AT")
        }

        override def typeName: String = "RepositoryOrderField"
      }
  }

  sealed trait RepositoryPermission
    extends scala.Product
      with scala.Serializable

  object RepositoryPermission {

    case object ADMIN extends RepositoryPermission

    case object MAINTAIN extends RepositoryPermission

    case object READ extends RepositoryPermission

    case object TRIAGE extends RepositoryPermission

    case object WRITE extends RepositoryPermission

    implicit val decoder: ScalarDecoder[RepositoryPermission] = {
      case StringValue("ADMIN") => Right(RepositoryPermission.ADMIN)
      case StringValue("MAINTAIN") => Right(RepositoryPermission.MAINTAIN)
      case StringValue("READ") => Right(RepositoryPermission.READ)
      case StringValue("TRIAGE") => Right(RepositoryPermission.TRIAGE)
      case StringValue("WRITE") => Right(RepositoryPermission.WRITE)
      case other =>
        Left(
          DecodingError(s"Can't build RepositoryPermission from input $other")
        )
    }
    implicit val encoder: ArgEncoder[RepositoryPermission] =
      new ArgEncoder[RepositoryPermission] {
        override def encode(value: RepositoryPermission): Value = value match {
          case RepositoryPermission.ADMIN => EnumValue("ADMIN")
          case RepositoryPermission.MAINTAIN => EnumValue("MAINTAIN")
          case RepositoryPermission.READ => EnumValue("READ")
          case RepositoryPermission.TRIAGE => EnumValue("TRIAGE")
          case RepositoryPermission.WRITE => EnumValue("WRITE")
        }

        override def typeName: String = "RepositoryPermission"
      }
  }

  sealed trait RepositoryPrivacy extends scala.Product with scala.Serializable

  object RepositoryPrivacy {

    case object PRIVATE extends RepositoryPrivacy

    case object PUBLIC extends RepositoryPrivacy

    implicit val decoder: ScalarDecoder[RepositoryPrivacy] = {
      case StringValue("PRIVATE") => Right(RepositoryPrivacy.PRIVATE)
      case StringValue("PUBLIC") => Right(RepositoryPrivacy.PUBLIC)
      case other =>
        Left(DecodingError(s"Can't build RepositoryPrivacy from input $other"))
    }
    implicit val encoder: ArgEncoder[RepositoryPrivacy] =
      new ArgEncoder[RepositoryPrivacy] {
        override def encode(value: RepositoryPrivacy): Value = value match {
          case RepositoryPrivacy.PRIVATE => EnumValue("PRIVATE")
          case RepositoryPrivacy.PUBLIC => EnumValue("PUBLIC")
        }

        override def typeName: String = "RepositoryPrivacy"
      }
  }

  sealed trait RepositoryVisibility
    extends scala.Product
      with scala.Serializable

  object RepositoryVisibility {

    case object INTERNAL extends RepositoryVisibility

    case object PRIVATE extends RepositoryVisibility

    case object PUBLIC extends RepositoryVisibility

    implicit val decoder: ScalarDecoder[RepositoryVisibility] = {
      case StringValue("INTERNAL") => Right(RepositoryVisibility.INTERNAL)
      case StringValue("PRIVATE") => Right(RepositoryVisibility.PRIVATE)
      case StringValue("PUBLIC") => Right(RepositoryVisibility.PUBLIC)
      case other =>
        Left(
          DecodingError(s"Can't build RepositoryVisibility from input $other")
        )
    }
    implicit val encoder: ArgEncoder[RepositoryVisibility] =
      new ArgEncoder[RepositoryVisibility] {
        override def encode(value: RepositoryVisibility): Value = value match {
          case RepositoryVisibility.INTERNAL => EnumValue("INTERNAL")
          case RepositoryVisibility.PRIVATE => EnumValue("PRIVATE")
          case RepositoryVisibility.PUBLIC => EnumValue("PUBLIC")
        }

        override def typeName: String = "RepositoryVisibility"
      }
  }

  sealed trait RequestableCheckStatusState
    extends scala.Product
      with scala.Serializable

  object RequestableCheckStatusState {

    case object COMPLETED extends RequestableCheckStatusState

    case object IN_PROGRESS extends RequestableCheckStatusState

    case object QUEUED extends RequestableCheckStatusState

    implicit val decoder: ScalarDecoder[RequestableCheckStatusState] = {
      case StringValue("COMPLETED") =>
        Right(RequestableCheckStatusState.COMPLETED)
      case StringValue("IN_PROGRESS") =>
        Right(RequestableCheckStatusState.IN_PROGRESS)
      case StringValue("QUEUED") => Right(RequestableCheckStatusState.QUEUED)
      case other =>
        Left(
          DecodingError(
            s"Can't build RequestableCheckStatusState from input $other"
          )
        )
    }
    implicit val encoder: ArgEncoder[RequestableCheckStatusState] =
      new ArgEncoder[RequestableCheckStatusState] {
        override def encode(value: RequestableCheckStatusState): Value =
          value match {
            case RequestableCheckStatusState.COMPLETED => EnumValue("COMPLETED")
            case RequestableCheckStatusState.IN_PROGRESS =>
              EnumValue("IN_PROGRESS")
            case RequestableCheckStatusState.QUEUED => EnumValue("QUEUED")
          }

        override def typeName: String = "RequestableCheckStatusState"
      }
  }

  sealed trait SamlDigestAlgorithm extends scala.Product with scala.Serializable

  object SamlDigestAlgorithm {

    case object SHA1 extends SamlDigestAlgorithm

    case object SHA256 extends SamlDigestAlgorithm

    case object SHA384 extends SamlDigestAlgorithm

    case object SHA512 extends SamlDigestAlgorithm

    implicit val decoder: ScalarDecoder[SamlDigestAlgorithm] = {
      case StringValue("SHA1") => Right(SamlDigestAlgorithm.SHA1)
      case StringValue("SHA256") => Right(SamlDigestAlgorithm.SHA256)
      case StringValue("SHA384") => Right(SamlDigestAlgorithm.SHA384)
      case StringValue("SHA512") => Right(SamlDigestAlgorithm.SHA512)
      case other =>
        Left(
          DecodingError(s"Can't build SamlDigestAlgorithm from input $other")
        )
    }
    implicit val encoder: ArgEncoder[SamlDigestAlgorithm] =
      new ArgEncoder[SamlDigestAlgorithm] {
        override def encode(value: SamlDigestAlgorithm): Value = value match {
          case SamlDigestAlgorithm.SHA1 => EnumValue("SHA1")
          case SamlDigestAlgorithm.SHA256 => EnumValue("SHA256")
          case SamlDigestAlgorithm.SHA384 => EnumValue("SHA384")
          case SamlDigestAlgorithm.SHA512 => EnumValue("SHA512")
        }

        override def typeName: String = "SamlDigestAlgorithm"
      }
  }

  sealed trait SamlSignatureAlgorithm
    extends scala.Product
      with scala.Serializable

  object SamlSignatureAlgorithm {

    case object RSA_SHA1 extends SamlSignatureAlgorithm

    case object RSA_SHA256 extends SamlSignatureAlgorithm

    case object RSA_SHA384 extends SamlSignatureAlgorithm

    case object RSA_SHA512 extends SamlSignatureAlgorithm

    implicit val decoder: ScalarDecoder[SamlSignatureAlgorithm] = {
      case StringValue("RSA_SHA1") => Right(SamlSignatureAlgorithm.RSA_SHA1)
      case StringValue("RSA_SHA256") => Right(SamlSignatureAlgorithm.RSA_SHA256)
      case StringValue("RSA_SHA384") => Right(SamlSignatureAlgorithm.RSA_SHA384)
      case StringValue("RSA_SHA512") => Right(SamlSignatureAlgorithm.RSA_SHA512)
      case other =>
        Left(
          DecodingError(s"Can't build SamlSignatureAlgorithm from input $other")
        )
    }
    implicit val encoder: ArgEncoder[SamlSignatureAlgorithm] =
      new ArgEncoder[SamlSignatureAlgorithm] {
        override def encode(value: SamlSignatureAlgorithm): Value =
          value match {
            case SamlSignatureAlgorithm.RSA_SHA1 => EnumValue("RSA_SHA1")
            case SamlSignatureAlgorithm.RSA_SHA256 => EnumValue("RSA_SHA256")
            case SamlSignatureAlgorithm.RSA_SHA384 => EnumValue("RSA_SHA384")
            case SamlSignatureAlgorithm.RSA_SHA512 => EnumValue("RSA_SHA512")
          }

        override def typeName: String = "SamlSignatureAlgorithm"
      }
  }

  sealed trait SavedReplyOrderField
    extends scala.Product
      with scala.Serializable

  object SavedReplyOrderField {

    case object UPDATED_AT extends SavedReplyOrderField

    implicit val decoder: ScalarDecoder[SavedReplyOrderField] = {
      case StringValue("UPDATED_AT") => Right(SavedReplyOrderField.UPDATED_AT)
      case other =>
        Left(
          DecodingError(s"Can't build SavedReplyOrderField from input $other")
        )
    }
    implicit val encoder: ArgEncoder[SavedReplyOrderField] =
      new ArgEncoder[SavedReplyOrderField] {
        override def encode(value: SavedReplyOrderField): Value = value match {
          case SavedReplyOrderField.UPDATED_AT => EnumValue("UPDATED_AT")
        }

        override def typeName: String = "SavedReplyOrderField"
      }
  }

  sealed trait SearchType extends scala.Product with scala.Serializable

  object SearchType {

    case object ISSUE extends SearchType

    case object REPOSITORY extends SearchType

    case object USER extends SearchType

    implicit val decoder: ScalarDecoder[SearchType] = {
      case StringValue("ISSUE") => Right(SearchType.ISSUE)
      case StringValue("REPOSITORY") => Right(SearchType.REPOSITORY)
      case StringValue("USER") => Right(SearchType.USER)
      case other =>
        Left(DecodingError(s"Can't build SearchType from input $other"))
    }
    implicit val encoder: ArgEncoder[SearchType] = new ArgEncoder[SearchType] {
      override def encode(value: SearchType): Value = value match {
        case SearchType.ISSUE => EnumValue("ISSUE")
        case SearchType.REPOSITORY => EnumValue("REPOSITORY")
        case SearchType.USER => EnumValue("USER")
      }

      override def typeName: String = "SearchType"
    }
  }

  sealed trait SecurityAdvisoryEcosystem
    extends scala.Product
      with scala.Serializable

  object SecurityAdvisoryEcosystem {

    case object COMPOSER extends SecurityAdvisoryEcosystem

    case object MAVEN extends SecurityAdvisoryEcosystem

    case object NPM extends SecurityAdvisoryEcosystem

    case object NUGET extends SecurityAdvisoryEcosystem

    case object PIP extends SecurityAdvisoryEcosystem

    case object RUBYGEMS extends SecurityAdvisoryEcosystem

    implicit val decoder: ScalarDecoder[SecurityAdvisoryEcosystem] = {
      case StringValue("COMPOSER") => Right(SecurityAdvisoryEcosystem.COMPOSER)
      case StringValue("MAVEN") => Right(SecurityAdvisoryEcosystem.MAVEN)
      case StringValue("NPM") => Right(SecurityAdvisoryEcosystem.NPM)
      case StringValue("NUGET") => Right(SecurityAdvisoryEcosystem.NUGET)
      case StringValue("PIP") => Right(SecurityAdvisoryEcosystem.PIP)
      case StringValue("RUBYGEMS") => Right(SecurityAdvisoryEcosystem.RUBYGEMS)
      case other =>
        Left(
          DecodingError(
            s"Can't build SecurityAdvisoryEcosystem from input $other"
          )
        )
    }
    implicit val encoder: ArgEncoder[SecurityAdvisoryEcosystem] =
      new ArgEncoder[SecurityAdvisoryEcosystem] {
        override def encode(value: SecurityAdvisoryEcosystem): Value =
          value match {
            case SecurityAdvisoryEcosystem.COMPOSER => EnumValue("COMPOSER")
            case SecurityAdvisoryEcosystem.MAVEN => EnumValue("MAVEN")
            case SecurityAdvisoryEcosystem.NPM => EnumValue("NPM")
            case SecurityAdvisoryEcosystem.NUGET => EnumValue("NUGET")
            case SecurityAdvisoryEcosystem.PIP => EnumValue("PIP")
            case SecurityAdvisoryEcosystem.RUBYGEMS => EnumValue("RUBYGEMS")
          }

        override def typeName: String = "SecurityAdvisoryEcosystem"
      }
  }

  sealed trait SecurityAdvisoryIdentifierType
    extends scala.Product
      with scala.Serializable

  object SecurityAdvisoryIdentifierType {

    case object CVE extends SecurityAdvisoryIdentifierType

    case object GHSA extends SecurityAdvisoryIdentifierType

    implicit val decoder: ScalarDecoder[SecurityAdvisoryIdentifierType] = {
      case StringValue("CVE") => Right(SecurityAdvisoryIdentifierType.CVE)
      case StringValue("GHSA") => Right(SecurityAdvisoryIdentifierType.GHSA)
      case other =>
        Left(
          DecodingError(
            s"Can't build SecurityAdvisoryIdentifierType from input $other"
          )
        )
    }
    implicit val encoder: ArgEncoder[SecurityAdvisoryIdentifierType] =
      new ArgEncoder[SecurityAdvisoryIdentifierType] {
        override def encode(value: SecurityAdvisoryIdentifierType): Value =
          value match {
            case SecurityAdvisoryIdentifierType.CVE => EnumValue("CVE")
            case SecurityAdvisoryIdentifierType.GHSA => EnumValue("GHSA")
          }

        override def typeName: String = "SecurityAdvisoryIdentifierType"
      }
  }

  sealed trait SecurityAdvisoryOrderField
    extends scala.Product
      with scala.Serializable

  object SecurityAdvisoryOrderField {

    case object PUBLISHED_AT extends SecurityAdvisoryOrderField

    case object UPDATED_AT extends SecurityAdvisoryOrderField

    implicit val decoder: ScalarDecoder[SecurityAdvisoryOrderField] = {
      case StringValue("PUBLISHED_AT") =>
        Right(SecurityAdvisoryOrderField.PUBLISHED_AT)
      case StringValue("UPDATED_AT") =>
        Right(SecurityAdvisoryOrderField.UPDATED_AT)
      case other =>
        Left(
          DecodingError(
            s"Can't build SecurityAdvisoryOrderField from input $other"
          )
        )
    }
    implicit val encoder: ArgEncoder[SecurityAdvisoryOrderField] =
      new ArgEncoder[SecurityAdvisoryOrderField] {
        override def encode(value: SecurityAdvisoryOrderField): Value =
          value match {
            case SecurityAdvisoryOrderField.PUBLISHED_AT =>
              EnumValue("PUBLISHED_AT")
            case SecurityAdvisoryOrderField.UPDATED_AT =>
              EnumValue("UPDATED_AT")
          }

        override def typeName: String = "SecurityAdvisoryOrderField"
      }
  }

  sealed trait SecurityAdvisorySeverity
    extends scala.Product
      with scala.Serializable

  object SecurityAdvisorySeverity {

    case object CRITICAL extends SecurityAdvisorySeverity

    case object HIGH extends SecurityAdvisorySeverity

    case object LOW extends SecurityAdvisorySeverity

    case object MODERATE extends SecurityAdvisorySeverity

    implicit val decoder: ScalarDecoder[SecurityAdvisorySeverity] = {
      case StringValue("CRITICAL") => Right(SecurityAdvisorySeverity.CRITICAL)
      case StringValue("HIGH") => Right(SecurityAdvisorySeverity.HIGH)
      case StringValue("LOW") => Right(SecurityAdvisorySeverity.LOW)
      case StringValue("MODERATE") => Right(SecurityAdvisorySeverity.MODERATE)
      case other =>
        Left(
          DecodingError(
            s"Can't build SecurityAdvisorySeverity from input $other"
          )
        )
    }
    implicit val encoder: ArgEncoder[SecurityAdvisorySeverity] =
      new ArgEncoder[SecurityAdvisorySeverity] {
        override def encode(value: SecurityAdvisorySeverity): Value =
          value match {
            case SecurityAdvisorySeverity.CRITICAL => EnumValue("CRITICAL")
            case SecurityAdvisorySeverity.HIGH => EnumValue("HIGH")
            case SecurityAdvisorySeverity.LOW => EnumValue("LOW")
            case SecurityAdvisorySeverity.MODERATE => EnumValue("MODERATE")
          }

        override def typeName: String = "SecurityAdvisorySeverity"
      }
  }

  sealed trait SecurityVulnerabilityOrderField
    extends scala.Product
      with scala.Serializable

  object SecurityVulnerabilityOrderField {

    case object UPDATED_AT extends SecurityVulnerabilityOrderField

    implicit val decoder: ScalarDecoder[SecurityVulnerabilityOrderField] = {
      case StringValue("UPDATED_AT") =>
        Right(SecurityVulnerabilityOrderField.UPDATED_AT)
      case other =>
        Left(
          DecodingError(
            s"Can't build SecurityVulnerabilityOrderField from input $other"
          )
        )
    }
    implicit val encoder: ArgEncoder[SecurityVulnerabilityOrderField] =
      new ArgEncoder[SecurityVulnerabilityOrderField] {
        override def encode(value: SecurityVulnerabilityOrderField): Value =
          value match {
            case SecurityVulnerabilityOrderField.UPDATED_AT =>
              EnumValue("UPDATED_AT")
          }

        override def typeName: String = "SecurityVulnerabilityOrderField"
      }
  }

  sealed trait SponsorsTierOrderField
    extends scala.Product
      with scala.Serializable

  object SponsorsTierOrderField {

    case object CREATED_AT extends SponsorsTierOrderField

    case object MONTHLY_PRICE_IN_CENTS extends SponsorsTierOrderField

    implicit val decoder: ScalarDecoder[SponsorsTierOrderField] = {
      case StringValue("CREATED_AT") => Right(SponsorsTierOrderField.CREATED_AT)
      case StringValue("MONTHLY_PRICE_IN_CENTS") =>
        Right(SponsorsTierOrderField.MONTHLY_PRICE_IN_CENTS)
      case other =>
        Left(
          DecodingError(s"Can't build SponsorsTierOrderField from input $other")
        )
    }
    implicit val encoder: ArgEncoder[SponsorsTierOrderField] =
      new ArgEncoder[SponsorsTierOrderField] {
        override def encode(value: SponsorsTierOrderField): Value =
          value match {
            case SponsorsTierOrderField.CREATED_AT => EnumValue("CREATED_AT")
            case SponsorsTierOrderField.MONTHLY_PRICE_IN_CENTS =>
              EnumValue("MONTHLY_PRICE_IN_CENTS")
          }

        override def typeName: String = "SponsorsTierOrderField"
      }
  }

  sealed trait SponsorshipOrderField
    extends scala.Product
      with scala.Serializable

  object SponsorshipOrderField {

    case object CREATED_AT extends SponsorshipOrderField

    implicit val decoder: ScalarDecoder[SponsorshipOrderField] = {
      case StringValue("CREATED_AT") => Right(SponsorshipOrderField.CREATED_AT)
      case other =>
        Left(
          DecodingError(s"Can't build SponsorshipOrderField from input $other")
        )
    }
    implicit val encoder: ArgEncoder[SponsorshipOrderField] =
      new ArgEncoder[SponsorshipOrderField] {
        override def encode(value: SponsorshipOrderField): Value = value match {
          case SponsorshipOrderField.CREATED_AT => EnumValue("CREATED_AT")
        }

        override def typeName: String = "SponsorshipOrderField"
      }
  }

  sealed trait SponsorshipPrivacy extends scala.Product with scala.Serializable

  object SponsorshipPrivacy {

    case object PRIVATE extends SponsorshipPrivacy

    case object PUBLIC extends SponsorshipPrivacy

    implicit val decoder: ScalarDecoder[SponsorshipPrivacy] = {
      case StringValue("PRIVATE") => Right(SponsorshipPrivacy.PRIVATE)
      case StringValue("PUBLIC") => Right(SponsorshipPrivacy.PUBLIC)
      case other =>
        Left(DecodingError(s"Can't build SponsorshipPrivacy from input $other"))
    }
    implicit val encoder: ArgEncoder[SponsorshipPrivacy] =
      new ArgEncoder[SponsorshipPrivacy] {
        override def encode(value: SponsorshipPrivacy): Value = value match {
          case SponsorshipPrivacy.PRIVATE => EnumValue("PRIVATE")
          case SponsorshipPrivacy.PUBLIC => EnumValue("PUBLIC")
        }

        override def typeName: String = "SponsorshipPrivacy"
      }
  }

  sealed trait StarOrderField extends scala.Product with scala.Serializable

  object StarOrderField {

    case object STARRED_AT extends StarOrderField

    implicit val decoder: ScalarDecoder[StarOrderField] = {
      case StringValue("STARRED_AT") => Right(StarOrderField.STARRED_AT)
      case other =>
        Left(DecodingError(s"Can't build StarOrderField from input $other"))
    }
    implicit val encoder: ArgEncoder[StarOrderField] =
      new ArgEncoder[StarOrderField] {
        override def encode(value: StarOrderField): Value = value match {
          case StarOrderField.STARRED_AT => EnumValue("STARRED_AT")
        }

        override def typeName: String = "StarOrderField"
      }
  }

  sealed trait StatusState extends scala.Product with scala.Serializable

  object StatusState {

    case object ERROR extends StatusState

    case object EXPECTED extends StatusState

    case object FAILURE extends StatusState

    case object PENDING extends StatusState

    case object SUCCESS extends StatusState

    implicit val decoder: ScalarDecoder[StatusState] = {
      case StringValue("ERROR") => Right(StatusState.ERROR)
      case StringValue("EXPECTED") => Right(StatusState.EXPECTED)
      case StringValue("FAILURE") => Right(StatusState.FAILURE)
      case StringValue("PENDING") => Right(StatusState.PENDING)
      case StringValue("SUCCESS") => Right(StatusState.SUCCESS)
      case other =>
        Left(DecodingError(s"Can't build StatusState from input $other"))
    }
    implicit val encoder: ArgEncoder[StatusState] =
      new ArgEncoder[StatusState] {
        override def encode(value: StatusState): Value = value match {
          case StatusState.ERROR => EnumValue("ERROR")
          case StatusState.EXPECTED => EnumValue("EXPECTED")
          case StatusState.FAILURE => EnumValue("FAILURE")
          case StatusState.PENDING => EnumValue("PENDING")
          case StatusState.SUCCESS => EnumValue("SUCCESS")
        }

        override def typeName: String = "StatusState"
      }
  }

  sealed trait SubscriptionState extends scala.Product with scala.Serializable

  object SubscriptionState {

    case object IGNORED extends SubscriptionState

    case object SUBSCRIBED extends SubscriptionState

    case object UNSUBSCRIBED extends SubscriptionState

    implicit val decoder: ScalarDecoder[SubscriptionState] = {
      case StringValue("IGNORED") => Right(SubscriptionState.IGNORED)
      case StringValue("SUBSCRIBED") => Right(SubscriptionState.SUBSCRIBED)
      case StringValue("UNSUBSCRIBED") => Right(SubscriptionState.UNSUBSCRIBED)
      case other =>
        Left(DecodingError(s"Can't build SubscriptionState from input $other"))
    }
    implicit val encoder: ArgEncoder[SubscriptionState] =
      new ArgEncoder[SubscriptionState] {
        override def encode(value: SubscriptionState): Value = value match {
          case SubscriptionState.IGNORED => EnumValue("IGNORED")
          case SubscriptionState.SUBSCRIBED => EnumValue("SUBSCRIBED")
          case SubscriptionState.UNSUBSCRIBED => EnumValue("UNSUBSCRIBED")
        }

        override def typeName: String = "SubscriptionState"
      }
  }

  sealed trait TeamDiscussionCommentOrderField
    extends scala.Product
      with scala.Serializable

  object TeamDiscussionCommentOrderField {

    case object NUMBER extends TeamDiscussionCommentOrderField

    implicit val decoder: ScalarDecoder[TeamDiscussionCommentOrderField] = {
      case StringValue("NUMBER") =>
        Right(TeamDiscussionCommentOrderField.NUMBER)
      case other =>
        Left(
          DecodingError(
            s"Can't build TeamDiscussionCommentOrderField from input $other"
          )
        )
    }
    implicit val encoder: ArgEncoder[TeamDiscussionCommentOrderField] =
      new ArgEncoder[TeamDiscussionCommentOrderField] {
        override def encode(value: TeamDiscussionCommentOrderField): Value =
          value match {
            case TeamDiscussionCommentOrderField.NUMBER => EnumValue("NUMBER")
          }

        override def typeName: String = "TeamDiscussionCommentOrderField"
      }
  }

  sealed trait TeamDiscussionOrderField
    extends scala.Product
      with scala.Serializable

  object TeamDiscussionOrderField {

    case object CREATED_AT extends TeamDiscussionOrderField

    implicit val decoder: ScalarDecoder[TeamDiscussionOrderField] = {
      case StringValue("CREATED_AT") =>
        Right(TeamDiscussionOrderField.CREATED_AT)
      case other =>
        Left(
          DecodingError(
            s"Can't build TeamDiscussionOrderField from input $other"
          )
        )
    }
    implicit val encoder: ArgEncoder[TeamDiscussionOrderField] =
      new ArgEncoder[TeamDiscussionOrderField] {
        override def encode(value: TeamDiscussionOrderField): Value =
          value match {
            case TeamDiscussionOrderField.CREATED_AT => EnumValue("CREATED_AT")
          }

        override def typeName: String = "TeamDiscussionOrderField"
      }
  }

  sealed trait TeamMemberOrderField
    extends scala.Product
      with scala.Serializable

  object TeamMemberOrderField {

    case object CREATED_AT extends TeamMemberOrderField

    case object LOGIN extends TeamMemberOrderField

    implicit val decoder: ScalarDecoder[TeamMemberOrderField] = {
      case StringValue("CREATED_AT") => Right(TeamMemberOrderField.CREATED_AT)
      case StringValue("LOGIN") => Right(TeamMemberOrderField.LOGIN)
      case other =>
        Left(
          DecodingError(s"Can't build TeamMemberOrderField from input $other")
        )
    }
    implicit val encoder: ArgEncoder[TeamMemberOrderField] =
      new ArgEncoder[TeamMemberOrderField] {
        override def encode(value: TeamMemberOrderField): Value = value match {
          case TeamMemberOrderField.CREATED_AT => EnumValue("CREATED_AT")
          case TeamMemberOrderField.LOGIN => EnumValue("LOGIN")
        }

        override def typeName: String = "TeamMemberOrderField"
      }
  }

  sealed trait TeamMemberRole extends scala.Product with scala.Serializable

  object TeamMemberRole {

    case object MAINTAINER extends TeamMemberRole

    case object MEMBER extends TeamMemberRole

    implicit val decoder: ScalarDecoder[TeamMemberRole] = {
      case StringValue("MAINTAINER") => Right(TeamMemberRole.MAINTAINER)
      case StringValue("MEMBER") => Right(TeamMemberRole.MEMBER)
      case other =>
        Left(DecodingError(s"Can't build TeamMemberRole from input $other"))
    }
    implicit val encoder: ArgEncoder[TeamMemberRole] =
      new ArgEncoder[TeamMemberRole] {
        override def encode(value: TeamMemberRole): Value = value match {
          case TeamMemberRole.MAINTAINER => EnumValue("MAINTAINER")
          case TeamMemberRole.MEMBER => EnumValue("MEMBER")
        }

        override def typeName: String = "TeamMemberRole"
      }
  }

  sealed trait TeamMembershipType extends scala.Product with scala.Serializable

  object TeamMembershipType {

    case object ALL extends TeamMembershipType

    case object CHILD_TEAM extends TeamMembershipType

    case object IMMEDIATE extends TeamMembershipType

    implicit val decoder: ScalarDecoder[TeamMembershipType] = {
      case StringValue("ALL") => Right(TeamMembershipType.ALL)
      case StringValue("CHILD_TEAM") => Right(TeamMembershipType.CHILD_TEAM)
      case StringValue("IMMEDIATE") => Right(TeamMembershipType.IMMEDIATE)
      case other =>
        Left(DecodingError(s"Can't build TeamMembershipType from input $other"))
    }
    implicit val encoder: ArgEncoder[TeamMembershipType] =
      new ArgEncoder[TeamMembershipType] {
        override def encode(value: TeamMembershipType): Value = value match {
          case TeamMembershipType.ALL => EnumValue("ALL")
          case TeamMembershipType.CHILD_TEAM => EnumValue("CHILD_TEAM")
          case TeamMembershipType.IMMEDIATE => EnumValue("IMMEDIATE")
        }

        override def typeName: String = "TeamMembershipType"
      }
  }

  sealed trait TeamOrderField extends scala.Product with scala.Serializable

  object TeamOrderField {

    case object NAME extends TeamOrderField

    implicit val decoder: ScalarDecoder[TeamOrderField] = {
      case StringValue("NAME") => Right(TeamOrderField.NAME)
      case other =>
        Left(DecodingError(s"Can't build TeamOrderField from input $other"))
    }
    implicit val encoder: ArgEncoder[TeamOrderField] =
      new ArgEncoder[TeamOrderField] {
        override def encode(value: TeamOrderField): Value = value match {
          case TeamOrderField.NAME => EnumValue("NAME")
        }

        override def typeName: String = "TeamOrderField"
      }
  }

  sealed trait TeamPrivacy extends scala.Product with scala.Serializable

  object TeamPrivacy {

    case object SECRET extends TeamPrivacy

    case object VISIBLE extends TeamPrivacy

    implicit val decoder: ScalarDecoder[TeamPrivacy] = {
      case StringValue("SECRET") => Right(TeamPrivacy.SECRET)
      case StringValue("VISIBLE") => Right(TeamPrivacy.VISIBLE)
      case other =>
        Left(DecodingError(s"Can't build TeamPrivacy from input $other"))
    }
    implicit val encoder: ArgEncoder[TeamPrivacy] =
      new ArgEncoder[TeamPrivacy] {
        override def encode(value: TeamPrivacy): Value = value match {
          case TeamPrivacy.SECRET => EnumValue("SECRET")
          case TeamPrivacy.VISIBLE => EnumValue("VISIBLE")
        }

        override def typeName: String = "TeamPrivacy"
      }
  }

  sealed trait TeamRepositoryOrderField
    extends scala.Product
      with scala.Serializable

  object TeamRepositoryOrderField {

    case object CREATED_AT extends TeamRepositoryOrderField

    case object NAME extends TeamRepositoryOrderField

    case object PERMISSION extends TeamRepositoryOrderField

    case object PUSHED_AT extends TeamRepositoryOrderField

    case object STARGAZERS extends TeamRepositoryOrderField

    case object UPDATED_AT extends TeamRepositoryOrderField

    implicit val decoder: ScalarDecoder[TeamRepositoryOrderField] = {
      case StringValue("CREATED_AT") =>
        Right(TeamRepositoryOrderField.CREATED_AT)
      case StringValue("NAME") => Right(TeamRepositoryOrderField.NAME)
      case StringValue("PERMISSION") =>
        Right(TeamRepositoryOrderField.PERMISSION)
      case StringValue("PUSHED_AT") => Right(TeamRepositoryOrderField.PUSHED_AT)
      case StringValue("STARGAZERS") =>
        Right(TeamRepositoryOrderField.STARGAZERS)
      case StringValue("UPDATED_AT") =>
        Right(TeamRepositoryOrderField.UPDATED_AT)
      case other =>
        Left(
          DecodingError(
            s"Can't build TeamRepositoryOrderField from input $other"
          )
        )
    }
    implicit val encoder: ArgEncoder[TeamRepositoryOrderField] =
      new ArgEncoder[TeamRepositoryOrderField] {
        override def encode(value: TeamRepositoryOrderField): Value =
          value match {
            case TeamRepositoryOrderField.CREATED_AT => EnumValue("CREATED_AT")
            case TeamRepositoryOrderField.NAME => EnumValue("NAME")
            case TeamRepositoryOrderField.PERMISSION => EnumValue("PERMISSION")
            case TeamRepositoryOrderField.PUSHED_AT => EnumValue("PUSHED_AT")
            case TeamRepositoryOrderField.STARGAZERS => EnumValue("STARGAZERS")
            case TeamRepositoryOrderField.UPDATED_AT => EnumValue("UPDATED_AT")
          }

        override def typeName: String = "TeamRepositoryOrderField"
      }
  }

  sealed trait TeamReviewAssignmentAlgorithm
    extends scala.Product
      with scala.Serializable

  object TeamReviewAssignmentAlgorithm {

    case object LOAD_BALANCE extends TeamReviewAssignmentAlgorithm

    case object ROUND_ROBIN extends TeamReviewAssignmentAlgorithm

    implicit val decoder: ScalarDecoder[TeamReviewAssignmentAlgorithm] = {
      case StringValue("LOAD_BALANCE") =>
        Right(TeamReviewAssignmentAlgorithm.LOAD_BALANCE)
      case StringValue("ROUND_ROBIN") =>
        Right(TeamReviewAssignmentAlgorithm.ROUND_ROBIN)
      case other =>
        Left(
          DecodingError(
            s"Can't build TeamReviewAssignmentAlgorithm from input $other"
          )
        )
    }
    implicit val encoder: ArgEncoder[TeamReviewAssignmentAlgorithm] =
      new ArgEncoder[TeamReviewAssignmentAlgorithm] {
        override def encode(value: TeamReviewAssignmentAlgorithm): Value =
          value match {
            case TeamReviewAssignmentAlgorithm.LOAD_BALANCE =>
              EnumValue("LOAD_BALANCE")
            case TeamReviewAssignmentAlgorithm.ROUND_ROBIN =>
              EnumValue("ROUND_ROBIN")
          }

        override def typeName: String = "TeamReviewAssignmentAlgorithm"
      }
  }

  sealed trait TeamRole extends scala.Product with scala.Serializable

  object TeamRole {

    case object ADMIN extends TeamRole

    case object MEMBER extends TeamRole

    implicit val decoder: ScalarDecoder[TeamRole] = {
      case StringValue("ADMIN") => Right(TeamRole.ADMIN)
      case StringValue("MEMBER") => Right(TeamRole.MEMBER)
      case other =>
        Left(DecodingError(s"Can't build TeamRole from input $other"))
    }
    implicit val encoder: ArgEncoder[TeamRole] = new ArgEncoder[TeamRole] {
      override def encode(value: TeamRole): Value = value match {
        case TeamRole.ADMIN => EnumValue("ADMIN")
        case TeamRole.MEMBER => EnumValue("MEMBER")
      }

      override def typeName: String = "TeamRole"
    }
  }

  sealed trait TopicSuggestionDeclineReason
    extends scala.Product
      with scala.Serializable

  object TopicSuggestionDeclineReason {

    case object NOT_RELEVANT extends TopicSuggestionDeclineReason

    case object PERSONAL_PREFERENCE extends TopicSuggestionDeclineReason

    case object TOO_GENERAL extends TopicSuggestionDeclineReason

    case object TOO_SPECIFIC extends TopicSuggestionDeclineReason

    implicit val decoder: ScalarDecoder[TopicSuggestionDeclineReason] = {
      case StringValue("NOT_RELEVANT") =>
        Right(TopicSuggestionDeclineReason.NOT_RELEVANT)
      case StringValue("PERSONAL_PREFERENCE") =>
        Right(TopicSuggestionDeclineReason.PERSONAL_PREFERENCE)
      case StringValue("TOO_GENERAL") =>
        Right(TopicSuggestionDeclineReason.TOO_GENERAL)
      case StringValue("TOO_SPECIFIC") =>
        Right(TopicSuggestionDeclineReason.TOO_SPECIFIC)
      case other =>
        Left(
          DecodingError(
            s"Can't build TopicSuggestionDeclineReason from input $other"
          )
        )
    }
    implicit val encoder: ArgEncoder[TopicSuggestionDeclineReason] =
      new ArgEncoder[TopicSuggestionDeclineReason] {
        override def encode(value: TopicSuggestionDeclineReason): Value =
          value match {
            case TopicSuggestionDeclineReason.NOT_RELEVANT =>
              EnumValue("NOT_RELEVANT")
            case TopicSuggestionDeclineReason.PERSONAL_PREFERENCE =>
              EnumValue("PERSONAL_PREFERENCE")
            case TopicSuggestionDeclineReason.TOO_GENERAL =>
              EnumValue("TOO_GENERAL")
            case TopicSuggestionDeclineReason.TOO_SPECIFIC =>
              EnumValue("TOO_SPECIFIC")
          }

        override def typeName: String = "TopicSuggestionDeclineReason"
      }
  }

  sealed trait UserBlockDuration extends scala.Product with scala.Serializable

  object UserBlockDuration {

    case object ONE_DAY extends UserBlockDuration

    case object ONE_MONTH extends UserBlockDuration

    case object ONE_WEEK extends UserBlockDuration

    case object PERMANENT extends UserBlockDuration

    case object THREE_DAYS extends UserBlockDuration

    implicit val decoder: ScalarDecoder[UserBlockDuration] = {
      case StringValue("ONE_DAY") => Right(UserBlockDuration.ONE_DAY)
      case StringValue("ONE_MONTH") => Right(UserBlockDuration.ONE_MONTH)
      case StringValue("ONE_WEEK") => Right(UserBlockDuration.ONE_WEEK)
      case StringValue("PERMANENT") => Right(UserBlockDuration.PERMANENT)
      case StringValue("THREE_DAYS") => Right(UserBlockDuration.THREE_DAYS)
      case other =>
        Left(DecodingError(s"Can't build UserBlockDuration from input $other"))
    }
    implicit val encoder: ArgEncoder[UserBlockDuration] =
      new ArgEncoder[UserBlockDuration] {
        override def encode(value: UserBlockDuration): Value = value match {
          case UserBlockDuration.ONE_DAY => EnumValue("ONE_DAY")
          case UserBlockDuration.ONE_MONTH => EnumValue("ONE_MONTH")
          case UserBlockDuration.ONE_WEEK => EnumValue("ONE_WEEK")
          case UserBlockDuration.PERMANENT => EnumValue("PERMANENT")
          case UserBlockDuration.THREE_DAYS => EnumValue("THREE_DAYS")
        }

        override def typeName: String = "UserBlockDuration"
      }
  }

  sealed trait UserStatusOrderField
    extends scala.Product
      with scala.Serializable

  object UserStatusOrderField {

    case object UPDATED_AT extends UserStatusOrderField

    implicit val decoder: ScalarDecoder[UserStatusOrderField] = {
      case StringValue("UPDATED_AT") => Right(UserStatusOrderField.UPDATED_AT)
      case other =>
        Left(
          DecodingError(s"Can't build UserStatusOrderField from input $other")
        )
    }
    implicit val encoder: ArgEncoder[UserStatusOrderField] =
      new ArgEncoder[UserStatusOrderField] {
        override def encode(value: UserStatusOrderField): Value = value match {
          case UserStatusOrderField.UPDATED_AT => EnumValue("UPDATED_AT")
        }

        override def typeName: String = "UserStatusOrderField"
      }
  }

  type AcceptEnterpriseAdministratorInvitationPayload

  object AcceptEnterpriseAdministratorInvitationPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId: SelectionBuilder[
      AcceptEnterpriseAdministratorInvitationPayload,
      Option[String]
    ] = Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The invitation that was accepted.
     */
    def invitation[A](
                       innerSelection: SelectionBuilder[EnterpriseAdministratorInvitation, A]
                     ): SelectionBuilder[AcceptEnterpriseAdministratorInvitationPayload, Option[
      A
    ]] = Field("invitation", OptionOf(Obj(innerSelection)))

    /**
     * A message confirming the result of accepting an administrator invitation.
     */
    def message: SelectionBuilder[
      AcceptEnterpriseAdministratorInvitationPayload,
      Option[String]
    ] = Field("message", OptionOf(Scalar()))
  }

  type AcceptTopicSuggestionPayload

  object AcceptTopicSuggestionPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[AcceptTopicSuggestionPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The accepted topic.
     */
    def topic[A](
                  innerSelection: SelectionBuilder[Topic, A]
                ): SelectionBuilder[AcceptTopicSuggestionPayload, Option[A]] =
      Field("topic", OptionOf(Obj(innerSelection)))
  }

  type ActorLocation

  object ActorLocation {

    /**
     * City
     */
    def city: SelectionBuilder[ActorLocation, Option[String]] =
      Field("city", OptionOf(Scalar()))

    /**
     * Country name
     */
    def country: SelectionBuilder[ActorLocation, Option[String]] =
      Field("country", OptionOf(Scalar()))

    /**
     * Country code
     */
    def countryCode: SelectionBuilder[ActorLocation, Option[String]] =
      Field("countryCode", OptionOf(Scalar()))

    /**
     * Region name
     */
    def region: SelectionBuilder[ActorLocation, Option[String]] =
      Field("region", OptionOf(Scalar()))

    /**
     * Region or state code
     */
    def regionCode: SelectionBuilder[ActorLocation, Option[String]] =
      Field("regionCode", OptionOf(Scalar()))
  }

  type AddAssigneesToAssignablePayload

  object AddAssigneesToAssignablePayload {

    /**
     * The item that was assigned.
     */
    def assignable[A](
                       onIssue: Option[SelectionBuilder[Issue, A]] = None,
                       onPullRequest: Option[SelectionBuilder[PullRequest, A]] = None
                     ): SelectionBuilder[AddAssigneesToAssignablePayload, Option[A]] =
      Field(
        "assignable",
        OptionOf(
          ChoiceOf(
            Map("Issue" -> onIssue, "PullRequest" -> onPullRequest).collect {
              case (k, Some(v)) => k -> Obj(v)
            }
          )
        )
      )

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[AddAssigneesToAssignablePayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))
  }

  type AddCommentPayload

  object AddCommentPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId: SelectionBuilder[AddCommentPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The edge from the subject's comment connection.
     */
    def commentEdge[A](
                        innerSelection: SelectionBuilder[IssueCommentEdge, A]
                      ): SelectionBuilder[AddCommentPayload, Option[A]] =
      Field("commentEdge", OptionOf(Obj(innerSelection)))

    /**
     * The subject
     */
    def subject[A](
                    onMarkedAsDuplicateEvent: Option[
                      SelectionBuilder[MarkedAsDuplicateEvent, A]
                    ] = None,
                    onOrganizationInvitation: Option[
                      SelectionBuilder[OrganizationInvitation, A]
                    ] = None,
                    onIssueComment: Option[SelectionBuilder[IssueComment, A]] = None,
                    onCheckSuite: Option[SelectionBuilder[CheckSuite, A]] = None,
                    onTeamRemoveRepositoryAuditEntry: Option[
                      SelectionBuilder[TeamRemoveRepositoryAuditEntry, A]
                    ] = None,
                    onBot: Option[SelectionBuilder[Bot, A]] = None,
                    onRepoCreateAuditEntry: Option[
                      SelectionBuilder[RepoCreateAuditEntry, A]
                    ] = None,
                    onRepoDestroyAuditEntry: Option[
                      SelectionBuilder[RepoDestroyAuditEntry, A]
                    ] = None,
                    onOrgRemoveOutsideCollaboratorAuditEntry: Option[
                      SelectionBuilder[OrgRemoveOutsideCollaboratorAuditEntry, A]
                    ] = None,
                    onRepoArchivedAuditEntry: Option[
                      SelectionBuilder[RepoArchivedAuditEntry, A]
                    ] = None,
                    onOrgEnableSamlAuditEntry: Option[
                      SelectionBuilder[OrgEnableSamlAuditEntry, A]
                    ] = None,
                    onRepositoryInvitation: Option[
                      SelectionBuilder[RepositoryInvitation, A]
                    ] = None,
                    onBaseRefForcePushedEvent: Option[
                      SelectionBuilder[BaseRefForcePushedEvent, A]
                    ] = None,
                    onCheckRun: Option[SelectionBuilder[CheckRun, A]] = None,
                    onAutomaticBaseChangeSucceededEvent: Option[
                      SelectionBuilder[AutomaticBaseChangeSucceededEvent, A]
                    ] = None,
                    onReadyForReviewEvent: Option[
                      SelectionBuilder[ReadyForReviewEvent, A]
                    ] = None,
                    onMembersCanDeleteReposDisableAuditEntry: Option[
                      SelectionBuilder[MembersCanDeleteReposDisableAuditEntry, A]
                    ] = None,
                    onTeamDiscussionComment: Option[
                      SelectionBuilder[TeamDiscussionComment, A]
                    ] = None,
                    onEnterpriseServerUserAccountEmail: Option[
                      SelectionBuilder[EnterpriseServerUserAccountEmail, A]
                    ] = None,
                    onBaseRefDeletedEvent: Option[
                      SelectionBuilder[BaseRefDeletedEvent, A]
                    ] = None,
                    onEnterpriseUserAccount: Option[
                      SelectionBuilder[EnterpriseUserAccount, A]
                    ] = None,
                    onOauthApplicationCreateAuditEntry: Option[
                      SelectionBuilder[OauthApplicationCreateAuditEntry, A]
                    ] = None,
                    onSponsorsListing: Option[SelectionBuilder[SponsorsListing, A]] = None,
                    onOrgConfigDisableCollaboratorsOnlyAuditEntry: Option[
                      SelectionBuilder[OrgConfigDisableCollaboratorsOnlyAuditEntry, A]
                    ] = None,
                    onOrgCreateAuditEntry: Option[
                      SelectionBuilder[OrgCreateAuditEntry, A]
                    ] = None,
                    onUserStatus: Option[SelectionBuilder[UserStatus, A]] = None,
                    onCommitCommentThread: Option[
                      SelectionBuilder[CommitCommentThread, A]
                    ] = None,
                    onUnsubscribedEvent: Option[SelectionBuilder[UnsubscribedEvent, A]] =
                    None,
                    onDemilestonedEvent: Option[SelectionBuilder[DemilestonedEvent, A]] =
                    None,
                    onReopenedEvent: Option[SelectionBuilder[ReopenedEvent, A]] = None,
                    onOrgRemoveMemberAuditEntry: Option[
                      SelectionBuilder[OrgRemoveMemberAuditEntry, A]
                    ] = None,
                    onUnassignedEvent: Option[SelectionBuilder[UnassignedEvent, A]] = None,
                    onCommit: Option[SelectionBuilder[Commit, A]] = None,
                    onPullRequestReviewComment: Option[
                      SelectionBuilder[PullRequestReviewComment, A]
                    ] = None,
                    onMentionedEvent: Option[SelectionBuilder[MentionedEvent, A]] = None,
                    onLicense: Option[SelectionBuilder[License, A]] = None,
                    onOrgAddBillingManagerAuditEntry: Option[
                      SelectionBuilder[OrgAddBillingManagerAuditEntry, A]
                    ] = None,
                    onTopic: Option[SelectionBuilder[Topic, A]] = None,
                    onHeadRefForcePushedEvent: Option[
                      SelectionBuilder[HeadRefForcePushedEvent, A]
                    ] = None,
                    onAutomaticBaseChangeFailedEvent: Option[
                      SelectionBuilder[AutomaticBaseChangeFailedEvent, A]
                    ] = None,
                    onHeadRefDeletedEvent: Option[
                      SelectionBuilder[HeadRefDeletedEvent, A]
                    ] = None,
                    onOrgConfigEnableCollaboratorsOnlyAuditEntry: Option[
                      SelectionBuilder[OrgConfigEnableCollaboratorsOnlyAuditEntry, A]
                    ] = None,
                    onPushAllowance: Option[SelectionBuilder[PushAllowance, A]] = None,
                    onOrgRemoveBillingManagerAuditEntry: Option[
                      SelectionBuilder[OrgRemoveBillingManagerAuditEntry, A]
                    ] = None,
                    onRelease: Option[SelectionBuilder[Release, A]] = None,
                    onApp: Option[SelectionBuilder[App, A]] = None,
                    onConvertedNoteToIssueEvent: Option[
                      SelectionBuilder[ConvertedNoteToIssueEvent, A]
                    ] = None,
                    onReviewRequestedEvent: Option[
                      SelectionBuilder[ReviewRequestedEvent, A]
                    ] = None,
                    onIpAllowListEntry: Option[SelectionBuilder[IpAllowListEntry, A]] =
                    None,
                    onEnterpriseRepositoryInfo: Option[
                      SelectionBuilder[EnterpriseRepositoryInfo, A]
                    ] = None,
                    onGistComment: Option[SelectionBuilder[GistComment, A]] = None,
                    onReviewDismissedEvent: Option[
                      SelectionBuilder[ReviewDismissedEvent, A]
                    ] = None,
                    onTree: Option[SelectionBuilder[Tree, A]] = None,
                    onRepoConfigDisableAnonymousGitAccessAuditEntry: Option[
                      SelectionBuilder[RepoConfigDisableAnonymousGitAccessAuditEntry, A]
                    ] = None,
                    onClosedEvent: Option[SelectionBuilder[ClosedEvent, A]] = None,
                    onSubscribedEvent: Option[SelectionBuilder[SubscribedEvent, A]] = None,
                    onBlob: Option[SelectionBuilder[Blob, A]] = None,
                    onMarketplaceListing: Option[SelectionBuilder[MarketplaceListing, A]] =
                    None,
                    onSavedReply: Option[SelectionBuilder[SavedReply, A]] = None,
                    onProjectColumn: Option[SelectionBuilder[ProjectColumn, A]] = None,
                    onPackageTag: Option[SelectionBuilder[PackageTag, A]] = None,
                    onRepoConfigEnableAnonymousGitAccessAuditEntry: Option[
                      SelectionBuilder[RepoConfigEnableAnonymousGitAccessAuditEntry, A]
                    ] = None,
                    onPinnedIssue: Option[SelectionBuilder[PinnedIssue, A]] = None,
                    onOrgUpdateMemberRepositoryCreationPermissionAuditEntry: Option[
                      SelectionBuilder[
                        OrgUpdateMemberRepositoryCreationPermissionAuditEntry,
                        A
                      ]
                    ] = None,
                    onTransferredEvent: Option[SelectionBuilder[TransferredEvent, A]] =
                    None,
                    onRepositoryTopic: Option[SelectionBuilder[RepositoryTopic, A]] = None,
                    onOrgUpdateDefaultRepositoryPermissionAuditEntry: Option[
                      SelectionBuilder[OrgUpdateDefaultRepositoryPermissionAuditEntry, A]
                    ] = None,
                    onRepoConfigDisableCollaboratorsOnlyAuditEntry: Option[
                      SelectionBuilder[RepoConfigDisableCollaboratorsOnlyAuditEntry, A]
                    ] = None,
                    onTeamAddRepositoryAuditEntry: Option[
                      SelectionBuilder[TeamAddRepositoryAuditEntry, A]
                    ] = None,
                    onOrgAddMemberAuditEntry: Option[
                      SelectionBuilder[OrgAddMemberAuditEntry, A]
                    ] = None,
                    onUnmarkedAsDuplicateEvent: Option[
                      SelectionBuilder[UnmarkedAsDuplicateEvent, A]
                    ] = None,
                    onTeamChangeParentTeamAuditEntry: Option[
                      SelectionBuilder[TeamChangeParentTeamAuditEntry, A]
                    ] = None,
                    onDeployKey: Option[SelectionBuilder[DeployKey, A]] = None,
                    onOrgEnableOauthAppRestrictionsAuditEntry: Option[
                      SelectionBuilder[OrgEnableOauthAppRestrictionsAuditEntry, A]
                    ] = None,
                    onDeployment: Option[SelectionBuilder[Deployment, A]] = None,
                    onEnterpriseIdentityProvider: Option[
                      SelectionBuilder[EnterpriseIdentityProvider, A]
                    ] = None,
                    onProjectCard: Option[SelectionBuilder[ProjectCard, A]] = None,
                    onPush: Option[SelectionBuilder[Push, A]] = None,
                    onEnterpriseServerUserAccount: Option[
                      SelectionBuilder[EnterpriseServerUserAccount, A]
                    ] = None,
                    onPullRequestReview: Option[SelectionBuilder[PullRequestReview, A]] =
                    None,
                    onRepoConfigLockAnonymousGitAccessAuditEntry: Option[
                      SelectionBuilder[RepoConfigLockAnonymousGitAccessAuditEntry, A]
                    ] = None,
                    onOrgOauthAppAccessRequestedAuditEntry: Option[
                      SelectionBuilder[OrgOauthAppAccessRequestedAuditEntry, A]
                    ] = None,
                    onRepositoryVisibilityChangeEnableAuditEntry: Option[
                      SelectionBuilder[RepositoryVisibilityChangeEnableAuditEntry, A]
                    ] = None,
                    onMovedColumnsInProjectEvent: Option[
                      SelectionBuilder[MovedColumnsInProjectEvent, A]
                    ] = None,
                    onUnlockedEvent: Option[SelectionBuilder[UnlockedEvent, A]] = None,
                    onTeam: Option[SelectionBuilder[Team, A]] = None,
                    onReaction: Option[SelectionBuilder[Reaction, A]] = None,
                    onMergedEvent: Option[SelectionBuilder[MergedEvent, A]] = None,
                    onExternalIdentity: Option[SelectionBuilder[ExternalIdentity, A]] =
                    None,
                    onPackageFile: Option[SelectionBuilder[PackageFile, A]] = None,
                    onPackageVersion: Option[SelectionBuilder[PackageVersion, A]] = None,
                    onReferencedEvent: Option[SelectionBuilder[ReferencedEvent, A]] = None,
                    onCommitComment: Option[SelectionBuilder[CommitComment, A]] = None,
                    onPullRequestReviewThread: Option[
                      SelectionBuilder[PullRequestReviewThread, A]
                    ] = None,
                    onHeadRefRestoredEvent: Option[
                      SelectionBuilder[HeadRefRestoredEvent, A]
                    ] = None,
                    onPrivateRepositoryForkingEnableAuditEntry: Option[
                      SelectionBuilder[PrivateRepositoryForkingEnableAuditEntry, A]
                    ] = None,
                    onLabeledEvent: Option[SelectionBuilder[LabeledEvent, A]] = None,
                    onLanguage: Option[SelectionBuilder[Language, A]] = None,
                    onRepoAddMemberAuditEntry: Option[
                      SelectionBuilder[RepoAddMemberAuditEntry, A]
                    ] = None,
                    onUnpinnedEvent: Option[SelectionBuilder[UnpinnedEvent, A]] = None,
                    onDeploymentStatus: Option[SelectionBuilder[DeploymentStatus, A]] =
                    None,
                    onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                    onRepoConfigEnableSockpuppetDisallowedAuditEntry: Option[
                      SelectionBuilder[RepoConfigEnableSockpuppetDisallowedAuditEntry, A]
                    ] = None,
                    onConvertToDraftEvent: Option[
                      SelectionBuilder[ConvertToDraftEvent, A]
                    ] = None,
                    onGist: Option[SelectionBuilder[Gist, A]] = None,
                    onOrgInviteMemberAuditEntry: Option[
                      SelectionBuilder[OrgInviteMemberAuditEntry, A]
                    ] = None,
                    onTeamRemoveMemberAuditEntry: Option[
                      SelectionBuilder[TeamRemoveMemberAuditEntry, A]
                    ] = None,
                    onOrgInviteToBusinessAuditEntry: Option[
                      SelectionBuilder[OrgInviteToBusinessAuditEntry, A]
                    ] = None,
                    onRepoAddTopicAuditEntry: Option[
                      SelectionBuilder[RepoAddTopicAuditEntry, A]
                    ] = None,
                    onPackage: Option[SelectionBuilder[Package, A]] = None,
                    onRepoConfigDisableSockpuppetDisallowedAuditEntry: Option[
                      SelectionBuilder[RepoConfigDisableSockpuppetDisallowedAuditEntry, A]
                    ] = None,
                    onLabel: Option[SelectionBuilder[Label, A]] = None,
                    onProject: Option[SelectionBuilder[Project, A]] = None,
                    onDeployedEvent: Option[SelectionBuilder[DeployedEvent, A]] = None,
                    onOrgUnblockUserAuditEntry: Option[
                      SelectionBuilder[OrgUnblockUserAuditEntry, A]
                    ] = None,
                    onCodeOfConduct: Option[SelectionBuilder[CodeOfConduct, A]] = None,
                    onOrgEnableTwoFactorRequirementAuditEntry: Option[
                      SelectionBuilder[OrgEnableTwoFactorRequirementAuditEntry, A]
                    ] = None,
                    onStatusContext: Option[SelectionBuilder[StatusContext, A]] = None,
                    onUnlabeledEvent: Option[SelectionBuilder[UnlabeledEvent, A]] = None,
                    onOrgBlockUserAuditEntry: Option[
                      SelectionBuilder[OrgBlockUserAuditEntry, A]
                    ] = None,
                    onTag: Option[SelectionBuilder[Tag, A]] = None,
                    onOrgOauthAppAccessApprovedAuditEntry: Option[
                      SelectionBuilder[OrgOauthAppAccessApprovedAuditEntry, A]
                    ] = None,
                    onCrossReferencedEvent: Option[
                      SelectionBuilder[CrossReferencedEvent, A]
                    ] = None,
                    onOrgUpdateMemberAuditEntry: Option[
                      SelectionBuilder[OrgUpdateMemberAuditEntry, A]
                    ] = None,
                    onRepoRemoveTopicAuditEntry: Option[
                      SelectionBuilder[RepoRemoveTopicAuditEntry, A]
                    ] = None,
                    onAssignedEvent: Option[SelectionBuilder[AssignedEvent, A]] = None,
                    onRepositoryVulnerabilityAlert: Option[
                      SelectionBuilder[RepositoryVulnerabilityAlert, A]
                    ] = None,
                    onOrgDisableSamlAuditEntry: Option[
                      SelectionBuilder[OrgDisableSamlAuditEntry, A]
                    ] = None,
                    onRepoAccessAuditEntry: Option[
                      SelectionBuilder[RepoAccessAuditEntry, A]
                    ] = None,
                    onPullRequestCommit: Option[SelectionBuilder[PullRequestCommit, A]] =
                    None,
                    onSecurityAdvisory: Option[SelectionBuilder[SecurityAdvisory, A]] =
                    None,
                    onRemovedFromProjectEvent: Option[
                      SelectionBuilder[RemovedFromProjectEvent, A]
                    ] = None,
                    onRepository: Option[SelectionBuilder[Repository, A]] = None,
                    onEnterpriseServerInstallation: Option[
                      SelectionBuilder[EnterpriseServerInstallation, A]
                    ] = None,
                    onPrivateRepositoryForkingDisableAuditEntry: Option[
                      SelectionBuilder[PrivateRepositoryForkingDisableAuditEntry, A]
                    ] = None,
                    onReviewDismissalAllowance: Option[
                      SelectionBuilder[ReviewDismissalAllowance, A]
                    ] = None,
                    onRepoConfigUnlockAnonymousGitAccessAuditEntry: Option[
                      SelectionBuilder[RepoConfigUnlockAnonymousGitAccessAuditEntry, A]
                    ] = None,
                    onUser: Option[SelectionBuilder[User, A]] = None,
                    onTeamAddMemberAuditEntry: Option[
                      SelectionBuilder[TeamAddMemberAuditEntry, A]
                    ] = None,
                    onDeploymentEnvironmentChangedEvent: Option[
                      SelectionBuilder[DeploymentEnvironmentChangedEvent, A]
                    ] = None,
                    onDependencyGraphManifest: Option[
                      SelectionBuilder[DependencyGraphManifest, A]
                    ] = None,
                    onMembersCanDeleteReposClearAuditEntry: Option[
                      SelectionBuilder[MembersCanDeleteReposClearAuditEntry, A]
                    ] = None,
                    onEnterpriseServerUserAccountsUpload: Option[
                      SelectionBuilder[EnterpriseServerUserAccountsUpload, A]
                    ] = None,
                    onReleaseAsset: Option[SelectionBuilder[ReleaseAsset, A]] = None,
                    onRepoConfigEnableContributorsOnlyAuditEntry: Option[
                      SelectionBuilder[RepoConfigEnableContributorsOnlyAuditEntry, A]
                    ] = None,
                    onPullRequestCommitCommentThread: Option[
                      SelectionBuilder[PullRequestCommitCommentThread, A]
                    ] = None,
                    onTeamDiscussion: Option[SelectionBuilder[TeamDiscussion, A]] = None,
                    onAddedToProjectEvent: Option[
                      SelectionBuilder[AddedToProjectEvent, A]
                    ] = None,
                    onBranchProtectionRule: Option[
                      SelectionBuilder[BranchProtectionRule, A]
                    ] = None,
                    onPublicKey: Option[SelectionBuilder[PublicKey, A]] = None,
                    onMarketplaceCategory: Option[
                      SelectionBuilder[MarketplaceCategory, A]
                    ] = None,
                    onIssue: Option[SelectionBuilder[Issue, A]] = None,
                    onRepoConfigDisableContributorsOnlyAuditEntry: Option[
                      SelectionBuilder[RepoConfigDisableContributorsOnlyAuditEntry, A]
                    ] = None,
                    onReviewRequestRemovedEvent: Option[
                      SelectionBuilder[ReviewRequestRemovedEvent, A]
                    ] = None,
                    onOrganization: Option[SelectionBuilder[Organization, A]] = None,
                    onCommentDeletedEvent: Option[
                      SelectionBuilder[CommentDeletedEvent, A]
                    ] = None,
                    onRepoRemoveMemberAuditEntry: Option[
                      SelectionBuilder[RepoRemoveMemberAuditEntry, A]
                    ] = None,
                    onMilestone: Option[SelectionBuilder[Milestone, A]] = None,
                    onEnterprise: Option[SelectionBuilder[Enterprise, A]] = None,
                    onRepositoryVisibilityChangeDisableAuditEntry: Option[
                      SelectionBuilder[RepositoryVisibilityChangeDisableAuditEntry, A]
                    ] = None,
                    onOrgDisableOauthAppRestrictionsAuditEntry: Option[
                      SelectionBuilder[OrgDisableOauthAppRestrictionsAuditEntry, A]
                    ] = None,
                    onRenamedTitleEvent: Option[SelectionBuilder[RenamedTitleEvent, A]] =
                    None,
                    onSponsorship: Option[SelectionBuilder[Sponsorship, A]] = None,
                    onConnectedEvent: Option[SelectionBuilder[ConnectedEvent, A]] = None,
                    onOrgDisableTwoFactorRequirementAuditEntry: Option[
                      SelectionBuilder[OrgDisableTwoFactorRequirementAuditEntry, A]
                    ] = None,
                    onBaseRefChangedEvent: Option[
                      SelectionBuilder[BaseRefChangedEvent, A]
                    ] = None,
                    onPinnedEvent: Option[SelectionBuilder[PinnedEvent, A]] = None,
                    onSponsorsTier: Option[SelectionBuilder[SponsorsTier, A]] = None,
                    onOrganizationIdentityProvider: Option[
                      SelectionBuilder[OrganizationIdentityProvider, A]
                    ] = None,
                    onMilestonedEvent: Option[SelectionBuilder[MilestonedEvent, A]] = None,
                    onMembersCanDeleteReposEnableAuditEntry: Option[
                      SelectionBuilder[MembersCanDeleteReposEnableAuditEntry, A]
                    ] = None,
                    onStatusCheckRollup: Option[SelectionBuilder[StatusCheckRollup, A]] =
                    None,
                    onOrgOauthAppAccessDeniedAuditEntry: Option[
                      SelectionBuilder[OrgOauthAppAccessDeniedAuditEntry, A]
                    ] = None,
                    onRepoChangeMergeSettingAuditEntry: Option[
                      SelectionBuilder[RepoChangeMergeSettingAuditEntry, A]
                    ] = None,
                    onReviewRequest: Option[SelectionBuilder[ReviewRequest, A]] = None,
                    onEnterpriseAdministratorInvitation: Option[
                      SelectionBuilder[EnterpriseAdministratorInvitation, A]
                    ] = None,
                    onDisconnectedEvent: Option[SelectionBuilder[DisconnectedEvent, A]] =
                    None,
                    onRepoConfigEnableCollaboratorsOnlyAuditEntry: Option[
                      SelectionBuilder[RepoConfigEnableCollaboratorsOnlyAuditEntry, A]
                    ] = None,
                    onUserContentEdit: Option[SelectionBuilder[UserContentEdit, A]] = None,
                    onPullRequest: Option[SelectionBuilder[PullRequest, A]] = None,
                    onRef: Option[SelectionBuilder[Ref, A]] = None,
                    onUserBlockedEvent: Option[SelectionBuilder[UserBlockedEvent, A]] =
                    None,
                    onLockedEvent: Option[SelectionBuilder[LockedEvent, A]] = None,
                    onOrgUpdateMemberRepositoryInvitationPermissionAuditEntry: Option[
                      SelectionBuilder[
                        OrgUpdateMemberRepositoryInvitationPermissionAuditEntry,
                        A
                      ]
                    ] = None,
                    onStatus: Option[SelectionBuilder[Status, A]] = None,
                    onOrgRestoreMemberAuditEntry: Option[
                      SelectionBuilder[OrgRestoreMemberAuditEntry, A]
                    ] = None
                  ): SelectionBuilder[AddCommentPayload, Option[A]] =
      Field(
        "subject",
        OptionOf(
          ChoiceOf(
            Map(
              "MarkedAsDuplicateEvent" -> onMarkedAsDuplicateEvent,
              "OrganizationInvitation" -> onOrganizationInvitation,
              "IssueComment" -> onIssueComment,
              "CheckSuite" -> onCheckSuite,
              "TeamRemoveRepositoryAuditEntry" -> onTeamRemoveRepositoryAuditEntry,
              "Bot" -> onBot,
              "RepoCreateAuditEntry" -> onRepoCreateAuditEntry,
              "RepoDestroyAuditEntry" -> onRepoDestroyAuditEntry,
              "OrgRemoveOutsideCollaboratorAuditEntry" -> onOrgRemoveOutsideCollaboratorAuditEntry,
              "RepoArchivedAuditEntry" -> onRepoArchivedAuditEntry,
              "OrgEnableSamlAuditEntry" -> onOrgEnableSamlAuditEntry,
              "RepositoryInvitation" -> onRepositoryInvitation,
              "BaseRefForcePushedEvent" -> onBaseRefForcePushedEvent,
              "CheckRun" -> onCheckRun,
              "AutomaticBaseChangeSucceededEvent" -> onAutomaticBaseChangeSucceededEvent,
              "ReadyForReviewEvent" -> onReadyForReviewEvent,
              "MembersCanDeleteReposDisableAuditEntry" -> onMembersCanDeleteReposDisableAuditEntry,
              "TeamDiscussionComment" -> onTeamDiscussionComment,
              "EnterpriseServerUserAccountEmail" -> onEnterpriseServerUserAccountEmail,
              "BaseRefDeletedEvent" -> onBaseRefDeletedEvent,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "OauthApplicationCreateAuditEntry" -> onOauthApplicationCreateAuditEntry,
              "SponsorsListing" -> onSponsorsListing,
              "OrgConfigDisableCollaboratorsOnlyAuditEntry" -> onOrgConfigDisableCollaboratorsOnlyAuditEntry,
              "OrgCreateAuditEntry" -> onOrgCreateAuditEntry,
              "UserStatus" -> onUserStatus,
              "CommitCommentThread" -> onCommitCommentThread,
              "UnsubscribedEvent" -> onUnsubscribedEvent,
              "DemilestonedEvent" -> onDemilestonedEvent,
              "ReopenedEvent" -> onReopenedEvent,
              "OrgRemoveMemberAuditEntry" -> onOrgRemoveMemberAuditEntry,
              "UnassignedEvent" -> onUnassignedEvent,
              "Commit" -> onCommit,
              "PullRequestReviewComment" -> onPullRequestReviewComment,
              "MentionedEvent" -> onMentionedEvent,
              "License" -> onLicense,
              "OrgAddBillingManagerAuditEntry" -> onOrgAddBillingManagerAuditEntry,
              "Topic" -> onTopic,
              "HeadRefForcePushedEvent" -> onHeadRefForcePushedEvent,
              "AutomaticBaseChangeFailedEvent" -> onAutomaticBaseChangeFailedEvent,
              "HeadRefDeletedEvent" -> onHeadRefDeletedEvent,
              "OrgConfigEnableCollaboratorsOnlyAuditEntry" -> onOrgConfigEnableCollaboratorsOnlyAuditEntry,
              "PushAllowance" -> onPushAllowance,
              "OrgRemoveBillingManagerAuditEntry" -> onOrgRemoveBillingManagerAuditEntry,
              "Release" -> onRelease,
              "App" -> onApp,
              "ConvertedNoteToIssueEvent" -> onConvertedNoteToIssueEvent,
              "ReviewRequestedEvent" -> onReviewRequestedEvent,
              "IpAllowListEntry" -> onIpAllowListEntry,
              "EnterpriseRepositoryInfo" -> onEnterpriseRepositoryInfo,
              "GistComment" -> onGistComment,
              "ReviewDismissedEvent" -> onReviewDismissedEvent,
              "Tree" -> onTree,
              "RepoConfigDisableAnonymousGitAccessAuditEntry" -> onRepoConfigDisableAnonymousGitAccessAuditEntry,
              "ClosedEvent" -> onClosedEvent,
              "SubscribedEvent" -> onSubscribedEvent,
              "Blob" -> onBlob,
              "MarketplaceListing" -> onMarketplaceListing,
              "SavedReply" -> onSavedReply,
              "ProjectColumn" -> onProjectColumn,
              "PackageTag" -> onPackageTag,
              "RepoConfigEnableAnonymousGitAccessAuditEntry" -> onRepoConfigEnableAnonymousGitAccessAuditEntry,
              "PinnedIssue" -> onPinnedIssue,
              "OrgUpdateMemberRepositoryCreationPermissionAuditEntry" -> onOrgUpdateMemberRepositoryCreationPermissionAuditEntry,
              "TransferredEvent" -> onTransferredEvent,
              "RepositoryTopic" -> onRepositoryTopic,
              "OrgUpdateDefaultRepositoryPermissionAuditEntry" -> onOrgUpdateDefaultRepositoryPermissionAuditEntry,
              "RepoConfigDisableCollaboratorsOnlyAuditEntry" -> onRepoConfigDisableCollaboratorsOnlyAuditEntry,
              "TeamAddRepositoryAuditEntry" -> onTeamAddRepositoryAuditEntry,
              "OrgAddMemberAuditEntry" -> onOrgAddMemberAuditEntry,
              "UnmarkedAsDuplicateEvent" -> onUnmarkedAsDuplicateEvent,
              "TeamChangeParentTeamAuditEntry" -> onTeamChangeParentTeamAuditEntry,
              "DeployKey" -> onDeployKey,
              "OrgEnableOauthAppRestrictionsAuditEntry" -> onOrgEnableOauthAppRestrictionsAuditEntry,
              "Deployment" -> onDeployment,
              "EnterpriseIdentityProvider" -> onEnterpriseIdentityProvider,
              "ProjectCard" -> onProjectCard,
              "Push" -> onPush,
              "EnterpriseServerUserAccount" -> onEnterpriseServerUserAccount,
              "PullRequestReview" -> onPullRequestReview,
              "RepoConfigLockAnonymousGitAccessAuditEntry" -> onRepoConfigLockAnonymousGitAccessAuditEntry,
              "OrgOauthAppAccessRequestedAuditEntry" -> onOrgOauthAppAccessRequestedAuditEntry,
              "RepositoryVisibilityChangeEnableAuditEntry" -> onRepositoryVisibilityChangeEnableAuditEntry,
              "MovedColumnsInProjectEvent" -> onMovedColumnsInProjectEvent,
              "UnlockedEvent" -> onUnlockedEvent,
              "Team" -> onTeam,
              "Reaction" -> onReaction,
              "MergedEvent" -> onMergedEvent,
              "ExternalIdentity" -> onExternalIdentity,
              "PackageFile" -> onPackageFile,
              "PackageVersion" -> onPackageVersion,
              "ReferencedEvent" -> onReferencedEvent,
              "CommitComment" -> onCommitComment,
              "PullRequestReviewThread" -> onPullRequestReviewThread,
              "HeadRefRestoredEvent" -> onHeadRefRestoredEvent,
              "PrivateRepositoryForkingEnableAuditEntry" -> onPrivateRepositoryForkingEnableAuditEntry,
              "LabeledEvent" -> onLabeledEvent,
              "Language" -> onLanguage,
              "RepoAddMemberAuditEntry" -> onRepoAddMemberAuditEntry,
              "UnpinnedEvent" -> onUnpinnedEvent,
              "DeploymentStatus" -> onDeploymentStatus,
              "Mannequin" -> onMannequin,
              "RepoConfigEnableSockpuppetDisallowedAuditEntry" -> onRepoConfigEnableSockpuppetDisallowedAuditEntry,
              "ConvertToDraftEvent" -> onConvertToDraftEvent,
              "Gist" -> onGist,
              "OrgInviteMemberAuditEntry" -> onOrgInviteMemberAuditEntry,
              "TeamRemoveMemberAuditEntry" -> onTeamRemoveMemberAuditEntry,
              "OrgInviteToBusinessAuditEntry" -> onOrgInviteToBusinessAuditEntry,
              "RepoAddTopicAuditEntry" -> onRepoAddTopicAuditEntry,
              "Package" -> onPackage,
              "RepoConfigDisableSockpuppetDisallowedAuditEntry" -> onRepoConfigDisableSockpuppetDisallowedAuditEntry,
              "Label" -> onLabel,
              "Project" -> onProject,
              "DeployedEvent" -> onDeployedEvent,
              "OrgUnblockUserAuditEntry" -> onOrgUnblockUserAuditEntry,
              "CodeOfConduct" -> onCodeOfConduct,
              "OrgEnableTwoFactorRequirementAuditEntry" -> onOrgEnableTwoFactorRequirementAuditEntry,
              "StatusContext" -> onStatusContext,
              "UnlabeledEvent" -> onUnlabeledEvent,
              "OrgBlockUserAuditEntry" -> onOrgBlockUserAuditEntry,
              "Tag" -> onTag,
              "OrgOauthAppAccessApprovedAuditEntry" -> onOrgOauthAppAccessApprovedAuditEntry,
              "CrossReferencedEvent" -> onCrossReferencedEvent,
              "OrgUpdateMemberAuditEntry" -> onOrgUpdateMemberAuditEntry,
              "RepoRemoveTopicAuditEntry" -> onRepoRemoveTopicAuditEntry,
              "AssignedEvent" -> onAssignedEvent,
              "RepositoryVulnerabilityAlert" -> onRepositoryVulnerabilityAlert,
              "OrgDisableSamlAuditEntry" -> onOrgDisableSamlAuditEntry,
              "RepoAccessAuditEntry" -> onRepoAccessAuditEntry,
              "PullRequestCommit" -> onPullRequestCommit,
              "SecurityAdvisory" -> onSecurityAdvisory,
              "RemovedFromProjectEvent" -> onRemovedFromProjectEvent,
              "Repository" -> onRepository,
              "EnterpriseServerInstallation" -> onEnterpriseServerInstallation,
              "PrivateRepositoryForkingDisableAuditEntry" -> onPrivateRepositoryForkingDisableAuditEntry,
              "ReviewDismissalAllowance" -> onReviewDismissalAllowance,
              "RepoConfigUnlockAnonymousGitAccessAuditEntry" -> onRepoConfigUnlockAnonymousGitAccessAuditEntry,
              "User" -> onUser,
              "TeamAddMemberAuditEntry" -> onTeamAddMemberAuditEntry,
              "DeploymentEnvironmentChangedEvent" -> onDeploymentEnvironmentChangedEvent,
              "DependencyGraphManifest" -> onDependencyGraphManifest,
              "MembersCanDeleteReposClearAuditEntry" -> onMembersCanDeleteReposClearAuditEntry,
              "EnterpriseServerUserAccountsUpload" -> onEnterpriseServerUserAccountsUpload,
              "ReleaseAsset" -> onReleaseAsset,
              "RepoConfigEnableContributorsOnlyAuditEntry" -> onRepoConfigEnableContributorsOnlyAuditEntry,
              "PullRequestCommitCommentThread" -> onPullRequestCommitCommentThread,
              "TeamDiscussion" -> onTeamDiscussion,
              "AddedToProjectEvent" -> onAddedToProjectEvent,
              "BranchProtectionRule" -> onBranchProtectionRule,
              "PublicKey" -> onPublicKey,
              "MarketplaceCategory" -> onMarketplaceCategory,
              "Issue" -> onIssue,
              "RepoConfigDisableContributorsOnlyAuditEntry" -> onRepoConfigDisableContributorsOnlyAuditEntry,
              "ReviewRequestRemovedEvent" -> onReviewRequestRemovedEvent,
              "Organization" -> onOrganization,
              "CommentDeletedEvent" -> onCommentDeletedEvent,
              "RepoRemoveMemberAuditEntry" -> onRepoRemoveMemberAuditEntry,
              "Milestone" -> onMilestone,
              "Enterprise" -> onEnterprise,
              "RepositoryVisibilityChangeDisableAuditEntry" -> onRepositoryVisibilityChangeDisableAuditEntry,
              "OrgDisableOauthAppRestrictionsAuditEntry" -> onOrgDisableOauthAppRestrictionsAuditEntry,
              "RenamedTitleEvent" -> onRenamedTitleEvent,
              "Sponsorship" -> onSponsorship,
              "ConnectedEvent" -> onConnectedEvent,
              "OrgDisableTwoFactorRequirementAuditEntry" -> onOrgDisableTwoFactorRequirementAuditEntry,
              "BaseRefChangedEvent" -> onBaseRefChangedEvent,
              "PinnedEvent" -> onPinnedEvent,
              "SponsorsTier" -> onSponsorsTier,
              "OrganizationIdentityProvider" -> onOrganizationIdentityProvider,
              "MilestonedEvent" -> onMilestonedEvent,
              "MembersCanDeleteReposEnableAuditEntry" -> onMembersCanDeleteReposEnableAuditEntry,
              "StatusCheckRollup" -> onStatusCheckRollup,
              "OrgOauthAppAccessDeniedAuditEntry" -> onOrgOauthAppAccessDeniedAuditEntry,
              "RepoChangeMergeSettingAuditEntry" -> onRepoChangeMergeSettingAuditEntry,
              "ReviewRequest" -> onReviewRequest,
              "EnterpriseAdministratorInvitation" -> onEnterpriseAdministratorInvitation,
              "DisconnectedEvent" -> onDisconnectedEvent,
              "RepoConfigEnableCollaboratorsOnlyAuditEntry" -> onRepoConfigEnableCollaboratorsOnlyAuditEntry,
              "UserContentEdit" -> onUserContentEdit,
              "PullRequest" -> onPullRequest,
              "Ref" -> onRef,
              "UserBlockedEvent" -> onUserBlockedEvent,
              "LockedEvent" -> onLockedEvent,
              "OrgUpdateMemberRepositoryInvitationPermissionAuditEntry" -> onOrgUpdateMemberRepositoryInvitationPermissionAuditEntry,
              "Status" -> onStatus,
              "OrgRestoreMemberAuditEntry" -> onOrgRestoreMemberAuditEntry
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * The edge from the subject's timeline connection.
     */
    def timelineEdge[A](
                         innerSelection: SelectionBuilder[IssueTimelineItemEdge, A]
                       ): SelectionBuilder[AddCommentPayload, Option[A]] =
      Field("timelineEdge", OptionOf(Obj(innerSelection)))
  }

  type AddLabelsToLabelablePayload

  object AddLabelsToLabelablePayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[AddLabelsToLabelablePayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The item that was labeled.
     */
    def labelable[A](
                      onIssue: Option[SelectionBuilder[Issue, A]] = None,
                      onPullRequest: Option[SelectionBuilder[PullRequest, A]] = None
                    ): SelectionBuilder[AddLabelsToLabelablePayload, Option[A]] =
      Field(
        "labelable",
        OptionOf(
          ChoiceOf(
            Map("Issue" -> onIssue, "PullRequest" -> onPullRequest).collect {
              case (k, Some(v)) => k -> Obj(v)
            }
          )
        )
      )
  }

  type AddProjectCardPayload

  object AddProjectCardPayload {

    /**
     * The edge from the ProjectColumn's card connection.
     */
    def cardEdge[A](
                     innerSelection: SelectionBuilder[ProjectCardEdge, A]
                   ): SelectionBuilder[AddProjectCardPayload, Option[A]] =
      Field("cardEdge", OptionOf(Obj(innerSelection)))

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[AddProjectCardPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The ProjectColumn
     */
    def projectColumn[A](
                          innerSelection: SelectionBuilder[ProjectColumn, A]
                        ): SelectionBuilder[AddProjectCardPayload, Option[A]] =
      Field("projectColumn", OptionOf(Obj(innerSelection)))
  }

  type AddProjectColumnPayload

  object AddProjectColumnPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[AddProjectColumnPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The edge from the project's column connection.
     */
    def columnEdge[A](
                       innerSelection: SelectionBuilder[ProjectColumnEdge, A]
                     ): SelectionBuilder[AddProjectColumnPayload, Option[A]] =
      Field("columnEdge", OptionOf(Obj(innerSelection)))

    /**
     * The project
     */
    def project[A](
                    innerSelection: SelectionBuilder[Project, A]
                  ): SelectionBuilder[AddProjectColumnPayload, Option[A]] =
      Field("project", OptionOf(Obj(innerSelection)))
  }

  type AddPullRequestReviewCommentPayload

  object AddPullRequestReviewCommentPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[AddPullRequestReviewCommentPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The newly created comment.
     */
    def comment[A](
                    innerSelection: SelectionBuilder[PullRequestReviewComment, A]
                  ): SelectionBuilder[AddPullRequestReviewCommentPayload, Option[A]] =
      Field("comment", OptionOf(Obj(innerSelection)))

    /**
     * The edge from the review's comment connection.
     */
    def commentEdge[A](
                        innerSelection: SelectionBuilder[PullRequestReviewCommentEdge, A]
                      ): SelectionBuilder[AddPullRequestReviewCommentPayload, Option[A]] =
      Field("commentEdge", OptionOf(Obj(innerSelection)))
  }

  type AddPullRequestReviewPayload

  object AddPullRequestReviewPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[AddPullRequestReviewPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The newly created pull request review.
     */
    def pullRequestReview[A](
                              innerSelection: SelectionBuilder[PullRequestReview, A]
                            ): SelectionBuilder[AddPullRequestReviewPayload, Option[A]] =
      Field("pullRequestReview", OptionOf(Obj(innerSelection)))

    /**
     * The edge from the pull request's review connection.
     */
    def reviewEdge[A](
                       innerSelection: SelectionBuilder[PullRequestReviewEdge, A]
                     ): SelectionBuilder[AddPullRequestReviewPayload, Option[A]] =
      Field("reviewEdge", OptionOf(Obj(innerSelection)))
  }

  type AddPullRequestReviewThreadPayload

  object AddPullRequestReviewThreadPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[AddPullRequestReviewThreadPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The newly created thread.
     */
    def thread[A](
                   innerSelection: SelectionBuilder[PullRequestReviewThread, A]
                 ): SelectionBuilder[AddPullRequestReviewThreadPayload, Option[A]] =
      Field("thread", OptionOf(Obj(innerSelection)))
  }

  type AddReactionPayload

  object AddReactionPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId: SelectionBuilder[AddReactionPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The reaction object.
     */
    def reaction[A](
                     innerSelection: SelectionBuilder[Reaction, A]
                   ): SelectionBuilder[AddReactionPayload, Option[A]] =
      Field("reaction", OptionOf(Obj(innerSelection)))

    /**
     * The reactable subject.
     */
    def subject[A](
                    onIssueComment: Option[SelectionBuilder[IssueComment, A]] = None,
                    onTeamDiscussionComment: Option[
                      SelectionBuilder[TeamDiscussionComment, A]
                    ] = None,
                    onPullRequestReviewComment: Option[
                      SelectionBuilder[PullRequestReviewComment, A]
                    ] = None,
                    onPullRequestReview: Option[SelectionBuilder[PullRequestReview, A]] =
                    None,
                    onCommitComment: Option[SelectionBuilder[CommitComment, A]] = None,
                    onTeamDiscussion: Option[SelectionBuilder[TeamDiscussion, A]] = None,
                    onIssue: Option[SelectionBuilder[Issue, A]] = None,
                    onPullRequest: Option[SelectionBuilder[PullRequest, A]] = None
                  ): SelectionBuilder[AddReactionPayload, Option[A]] =
      Field(
        "subject",
        OptionOf(
          ChoiceOf(
            Map(
              "IssueComment" -> onIssueComment,
              "TeamDiscussionComment" -> onTeamDiscussionComment,
              "PullRequestReviewComment" -> onPullRequestReviewComment,
              "PullRequestReview" -> onPullRequestReview,
              "CommitComment" -> onCommitComment,
              "TeamDiscussion" -> onTeamDiscussion,
              "Issue" -> onIssue,
              "PullRequest" -> onPullRequest
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )
  }

  type AddStarPayload

  object AddStarPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId: SelectionBuilder[AddStarPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The starrable.
     */
    def starrable[A](
                      onTopic: Option[SelectionBuilder[Topic, A]] = None,
                      onGist: Option[SelectionBuilder[Gist, A]] = None,
                      onRepository: Option[SelectionBuilder[Repository, A]] = None
                    ): SelectionBuilder[AddStarPayload, Option[A]] =
      Field(
        "starrable",
        OptionOf(
          ChoiceOf(
            Map(
              "Topic" -> onTopic,
              "Gist" -> onGist,
              "Repository" -> onRepository
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )
  }

  type AddedToProjectEvent

  object AddedToProjectEvent {

    /**
     * Identifies the actor who performed the event.
     */
    def actor[A](
                  onBot: Option[SelectionBuilder[Bot, A]] = None,
                  onEnterpriseUserAccount: Option[
                    SelectionBuilder[EnterpriseUserAccount, A]
                  ] = None,
                  onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                  onUser: Option[SelectionBuilder[User, A]] = None,
                  onOrganization: Option[SelectionBuilder[Organization, A]] = None
                ): SelectionBuilder[AddedToProjectEvent, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[AddedToProjectEvent, DateTime] =
      Field("createdAt", Scalar())

    /**
     * Identifies the primary key from the database.
     */
    def databaseId: SelectionBuilder[AddedToProjectEvent, Option[Int]] =
      Field("databaseId", OptionOf(Scalar()))

    def id: SelectionBuilder[AddedToProjectEvent, String] =
      Field("id", Scalar())

    /**
     * Project referenced by event.
     */
    def project[A](
                    innerSelection: SelectionBuilder[Project, A]
                  ): SelectionBuilder[AddedToProjectEvent, Option[A]] =
      Field("project", OptionOf(Obj(innerSelection)))

    /**
     * Project card referenced by this project event.
     */
    def projectCard[A](
                        innerSelection: SelectionBuilder[ProjectCard, A]
                      ): SelectionBuilder[AddedToProjectEvent, Option[A]] =
      Field("projectCard", OptionOf(Obj(innerSelection)))

    /**
     * Column name referenced by this project event.
     */
    def projectColumnName: SelectionBuilder[AddedToProjectEvent, String] =
      Field("projectColumnName", Scalar())
  }

  type App

  object App {

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[App, DateTime] =
      Field("createdAt", Scalar())

    /**
     * Identifies the primary key from the database.
     */
    def databaseId: SelectionBuilder[App, Option[Int]] =
      Field("databaseId", OptionOf(Scalar()))

    /**
     * The description of the app.
     */
    def description: SelectionBuilder[App, Option[String]] =
      Field("description", OptionOf(Scalar()))

    def id: SelectionBuilder[App, String] = Field("id", Scalar())

    /**
     * The hex color code, without the leading '#', for the logo background.
     */
    def logoBackgroundColor: SelectionBuilder[App, String] =
      Field("logoBackgroundColor", Scalar())

    /**
     * A URL pointing to the app's logo.
     */
    def logoUrl(size: Option[Int] = None): SelectionBuilder[App, URI] =
      Field("logoUrl", Scalar(), arguments = List(Argument("size", size)))

    /**
     * The name of the app.
     */
    def name: SelectionBuilder[App, String] = Field("name", Scalar())

    /**
     * A slug based on the name of the app for use in URLs.
     */
    def slug: SelectionBuilder[App, String] = Field("slug", Scalar())

    /**
     * Identifies the date and time when the object was last updated.
     */
    def updatedAt: SelectionBuilder[App, DateTime] =
      Field("updatedAt", Scalar())

    /**
     * The URL to the app's homepage.
     */
    def url: SelectionBuilder[App, URI] = Field("url", Scalar())
  }

  type ArchiveRepositoryPayload

  object ArchiveRepositoryPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[ArchiveRepositoryPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The repository that was marked as archived.
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[ArchiveRepositoryPayload, Option[A]] =
      Field("repository", OptionOf(Obj(innerSelection)))
  }

  type AssignedEvent

  object AssignedEvent {

    /**
     * Identifies the actor who performed the event.
     */
    def actor[A](
                  onBot: Option[SelectionBuilder[Bot, A]] = None,
                  onEnterpriseUserAccount: Option[
                    SelectionBuilder[EnterpriseUserAccount, A]
                  ] = None,
                  onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                  onUser: Option[SelectionBuilder[User, A]] = None,
                  onOrganization: Option[SelectionBuilder[Organization, A]] = None
                ): SelectionBuilder[AssignedEvent, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * Identifies the assignable associated with the event.
     */
    def assignable[A](
                       onIssue: Option[SelectionBuilder[Issue, A]] = None,
                       onPullRequest: Option[SelectionBuilder[PullRequest, A]] = None
                     ): SelectionBuilder[AssignedEvent, A] =
      Field(
        "assignable",
        ChoiceOf(
          Map("Issue" -> onIssue, "PullRequest" -> onPullRequest).collect {
            case (k, Some(v)) => k -> Obj(v)
          }
        )
      )

    /**
     * Identifies the user or mannequin that was assigned.
     */
    def assignee[A](
                     onBot: SelectionBuilder[Bot, A],
                     onMannequin: SelectionBuilder[Mannequin, A],
                     onOrganization: SelectionBuilder[Organization, A],
                     onUser: SelectionBuilder[User, A]
                   ): SelectionBuilder[AssignedEvent, Option[A]] =
      Field(
        "assignee",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> Obj(onBot),
              "Mannequin" -> Obj(onMannequin),
              "Organization" -> Obj(onOrganization),
              "User" -> Obj(onUser)
            )
          )
        )
      )

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[AssignedEvent, DateTime] =
      Field("createdAt", Scalar())

    def id: SelectionBuilder[AssignedEvent, String] = Field("id", Scalar())

    /**
     * Identifies the user who was assigned.
     */
    @deprecated(
      "Assignees can now be mannequins. Use the `assignee` field instead. Removal on 2020-01-01 UTC.",
      ""
    )
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[AssignedEvent, Option[A]] =
      Field("user", OptionOf(Obj(innerSelection)))
  }

  type AutomaticBaseChangeFailedEvent

  object AutomaticBaseChangeFailedEvent {

    /**
     * Identifies the actor who performed the event.
     */
    def actor[A](
                  onBot: Option[SelectionBuilder[Bot, A]] = None,
                  onEnterpriseUserAccount: Option[
                    SelectionBuilder[EnterpriseUserAccount, A]
                  ] = None,
                  onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                  onUser: Option[SelectionBuilder[User, A]] = None,
                  onOrganization: Option[SelectionBuilder[Organization, A]] = None
                ): SelectionBuilder[AutomaticBaseChangeFailedEvent, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[AutomaticBaseChangeFailedEvent, DateTime] =
      Field("createdAt", Scalar())

    def id: SelectionBuilder[AutomaticBaseChangeFailedEvent, String] =
      Field("id", Scalar())

    /**
     * The new base for this PR
     */
    def newBase: SelectionBuilder[AutomaticBaseChangeFailedEvent, String] =
      Field("newBase", Scalar())

    /**
     * The old base for this PR
     */
    def oldBase: SelectionBuilder[AutomaticBaseChangeFailedEvent, String] =
      Field("oldBase", Scalar())

    /**
     * PullRequest referenced by event.
     */
    def pullRequest[A](
                        innerSelection: SelectionBuilder[PullRequest, A]
                      ): SelectionBuilder[AutomaticBaseChangeFailedEvent, A] =
      Field("pullRequest", Obj(innerSelection))
  }

  type AutomaticBaseChangeSucceededEvent

  object AutomaticBaseChangeSucceededEvent {

    /**
     * Identifies the actor who performed the event.
     */
    def actor[A](
                  onBot: Option[SelectionBuilder[Bot, A]] = None,
                  onEnterpriseUserAccount: Option[
                    SelectionBuilder[EnterpriseUserAccount, A]
                  ] = None,
                  onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                  onUser: Option[SelectionBuilder[User, A]] = None,
                  onOrganization: Option[SelectionBuilder[Organization, A]] = None
                ): SelectionBuilder[AutomaticBaseChangeSucceededEvent, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt
    : SelectionBuilder[AutomaticBaseChangeSucceededEvent, DateTime] =
      Field("createdAt", Scalar())

    def id: SelectionBuilder[AutomaticBaseChangeSucceededEvent, String] =
      Field("id", Scalar())

    /**
     * The new base for this PR
     */
    def newBase: SelectionBuilder[AutomaticBaseChangeSucceededEvent, String] =
      Field("newBase", Scalar())

    /**
     * The old base for this PR
     */
    def oldBase: SelectionBuilder[AutomaticBaseChangeSucceededEvent, String] =
      Field("oldBase", Scalar())

    /**
     * PullRequest referenced by event.
     */
    def pullRequest[A](
                        innerSelection: SelectionBuilder[PullRequest, A]
                      ): SelectionBuilder[AutomaticBaseChangeSucceededEvent, A] =
      Field("pullRequest", Obj(innerSelection))
  }

  type BaseRefChangedEvent

  object BaseRefChangedEvent {

    /**
     * Identifies the actor who performed the event.
     */
    def actor[A](
                  onBot: Option[SelectionBuilder[Bot, A]] = None,
                  onEnterpriseUserAccount: Option[
                    SelectionBuilder[EnterpriseUserAccount, A]
                  ] = None,
                  onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                  onUser: Option[SelectionBuilder[User, A]] = None,
                  onOrganization: Option[SelectionBuilder[Organization, A]] = None
                ): SelectionBuilder[BaseRefChangedEvent, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[BaseRefChangedEvent, DateTime] =
      Field("createdAt", Scalar())

    /**
     * Identifies the name of the base ref for the pull request after it was changed.
     */
    def currentRefName: SelectionBuilder[BaseRefChangedEvent, String] =
      Field("currentRefName", Scalar())

    /**
     * Identifies the primary key from the database.
     */
    def databaseId: SelectionBuilder[BaseRefChangedEvent, Option[Int]] =
      Field("databaseId", OptionOf(Scalar()))

    def id: SelectionBuilder[BaseRefChangedEvent, String] =
      Field("id", Scalar())

    /**
     * Identifies the name of the base ref for the pull request before it was changed.
     */
    def previousRefName: SelectionBuilder[BaseRefChangedEvent, String] =
      Field("previousRefName", Scalar())

    /**
     * PullRequest referenced by event.
     */
    def pullRequest[A](
                        innerSelection: SelectionBuilder[PullRequest, A]
                      ): SelectionBuilder[BaseRefChangedEvent, A] =
      Field("pullRequest", Obj(innerSelection))
  }

  type BaseRefDeletedEvent

  object BaseRefDeletedEvent {

    /**
     * Identifies the actor who performed the event.
     */
    def actor[A](
                  onBot: Option[SelectionBuilder[Bot, A]] = None,
                  onEnterpriseUserAccount: Option[
                    SelectionBuilder[EnterpriseUserAccount, A]
                  ] = None,
                  onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                  onUser: Option[SelectionBuilder[User, A]] = None,
                  onOrganization: Option[SelectionBuilder[Organization, A]] = None
                ): SelectionBuilder[BaseRefDeletedEvent, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * Identifies the name of the Ref associated with the `base_ref_deleted` event.
     */
    def baseRefName: SelectionBuilder[BaseRefDeletedEvent, Option[String]] =
      Field("baseRefName", OptionOf(Scalar()))

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[BaseRefDeletedEvent, DateTime] =
      Field("createdAt", Scalar())

    def id: SelectionBuilder[BaseRefDeletedEvent, String] =
      Field("id", Scalar())

    /**
     * PullRequest referenced by event.
     */
    def pullRequest[A](
                        innerSelection: SelectionBuilder[PullRequest, A]
                      ): SelectionBuilder[BaseRefDeletedEvent, Option[A]] =
      Field("pullRequest", OptionOf(Obj(innerSelection)))
  }

  type BaseRefForcePushedEvent

  object BaseRefForcePushedEvent {

    /**
     * Identifies the actor who performed the event.
     */
    def actor[A](
                  onBot: Option[SelectionBuilder[Bot, A]] = None,
                  onEnterpriseUserAccount: Option[
                    SelectionBuilder[EnterpriseUserAccount, A]
                  ] = None,
                  onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                  onUser: Option[SelectionBuilder[User, A]] = None,
                  onOrganization: Option[SelectionBuilder[Organization, A]] = None
                ): SelectionBuilder[BaseRefForcePushedEvent, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * Identifies the after commit SHA for the 'base_ref_force_pushed' event.
     */
    def afterCommit[A](
                        innerSelection: SelectionBuilder[Commit, A]
                      ): SelectionBuilder[BaseRefForcePushedEvent, Option[A]] =
      Field("afterCommit", OptionOf(Obj(innerSelection)))

    /**
     * Identifies the before commit SHA for the 'base_ref_force_pushed' event.
     */
    def beforeCommit[A](
                         innerSelection: SelectionBuilder[Commit, A]
                       ): SelectionBuilder[BaseRefForcePushedEvent, Option[A]] =
      Field("beforeCommit", OptionOf(Obj(innerSelection)))

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[BaseRefForcePushedEvent, DateTime] =
      Field("createdAt", Scalar())

    def id: SelectionBuilder[BaseRefForcePushedEvent, String] =
      Field("id", Scalar())

    /**
     * PullRequest referenced by event.
     */
    def pullRequest[A](
                        innerSelection: SelectionBuilder[PullRequest, A]
                      ): SelectionBuilder[BaseRefForcePushedEvent, A] =
      Field("pullRequest", Obj(innerSelection))

    /**
     * Identifies the fully qualified ref name for the 'base_ref_force_pushed' event.
     */
    def ref[A](
                innerSelection: SelectionBuilder[Ref, A]
              ): SelectionBuilder[BaseRefForcePushedEvent, Option[A]] =
      Field("ref", OptionOf(Obj(innerSelection)))
  }

  type Blame

  object Blame {

    /**
     * The list of ranges from a Git blame.
     */
    def ranges[A](
                   innerSelection: SelectionBuilder[BlameRange, A]
                 ): SelectionBuilder[Blame, List[A]] =
      Field("ranges", ListOf(Obj(innerSelection)))
  }

  type BlameRange

  object BlameRange {

    /**
     * Identifies the recency of the change, from 1 (new) to 10 (old). This is
     * calculated as a 2-quantile and determines the length of distance between the
     * median age of all the changes in the file and the recency of the current
     * range's change.
     */
    def age: SelectionBuilder[BlameRange, Int] = Field("age", Scalar())

    /**
     * Identifies the line author
     */
    def commit[A](
                   innerSelection: SelectionBuilder[Commit, A]
                 ): SelectionBuilder[BlameRange, A] = Field("commit", Obj(innerSelection))

    /**
     * The ending line for the range
     */
    def endingLine: SelectionBuilder[BlameRange, Int] =
      Field("endingLine", Scalar())

    /**
     * The starting line for the range
     */
    def startingLine: SelectionBuilder[BlameRange, Int] =
      Field("startingLine", Scalar())
  }

  type Blob

  object Blob {

    /**
     * An abbreviated version of the Git object ID
     */
    def abbreviatedOid: SelectionBuilder[Blob, String] =
      Field("abbreviatedOid", Scalar())

    /**
     * Byte size of Blob object
     */
    def byteSize: SelectionBuilder[Blob, Int] = Field("byteSize", Scalar())

    /**
     * The HTTP path for this Git object
     */
    def commitResourcePath: SelectionBuilder[Blob, URI] =
      Field("commitResourcePath", Scalar())

    /**
     * The HTTP URL for this Git object
     */
    def commitUrl: SelectionBuilder[Blob, URI] = Field("commitUrl", Scalar())

    def id: SelectionBuilder[Blob, String] = Field("id", Scalar())

    /**
     * Indicates whether the Blob is binary or text. Returns null if unable to determine the encoding.
     */
    def isBinary: SelectionBuilder[Blob, Option[Boolean]] =
      Field("isBinary", OptionOf(Scalar()))

    /**
     * Indicates whether the contents is truncated
     */
    def isTruncated: SelectionBuilder[Blob, Boolean] =
      Field("isTruncated", Scalar())

    /**
     * The Git object ID
     */
    def oid: SelectionBuilder[Blob, GitObjectID] = Field("oid", Scalar())

    /**
     * The Repository the Git object belongs to
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[Blob, A] = Field("repository", Obj(innerSelection))

    /**
     * UTF8 text data or null if the Blob is binary
     */
    def text: SelectionBuilder[Blob, Option[String]] =
      Field("text", OptionOf(Scalar()))
  }

  type Bot

  object Bot {

    /**
     * A URL pointing to the GitHub App's public avatar.
     */
    def avatarUrl(size: Option[Int] = None): SelectionBuilder[Bot, URI] =
      Field("avatarUrl", Scalar(), arguments = List(Argument("size", size)))

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[Bot, DateTime] =
      Field("createdAt", Scalar())

    /**
     * Identifies the primary key from the database.
     */
    def databaseId: SelectionBuilder[Bot, Option[Int]] =
      Field("databaseId", OptionOf(Scalar()))

    def id: SelectionBuilder[Bot, String] = Field("id", Scalar())

    /**
     * The username of the actor.
     */
    def login: SelectionBuilder[Bot, String] = Field("login", Scalar())

    /**
     * The HTTP path for this bot
     */
    def resourcePath: SelectionBuilder[Bot, URI] =
      Field("resourcePath", Scalar())

    /**
     * Identifies the date and time when the object was last updated.
     */
    def updatedAt: SelectionBuilder[Bot, DateTime] =
      Field("updatedAt", Scalar())

    /**
     * The HTTP URL for this bot
     */
    def url: SelectionBuilder[Bot, URI] = Field("url", Scalar())
  }

  type BranchProtectionRule

  object BranchProtectionRule {

    /**
     * A list of conflicts matching branches protection rule and other branch protection rules
     */
    def branchProtectionRuleConflicts[A](
                                          after: Option[String] = None,
                                          before: Option[String] = None,
                                          first: Option[Int] = None,
                                          last: Option[Int] = None
                                        )(
                                          innerSelection: SelectionBuilder[
                                            BranchProtectionRuleConflictConnection,
                                            A
                                          ]
                                        ): SelectionBuilder[BranchProtectionRule, A] =
      Field(
        "branchProtectionRuleConflicts",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )

    /**
     * The actor who created this branch protection rule.
     */
    def creator[A](
                    onBot: Option[SelectionBuilder[Bot, A]] = None,
                    onEnterpriseUserAccount: Option[
                      SelectionBuilder[EnterpriseUserAccount, A]
                    ] = None,
                    onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                    onUser: Option[SelectionBuilder[User, A]] = None,
                    onOrganization: Option[SelectionBuilder[Organization, A]] = None
                  ): SelectionBuilder[BranchProtectionRule, Option[A]] =
      Field(
        "creator",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * Identifies the primary key from the database.
     */
    def databaseId: SelectionBuilder[BranchProtectionRule, Option[Int]] =
      Field("databaseId", OptionOf(Scalar()))

    /**
     * Will new commits pushed to matching branches dismiss pull request review approvals.
     */
    def dismissesStaleReviews: SelectionBuilder[BranchProtectionRule, Boolean] =
      Field("dismissesStaleReviews", Scalar())

    def id: SelectionBuilder[BranchProtectionRule, String] =
      Field("id", Scalar())

    /**
     * Can admins overwrite branch protection.
     */
    def isAdminEnforced: SelectionBuilder[BranchProtectionRule, Boolean] =
      Field("isAdminEnforced", Scalar())

    /**
     * Repository refs that are protected by this rule
     */
    def matchingRefs[A](
                         after: Option[String] = None,
                         before: Option[String] = None,
                         first: Option[Int] = None,
                         last: Option[Int] = None,
                         query: Option[String] = None
                       )(
                         innerSelection: SelectionBuilder[RefConnection, A]
                       ): SelectionBuilder[BranchProtectionRule, A] =
      Field(
        "matchingRefs",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("query", query)
        )
      )

    /**
     * Identifies the protection rule pattern.
     */
    def pattern: SelectionBuilder[BranchProtectionRule, String] =
      Field("pattern", Scalar())

    /**
     * A list push allowances for this branch protection rule.
     */
    def pushAllowances[A](
                           after: Option[String] = None,
                           before: Option[String] = None,
                           first: Option[Int] = None,
                           last: Option[Int] = None
                         )(
                           innerSelection: SelectionBuilder[PushAllowanceConnection, A]
                         ): SelectionBuilder[BranchProtectionRule, A] =
      Field(
        "pushAllowances",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )

    /**
     * The repository associated with this branch protection rule.
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[BranchProtectionRule, Option[A]] =
      Field("repository", OptionOf(Obj(innerSelection)))

    /**
     * Number of approving reviews required to update matching branches.
     */
    def requiredApprovingReviewCount
    : SelectionBuilder[BranchProtectionRule, Option[Int]] =
      Field("requiredApprovingReviewCount", OptionOf(Scalar()))

    /**
     * List of required status check contexts that must pass for commits to be accepted to matching branches.
     */
    def requiredStatusCheckContexts
    : SelectionBuilder[BranchProtectionRule, Option[List[Option[String]]]] =
      Field("requiredStatusCheckContexts", OptionOf(ListOf(OptionOf(Scalar()))))

    /**
     * Are approving reviews required to update matching branches.
     */
    def requiresApprovingReviews
    : SelectionBuilder[BranchProtectionRule, Boolean] =
      Field("requiresApprovingReviews", Scalar())

    /**
     * Are reviews from code owners required to update matching branches.
     */
    def requiresCodeOwnerReviews
    : SelectionBuilder[BranchProtectionRule, Boolean] =
      Field("requiresCodeOwnerReviews", Scalar())

    /**
     * Are commits required to be signed.
     */
    def requiresCommitSignatures
    : SelectionBuilder[BranchProtectionRule, Boolean] =
      Field("requiresCommitSignatures", Scalar())

    /**
     * Are status checks required to update matching branches.
     */
    def requiresStatusChecks: SelectionBuilder[BranchProtectionRule, Boolean] =
      Field("requiresStatusChecks", Scalar())

    /**
     * Are branches required to be up to date before merging.
     */
    def requiresStrictStatusChecks
    : SelectionBuilder[BranchProtectionRule, Boolean] =
      Field("requiresStrictStatusChecks", Scalar())

    /**
     * Is pushing to matching branches restricted.
     */
    def restrictsPushes: SelectionBuilder[BranchProtectionRule, Boolean] =
      Field("restrictsPushes", Scalar())

    /**
     * Is dismissal of pull request reviews restricted.
     */
    def restrictsReviewDismissals
    : SelectionBuilder[BranchProtectionRule, Boolean] =
      Field("restrictsReviewDismissals", Scalar())

    /**
     * A list review dismissal allowances for this branch protection rule.
     */
    def reviewDismissalAllowances[A](
                                      after: Option[String] = None,
                                      before: Option[String] = None,
                                      first: Option[Int] = None,
                                      last: Option[Int] = None
                                    )(
                                      innerSelection: SelectionBuilder[ReviewDismissalAllowanceConnection, A]
                                    ): SelectionBuilder[BranchProtectionRule, A] =
      Field(
        "reviewDismissalAllowances",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )
  }

  type BranchProtectionRuleConflict

  object BranchProtectionRuleConflict {

    /**
     * Identifies the branch protection rule.
     */
    def branchProtectionRule[A](
                                 innerSelection: SelectionBuilder[BranchProtectionRule, A]
                               ): SelectionBuilder[BranchProtectionRuleConflict, Option[A]] =
      Field("branchProtectionRule", OptionOf(Obj(innerSelection)))

    /**
     * Identifies the conflicting branch protection rule.
     */
    def conflictingBranchProtectionRule[A](
                                            innerSelection: SelectionBuilder[BranchProtectionRule, A]
                                          ): SelectionBuilder[BranchProtectionRuleConflict, Option[A]] =
      Field("conflictingBranchProtectionRule", OptionOf(Obj(innerSelection)))

    /**
     * Identifies the branch ref that has conflicting rules
     */
    def ref[A](
                innerSelection: SelectionBuilder[Ref, A]
              ): SelectionBuilder[BranchProtectionRuleConflict, Option[A]] =
      Field("ref", OptionOf(Obj(innerSelection)))
  }

  type BranchProtectionRuleConflictConnection

  object BranchProtectionRuleConflictConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[BranchProtectionRuleConflictEdge, A]
                ): SelectionBuilder[BranchProtectionRuleConflictConnection, Option[
      List[Option[A]]
    ]] = Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[BranchProtectionRuleConflict, A]
                ): SelectionBuilder[BranchProtectionRuleConflictConnection, Option[
      List[Option[A]]
    ]] = Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[BranchProtectionRuleConflictConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount
    : SelectionBuilder[BranchProtectionRuleConflictConnection, Int] =
      Field("totalCount", Scalar())
  }

  type BranchProtectionRuleConflictEdge

  object BranchProtectionRuleConflictEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[BranchProtectionRuleConflictEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[BranchProtectionRuleConflict, A]
               ): SelectionBuilder[BranchProtectionRuleConflictEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type BranchProtectionRuleConnection

  object BranchProtectionRuleConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[BranchProtectionRuleEdge, A]
                ): SelectionBuilder[BranchProtectionRuleConnection, Option[
      List[Option[A]]
    ]] = Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[BranchProtectionRule, A]
                ): SelectionBuilder[BranchProtectionRuleConnection, Option[
      List[Option[A]]
    ]] = Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[BranchProtectionRuleConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[BranchProtectionRuleConnection, Int] =
      Field("totalCount", Scalar())
  }

  type BranchProtectionRuleEdge

  object BranchProtectionRuleEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[BranchProtectionRuleEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[BranchProtectionRule, A]
               ): SelectionBuilder[BranchProtectionRuleEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type CancelEnterpriseAdminInvitationPayload

  object CancelEnterpriseAdminInvitationPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[CancelEnterpriseAdminInvitationPayload, Option[
      String
    ]] = Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The invitation that was canceled.
     */
    def invitation[A](
                       innerSelection: SelectionBuilder[EnterpriseAdministratorInvitation, A]
                     ): SelectionBuilder[CancelEnterpriseAdminInvitationPayload, Option[A]] =
      Field("invitation", OptionOf(Obj(innerSelection)))

    /**
     * A message confirming the result of canceling an administrator invitation.
     */
    def message
    : SelectionBuilder[CancelEnterpriseAdminInvitationPayload, Option[
      String
    ]] = Field("message", OptionOf(Scalar()))
  }

  type ChangeUserStatusPayload

  object ChangeUserStatusPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[ChangeUserStatusPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * Your updated status.
     */
    def status[A](
                   innerSelection: SelectionBuilder[UserStatus, A]
                 ): SelectionBuilder[ChangeUserStatusPayload, Option[A]] =
      Field("status", OptionOf(Obj(innerSelection)))
  }

  type CheckAnnotation

  object CheckAnnotation {

    /**
     * The annotation's severity level.
     */
    def annotationLevel
    : SelectionBuilder[CheckAnnotation, Option[CheckAnnotationLevel]] =
      Field("annotationLevel", OptionOf(Scalar()))

    /**
     * The path to the file that this annotation was made on.
     */
    def blobUrl: SelectionBuilder[CheckAnnotation, URI] =
      Field("blobUrl", Scalar())

    /**
     * Identifies the primary key from the database.
     */
    def databaseId: SelectionBuilder[CheckAnnotation, Option[Int]] =
      Field("databaseId", OptionOf(Scalar()))

    /**
     * The position of this annotation.
     */
    def location[A](
                     innerSelection: SelectionBuilder[CheckAnnotationSpan, A]
                   ): SelectionBuilder[CheckAnnotation, A] =
      Field("location", Obj(innerSelection))

    /**
     * The annotation's message.
     */
    def message: SelectionBuilder[CheckAnnotation, String] =
      Field("message", Scalar())

    /**
     * The path that this annotation was made on.
     */
    def path: SelectionBuilder[CheckAnnotation, String] =
      Field("path", Scalar())

    /**
     * Additional information about the annotation.
     */
    def rawDetails: SelectionBuilder[CheckAnnotation, Option[String]] =
      Field("rawDetails", OptionOf(Scalar()))

    /**
     * The annotation's title
     */
    def title: SelectionBuilder[CheckAnnotation, Option[String]] =
      Field("title", OptionOf(Scalar()))
  }

  type CheckAnnotationConnection

  object CheckAnnotationConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[CheckAnnotationEdge, A]
                ): SelectionBuilder[CheckAnnotationConnection, Option[List[Option[A]]]] =
      Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[CheckAnnotation, A]
                ): SelectionBuilder[CheckAnnotationConnection, Option[List[Option[A]]]] =
      Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[CheckAnnotationConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[CheckAnnotationConnection, Int] =
      Field("totalCount", Scalar())
  }

  type CheckAnnotationEdge

  object CheckAnnotationEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[CheckAnnotationEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[CheckAnnotation, A]
               ): SelectionBuilder[CheckAnnotationEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type CheckAnnotationPosition

  object CheckAnnotationPosition {

    /**
     * Column number (1 indexed).
     */
    def column: SelectionBuilder[CheckAnnotationPosition, Option[Int]] =
      Field("column", OptionOf(Scalar()))

    /**
     * Line number (1 indexed).
     */
    def line: SelectionBuilder[CheckAnnotationPosition, Int] =
      Field("line", Scalar())
  }

  type CheckAnnotationSpan

  object CheckAnnotationSpan {

    /**
     * End position (inclusive).
     */
    def end[A](
                innerSelection: SelectionBuilder[CheckAnnotationPosition, A]
              ): SelectionBuilder[CheckAnnotationSpan, A] =
      Field("end", Obj(innerSelection))

    /**
     * Start position (inclusive).
     */
    def start[A](
                  innerSelection: SelectionBuilder[CheckAnnotationPosition, A]
                ): SelectionBuilder[CheckAnnotationSpan, A] =
      Field("start", Obj(innerSelection))
  }

  type CheckRun

  object CheckRun {

    /**
     * The check run's annotations
     */
    def annotations[A](
                        after: Option[String] = None,
                        before: Option[String] = None,
                        first: Option[Int] = None,
                        last: Option[Int] = None
                      )(
                        innerSelection: SelectionBuilder[CheckAnnotationConnection, A]
                      ): SelectionBuilder[CheckRun, Option[A]] =
      Field(
        "annotations",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )

    /**
     * The check suite that this run is a part of.
     */
    def checkSuite[A](
                       innerSelection: SelectionBuilder[CheckSuite, A]
                     ): SelectionBuilder[CheckRun, A] = Field("checkSuite", Obj(innerSelection))

    /**
     * Identifies the date and time when the check run was completed.
     */
    def completedAt: SelectionBuilder[CheckRun, Option[DateTime]] =
      Field("completedAt", OptionOf(Scalar()))

    /**
     * The conclusion of the check run.
     */
    def conclusion: SelectionBuilder[CheckRun, Option[CheckConclusionState]] =
      Field("conclusion", OptionOf(Scalar()))

    /**
     * Identifies the primary key from the database.
     */
    def databaseId: SelectionBuilder[CheckRun, Option[Int]] =
      Field("databaseId", OptionOf(Scalar()))

    /**
     * The URL from which to find full details of the check run on the integrator's site.
     */
    def detailsUrl: SelectionBuilder[CheckRun, Option[URI]] =
      Field("detailsUrl", OptionOf(Scalar()))

    /**
     * A reference for the check run on the integrator's system.
     */
    def externalId: SelectionBuilder[CheckRun, Option[String]] =
      Field("externalId", OptionOf(Scalar()))

    def id: SelectionBuilder[CheckRun, String] = Field("id", Scalar())

    /**
     * The name of the check for this check run.
     */
    def name: SelectionBuilder[CheckRun, String] = Field("name", Scalar())

    /**
     * The permalink to the check run summary.
     */
    def permalink: SelectionBuilder[CheckRun, URI] =
      Field("permalink", Scalar())

    /**
     * The repository associated with this check run.
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[CheckRun, A] = Field("repository", Obj(innerSelection))

    /**
     * The HTTP path for this check run.
     */
    def resourcePath: SelectionBuilder[CheckRun, URI] =
      Field("resourcePath", Scalar())

    /**
     * Identifies the date and time when the check run was started.
     */
    def startedAt: SelectionBuilder[CheckRun, Option[DateTime]] =
      Field("startedAt", OptionOf(Scalar()))

    /**
     * The current status of the check run.
     */
    def status: SelectionBuilder[CheckRun, CheckStatusState] =
      Field("status", Scalar())

    /**
     * A string representing the check run's summary
     */
    def summary: SelectionBuilder[CheckRun, Option[String]] =
      Field("summary", OptionOf(Scalar()))

    /**
     * A string representing the check run's text
     */
    def text: SelectionBuilder[CheckRun, Option[String]] =
      Field("text", OptionOf(Scalar()))

    /**
     * A string representing the check run
     */
    def title: SelectionBuilder[CheckRun, Option[String]] =
      Field("title", OptionOf(Scalar()))

    /**
     * The HTTP URL for this check run.
     */
    def url: SelectionBuilder[CheckRun, URI] = Field("url", Scalar())
  }

  type CheckRunConnection

  object CheckRunConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[CheckRunEdge, A]
                ): SelectionBuilder[CheckRunConnection, Option[List[Option[A]]]] =
      Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[CheckRun, A]
                ): SelectionBuilder[CheckRunConnection, Option[List[Option[A]]]] =
      Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[CheckRunConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[CheckRunConnection, Int] =
      Field("totalCount", Scalar())
  }

  type CheckRunEdge

  object CheckRunEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[CheckRunEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[CheckRun, A]
               ): SelectionBuilder[CheckRunEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type CheckSuite

  object CheckSuite {

    /**
     * The GitHub App which created this check suite.
     */
    def app[A](
                innerSelection: SelectionBuilder[App, A]
              ): SelectionBuilder[CheckSuite, Option[A]] =
      Field("app", OptionOf(Obj(innerSelection)))

    /**
     * The name of the branch for this check suite.
     */
    def branch[A](
                   innerSelection: SelectionBuilder[Ref, A]
                 ): SelectionBuilder[CheckSuite, Option[A]] =
      Field("branch", OptionOf(Obj(innerSelection)))

    /**
     * The check runs associated with a check suite.
     */
    def checkRuns[A](
                      after: Option[String] = None,
                      before: Option[String] = None,
                      filterBy: Option[CheckRunFilter] = None,
                      first: Option[Int] = None,
                      last: Option[Int] = None
                    )(
                      innerSelection: SelectionBuilder[CheckRunConnection, A]
                    ): SelectionBuilder[CheckSuite, Option[A]] =
      Field(
        "checkRuns",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("filterBy", filterBy),
          Argument("first", first),
          Argument("last", last)
        )
      )

    /**
     * The commit for this check suite
     */
    def commit[A](
                   innerSelection: SelectionBuilder[Commit, A]
                 ): SelectionBuilder[CheckSuite, A] = Field("commit", Obj(innerSelection))

    /**
     * The conclusion of this check suite.
     */
    def conclusion: SelectionBuilder[CheckSuite, Option[CheckConclusionState]] =
      Field("conclusion", OptionOf(Scalar()))

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[CheckSuite, DateTime] =
      Field("createdAt", Scalar())

    /**
     * Identifies the primary key from the database.
     */
    def databaseId: SelectionBuilder[CheckSuite, Option[Int]] =
      Field("databaseId", OptionOf(Scalar()))

    def id: SelectionBuilder[CheckSuite, String] = Field("id", Scalar())

    /**
     * A list of open pull requests matching the check suite.
     */
    def matchingPullRequests[A](
                                 after: Option[String] = None,
                                 baseRefName: Option[String] = None,
                                 before: Option[String] = None,
                                 first: Option[Int] = None,
                                 headRefName: Option[String] = None,
                                 labels: Option[List[String]] = None,
                                 last: Option[Int] = None,
                                 orderBy: Option[IssueOrder] = None,
                                 states: Option[List[PullRequestState]] = None
                               )(
                                 innerSelection: SelectionBuilder[PullRequestConnection, A]
                               ): SelectionBuilder[CheckSuite, Option[A]] =
      Field(
        "matchingPullRequests",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after),
          Argument("baseRefName", baseRefName),
          Argument("before", before),
          Argument("first", first),
          Argument("headRefName", headRefName),
          Argument("labels", labels),
          Argument("last", last),
          Argument("orderBy", orderBy),
          Argument("states", states)
        )
      )

    /**
     * The push that triggered this check suite.
     */
    def push[A](
                 innerSelection: SelectionBuilder[Push, A]
               ): SelectionBuilder[CheckSuite, Option[A]] =
      Field("push", OptionOf(Obj(innerSelection)))

    /**
     * The repository associated with this check suite.
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[CheckSuite, A] =
      Field("repository", Obj(innerSelection))

    /**
     * The HTTP path for this check suite
     */
    def resourcePath: SelectionBuilder[CheckSuite, URI] =
      Field("resourcePath", Scalar())

    /**
     * The status of this check suite.
     */
    def status: SelectionBuilder[CheckSuite, CheckStatusState] =
      Field("status", Scalar())

    /**
     * Identifies the date and time when the object was last updated.
     */
    def updatedAt: SelectionBuilder[CheckSuite, DateTime] =
      Field("updatedAt", Scalar())

    /**
     * The HTTP URL for this check suite
     */
    def url: SelectionBuilder[CheckSuite, URI] = Field("url", Scalar())
  }

  type CheckSuiteConnection

  object CheckSuiteConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[CheckSuiteEdge, A]
                ): SelectionBuilder[CheckSuiteConnection, Option[List[Option[A]]]] =
      Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[CheckSuite, A]
                ): SelectionBuilder[CheckSuiteConnection, Option[List[Option[A]]]] =
      Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[CheckSuiteConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[CheckSuiteConnection, Int] =
      Field("totalCount", Scalar())
  }

  type CheckSuiteEdge

  object CheckSuiteEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[CheckSuiteEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[CheckSuite, A]
               ): SelectionBuilder[CheckSuiteEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type ClearLabelsFromLabelablePayload

  object ClearLabelsFromLabelablePayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[ClearLabelsFromLabelablePayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The item that was unlabeled.
     */
    def labelable[A](
                      onIssue: Option[SelectionBuilder[Issue, A]] = None,
                      onPullRequest: Option[SelectionBuilder[PullRequest, A]] = None
                    ): SelectionBuilder[ClearLabelsFromLabelablePayload, Option[A]] =
      Field(
        "labelable",
        OptionOf(
          ChoiceOf(
            Map("Issue" -> onIssue, "PullRequest" -> onPullRequest).collect {
              case (k, Some(v)) => k -> Obj(v)
            }
          )
        )
      )
  }

  type CloneProjectPayload

  object CloneProjectPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[CloneProjectPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The id of the JobStatus for populating cloned fields.
     */
    def jobStatusId: SelectionBuilder[CloneProjectPayload, Option[String]] =
      Field("jobStatusId", OptionOf(Scalar()))

    /**
     * The new cloned project.
     */
    def project[A](
                    innerSelection: SelectionBuilder[Project, A]
                  ): SelectionBuilder[CloneProjectPayload, Option[A]] =
      Field("project", OptionOf(Obj(innerSelection)))
  }

  type CloneTemplateRepositoryPayload

  object CloneTemplateRepositoryPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[CloneTemplateRepositoryPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The new repository.
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[CloneTemplateRepositoryPayload, Option[A]] =
      Field("repository", OptionOf(Obj(innerSelection)))
  }

  type CloseIssuePayload

  object CloseIssuePayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId: SelectionBuilder[CloseIssuePayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The issue that was closed.
     */
    def issue[A](
                  innerSelection: SelectionBuilder[Issue, A]
                ): SelectionBuilder[CloseIssuePayload, Option[A]] =
      Field("issue", OptionOf(Obj(innerSelection)))
  }

  type ClosePullRequestPayload

  object ClosePullRequestPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[ClosePullRequestPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The pull request that was closed.
     */
    def pullRequest[A](
                        innerSelection: SelectionBuilder[PullRequest, A]
                      ): SelectionBuilder[ClosePullRequestPayload, Option[A]] =
      Field("pullRequest", OptionOf(Obj(innerSelection)))
  }

  type ClosedEvent

  object ClosedEvent {

    /**
     * Identifies the actor who performed the event.
     */
    def actor[A](
                  onBot: Option[SelectionBuilder[Bot, A]] = None,
                  onEnterpriseUserAccount: Option[
                    SelectionBuilder[EnterpriseUserAccount, A]
                  ] = None,
                  onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                  onUser: Option[SelectionBuilder[User, A]] = None,
                  onOrganization: Option[SelectionBuilder[Organization, A]] = None
                ): SelectionBuilder[ClosedEvent, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * Object that was closed.
     */
    def closable[A](
                     onProject: Option[SelectionBuilder[Project, A]] = None,
                     onIssue: Option[SelectionBuilder[Issue, A]] = None,
                     onMilestone: Option[SelectionBuilder[Milestone, A]] = None,
                     onPullRequest: Option[SelectionBuilder[PullRequest, A]] = None
                   ): SelectionBuilder[ClosedEvent, A] =
      Field(
        "closable",
        ChoiceOf(
          Map(
            "Project" -> onProject,
            "Issue" -> onIssue,
            "Milestone" -> onMilestone,
            "PullRequest" -> onPullRequest
          ).collect { case (k, Some(v)) => k -> Obj(v) }
        )
      )

    /**
     * Object which triggered the creation of this event.
     */
    def closer[A](
                   onCommit: SelectionBuilder[Commit, A],
                   onPullRequest: SelectionBuilder[PullRequest, A]
                 ): SelectionBuilder[ClosedEvent, Option[A]] =
      Field(
        "closer",
        OptionOf(
          ChoiceOf(
            Map("Commit" -> Obj(onCommit), "PullRequest" -> Obj(onPullRequest))
          )
        )
      )

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[ClosedEvent, DateTime] =
      Field("createdAt", Scalar())

    def id: SelectionBuilder[ClosedEvent, String] = Field("id", Scalar())

    /**
     * The HTTP path for this closed event.
     */
    def resourcePath: SelectionBuilder[ClosedEvent, URI] =
      Field("resourcePath", Scalar())

    /**
     * The HTTP URL for this closed event.
     */
    def url: SelectionBuilder[ClosedEvent, URI] = Field("url", Scalar())
  }

  type CodeOfConduct

  object CodeOfConduct {

    /**
     * The body of the Code of Conduct
     */
    def body: SelectionBuilder[CodeOfConduct, Option[String]] =
      Field("body", OptionOf(Scalar()))

    def id: SelectionBuilder[CodeOfConduct, String] = Field("id", Scalar())

    /**
     * The key for the Code of Conduct
     */
    def key: SelectionBuilder[CodeOfConduct, String] = Field("key", Scalar())

    /**
     * The formal name of the Code of Conduct
     */
    def name: SelectionBuilder[CodeOfConduct, String] = Field("name", Scalar())

    /**
     * The HTTP path for this Code of Conduct
     */
    def resourcePath: SelectionBuilder[CodeOfConduct, Option[URI]] =
      Field("resourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for this Code of Conduct
     */
    def url: SelectionBuilder[CodeOfConduct, Option[URI]] =
      Field("url", OptionOf(Scalar()))
  }

  type CommentDeletedEvent

  object CommentDeletedEvent {

    /**
     * Identifies the actor who performed the event.
     */
    def actor[A](
                  onBot: Option[SelectionBuilder[Bot, A]] = None,
                  onEnterpriseUserAccount: Option[
                    SelectionBuilder[EnterpriseUserAccount, A]
                  ] = None,
                  onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                  onUser: Option[SelectionBuilder[User, A]] = None,
                  onOrganization: Option[SelectionBuilder[Organization, A]] = None
                ): SelectionBuilder[CommentDeletedEvent, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[CommentDeletedEvent, DateTime] =
      Field("createdAt", Scalar())

    /**
     * Identifies the primary key from the database.
     */
    def databaseId: SelectionBuilder[CommentDeletedEvent, Option[Int]] =
      Field("databaseId", OptionOf(Scalar()))

    /**
     * The user who authored the deleted comment.
     */
    def deletedCommentAuthor[A](
                                 onBot: Option[SelectionBuilder[Bot, A]] = None,
                                 onEnterpriseUserAccount: Option[
                                   SelectionBuilder[EnterpriseUserAccount, A]
                                 ] = None,
                                 onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                                 onUser: Option[SelectionBuilder[User, A]] = None,
                                 onOrganization: Option[SelectionBuilder[Organization, A]] = None
                               ): SelectionBuilder[CommentDeletedEvent, Option[A]] =
      Field(
        "deletedCommentAuthor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    def id: SelectionBuilder[CommentDeletedEvent, String] =
      Field("id", Scalar())
  }

  type Commit

  object Commit {

    /**
     * An abbreviated version of the Git object ID
     */
    def abbreviatedOid: SelectionBuilder[Commit, String] =
      Field("abbreviatedOid", Scalar())

    /**
     * The number of additions in this commit.
     */
    def additions: SelectionBuilder[Commit, Int] = Field("additions", Scalar())

    /**
     * The pull requests associated with a commit
     */
    def associatedPullRequests[A](
                                   after: Option[String] = None,
                                   before: Option[String] = None,
                                   first: Option[Int] = None,
                                   last: Option[Int] = None,
                                   orderBy: Option[PullRequestOrder] = None
                                 )(
                                   innerSelection: SelectionBuilder[PullRequestConnection, A]
                                 ): SelectionBuilder[Commit, Option[A]] =
      Field(
        "associatedPullRequests",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy)
        )
      )

    /**
     * Authorship details of the commit.
     */
    def author[A](
                   innerSelection: SelectionBuilder[GitActor, A]
                 ): SelectionBuilder[Commit, Option[A]] =
      Field("author", OptionOf(Obj(innerSelection)))

    /**
     * Check if the committer and the author match.
     */
    def authoredByCommitter: SelectionBuilder[Commit, Boolean] =
      Field("authoredByCommitter", Scalar())

    /**
     * The datetime when this commit was authored.
     */
    def authoredDate: SelectionBuilder[Commit, DateTime] =
      Field("authoredDate", Scalar())

    /**
     * Fetches `git blame` information.
     */
    def blame[A](
                  path: String
                )(innerSelection: SelectionBuilder[Blame, A]): SelectionBuilder[Commit, A] =
      Field(
        "blame",
        Obj(innerSelection),
        arguments = List(Argument("path", path))
      )

    /**
     * The number of changed files in this commit.
     */
    def changedFiles: SelectionBuilder[Commit, Int] =
      Field("changedFiles", Scalar())

    /**
     * The check suites associated with a commit.
     */
    def checkSuites[A](
                        after: Option[String] = None,
                        before: Option[String] = None,
                        filterBy: Option[CheckSuiteFilter] = None,
                        first: Option[Int] = None,
                        last: Option[Int] = None
                      )(
                        innerSelection: SelectionBuilder[CheckSuiteConnection, A]
                      ): SelectionBuilder[Commit, Option[A]] =
      Field(
        "checkSuites",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("filterBy", filterBy),
          Argument("first", first),
          Argument("last", last)
        )
      )

    /**
     * Comments made on the commit.
     */
    def comments[A](
                     after: Option[String] = None,
                     before: Option[String] = None,
                     first: Option[Int] = None,
                     last: Option[Int] = None
                   )(
                     innerSelection: SelectionBuilder[CommitCommentConnection, A]
                   ): SelectionBuilder[Commit, A] =
      Field(
        "comments",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )

    /**
     * The HTTP path for this Git object
     */
    def commitResourcePath: SelectionBuilder[Commit, URI] =
      Field("commitResourcePath", Scalar())

    /**
     * The HTTP URL for this Git object
     */
    def commitUrl: SelectionBuilder[Commit, URI] = Field("commitUrl", Scalar())

    /**
     * The datetime when this commit was committed.
     */
    def committedDate: SelectionBuilder[Commit, DateTime] =
      Field("committedDate", Scalar())

    /**
     * Check if commited via GitHub web UI.
     */
    def committedViaWeb: SelectionBuilder[Commit, Boolean] =
      Field("committedViaWeb", Scalar())

    /**
     * Committership details of the commit.
     */
    def committer[A](
                      innerSelection: SelectionBuilder[GitActor, A]
                    ): SelectionBuilder[Commit, Option[A]] =
      Field("committer", OptionOf(Obj(innerSelection)))

    /**
     * The number of deletions in this commit.
     */
    def deletions: SelectionBuilder[Commit, Int] = Field("deletions", Scalar())

    /**
     * The deployments associated with a commit.
     */
    def deployments[A](
                        after: Option[String] = None,
                        before: Option[String] = None,
                        environments: Option[List[String]] = None,
                        first: Option[Int] = None,
                        last: Option[Int] = None,
                        orderBy: Option[DeploymentOrder] = None
                      )(
                        innerSelection: SelectionBuilder[DeploymentConnection, A]
                      ): SelectionBuilder[Commit, Option[A]] =
      Field(
        "deployments",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("environments", environments),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy)
        )
      )

    /**
     * The tree entry representing the file located at the given path.
     */
    def file[A](path: String)(
      innerSelection: SelectionBuilder[TreeEntry, A]
    ): SelectionBuilder[Commit, Option[A]] =
      Field(
        "file",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("path", path))
      )

    /**
     * The linear commit history starting from (and including) this commit, in the same order as `git log`.
     */
    def history[A](
                    after: Option[String] = None,
                    author: Option[CommitAuthor] = None,
                    before: Option[String] = None,
                    first: Option[Int] = None,
                    last: Option[Int] = None,
                    path: Option[String] = None,
                    since: Option[GitTimestamp] = None,
                    until: Option[GitTimestamp] = None
                  )(
                    innerSelection: SelectionBuilder[CommitHistoryConnection, A]
                  ): SelectionBuilder[Commit, A] =
      Field(
        "history",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("author", author),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("path", path),
          Argument("since", since),
          Argument("until", until)
        )
      )

    def id: SelectionBuilder[Commit, String] = Field("id", Scalar())

    /**
     * The Git commit message
     */
    def message: SelectionBuilder[Commit, String] = Field("message", Scalar())

    /**
     * The Git commit message body
     */
    def messageBody: SelectionBuilder[Commit, String] =
      Field("messageBody", Scalar())

    /**
     * The commit message body rendered to HTML.
     */
    def messageBodyHTML: SelectionBuilder[Commit, HTML] =
      Field("messageBodyHTML", Scalar())

    /**
     * The Git commit message headline
     */
    def messageHeadline: SelectionBuilder[Commit, String] =
      Field("messageHeadline", Scalar())

    /**
     * The commit message headline rendered to HTML.
     */
    def messageHeadlineHTML: SelectionBuilder[Commit, HTML] =
      Field("messageHeadlineHTML", Scalar())

    /**
     * The Git object ID
     */
    def oid: SelectionBuilder[Commit, GitObjectID] = Field("oid", Scalar())

    /**
     * The organization this commit was made on behalf of.
     */
    def onBehalfOf[A](
                       innerSelection: SelectionBuilder[Organization, A]
                     ): SelectionBuilder[Commit, Option[A]] =
      Field("onBehalfOf", OptionOf(Obj(innerSelection)))

    /**
     * The parents of a commit.
     */
    def parents[A](
                    after: Option[String] = None,
                    before: Option[String] = None,
                    first: Option[Int] = None,
                    last: Option[Int] = None
                  )(
                    innerSelection: SelectionBuilder[CommitConnection, A]
                  ): SelectionBuilder[Commit, A] =
      Field(
        "parents",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )

    /**
     * The datetime when this commit was pushed.
     */
    def pushedDate: SelectionBuilder[Commit, Option[DateTime]] =
      Field("pushedDate", OptionOf(Scalar()))

    /**
     * The Repository this commit belongs to
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[Commit, A] = Field("repository", Obj(innerSelection))

    /**
     * The HTTP path for this commit
     */
    def resourcePath: SelectionBuilder[Commit, URI] =
      Field("resourcePath", Scalar())

    /**
     * Commit signing information, if present.
     */
    def signature[A](
                      onUnknownSignature: Option[SelectionBuilder[UnknownSignature, A]] =
                      None,
                      onGpgSignature: Option[SelectionBuilder[GpgSignature, A]] = None,
                      onSmimeSignature: Option[SelectionBuilder[SmimeSignature, A]] = None
                    ): SelectionBuilder[Commit, Option[A]] =
      Field(
        "signature",
        OptionOf(
          ChoiceOf(
            Map(
              "UnknownSignature" -> onUnknownSignature,
              "GpgSignature" -> onGpgSignature,
              "SmimeSignature" -> onSmimeSignature
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * Status information for this commit
     */
    def status[A](
                   innerSelection: SelectionBuilder[Status, A]
                 ): SelectionBuilder[Commit, Option[A]] =
      Field("status", OptionOf(Obj(innerSelection)))

    /**
     * Check and Status rollup information for this commit.
     */
    def statusCheckRollup[A](
                              innerSelection: SelectionBuilder[StatusCheckRollup, A]
                            ): SelectionBuilder[Commit, Option[A]] =
      Field("statusCheckRollup", OptionOf(Obj(innerSelection)))

    /**
     * Returns a list of all submodules in this repository as of this Commit parsed from the .gitmodules file.
     */
    def submodules[A](
                       after: Option[String] = None,
                       before: Option[String] = None,
                       first: Option[Int] = None,
                       last: Option[Int] = None
                     )(
                       innerSelection: SelectionBuilder[SubmoduleConnection, A]
                     ): SelectionBuilder[Commit, A] =
      Field(
        "submodules",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )

    /**
     * Returns a URL to download a tarball archive for a repository.
     * Note: For private repositories, these links are temporary and expire after five minutes.
     */
    def tarballUrl: SelectionBuilder[Commit, URI] =
      Field("tarballUrl", Scalar())

    /**
     * Commit's root Tree
     */
    def tree[A](
                 innerSelection: SelectionBuilder[Tree, A]
               ): SelectionBuilder[Commit, A] = Field("tree", Obj(innerSelection))

    /**
     * The HTTP path for the tree of this commit
     */
    def treeResourcePath: SelectionBuilder[Commit, URI] =
      Field("treeResourcePath", Scalar())

    /**
     * The HTTP URL for the tree of this commit
     */
    def treeUrl: SelectionBuilder[Commit, URI] = Field("treeUrl", Scalar())

    /**
     * The HTTP URL for this commit
     */
    def url: SelectionBuilder[Commit, URI] = Field("url", Scalar())

    /**
     * Check if the viewer is able to change their subscription status for the repository.
     */
    def viewerCanSubscribe: SelectionBuilder[Commit, Boolean] =
      Field("viewerCanSubscribe", Scalar())

    /**
     * Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
     */
    def viewerSubscription
    : SelectionBuilder[Commit, Option[SubscriptionState]] =
      Field("viewerSubscription", OptionOf(Scalar()))

    /**
     * Returns a URL to download a zipball archive for a repository.
     * Note: For private repositories, these links are temporary and expire after five minutes.
     */
    def zipballUrl: SelectionBuilder[Commit, URI] =
      Field("zipballUrl", Scalar())
  }

  type CommitComment

  object CommitComment {

    /**
     * The actor who authored the comment.
     */
    def author[A](
                   onBot: Option[SelectionBuilder[Bot, A]] = None,
                   onEnterpriseUserAccount: Option[
                     SelectionBuilder[EnterpriseUserAccount, A]
                   ] = None,
                   onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                   onUser: Option[SelectionBuilder[User, A]] = None,
                   onOrganization: Option[SelectionBuilder[Organization, A]] = None
                 ): SelectionBuilder[CommitComment, Option[A]] =
      Field(
        "author",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * Author's association with the subject of the comment.
     */
    def authorAssociation
    : SelectionBuilder[CommitComment, CommentAuthorAssociation] =
      Field("authorAssociation", Scalar())

    /**
     * Identifies the comment body.
     */
    def body: SelectionBuilder[CommitComment, String] = Field("body", Scalar())

    /**
     * The body rendered to HTML.
     */
    def bodyHTML: SelectionBuilder[CommitComment, HTML] =
      Field("bodyHTML", Scalar())

    /**
     * The body rendered to text.
     */
    def bodyText: SelectionBuilder[CommitComment, String] =
      Field("bodyText", Scalar())

    /**
     * Identifies the commit associated with the comment, if the commit exists.
     */
    def commit[A](
                   innerSelection: SelectionBuilder[Commit, A]
                 ): SelectionBuilder[CommitComment, Option[A]] =
      Field("commit", OptionOf(Obj(innerSelection)))

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[CommitComment, DateTime] =
      Field("createdAt", Scalar())

    /**
     * Check if this comment was created via an email reply.
     */
    def createdViaEmail: SelectionBuilder[CommitComment, Boolean] =
      Field("createdViaEmail", Scalar())

    /**
     * Identifies the primary key from the database.
     */
    def databaseId: SelectionBuilder[CommitComment, Option[Int]] =
      Field("databaseId", OptionOf(Scalar()))

    /**
     * The actor who edited the comment.
     */
    def editor[A](
                   onBot: Option[SelectionBuilder[Bot, A]] = None,
                   onEnterpriseUserAccount: Option[
                     SelectionBuilder[EnterpriseUserAccount, A]
                   ] = None,
                   onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                   onUser: Option[SelectionBuilder[User, A]] = None,
                   onOrganization: Option[SelectionBuilder[Organization, A]] = None
                 ): SelectionBuilder[CommitComment, Option[A]] =
      Field(
        "editor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    def id: SelectionBuilder[CommitComment, String] = Field("id", Scalar())

    /**
     * Check if this comment was edited and includes an edit with the creation data
     */
    def includesCreatedEdit: SelectionBuilder[CommitComment, Boolean] =
      Field("includesCreatedEdit", Scalar())

    /**
     * Returns whether or not a comment has been minimized.
     */
    def isMinimized: SelectionBuilder[CommitComment, Boolean] =
      Field("isMinimized", Scalar())

    /**
     * The moment the editor made the last edit
     */
    def lastEditedAt: SelectionBuilder[CommitComment, Option[DateTime]] =
      Field("lastEditedAt", OptionOf(Scalar()))

    /**
     * Returns why the comment was minimized.
     */
    def minimizedReason: SelectionBuilder[CommitComment, Option[String]] =
      Field("minimizedReason", OptionOf(Scalar()))

    /**
     * Identifies the file path associated with the comment.
     */
    def path: SelectionBuilder[CommitComment, Option[String]] =
      Field("path", OptionOf(Scalar()))

    /**
     * Identifies the line position associated with the comment.
     */
    def position: SelectionBuilder[CommitComment, Option[Int]] =
      Field("position", OptionOf(Scalar()))

    /**
     * Identifies when the comment was published at.
     */
    def publishedAt: SelectionBuilder[CommitComment, Option[DateTime]] =
      Field("publishedAt", OptionOf(Scalar()))

    /**
     * A list of reactions grouped by content left on the subject.
     */
    def reactionGroups[A](
                           innerSelection: SelectionBuilder[ReactionGroup, A]
                         ): SelectionBuilder[CommitComment, Option[List[A]]] =
      Field("reactionGroups", OptionOf(ListOf(Obj(innerSelection))))

    /**
     * A list of Reactions left on the Issue.
     */
    def reactions[A](
                      after: Option[String] = None,
                      before: Option[String] = None,
                      content: Option[ReactionContent] = None,
                      first: Option[Int] = None,
                      last: Option[Int] = None,
                      orderBy: Option[ReactionOrder] = None
                    )(
                      innerSelection: SelectionBuilder[ReactionConnection, A]
                    ): SelectionBuilder[CommitComment, A] =
      Field(
        "reactions",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("content", content),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy)
        )
      )

    /**
     * The repository associated with this node.
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[CommitComment, A] =
      Field("repository", Obj(innerSelection))

    /**
     * The HTTP path permalink for this commit comment.
     */
    def resourcePath: SelectionBuilder[CommitComment, URI] =
      Field("resourcePath", Scalar())

    /**
     * Identifies the date and time when the object was last updated.
     */
    def updatedAt: SelectionBuilder[CommitComment, DateTime] =
      Field("updatedAt", Scalar())

    /**
     * The HTTP URL permalink for this commit comment.
     */
    def url: SelectionBuilder[CommitComment, URI] = Field("url", Scalar())

    /**
     * A list of edits to this content.
     */
    def userContentEdits[A](
                             after: Option[String] = None,
                             before: Option[String] = None,
                             first: Option[Int] = None,
                             last: Option[Int] = None
                           )(
                             innerSelection: SelectionBuilder[UserContentEditConnection, A]
                           ): SelectionBuilder[CommitComment, Option[A]] =
      Field(
        "userContentEdits",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )

    /**
     * Check if the current viewer can delete this object.
     */
    def viewerCanDelete: SelectionBuilder[CommitComment, Boolean] =
      Field("viewerCanDelete", Scalar())

    /**
     * Check if the current viewer can minimize this object.
     */
    def viewerCanMinimize: SelectionBuilder[CommitComment, Boolean] =
      Field("viewerCanMinimize", Scalar())

    /**
     * Can user react to this subject
     */
    def viewerCanReact: SelectionBuilder[CommitComment, Boolean] =
      Field("viewerCanReact", Scalar())

    /**
     * Check if the current viewer can update this object.
     */
    def viewerCanUpdate: SelectionBuilder[CommitComment, Boolean] =
      Field("viewerCanUpdate", Scalar())

    /**
     * Reasons why the current viewer can not update this comment.
     */
    def viewerCannotUpdateReasons
    : SelectionBuilder[CommitComment, List[CommentCannotUpdateReason]] =
      Field("viewerCannotUpdateReasons", ListOf(Scalar()))

    /**
     * Did the viewer author this comment.
     */
    def viewerDidAuthor: SelectionBuilder[CommitComment, Boolean] =
      Field("viewerDidAuthor", Scalar())
  }

  type CommitCommentConnection

  object CommitCommentConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[CommitCommentEdge, A]
                ): SelectionBuilder[CommitCommentConnection, Option[List[Option[A]]]] =
      Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[CommitComment, A]
                ): SelectionBuilder[CommitCommentConnection, Option[List[Option[A]]]] =
      Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[CommitCommentConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[CommitCommentConnection, Int] =
      Field("totalCount", Scalar())
  }

  type CommitCommentEdge

  object CommitCommentEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[CommitCommentEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[CommitComment, A]
               ): SelectionBuilder[CommitCommentEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type CommitCommentThread

  object CommitCommentThread {

    /**
     * The comments that exist in this thread.
     */
    def comments[A](
                     after: Option[String] = None,
                     before: Option[String] = None,
                     first: Option[Int] = None,
                     last: Option[Int] = None
                   )(
                     innerSelection: SelectionBuilder[CommitCommentConnection, A]
                   ): SelectionBuilder[CommitCommentThread, A] =
      Field(
        "comments",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )

    /**
     * The commit the comments were made on.
     */
    def commit[A](
                   innerSelection: SelectionBuilder[Commit, A]
                 ): SelectionBuilder[CommitCommentThread, Option[A]] =
      Field("commit", OptionOf(Obj(innerSelection)))

    def id: SelectionBuilder[CommitCommentThread, String] =
      Field("id", Scalar())

    /**
     * The file the comments were made on.
     */
    def path: SelectionBuilder[CommitCommentThread, Option[String]] =
      Field("path", OptionOf(Scalar()))

    /**
     * The position in the diff for the commit that the comment was made on.
     */
    def position: SelectionBuilder[CommitCommentThread, Option[Int]] =
      Field("position", OptionOf(Scalar()))

    /**
     * The repository associated with this node.
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[CommitCommentThread, A] =
      Field("repository", Obj(innerSelection))
  }

  type CommitConnection

  object CommitConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[CommitEdge, A]
                ): SelectionBuilder[CommitConnection, Option[List[Option[A]]]] =
      Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[Commit, A]
                ): SelectionBuilder[CommitConnection, Option[List[Option[A]]]] =
      Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[CommitConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[CommitConnection, Int] =
      Field("totalCount", Scalar())
  }

  type CommitContributionsByRepository

  object CommitContributionsByRepository {

    /**
     * The commit contributions, each representing a day.
     */
    def contributions[A](
                          after: Option[String] = None,
                          before: Option[String] = None,
                          first: Option[Int] = None,
                          last: Option[Int] = None,
                          orderBy: Option[CommitContributionOrder] = None
                        )(
                          innerSelection: SelectionBuilder[CreatedCommitContributionConnection, A]
                        ): SelectionBuilder[CommitContributionsByRepository, A] =
      Field(
        "contributions",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy)
        )
      )

    /**
     * The repository in which the commits were made.
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[CommitContributionsByRepository, A] =
      Field("repository", Obj(innerSelection))

    /**
     * The HTTP path for the user's commits to the repository in this time range.
     */
    def resourcePath: SelectionBuilder[CommitContributionsByRepository, URI] =
      Field("resourcePath", Scalar())

    /**
     * The HTTP URL for the user's commits to the repository in this time range.
     */
    def url: SelectionBuilder[CommitContributionsByRepository, URI] =
      Field("url", Scalar())
  }

  type CommitEdge

  object CommitEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[CommitEdge, String] = Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[Commit, A]
               ): SelectionBuilder[CommitEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type CommitHistoryConnection

  object CommitHistoryConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[CommitEdge, A]
                ): SelectionBuilder[CommitHistoryConnection, Option[List[Option[A]]]] =
      Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[Commit, A]
                ): SelectionBuilder[CommitHistoryConnection, Option[List[Option[A]]]] =
      Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[CommitHistoryConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[CommitHistoryConnection, Int] =
      Field("totalCount", Scalar())
  }

  type ConnectedEvent

  object ConnectedEvent {

    /**
     * Identifies the actor who performed the event.
     */
    def actor[A](
                  onBot: Option[SelectionBuilder[Bot, A]] = None,
                  onEnterpriseUserAccount: Option[
                    SelectionBuilder[EnterpriseUserAccount, A]
                  ] = None,
                  onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                  onUser: Option[SelectionBuilder[User, A]] = None,
                  onOrganization: Option[SelectionBuilder[Organization, A]] = None
                ): SelectionBuilder[ConnectedEvent, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[ConnectedEvent, DateTime] =
      Field("createdAt", Scalar())

    def id: SelectionBuilder[ConnectedEvent, String] = Field("id", Scalar())

    /**
     * Reference originated in a different repository.
     */
    def isCrossRepository: SelectionBuilder[ConnectedEvent, Boolean] =
      Field("isCrossRepository", Scalar())

    /**
     * Issue or pull request that made the reference.
     */
    def source[A](
                   onIssue: SelectionBuilder[Issue, A],
                   onPullRequest: SelectionBuilder[PullRequest, A]
                 ): SelectionBuilder[ConnectedEvent, A] =
      Field(
        "source",
        ChoiceOf(
          Map("Issue" -> Obj(onIssue), "PullRequest" -> Obj(onPullRequest))
        )
      )

    /**
     * Issue or pull request which was connected.
     */
    def subject[A](
                    onIssue: SelectionBuilder[Issue, A],
                    onPullRequest: SelectionBuilder[PullRequest, A]
                  ): SelectionBuilder[ConnectedEvent, A] =
      Field(
        "subject",
        ChoiceOf(
          Map("Issue" -> Obj(onIssue), "PullRequest" -> Obj(onPullRequest))
        )
      )
  }

  type ContentAttachment

  object ContentAttachment {

    /**
     * The body text of the content attachment. This parameter supports markdown.
     */
    def body: SelectionBuilder[ContentAttachment, String] =
      Field("body", Scalar())

    /**
     * The content reference that the content attachment is attached to.
     */
    def contentReference[A](
                             innerSelection: SelectionBuilder[ContentReference, A]
                           ): SelectionBuilder[ContentAttachment, A] =
      Field("contentReference", Obj(innerSelection))

    /**
     * Identifies the primary key from the database.
     */
    def databaseId: SelectionBuilder[ContentAttachment, Int] =
      Field("databaseId", Scalar())

    def id: SelectionBuilder[ContentAttachment, String] = Field("id", Scalar())

    /**
     * The title of the content attachment.
     */
    def title: SelectionBuilder[ContentAttachment, String] =
      Field("title", Scalar())
  }

  type ContentReference

  object ContentReference {

    /**
     * Identifies the primary key from the database.
     */
    def databaseId: SelectionBuilder[ContentReference, Int] =
      Field("databaseId", Scalar())

    def id: SelectionBuilder[ContentReference, String] = Field("id", Scalar())

    /**
     * The reference of the content reference.
     */
    def reference: SelectionBuilder[ContentReference, String] =
      Field("reference", Scalar())
  }

  type ContributionCalendar

  object ContributionCalendar {

    /**
     * A list of hex color codes used in this calendar. The darker the color, the more contributions it represents.
     */
    def colors: SelectionBuilder[ContributionCalendar, List[String]] =
      Field("colors", ListOf(Scalar()))

    /**
     * Determine if the color set was chosen because it's currently Halloween.
     */
    def isHalloween: SelectionBuilder[ContributionCalendar, Boolean] =
      Field("isHalloween", Scalar())

    /**
     * A list of the months of contributions in this calendar.
     */
    def months[A](
                   innerSelection: SelectionBuilder[ContributionCalendarMonth, A]
                 ): SelectionBuilder[ContributionCalendar, List[A]] =
      Field("months", ListOf(Obj(innerSelection)))

    /**
     * The count of total contributions in the calendar.
     */
    def totalContributions: SelectionBuilder[ContributionCalendar, Int] =
      Field("totalContributions", Scalar())

    /**
     * A list of the weeks of contributions in this calendar.
     */
    def weeks[A](
                  innerSelection: SelectionBuilder[ContributionCalendarWeek, A]
                ): SelectionBuilder[ContributionCalendar, List[A]] =
      Field("weeks", ListOf(Obj(innerSelection)))
  }

  type ContributionCalendarDay

  object ContributionCalendarDay {

    /**
     * The hex color code that represents how many contributions were made on this day compared to others in the calendar.
     */
    def color: SelectionBuilder[ContributionCalendarDay, String] =
      Field("color", Scalar())

    /**
     * How many contributions were made by the user on this day.
     */
    def contributionCount: SelectionBuilder[ContributionCalendarDay, Int] =
      Field("contributionCount", Scalar())

    /**
     * The day this square represents.
     */
    def date: SelectionBuilder[ContributionCalendarDay, Date] =
      Field("date", Scalar())

    /**
     * A number representing which day of the week this square represents, e.g., 1 is Monday.
     */
    def weekday: SelectionBuilder[ContributionCalendarDay, Int] =
      Field("weekday", Scalar())
  }

  type ContributionCalendarMonth

  object ContributionCalendarMonth {

    /**
     * The date of the first day of this month.
     */
    def firstDay: SelectionBuilder[ContributionCalendarMonth, Date] =
      Field("firstDay", Scalar())

    /**
     * The name of the month.
     */
    def name: SelectionBuilder[ContributionCalendarMonth, String] =
      Field("name", Scalar())

    /**
     * How many weeks started in this month.
     */
    def totalWeeks: SelectionBuilder[ContributionCalendarMonth, Int] =
      Field("totalWeeks", Scalar())

    /**
     * The year the month occurred in.
     */
    def year: SelectionBuilder[ContributionCalendarMonth, Int] =
      Field("year", Scalar())
  }

  type ContributionCalendarWeek

  object ContributionCalendarWeek {

    /**
     * The days of contributions in this week.
     */
    def contributionDays[A](
                             innerSelection: SelectionBuilder[ContributionCalendarDay, A]
                           ): SelectionBuilder[ContributionCalendarWeek, List[A]] =
      Field("contributionDays", ListOf(Obj(innerSelection)))

    /**
     * The date of the earliest square in this week.
     */
    def firstDay: SelectionBuilder[ContributionCalendarWeek, Date] =
      Field("firstDay", Scalar())
  }

  type ContributionsCollection

  object ContributionsCollection {

    /**
     * Commit contributions made by the user, grouped by repository.
     */
    def commitContributionsByRepository[A](maxRepositories: Option[Int] = None)(
      innerSelection: SelectionBuilder[CommitContributionsByRepository, A]
    ): SelectionBuilder[ContributionsCollection, List[A]] =
      Field(
        "commitContributionsByRepository",
        ListOf(Obj(innerSelection)),
        arguments = List(Argument("maxRepositories", maxRepositories))
      )

    /**
     * A calendar of this user's contributions on GitHub.
     */
    def contributionCalendar[A](
                                 innerSelection: SelectionBuilder[ContributionCalendar, A]
                               ): SelectionBuilder[ContributionsCollection, A] =
      Field("contributionCalendar", Obj(innerSelection))

    /**
     * The years the user has been making contributions with the most recent year first.
     */
    def contributionYears
    : SelectionBuilder[ContributionsCollection, List[Int]] =
      Field("contributionYears", ListOf(Scalar()))

    /**
     * Determine if this collection's time span ends in the current month.
     */
    def doesEndInCurrentMonth
    : SelectionBuilder[ContributionsCollection, Boolean] =
      Field("doesEndInCurrentMonth", Scalar())

    /**
     * The date of the first restricted contribution the user made in this time
     * period. Can only be non-null when the user has enabled private contribution counts.
     */
    def earliestRestrictedContributionDate
    : SelectionBuilder[ContributionsCollection, Option[Date]] =
      Field("earliestRestrictedContributionDate", OptionOf(Scalar()))

    /**
     * The ending date and time of this collection.
     */
    def endedAt: SelectionBuilder[ContributionsCollection, DateTime] =
      Field("endedAt", Scalar())

    /**
     * The first issue the user opened on GitHub. This will be null if that issue was
     * opened outside the collection's time range and ignoreTimeRange is false. If
     * the issue is not visible but the user has opted to show private contributions,
     * a RestrictedContribution will be returned.
     */
    def firstIssueContribution[A](
                                   onCreatedIssueContribution: SelectionBuilder[
                                     CreatedIssueContribution,
                                     A
                                   ],
                                   onRestrictedContribution: SelectionBuilder[RestrictedContribution, A]
                                 ): SelectionBuilder[ContributionsCollection, Option[A]] =
      Field(
        "firstIssueContribution",
        OptionOf(
          ChoiceOf(
            Map(
              "CreatedIssueContribution" -> Obj(onCreatedIssueContribution),
              "RestrictedContribution" -> Obj(onRestrictedContribution)
            )
          )
        )
      )

    /**
     * The first pull request the user opened on GitHub. This will be null if that
     * pull request was opened outside the collection's time range and
     * ignoreTimeRange is not true. If the pull request is not visible but the user
     * has opted to show private contributions, a RestrictedContribution will be returned.
     */
    def firstPullRequestContribution[A](
                                         onCreatedPullRequestContribution: SelectionBuilder[
                                           CreatedPullRequestContribution,
                                           A
                                         ],
                                         onRestrictedContribution: SelectionBuilder[RestrictedContribution, A]
                                       ): SelectionBuilder[ContributionsCollection, Option[A]] =
      Field(
        "firstPullRequestContribution",
        OptionOf(
          ChoiceOf(
            Map(
              "CreatedPullRequestContribution" -> Obj(
                onCreatedPullRequestContribution
              ),
              "RestrictedContribution" -> Obj(onRestrictedContribution)
            )
          )
        )
      )

    /**
     * The first repository the user created on GitHub. This will be null if that
     * first repository was created outside the collection's time range and
     * ignoreTimeRange is false. If the repository is not visible, then a
     * RestrictedContribution is returned.
     */
    def firstRepositoryContribution[A](
                                        onCreatedRepositoryContribution: SelectionBuilder[
                                          CreatedRepositoryContribution,
                                          A
                                        ],
                                        onRestrictedContribution: SelectionBuilder[RestrictedContribution, A]
                                      ): SelectionBuilder[ContributionsCollection, Option[A]] =
      Field(
        "firstRepositoryContribution",
        OptionOf(
          ChoiceOf(
            Map(
              "CreatedRepositoryContribution" -> Obj(
                onCreatedRepositoryContribution
              ),
              "RestrictedContribution" -> Obj(onRestrictedContribution)
            )
          )
        )
      )

    /**
     * Does the user have any more activity in the timeline that occurred prior to the collection's time range?
     */
    def hasActivityInThePast
    : SelectionBuilder[ContributionsCollection, Boolean] =
      Field("hasActivityInThePast", Scalar())

    /**
     * Determine if there are any contributions in this collection.
     */
    def hasAnyContributions
    : SelectionBuilder[ContributionsCollection, Boolean] =
      Field("hasAnyContributions", Scalar())

    /**
     * Determine if the user made any contributions in this time frame whose details
     * are not visible because they were made in a private repository. Can only be
     * true if the user enabled private contribution counts.
     */
    def hasAnyRestrictedContributions
    : SelectionBuilder[ContributionsCollection, Boolean] =
      Field("hasAnyRestrictedContributions", Scalar())

    /**
     * Whether or not the collector's time span is all within the same day.
     */
    def isSingleDay: SelectionBuilder[ContributionsCollection, Boolean] =
      Field("isSingleDay", Scalar())

    /**
     * A list of issues the user opened.
     */
    def issueContributions[A](
                               after: Option[String] = None,
                               before: Option[String] = None,
                               excludeFirst: Option[Boolean] = None,
                               excludePopular: Option[Boolean] = None,
                               first: Option[Int] = None,
                               last: Option[Int] = None,
                               orderBy: Option[ContributionOrder] = None
                             )(
                               innerSelection: SelectionBuilder[CreatedIssueContributionConnection, A]
                             ): SelectionBuilder[ContributionsCollection, A] =
      Field(
        "issueContributions",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("excludeFirst", excludeFirst),
          Argument("excludePopular", excludePopular),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy)
        )
      )

    /**
     * Issue contributions made by the user, grouped by repository.
     */
    def issueContributionsByRepository[A](
                                           excludeFirst: Option[Boolean] = None,
                                           excludePopular: Option[Boolean] = None,
                                           maxRepositories: Option[Int] = None
                                         )(
                                           innerSelection: SelectionBuilder[IssueContributionsByRepository, A]
                                         ): SelectionBuilder[ContributionsCollection, List[A]] =
      Field(
        "issueContributionsByRepository",
        ListOf(Obj(innerSelection)),
        arguments = List(
          Argument("excludeFirst", excludeFirst),
          Argument("excludePopular", excludePopular),
          Argument("maxRepositories", maxRepositories)
        )
      )

    /**
     * When the user signed up for GitHub. This will be null if that sign up date
     * falls outside the collection's time range and ignoreTimeRange is false.
     */
    def joinedGitHubContribution[A](
                                     innerSelection: SelectionBuilder[JoinedGitHubContribution, A]
                                   ): SelectionBuilder[ContributionsCollection, Option[A]] =
      Field("joinedGitHubContribution", OptionOf(Obj(innerSelection)))

    /**
     * The date of the most recent restricted contribution the user made in this time
     * period. Can only be non-null when the user has enabled private contribution counts.
     */
    def latestRestrictedContributionDate
    : SelectionBuilder[ContributionsCollection, Option[Date]] =
      Field("latestRestrictedContributionDate", OptionOf(Scalar()))

    /**
     * When this collection's time range does not include any activity from the user, use this
     * to get a different collection from an earlier time range that does have activity.
     */
    def mostRecentCollectionWithActivity[A](
                                             innerSelection: SelectionBuilder[ContributionsCollection, A]
                                           ): SelectionBuilder[ContributionsCollection, Option[A]] =
      Field("mostRecentCollectionWithActivity", OptionOf(Obj(innerSelection)))

    /**
     * Returns a different contributions collection from an earlier time range than this one
     * that does not have any contributions.
     */
    def mostRecentCollectionWithoutActivity[A](
                                                innerSelection: SelectionBuilder[ContributionsCollection, A]
                                              ): SelectionBuilder[ContributionsCollection, Option[A]] =
      Field(
        "mostRecentCollectionWithoutActivity",
        OptionOf(Obj(innerSelection))
      )

    /**
     * The issue the user opened on GitHub that received the most comments in the specified
     * time frame.
     */
    def popularIssueContribution[A](
                                     innerSelection: SelectionBuilder[CreatedIssueContribution, A]
                                   ): SelectionBuilder[ContributionsCollection, Option[A]] =
      Field("popularIssueContribution", OptionOf(Obj(innerSelection)))

    /**
     * The pull request the user opened on GitHub that received the most comments in the
     * specified time frame.
     */
    def popularPullRequestContribution[A](
                                           innerSelection: SelectionBuilder[CreatedPullRequestContribution, A]
                                         ): SelectionBuilder[ContributionsCollection, Option[A]] =
      Field("popularPullRequestContribution", OptionOf(Obj(innerSelection)))

    /**
     * Pull request contributions made by the user.
     */
    def pullRequestContributions[A](
                                     after: Option[String] = None,
                                     before: Option[String] = None,
                                     excludeFirst: Option[Boolean] = None,
                                     excludePopular: Option[Boolean] = None,
                                     first: Option[Int] = None,
                                     last: Option[Int] = None,
                                     orderBy: Option[ContributionOrder] = None
                                   )(
                                     innerSelection: SelectionBuilder[
                                       CreatedPullRequestContributionConnection,
                                       A
                                     ]
                                   ): SelectionBuilder[ContributionsCollection, A] =
      Field(
        "pullRequestContributions",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("excludeFirst", excludeFirst),
          Argument("excludePopular", excludePopular),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy)
        )
      )

    /**
     * Pull request contributions made by the user, grouped by repository.
     */
    def pullRequestContributionsByRepository[A](
                                                 excludeFirst: Option[Boolean] = None,
                                                 excludePopular: Option[Boolean] = None,
                                                 maxRepositories: Option[Int] = None
                                               )(innerSelection: SelectionBuilder[PullRequestContributionsByRepository, A])
    : SelectionBuilder[ContributionsCollection, List[A]] =
      Field(
        "pullRequestContributionsByRepository",
        ListOf(Obj(innerSelection)),
        arguments = List(
          Argument("excludeFirst", excludeFirst),
          Argument("excludePopular", excludePopular),
          Argument("maxRepositories", maxRepositories)
        )
      )

    /**
     * Pull request review contributions made by the user.
     */
    def pullRequestReviewContributions[A](
                                           after: Option[String] = None,
                                           before: Option[String] = None,
                                           first: Option[Int] = None,
                                           last: Option[Int] = None,
                                           orderBy: Option[ContributionOrder] = None
                                         )(
                                           innerSelection: SelectionBuilder[
                                             CreatedPullRequestReviewContributionConnection,
                                             A
                                           ]
                                         ): SelectionBuilder[ContributionsCollection, A] =
      Field(
        "pullRequestReviewContributions",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy)
        )
      )

    /**
     * Pull request review contributions made by the user, grouped by repository.
     */
    def pullRequestReviewContributionsByRepository[A](
                                                       maxRepositories: Option[Int] = None
                                                     )(
                                                       innerSelection: SelectionBuilder[
                                                         PullRequestReviewContributionsByRepository,
                                                         A
                                                       ]
                                                     ): SelectionBuilder[ContributionsCollection, List[A]] =
      Field(
        "pullRequestReviewContributionsByRepository",
        ListOf(Obj(innerSelection)),
        arguments = List(Argument("maxRepositories", maxRepositories))
      )

    /**
     * A list of repositories owned by the user that the user created in this time range.
     */
    def repositoryContributions[A](
                                    after: Option[String] = None,
                                    before: Option[String] = None,
                                    excludeFirst: Option[Boolean] = None,
                                    first: Option[Int] = None,
                                    last: Option[Int] = None,
                                    orderBy: Option[ContributionOrder] = None
                                  )(
                                    innerSelection: SelectionBuilder[
                                      CreatedRepositoryContributionConnection,
                                      A
                                    ]
                                  ): SelectionBuilder[ContributionsCollection, A] =
      Field(
        "repositoryContributions",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("excludeFirst", excludeFirst),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy)
        )
      )

    /**
     * A count of contributions made by the user that the viewer cannot access. Only
     * non-zero when the user has chosen to share their private contribution counts.
     */
    def restrictedContributionsCount
    : SelectionBuilder[ContributionsCollection, Int] =
      Field("restrictedContributionsCount", Scalar())

    /**
     * The beginning date and time of this collection.
     */
    def startedAt: SelectionBuilder[ContributionsCollection, DateTime] =
      Field("startedAt", Scalar())

    /**
     * How many commits were made by the user in this time span.
     */
    def totalCommitContributions
    : SelectionBuilder[ContributionsCollection, Int] =
      Field("totalCommitContributions", Scalar())

    /**
     * How many issues the user opened.
     */
    def totalIssueContributions(
                                 excludeFirst: Option[Boolean] = None,
                                 excludePopular: Option[Boolean] = None
                               ): SelectionBuilder[ContributionsCollection, Int] =
      Field(
        "totalIssueContributions",
        Scalar(),
        arguments = List(
          Argument("excludeFirst", excludeFirst),
          Argument("excludePopular", excludePopular)
        )
      )

    /**
     * How many pull requests the user opened.
     */
    def totalPullRequestContributions(
                                       excludeFirst: Option[Boolean] = None,
                                       excludePopular: Option[Boolean] = None
                                     ): SelectionBuilder[ContributionsCollection, Int] =
      Field(
        "totalPullRequestContributions",
        Scalar(),
        arguments = List(
          Argument("excludeFirst", excludeFirst),
          Argument("excludePopular", excludePopular)
        )
      )

    /**
     * How many pull request reviews the user left.
     */
    def totalPullRequestReviewContributions
    : SelectionBuilder[ContributionsCollection, Int] =
      Field("totalPullRequestReviewContributions", Scalar())

    /**
     * How many different repositories the user committed to.
     */
    def totalRepositoriesWithContributedCommits
    : SelectionBuilder[ContributionsCollection, Int] =
      Field("totalRepositoriesWithContributedCommits", Scalar())

    /**
     * How many different repositories the user opened issues in.
     */
    def totalRepositoriesWithContributedIssues(
                                                excludeFirst: Option[Boolean] = None,
                                                excludePopular: Option[Boolean] = None
                                              ): SelectionBuilder[ContributionsCollection, Int] =
      Field(
        "totalRepositoriesWithContributedIssues",
        Scalar(),
        arguments = List(
          Argument("excludeFirst", excludeFirst),
          Argument("excludePopular", excludePopular)
        )
      )

    /**
     * How many different repositories the user left pull request reviews in.
     */
    def totalRepositoriesWithContributedPullRequestReviews
    : SelectionBuilder[ContributionsCollection, Int] =
      Field("totalRepositoriesWithContributedPullRequestReviews", Scalar())

    /**
     * How many different repositories the user opened pull requests in.
     */
    def totalRepositoriesWithContributedPullRequests(
                                                      excludeFirst: Option[Boolean] = None,
                                                      excludePopular: Option[Boolean] = None
                                                    ): SelectionBuilder[ContributionsCollection, Int] =
      Field(
        "totalRepositoriesWithContributedPullRequests",
        Scalar(),
        arguments = List(
          Argument("excludeFirst", excludeFirst),
          Argument("excludePopular", excludePopular)
        )
      )

    /**
     * How many repositories the user created.
     */
    def totalRepositoryContributions(
                                      excludeFirst: Option[Boolean] = None
                                    ): SelectionBuilder[ContributionsCollection, Int] =
      Field(
        "totalRepositoryContributions",
        Scalar(),
        arguments = List(Argument("excludeFirst", excludeFirst))
      )

    /**
     * The user who made the contributions in this collection.
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[ContributionsCollection, A] =
      Field("user", Obj(innerSelection))
  }

  type ConvertProjectCardNoteToIssuePayload

  object ConvertProjectCardNoteToIssuePayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[ConvertProjectCardNoteToIssuePayload, Option[
      String
    ]] = Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The updated ProjectCard.
     */
    def projectCard[A](
                        innerSelection: SelectionBuilder[ProjectCard, A]
                      ): SelectionBuilder[ConvertProjectCardNoteToIssuePayload, Option[A]] =
      Field("projectCard", OptionOf(Obj(innerSelection)))
  }

  type ConvertToDraftEvent

  object ConvertToDraftEvent {

    /**
     * Identifies the actor who performed the event.
     */
    def actor[A](
                  onBot: Option[SelectionBuilder[Bot, A]] = None,
                  onEnterpriseUserAccount: Option[
                    SelectionBuilder[EnterpriseUserAccount, A]
                  ] = None,
                  onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                  onUser: Option[SelectionBuilder[User, A]] = None,
                  onOrganization: Option[SelectionBuilder[Organization, A]] = None
                ): SelectionBuilder[ConvertToDraftEvent, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[ConvertToDraftEvent, DateTime] =
      Field("createdAt", Scalar())

    def id: SelectionBuilder[ConvertToDraftEvent, String] =
      Field("id", Scalar())

    /**
     * PullRequest referenced by event.
     */
    def pullRequest[A](
                        innerSelection: SelectionBuilder[PullRequest, A]
                      ): SelectionBuilder[ConvertToDraftEvent, A] =
      Field("pullRequest", Obj(innerSelection))

    /**
     * The HTTP path for this convert to draft event.
     */
    def resourcePath: SelectionBuilder[ConvertToDraftEvent, URI] =
      Field("resourcePath", Scalar())

    /**
     * The HTTP URL for this convert to draft event.
     */
    def url: SelectionBuilder[ConvertToDraftEvent, URI] = Field("url", Scalar())
  }

  type ConvertedNoteToIssueEvent

  object ConvertedNoteToIssueEvent {

    /**
     * Identifies the actor who performed the event.
     */
    def actor[A](
                  onBot: Option[SelectionBuilder[Bot, A]] = None,
                  onEnterpriseUserAccount: Option[
                    SelectionBuilder[EnterpriseUserAccount, A]
                  ] = None,
                  onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                  onUser: Option[SelectionBuilder[User, A]] = None,
                  onOrganization: Option[SelectionBuilder[Organization, A]] = None
                ): SelectionBuilder[ConvertedNoteToIssueEvent, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[ConvertedNoteToIssueEvent, DateTime] =
      Field("createdAt", Scalar())

    /**
     * Identifies the primary key from the database.
     */
    def databaseId: SelectionBuilder[ConvertedNoteToIssueEvent, Option[Int]] =
      Field("databaseId", OptionOf(Scalar()))

    def id: SelectionBuilder[ConvertedNoteToIssueEvent, String] =
      Field("id", Scalar())

    /**
     * Project referenced by event.
     */
    def project[A](
                    innerSelection: SelectionBuilder[Project, A]
                  ): SelectionBuilder[ConvertedNoteToIssueEvent, Option[A]] =
      Field("project", OptionOf(Obj(innerSelection)))

    /**
     * Project card referenced by this project event.
     */
    def projectCard[A](
                        innerSelection: SelectionBuilder[ProjectCard, A]
                      ): SelectionBuilder[ConvertedNoteToIssueEvent, Option[A]] =
      Field("projectCard", OptionOf(Obj(innerSelection)))

    /**
     * Column name referenced by this project event.
     */
    def projectColumnName: SelectionBuilder[ConvertedNoteToIssueEvent, String] =
      Field("projectColumnName", Scalar())
  }

  type CreateBranchProtectionRulePayload

  object CreateBranchProtectionRulePayload {

    /**
     * The newly created BranchProtectionRule.
     */
    def branchProtectionRule[A](
                                 innerSelection: SelectionBuilder[BranchProtectionRule, A]
                               ): SelectionBuilder[CreateBranchProtectionRulePayload, Option[A]] =
      Field("branchProtectionRule", OptionOf(Obj(innerSelection)))

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[CreateBranchProtectionRulePayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))
  }

  type CreateCheckRunPayload

  object CreateCheckRunPayload {

    /**
     * The newly created check run.
     */
    def checkRun[A](
                     innerSelection: SelectionBuilder[CheckRun, A]
                   ): SelectionBuilder[CreateCheckRunPayload, Option[A]] =
      Field("checkRun", OptionOf(Obj(innerSelection)))

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[CreateCheckRunPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))
  }

  type CreateCheckSuitePayload

  object CreateCheckSuitePayload {

    /**
     * The newly created check suite.
     */
    def checkSuite[A](
                       innerSelection: SelectionBuilder[CheckSuite, A]
                     ): SelectionBuilder[CreateCheckSuitePayload, Option[A]] =
      Field("checkSuite", OptionOf(Obj(innerSelection)))

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[CreateCheckSuitePayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))
  }

  type CreateContentAttachmentPayload

  object CreateContentAttachmentPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[CreateContentAttachmentPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The newly created content attachment.
     */
    def contentAttachment[A](
                              innerSelection: SelectionBuilder[ContentAttachment, A]
                            ): SelectionBuilder[CreateContentAttachmentPayload, Option[A]] =
      Field("contentAttachment", OptionOf(Obj(innerSelection)))
  }

  type CreateDeploymentPayload

  object CreateDeploymentPayload {

    /**
     * True if the default branch has been auto-merged into the deployment ref.
     */
    def autoMerged: SelectionBuilder[CreateDeploymentPayload, Option[Boolean]] =
      Field("autoMerged", OptionOf(Scalar()))

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[CreateDeploymentPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The new deployment.
     */
    def deployment[A](
                       innerSelection: SelectionBuilder[Deployment, A]
                     ): SelectionBuilder[CreateDeploymentPayload, Option[A]] =
      Field("deployment", OptionOf(Obj(innerSelection)))
  }

  type CreateDeploymentStatusPayload

  object CreateDeploymentStatusPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[CreateDeploymentStatusPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The new deployment status.
     */
    def deploymentStatus[A](
                             innerSelection: SelectionBuilder[DeploymentStatus, A]
                           ): SelectionBuilder[CreateDeploymentStatusPayload, Option[A]] =
      Field("deploymentStatus", OptionOf(Obj(innerSelection)))
  }

  type CreateEnterpriseOrganizationPayload

  object CreateEnterpriseOrganizationPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[CreateEnterpriseOrganizationPayload, Option[
      String
    ]] = Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The enterprise that owns the created organization.
     */
    def enterprise[A](
                       innerSelection: SelectionBuilder[Enterprise, A]
                     ): SelectionBuilder[CreateEnterpriseOrganizationPayload, Option[A]] =
      Field("enterprise", OptionOf(Obj(innerSelection)))

    /**
     * The organization that was created.
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[CreateEnterpriseOrganizationPayload, Option[A]] =
      Field("organization", OptionOf(Obj(innerSelection)))
  }

  type CreateIpAllowListEntryPayload

  object CreateIpAllowListEntryPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[CreateIpAllowListEntryPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The IP allow list entry that was created.
     */
    def ipAllowListEntry[A](
                             innerSelection: SelectionBuilder[IpAllowListEntry, A]
                           ): SelectionBuilder[CreateIpAllowListEntryPayload, Option[A]] =
      Field("ipAllowListEntry", OptionOf(Obj(innerSelection)))
  }

  type CreateIssuePayload

  object CreateIssuePayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId: SelectionBuilder[CreateIssuePayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The new issue.
     */
    def issue[A](
                  innerSelection: SelectionBuilder[Issue, A]
                ): SelectionBuilder[CreateIssuePayload, Option[A]] =
      Field("issue", OptionOf(Obj(innerSelection)))
  }

  type CreateLabelPayload

  object CreateLabelPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId: SelectionBuilder[CreateLabelPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The new label.
     */
    def label[A](
                  innerSelection: SelectionBuilder[Label, A]
                ): SelectionBuilder[CreateLabelPayload, Option[A]] =
      Field("label", OptionOf(Obj(innerSelection)))
  }

  type CreateProjectPayload

  object CreateProjectPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[CreateProjectPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The new project.
     */
    def project[A](
                    innerSelection: SelectionBuilder[Project, A]
                  ): SelectionBuilder[CreateProjectPayload, Option[A]] =
      Field("project", OptionOf(Obj(innerSelection)))
  }

  type CreatePullRequestPayload

  object CreatePullRequestPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[CreatePullRequestPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The new pull request.
     */
    def pullRequest[A](
                        innerSelection: SelectionBuilder[PullRequest, A]
                      ): SelectionBuilder[CreatePullRequestPayload, Option[A]] =
      Field("pullRequest", OptionOf(Obj(innerSelection)))
  }

  type CreateRefPayload

  object CreateRefPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId: SelectionBuilder[CreateRefPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The newly created ref.
     */
    def ref[A](
                innerSelection: SelectionBuilder[Ref, A]
              ): SelectionBuilder[CreateRefPayload, Option[A]] =
      Field("ref", OptionOf(Obj(innerSelection)))
  }

  type CreateRepositoryPayload

  object CreateRepositoryPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[CreateRepositoryPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The new repository.
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[CreateRepositoryPayload, Option[A]] =
      Field("repository", OptionOf(Obj(innerSelection)))
  }

  type CreateTeamDiscussionCommentPayload

  object CreateTeamDiscussionCommentPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[CreateTeamDiscussionCommentPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The new comment.
     */
    def teamDiscussionComment[A](
                                  innerSelection: SelectionBuilder[TeamDiscussionComment, A]
                                ): SelectionBuilder[CreateTeamDiscussionCommentPayload, Option[A]] =
      Field("teamDiscussionComment", OptionOf(Obj(innerSelection)))
  }

  type CreateTeamDiscussionPayload

  object CreateTeamDiscussionPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[CreateTeamDiscussionPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The new discussion.
     */
    def teamDiscussion[A](
                           innerSelection: SelectionBuilder[TeamDiscussion, A]
                         ): SelectionBuilder[CreateTeamDiscussionPayload, Option[A]] =
      Field("teamDiscussion", OptionOf(Obj(innerSelection)))
  }

  type CreatedCommitContribution

  object CreatedCommitContribution {

    /**
     * How many commits were made on this day to this repository by the user.
     */
    def commitCount: SelectionBuilder[CreatedCommitContribution, Int] =
      Field("commitCount", Scalar())

    /**
     * Whether this contribution is associated with a record you do not have access to. For
     * example, your own 'first issue' contribution may have been made on a repository you can no
     * longer access.
     */
    def isRestricted: SelectionBuilder[CreatedCommitContribution, Boolean] =
      Field("isRestricted", Scalar())

    /**
     * When this contribution was made.
     */
    def occurredAt: SelectionBuilder[CreatedCommitContribution, DateTime] =
      Field("occurredAt", Scalar())

    /**
     * The repository the user made a commit in.
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[CreatedCommitContribution, A] =
      Field("repository", Obj(innerSelection))

    /**
     * The HTTP path for this contribution.
     */
    def resourcePath: SelectionBuilder[CreatedCommitContribution, URI] =
      Field("resourcePath", Scalar())

    /**
     * The HTTP URL for this contribution.
     */
    def url: SelectionBuilder[CreatedCommitContribution, URI] =
      Field("url", Scalar())

    /**
     * The user who made this contribution.
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[CreatedCommitContribution, A] =
      Field("user", Obj(innerSelection))
  }

  type CreatedCommitContributionConnection

  object CreatedCommitContributionConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[CreatedCommitContributionEdge, A]
                ): SelectionBuilder[CreatedCommitContributionConnection, Option[
      List[Option[A]]
    ]] = Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[CreatedCommitContribution, A]
                ): SelectionBuilder[CreatedCommitContributionConnection, Option[
      List[Option[A]]
    ]] = Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[CreatedCommitContributionConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of commits across days and repositories in the connection.
     */
    def totalCount: SelectionBuilder[CreatedCommitContributionConnection, Int] =
      Field("totalCount", Scalar())
  }

  type CreatedCommitContributionEdge

  object CreatedCommitContributionEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[CreatedCommitContributionEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[CreatedCommitContribution, A]
               ): SelectionBuilder[CreatedCommitContributionEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type CreatedIssueContribution

  object CreatedIssueContribution {

    /**
     * Whether this contribution is associated with a record you do not have access to. For
     * example, your own 'first issue' contribution may have been made on a repository you can no
     * longer access.
     */
    def isRestricted: SelectionBuilder[CreatedIssueContribution, Boolean] =
      Field("isRestricted", Scalar())

    /**
     * The issue that was opened.
     */
    def issue[A](
                  innerSelection: SelectionBuilder[Issue, A]
                ): SelectionBuilder[CreatedIssueContribution, A] =
      Field("issue", Obj(innerSelection))

    /**
     * When this contribution was made.
     */
    def occurredAt: SelectionBuilder[CreatedIssueContribution, DateTime] =
      Field("occurredAt", Scalar())

    /**
     * The HTTP path for this contribution.
     */
    def resourcePath: SelectionBuilder[CreatedIssueContribution, URI] =
      Field("resourcePath", Scalar())

    /**
     * The HTTP URL for this contribution.
     */
    def url: SelectionBuilder[CreatedIssueContribution, URI] =
      Field("url", Scalar())

    /**
     * The user who made this contribution.
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[CreatedIssueContribution, A] =
      Field("user", Obj(innerSelection))
  }

  type CreatedIssueContributionConnection

  object CreatedIssueContributionConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[CreatedIssueContributionEdge, A]
                ): SelectionBuilder[CreatedIssueContributionConnection, Option[
      List[Option[A]]
    ]] = Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[CreatedIssueContribution, A]
                ): SelectionBuilder[CreatedIssueContributionConnection, Option[
      List[Option[A]]
    ]] = Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[CreatedIssueContributionConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[CreatedIssueContributionConnection, Int] =
      Field("totalCount", Scalar())
  }

  type CreatedIssueContributionEdge

  object CreatedIssueContributionEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[CreatedIssueContributionEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[CreatedIssueContribution, A]
               ): SelectionBuilder[CreatedIssueContributionEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type CreatedPullRequestContribution

  object CreatedPullRequestContribution {

    /**
     * Whether this contribution is associated with a record you do not have access to. For
     * example, your own 'first issue' contribution may have been made on a repository you can no
     * longer access.
     */
    def isRestricted
    : SelectionBuilder[CreatedPullRequestContribution, Boolean] =
      Field("isRestricted", Scalar())

    /**
     * When this contribution was made.
     */
    def occurredAt: SelectionBuilder[CreatedPullRequestContribution, DateTime] =
      Field("occurredAt", Scalar())

    /**
     * The pull request that was opened.
     */
    def pullRequest[A](
                        innerSelection: SelectionBuilder[PullRequest, A]
                      ): SelectionBuilder[CreatedPullRequestContribution, A] =
      Field("pullRequest", Obj(innerSelection))

    /**
     * The HTTP path for this contribution.
     */
    def resourcePath: SelectionBuilder[CreatedPullRequestContribution, URI] =
      Field("resourcePath", Scalar())

    /**
     * The HTTP URL for this contribution.
     */
    def url: SelectionBuilder[CreatedPullRequestContribution, URI] =
      Field("url", Scalar())

    /**
     * The user who made this contribution.
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[CreatedPullRequestContribution, A] =
      Field("user", Obj(innerSelection))
  }

  type CreatedPullRequestContributionConnection

  object CreatedPullRequestContributionConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[CreatedPullRequestContributionEdge, A]
                ): SelectionBuilder[CreatedPullRequestContributionConnection, Option[
      List[Option[A]]
    ]] = Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[CreatedPullRequestContribution, A]
                ): SelectionBuilder[CreatedPullRequestContributionConnection, Option[
      List[Option[A]]
    ]] = Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[CreatedPullRequestContributionConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount
    : SelectionBuilder[CreatedPullRequestContributionConnection, Int] =
      Field("totalCount", Scalar())
  }

  type CreatedPullRequestContributionEdge

  object CreatedPullRequestContributionEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[CreatedPullRequestContributionEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[CreatedPullRequestContribution, A]
               ): SelectionBuilder[CreatedPullRequestContributionEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type CreatedPullRequestReviewContribution

  object CreatedPullRequestReviewContribution {

    /**
     * Whether this contribution is associated with a record you do not have access to. For
     * example, your own 'first issue' contribution may have been made on a repository you can no
     * longer access.
     */
    def isRestricted
    : SelectionBuilder[CreatedPullRequestReviewContribution, Boolean] =
      Field("isRestricted", Scalar())

    /**
     * When this contribution was made.
     */
    def occurredAt
    : SelectionBuilder[CreatedPullRequestReviewContribution, DateTime] =
      Field("occurredAt", Scalar())

    /**
     * The pull request the user reviewed.
     */
    def pullRequest[A](
                        innerSelection: SelectionBuilder[PullRequest, A]
                      ): SelectionBuilder[CreatedPullRequestReviewContribution, A] =
      Field("pullRequest", Obj(innerSelection))

    /**
     * The review the user left on the pull request.
     */
    def pullRequestReview[A](
                              innerSelection: SelectionBuilder[PullRequestReview, A]
                            ): SelectionBuilder[CreatedPullRequestReviewContribution, A] =
      Field("pullRequestReview", Obj(innerSelection))

    /**
     * The repository containing the pull request that the user reviewed.
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[CreatedPullRequestReviewContribution, A] =
      Field("repository", Obj(innerSelection))

    /**
     * The HTTP path for this contribution.
     */
    def resourcePath
    : SelectionBuilder[CreatedPullRequestReviewContribution, URI] =
      Field("resourcePath", Scalar())

    /**
     * The HTTP URL for this contribution.
     */
    def url: SelectionBuilder[CreatedPullRequestReviewContribution, URI] =
      Field("url", Scalar())

    /**
     * The user who made this contribution.
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[CreatedPullRequestReviewContribution, A] =
      Field("user", Obj(innerSelection))
  }

  type CreatedPullRequestReviewContributionConnection

  object CreatedPullRequestReviewContributionConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[
                    CreatedPullRequestReviewContributionEdge,
                    A
                  ]
                ): SelectionBuilder[CreatedPullRequestReviewContributionConnection, Option[
      List[Option[A]]
    ]] = Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[
                    CreatedPullRequestReviewContribution,
                    A
                  ]
                ): SelectionBuilder[CreatedPullRequestReviewContributionConnection, Option[
      List[Option[A]]
    ]] = Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[CreatedPullRequestReviewContributionConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[
      CreatedPullRequestReviewContributionConnection,
      Int
    ] = Field("totalCount", Scalar())
  }

  type CreatedPullRequestReviewContributionEdge

  object CreatedPullRequestReviewContributionEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor
    : SelectionBuilder[CreatedPullRequestReviewContributionEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[
                   CreatedPullRequestReviewContribution,
                   A
                 ]
               ): SelectionBuilder[CreatedPullRequestReviewContributionEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type CreatedRepositoryContribution

  object CreatedRepositoryContribution {

    /**
     * Whether this contribution is associated with a record you do not have access to. For
     * example, your own 'first issue' contribution may have been made on a repository you can no
     * longer access.
     */
    def isRestricted: SelectionBuilder[CreatedRepositoryContribution, Boolean] =
      Field("isRestricted", Scalar())

    /**
     * When this contribution was made.
     */
    def occurredAt: SelectionBuilder[CreatedRepositoryContribution, DateTime] =
      Field("occurredAt", Scalar())

    /**
     * The repository that was created.
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[CreatedRepositoryContribution, A] =
      Field("repository", Obj(innerSelection))

    /**
     * The HTTP path for this contribution.
     */
    def resourcePath: SelectionBuilder[CreatedRepositoryContribution, URI] =
      Field("resourcePath", Scalar())

    /**
     * The HTTP URL for this contribution.
     */
    def url: SelectionBuilder[CreatedRepositoryContribution, URI] =
      Field("url", Scalar())

    /**
     * The user who made this contribution.
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[CreatedRepositoryContribution, A] =
      Field("user", Obj(innerSelection))
  }

  type CreatedRepositoryContributionConnection

  object CreatedRepositoryContributionConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[CreatedRepositoryContributionEdge, A]
                ): SelectionBuilder[CreatedRepositoryContributionConnection, Option[
      List[Option[A]]
    ]] = Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[CreatedRepositoryContribution, A]
                ): SelectionBuilder[CreatedRepositoryContributionConnection, Option[
      List[Option[A]]
    ]] = Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[CreatedRepositoryContributionConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount
    : SelectionBuilder[CreatedRepositoryContributionConnection, Int] =
      Field("totalCount", Scalar())
  }

  type CreatedRepositoryContributionEdge

  object CreatedRepositoryContributionEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[CreatedRepositoryContributionEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[CreatedRepositoryContribution, A]
               ): SelectionBuilder[CreatedRepositoryContributionEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type CrossReferencedEvent

  object CrossReferencedEvent {

    /**
     * Identifies the actor who performed the event.
     */
    def actor[A](
                  onBot: Option[SelectionBuilder[Bot, A]] = None,
                  onEnterpriseUserAccount: Option[
                    SelectionBuilder[EnterpriseUserAccount, A]
                  ] = None,
                  onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                  onUser: Option[SelectionBuilder[User, A]] = None,
                  onOrganization: Option[SelectionBuilder[Organization, A]] = None
                ): SelectionBuilder[CrossReferencedEvent, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[CrossReferencedEvent, DateTime] =
      Field("createdAt", Scalar())

    def id: SelectionBuilder[CrossReferencedEvent, String] =
      Field("id", Scalar())

    /**
     * Reference originated in a different repository.
     */
    def isCrossRepository: SelectionBuilder[CrossReferencedEvent, Boolean] =
      Field("isCrossRepository", Scalar())

    /**
     * Identifies when the reference was made.
     */
    def referencedAt: SelectionBuilder[CrossReferencedEvent, DateTime] =
      Field("referencedAt", Scalar())

    /**
     * The HTTP path for this pull request.
     */
    def resourcePath: SelectionBuilder[CrossReferencedEvent, URI] =
      Field("resourcePath", Scalar())

    /**
     * Issue or pull request that made the reference.
     */
    def source[A](
                   onIssue: SelectionBuilder[Issue, A],
                   onPullRequest: SelectionBuilder[PullRequest, A]
                 ): SelectionBuilder[CrossReferencedEvent, A] =
      Field(
        "source",
        ChoiceOf(
          Map("Issue" -> Obj(onIssue), "PullRequest" -> Obj(onPullRequest))
        )
      )

    /**
     * Issue or pull request to which the reference was made.
     */
    def target[A](
                   onIssue: SelectionBuilder[Issue, A],
                   onPullRequest: SelectionBuilder[PullRequest, A]
                 ): SelectionBuilder[CrossReferencedEvent, A] =
      Field(
        "target",
        ChoiceOf(
          Map("Issue" -> Obj(onIssue), "PullRequest" -> Obj(onPullRequest))
        )
      )

    /**
     * The HTTP URL for this pull request.
     */
    def url: SelectionBuilder[CrossReferencedEvent, URI] =
      Field("url", Scalar())

    /**
     * Checks if the target will be closed when the source is merged.
     */
    def willCloseTarget: SelectionBuilder[CrossReferencedEvent, Boolean] =
      Field("willCloseTarget", Scalar())
  }

  type DeclineTopicSuggestionPayload

  object DeclineTopicSuggestionPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[DeclineTopicSuggestionPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The declined topic.
     */
    def topic[A](
                  innerSelection: SelectionBuilder[Topic, A]
                ): SelectionBuilder[DeclineTopicSuggestionPayload, Option[A]] =
      Field("topic", OptionOf(Obj(innerSelection)))
  }

  type DeleteBranchProtectionRulePayload

  object DeleteBranchProtectionRulePayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[DeleteBranchProtectionRulePayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))
  }

  type DeleteDeploymentPayload

  object DeleteDeploymentPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[DeleteDeploymentPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))
  }

  type DeleteIpAllowListEntryPayload

  object DeleteIpAllowListEntryPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[DeleteIpAllowListEntryPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The IP allow list entry that was deleted.
     */
    def ipAllowListEntry[A](
                             innerSelection: SelectionBuilder[IpAllowListEntry, A]
                           ): SelectionBuilder[DeleteIpAllowListEntryPayload, Option[A]] =
      Field("ipAllowListEntry", OptionOf(Obj(innerSelection)))
  }

  type DeleteIssueCommentPayload

  object DeleteIssueCommentPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[DeleteIssueCommentPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))
  }

  type DeleteIssuePayload

  object DeleteIssuePayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId: SelectionBuilder[DeleteIssuePayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The repository the issue belonged to
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[DeleteIssuePayload, Option[A]] =
      Field("repository", OptionOf(Obj(innerSelection)))
  }

  type DeleteLabelPayload

  object DeleteLabelPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId: SelectionBuilder[DeleteLabelPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))
  }

  type DeletePackageVersionPayload

  object DeletePackageVersionPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[DeletePackageVersionPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * Whether or not the operation succeeded.
     */
    def success
    : SelectionBuilder[DeletePackageVersionPayload, Option[Boolean]] =
      Field("success", OptionOf(Scalar()))
  }

  type DeleteProjectCardPayload

  object DeleteProjectCardPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[DeleteProjectCardPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The column the deleted card was in.
     */
    def column[A](
                   innerSelection: SelectionBuilder[ProjectColumn, A]
                 ): SelectionBuilder[DeleteProjectCardPayload, Option[A]] =
      Field("column", OptionOf(Obj(innerSelection)))

    /**
     * The deleted card ID.
     */
    def deletedCardId
    : SelectionBuilder[DeleteProjectCardPayload, Option[String]] =
      Field("deletedCardId", OptionOf(Scalar()))
  }

  type DeleteProjectColumnPayload

  object DeleteProjectColumnPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[DeleteProjectColumnPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The deleted column ID.
     */
    def deletedColumnId
    : SelectionBuilder[DeleteProjectColumnPayload, Option[String]] =
      Field("deletedColumnId", OptionOf(Scalar()))

    /**
     * The project the deleted column was in.
     */
    def project[A](
                    innerSelection: SelectionBuilder[Project, A]
                  ): SelectionBuilder[DeleteProjectColumnPayload, Option[A]] =
      Field("project", OptionOf(Obj(innerSelection)))
  }

  type DeleteProjectPayload

  object DeleteProjectPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[DeleteProjectPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The repository or organization the project was removed from.
     */
    def owner[A](
                  onRepository: Option[SelectionBuilder[Repository, A]] = None,
                  onUser: Option[SelectionBuilder[User, A]] = None,
                  onOrganization: Option[SelectionBuilder[Organization, A]] = None
                ): SelectionBuilder[DeleteProjectPayload, Option[A]] =
      Field(
        "owner",
        OptionOf(
          ChoiceOf(
            Map(
              "Repository" -> onRepository,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )
  }

  type DeletePullRequestReviewCommentPayload

  object DeletePullRequestReviewCommentPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[DeletePullRequestReviewCommentPayload, Option[
      String
    ]] = Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The pull request review the deleted comment belonged to.
     */
    def pullRequestReview[A](
                              innerSelection: SelectionBuilder[PullRequestReview, A]
                            ): SelectionBuilder[DeletePullRequestReviewCommentPayload, Option[A]] =
      Field("pullRequestReview", OptionOf(Obj(innerSelection)))
  }

  type DeletePullRequestReviewPayload

  object DeletePullRequestReviewPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[DeletePullRequestReviewPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The deleted pull request review.
     */
    def pullRequestReview[A](
                              innerSelection: SelectionBuilder[PullRequestReview, A]
                            ): SelectionBuilder[DeletePullRequestReviewPayload, Option[A]] =
      Field("pullRequestReview", OptionOf(Obj(innerSelection)))
  }

  type DeleteRefPayload

  object DeleteRefPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId: SelectionBuilder[DeleteRefPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))
  }

  type DeleteTeamDiscussionCommentPayload

  object DeleteTeamDiscussionCommentPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[DeleteTeamDiscussionCommentPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))
  }

  type DeleteTeamDiscussionPayload

  object DeleteTeamDiscussionPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[DeleteTeamDiscussionPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))
  }

  type DemilestonedEvent

  object DemilestonedEvent {

    /**
     * Identifies the actor who performed the event.
     */
    def actor[A](
                  onBot: Option[SelectionBuilder[Bot, A]] = None,
                  onEnterpriseUserAccount: Option[
                    SelectionBuilder[EnterpriseUserAccount, A]
                  ] = None,
                  onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                  onUser: Option[SelectionBuilder[User, A]] = None,
                  onOrganization: Option[SelectionBuilder[Organization, A]] = None
                ): SelectionBuilder[DemilestonedEvent, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[DemilestonedEvent, DateTime] =
      Field("createdAt", Scalar())

    def id: SelectionBuilder[DemilestonedEvent, String] = Field("id", Scalar())

    /**
     * Identifies the milestone title associated with the 'demilestoned' event.
     */
    def milestoneTitle: SelectionBuilder[DemilestonedEvent, String] =
      Field("milestoneTitle", Scalar())

    /**
     * Object referenced by event.
     */
    def subject[A](
                    onIssue: SelectionBuilder[Issue, A],
                    onPullRequest: SelectionBuilder[PullRequest, A]
                  ): SelectionBuilder[DemilestonedEvent, A] =
      Field(
        "subject",
        ChoiceOf(
          Map("Issue" -> Obj(onIssue), "PullRequest" -> Obj(onPullRequest))
        )
      )
  }

  type DependencyGraphDependency

  object DependencyGraphDependency {

    /**
     * Does the dependency itself have dependencies?
     */
    def hasDependencies: SelectionBuilder[DependencyGraphDependency, Boolean] =
      Field("hasDependencies", Scalar())

    /**
     * The dependency package manager
     */
    def packageManager
    : SelectionBuilder[DependencyGraphDependency, Option[String]] =
      Field("packageManager", OptionOf(Scalar()))

    /**
     * The required package name
     */
    def packageName: SelectionBuilder[DependencyGraphDependency, String] =
      Field("packageName", Scalar())

    /**
     * The repository containing the package
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[DependencyGraphDependency, Option[A]] =
      Field("repository", OptionOf(Obj(innerSelection)))

    /**
     * The dependency version requirements
     */
    def requirements: SelectionBuilder[DependencyGraphDependency, String] =
      Field("requirements", Scalar())
  }

  type DependencyGraphDependencyConnection

  object DependencyGraphDependencyConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[DependencyGraphDependencyEdge, A]
                ): SelectionBuilder[DependencyGraphDependencyConnection, Option[
      List[Option[A]]
    ]] = Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[DependencyGraphDependency, A]
                ): SelectionBuilder[DependencyGraphDependencyConnection, Option[
      List[Option[A]]
    ]] = Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[DependencyGraphDependencyConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[DependencyGraphDependencyConnection, Int] =
      Field("totalCount", Scalar())
  }

  type DependencyGraphDependencyEdge

  object DependencyGraphDependencyEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[DependencyGraphDependencyEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[DependencyGraphDependency, A]
               ): SelectionBuilder[DependencyGraphDependencyEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type DependencyGraphManifest

  object DependencyGraphManifest {

    /**
     * Path to view the manifest file blob
     */
    def blobPath: SelectionBuilder[DependencyGraphManifest, String] =
      Field("blobPath", Scalar())

    /**
     * A list of manifest dependencies
     */
    def dependencies[A](
                         after: Option[String] = None,
                         before: Option[String] = None,
                         first: Option[Int] = None,
                         last: Option[Int] = None
                       )(
                         innerSelection: SelectionBuilder[DependencyGraphDependencyConnection, A]
                       ): SelectionBuilder[DependencyGraphManifest, Option[A]] =
      Field(
        "dependencies",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )

    /**
     * The number of dependencies listed in the manifest
     */
    def dependenciesCount
    : SelectionBuilder[DependencyGraphManifest, Option[Int]] =
      Field("dependenciesCount", OptionOf(Scalar()))

    /**
     * Is the manifest too big to parse?
     */
    def exceedsMaxSize: SelectionBuilder[DependencyGraphManifest, Boolean] =
      Field("exceedsMaxSize", Scalar())

    /**
     * Fully qualified manifest filename
     */
    def filename: SelectionBuilder[DependencyGraphManifest, String] =
      Field("filename", Scalar())

    def id: SelectionBuilder[DependencyGraphManifest, String] =
      Field("id", Scalar())

    /**
     * Were we able to parse the manifest?
     */
    def parseable: SelectionBuilder[DependencyGraphManifest, Boolean] =
      Field("parseable", Scalar())

    /**
     * The repository containing the manifest
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[DependencyGraphManifest, A] =
      Field("repository", Obj(innerSelection))
  }

  type DependencyGraphManifestConnection

  object DependencyGraphManifestConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[DependencyGraphManifestEdge, A]
                ): SelectionBuilder[DependencyGraphManifestConnection, Option[
      List[Option[A]]
    ]] = Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[DependencyGraphManifest, A]
                ): SelectionBuilder[DependencyGraphManifestConnection, Option[
      List[Option[A]]
    ]] = Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[DependencyGraphManifestConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[DependencyGraphManifestConnection, Int] =
      Field("totalCount", Scalar())
  }

  type DependencyGraphManifestEdge

  object DependencyGraphManifestEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[DependencyGraphManifestEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[DependencyGraphManifest, A]
               ): SelectionBuilder[DependencyGraphManifestEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type DeployKey

  object DeployKey {

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[DeployKey, DateTime] =
      Field("createdAt", Scalar())

    def id: SelectionBuilder[DeployKey, String] = Field("id", Scalar())

    /**
     * The deploy key.
     */
    def key: SelectionBuilder[DeployKey, String] = Field("key", Scalar())

    /**
     * Whether or not the deploy key is read only.
     */
    def readOnly: SelectionBuilder[DeployKey, Boolean] =
      Field("readOnly", Scalar())

    /**
     * The deploy key title.
     */
    def title: SelectionBuilder[DeployKey, String] = Field("title", Scalar())

    /**
     * Whether or not the deploy key has been verified.
     */
    def verified: SelectionBuilder[DeployKey, Boolean] =
      Field("verified", Scalar())
  }

  type DeployKeyConnection

  object DeployKeyConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[DeployKeyEdge, A]
                ): SelectionBuilder[DeployKeyConnection, Option[List[Option[A]]]] =
      Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[DeployKey, A]
                ): SelectionBuilder[DeployKeyConnection, Option[List[Option[A]]]] =
      Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[DeployKeyConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[DeployKeyConnection, Int] =
      Field("totalCount", Scalar())
  }

  type DeployKeyEdge

  object DeployKeyEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[DeployKeyEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[DeployKey, A]
               ): SelectionBuilder[DeployKeyEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type DeployedEvent

  object DeployedEvent {

    /**
     * Identifies the actor who performed the event.
     */
    def actor[A](
                  onBot: Option[SelectionBuilder[Bot, A]] = None,
                  onEnterpriseUserAccount: Option[
                    SelectionBuilder[EnterpriseUserAccount, A]
                  ] = None,
                  onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                  onUser: Option[SelectionBuilder[User, A]] = None,
                  onOrganization: Option[SelectionBuilder[Organization, A]] = None
                ): SelectionBuilder[DeployedEvent, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[DeployedEvent, DateTime] =
      Field("createdAt", Scalar())

    /**
     * Identifies the primary key from the database.
     */
    def databaseId: SelectionBuilder[DeployedEvent, Option[Int]] =
      Field("databaseId", OptionOf(Scalar()))

    /**
     * The deployment associated with the 'deployed' event.
     */
    def deployment[A](
                       innerSelection: SelectionBuilder[Deployment, A]
                     ): SelectionBuilder[DeployedEvent, A] =
      Field("deployment", Obj(innerSelection))

    def id: SelectionBuilder[DeployedEvent, String] = Field("id", Scalar())

    /**
     * PullRequest referenced by event.
     */
    def pullRequest[A](
                        innerSelection: SelectionBuilder[PullRequest, A]
                      ): SelectionBuilder[DeployedEvent, A] =
      Field("pullRequest", Obj(innerSelection))

    /**
     * The ref associated with the 'deployed' event.
     */
    def ref[A](
                innerSelection: SelectionBuilder[Ref, A]
              ): SelectionBuilder[DeployedEvent, Option[A]] =
      Field("ref", OptionOf(Obj(innerSelection)))
  }

  type Deployment

  object Deployment {

    /**
     * Identifies the commit sha of the deployment.
     */
    def commit[A](
                   innerSelection: SelectionBuilder[Commit, A]
                 ): SelectionBuilder[Deployment, Option[A]] =
      Field("commit", OptionOf(Obj(innerSelection)))

    /**
     * Identifies the oid of the deployment commit, even if the commit has been deleted.
     */
    def commitOid: SelectionBuilder[Deployment, String] =
      Field("commitOid", Scalar())

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[Deployment, DateTime] =
      Field("createdAt", Scalar())

    /**
     * Identifies the actor who triggered the deployment.
     */
    def creator[A](
                    onBot: Option[SelectionBuilder[Bot, A]] = None,
                    onEnterpriseUserAccount: Option[
                      SelectionBuilder[EnterpriseUserAccount, A]
                    ] = None,
                    onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                    onUser: Option[SelectionBuilder[User, A]] = None,
                    onOrganization: Option[SelectionBuilder[Organization, A]] = None
                  ): SelectionBuilder[Deployment, A] =
      Field(
        "creator",
        ChoiceOf(
          Map(
            "Bot" -> onBot,
            "EnterpriseUserAccount" -> onEnterpriseUserAccount,
            "Mannequin" -> onMannequin,
            "User" -> onUser,
            "Organization" -> onOrganization
          ).collect { case (k, Some(v)) => k -> Obj(v) }
        )
      )

    /**
     * Identifies the primary key from the database.
     */
    def databaseId: SelectionBuilder[Deployment, Option[Int]] =
      Field("databaseId", OptionOf(Scalar()))

    /**
     * The deployment description.
     */
    def description: SelectionBuilder[Deployment, Option[String]] =
      Field("description", OptionOf(Scalar()))

    /**
     * The latest environment to which this deployment was made.
     */
    def environment: SelectionBuilder[Deployment, Option[String]] =
      Field("environment", OptionOf(Scalar()))

    def id: SelectionBuilder[Deployment, String] = Field("id", Scalar())

    /**
     * The latest environment to which this deployment was made.
     */
    def latestEnvironment: SelectionBuilder[Deployment, Option[String]] =
      Field("latestEnvironment", OptionOf(Scalar()))

    /**
     * The latest status of this deployment.
     */
    def latestStatus[A](
                         innerSelection: SelectionBuilder[DeploymentStatus, A]
                       ): SelectionBuilder[Deployment, Option[A]] =
      Field("latestStatus", OptionOf(Obj(innerSelection)))

    /**
     * The original environment to which this deployment was made.
     */
    def originalEnvironment: SelectionBuilder[Deployment, Option[String]] =
      Field("originalEnvironment", OptionOf(Scalar()))

    /**
     * Extra information that a deployment system might need.
     */
    def payload: SelectionBuilder[Deployment, Option[String]] =
      Field("payload", OptionOf(Scalar()))

    /**
     * Identifies the Ref of the deployment, if the deployment was created by ref.
     */
    def ref[A](
                innerSelection: SelectionBuilder[Ref, A]
              ): SelectionBuilder[Deployment, Option[A]] =
      Field("ref", OptionOf(Obj(innerSelection)))

    /**
     * Identifies the repository associated with the deployment.
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[Deployment, A] =
      Field("repository", Obj(innerSelection))

    /**
     * The current state of the deployment.
     */
    def state: SelectionBuilder[Deployment, Option[DeploymentState]] =
      Field("state", OptionOf(Scalar()))

    /**
     * A list of statuses associated with the deployment.
     */
    def statuses[A](
                     after: Option[String] = None,
                     before: Option[String] = None,
                     first: Option[Int] = None,
                     last: Option[Int] = None
                   )(
                     innerSelection: SelectionBuilder[DeploymentStatusConnection, A]
                   ): SelectionBuilder[Deployment, Option[A]] =
      Field(
        "statuses",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )

    /**
     * The deployment task.
     */
    def task: SelectionBuilder[Deployment, Option[String]] =
      Field("task", OptionOf(Scalar()))

    /**
     * Identifies the date and time when the object was last updated.
     */
    def updatedAt: SelectionBuilder[Deployment, DateTime] =
      Field("updatedAt", Scalar())
  }

  type DeploymentConnection

  object DeploymentConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[DeploymentEdge, A]
                ): SelectionBuilder[DeploymentConnection, Option[List[Option[A]]]] =
      Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[Deployment, A]
                ): SelectionBuilder[DeploymentConnection, Option[List[Option[A]]]] =
      Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[DeploymentConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[DeploymentConnection, Int] =
      Field("totalCount", Scalar())
  }

  type DeploymentEdge

  object DeploymentEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[DeploymentEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[Deployment, A]
               ): SelectionBuilder[DeploymentEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type DeploymentEnvironmentChangedEvent

  object DeploymentEnvironmentChangedEvent {

    /**
     * Identifies the actor who performed the event.
     */
    def actor[A](
                  onBot: Option[SelectionBuilder[Bot, A]] = None,
                  onEnterpriseUserAccount: Option[
                    SelectionBuilder[EnterpriseUserAccount, A]
                  ] = None,
                  onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                  onUser: Option[SelectionBuilder[User, A]] = None,
                  onOrganization: Option[SelectionBuilder[Organization, A]] = None
                ): SelectionBuilder[DeploymentEnvironmentChangedEvent, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt
    : SelectionBuilder[DeploymentEnvironmentChangedEvent, DateTime] =
      Field("createdAt", Scalar())

    /**
     * The deployment status that updated the deployment environment.
     */
    def deploymentStatus[A](
                             innerSelection: SelectionBuilder[DeploymentStatus, A]
                           ): SelectionBuilder[DeploymentEnvironmentChangedEvent, A] =
      Field("deploymentStatus", Obj(innerSelection))

    def id: SelectionBuilder[DeploymentEnvironmentChangedEvent, String] =
      Field("id", Scalar())

    /**
     * PullRequest referenced by event.
     */
    def pullRequest[A](
                        innerSelection: SelectionBuilder[PullRequest, A]
                      ): SelectionBuilder[DeploymentEnvironmentChangedEvent, A] =
      Field("pullRequest", Obj(innerSelection))
  }

  type DeploymentStatus

  object DeploymentStatus {

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[DeploymentStatus, DateTime] =
      Field("createdAt", Scalar())

    /**
     * Identifies the actor who triggered the deployment.
     */
    def creator[A](
                    onBot: Option[SelectionBuilder[Bot, A]] = None,
                    onEnterpriseUserAccount: Option[
                      SelectionBuilder[EnterpriseUserAccount, A]
                    ] = None,
                    onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                    onUser: Option[SelectionBuilder[User, A]] = None,
                    onOrganization: Option[SelectionBuilder[Organization, A]] = None
                  ): SelectionBuilder[DeploymentStatus, A] =
      Field(
        "creator",
        ChoiceOf(
          Map(
            "Bot" -> onBot,
            "EnterpriseUserAccount" -> onEnterpriseUserAccount,
            "Mannequin" -> onMannequin,
            "User" -> onUser,
            "Organization" -> onOrganization
          ).collect { case (k, Some(v)) => k -> Obj(v) }
        )
      )

    /**
     * Identifies the deployment associated with status.
     */
    def deployment[A](
                       innerSelection: SelectionBuilder[Deployment, A]
                     ): SelectionBuilder[DeploymentStatus, A] =
      Field("deployment", Obj(innerSelection))

    /**
     * Identifies the description of the deployment.
     */
    def description: SelectionBuilder[DeploymentStatus, Option[String]] =
      Field("description", OptionOf(Scalar()))

    /**
     * Identifies the environment of the deployment at the time of this deployment status
     */
    def environment: SelectionBuilder[DeploymentStatus, Option[String]] =
      Field("environment", OptionOf(Scalar()))

    /**
     * Identifies the environment URL of the deployment.
     */
    def environmentUrl: SelectionBuilder[DeploymentStatus, Option[URI]] =
      Field("environmentUrl", OptionOf(Scalar()))

    def id: SelectionBuilder[DeploymentStatus, String] = Field("id", Scalar())

    /**
     * Identifies the log URL of the deployment.
     */
    def logUrl: SelectionBuilder[DeploymentStatus, Option[URI]] =
      Field("logUrl", OptionOf(Scalar()))

    /**
     * Identifies the current state of the deployment.
     */
    def state: SelectionBuilder[DeploymentStatus, DeploymentStatusState] =
      Field("state", Scalar())

    /**
     * Identifies the date and time when the object was last updated.
     */
    def updatedAt: SelectionBuilder[DeploymentStatus, DateTime] =
      Field("updatedAt", Scalar())
  }

  type DeploymentStatusConnection

  object DeploymentStatusConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[DeploymentStatusEdge, A]
                ): SelectionBuilder[DeploymentStatusConnection, Option[List[Option[A]]]] =
      Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[DeploymentStatus, A]
                ): SelectionBuilder[DeploymentStatusConnection, Option[List[Option[A]]]] =
      Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[DeploymentStatusConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[DeploymentStatusConnection, Int] =
      Field("totalCount", Scalar())
  }

  type DeploymentStatusEdge

  object DeploymentStatusEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[DeploymentStatusEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[DeploymentStatus, A]
               ): SelectionBuilder[DeploymentStatusEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type DisconnectedEvent

  object DisconnectedEvent {

    /**
     * Identifies the actor who performed the event.
     */
    def actor[A](
                  onBot: Option[SelectionBuilder[Bot, A]] = None,
                  onEnterpriseUserAccount: Option[
                    SelectionBuilder[EnterpriseUserAccount, A]
                  ] = None,
                  onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                  onUser: Option[SelectionBuilder[User, A]] = None,
                  onOrganization: Option[SelectionBuilder[Organization, A]] = None
                ): SelectionBuilder[DisconnectedEvent, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[DisconnectedEvent, DateTime] =
      Field("createdAt", Scalar())

    def id: SelectionBuilder[DisconnectedEvent, String] = Field("id", Scalar())

    /**
     * Reference originated in a different repository.
     */
    def isCrossRepository: SelectionBuilder[DisconnectedEvent, Boolean] =
      Field("isCrossRepository", Scalar())

    /**
     * Issue or pull request from which the issue was disconnected.
     */
    def source[A](
                   onIssue: SelectionBuilder[Issue, A],
                   onPullRequest: SelectionBuilder[PullRequest, A]
                 ): SelectionBuilder[DisconnectedEvent, A] =
      Field(
        "source",
        ChoiceOf(
          Map("Issue" -> Obj(onIssue), "PullRequest" -> Obj(onPullRequest))
        )
      )

    /**
     * Issue or pull request which was disconnected.
     */
    def subject[A](
                    onIssue: SelectionBuilder[Issue, A],
                    onPullRequest: SelectionBuilder[PullRequest, A]
                  ): SelectionBuilder[DisconnectedEvent, A] =
      Field(
        "subject",
        ChoiceOf(
          Map("Issue" -> Obj(onIssue), "PullRequest" -> Obj(onPullRequest))
        )
      )
  }

  type DismissPullRequestReviewPayload

  object DismissPullRequestReviewPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[DismissPullRequestReviewPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The dismissed pull request review.
     */
    def pullRequestReview[A](
                              innerSelection: SelectionBuilder[PullRequestReview, A]
                            ): SelectionBuilder[DismissPullRequestReviewPayload, Option[A]] =
      Field("pullRequestReview", OptionOf(Obj(innerSelection)))
  }

  type Enterprise

  object Enterprise {

    /**
     * A URL pointing to the enterprise's public avatar.
     */
    def avatarUrl(size: Option[Int] = None): SelectionBuilder[Enterprise, URI] =
      Field("avatarUrl", Scalar(), arguments = List(Argument("size", size)))

    /**
     * Enterprise billing information visible to enterprise billing managers.
     */
    def billingInfo[A](
                        innerSelection: SelectionBuilder[EnterpriseBillingInfo, A]
                      ): SelectionBuilder[Enterprise, Option[A]] =
      Field("billingInfo", OptionOf(Obj(innerSelection)))

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[Enterprise, DateTime] =
      Field("createdAt", Scalar())

    /**
     * Identifies the primary key from the database.
     */
    def databaseId: SelectionBuilder[Enterprise, Option[Int]] =
      Field("databaseId", OptionOf(Scalar()))

    /**
     * The description of the enterprise.
     */
    def description: SelectionBuilder[Enterprise, Option[String]] =
      Field("description", OptionOf(Scalar()))

    /**
     * The description of the enterprise as HTML.
     */
    def descriptionHTML: SelectionBuilder[Enterprise, HTML] =
      Field("descriptionHTML", Scalar())

    def id: SelectionBuilder[Enterprise, String] = Field("id", Scalar())

    /**
     * The location of the enterprise.
     */
    def location: SelectionBuilder[Enterprise, Option[String]] =
      Field("location", OptionOf(Scalar()))

    /**
     * A list of users who are members of this enterprise.
     */
    def members[A](
                    after: Option[String] = None,
                    before: Option[String] = None,
                    deployment: Option[EnterpriseUserDeployment] = None,
                    first: Option[Int] = None,
                    last: Option[Int] = None,
                    orderBy: Option[EnterpriseMemberOrder] = None,
                    organizationLogins: Option[List[String]] = None,
                    query: Option[String] = None,
                    role: Option[EnterpriseUserAccountMembershipRole] = None
                  )(
                    innerSelection: SelectionBuilder[EnterpriseMemberConnection, A]
                  ): SelectionBuilder[Enterprise, A] =
      Field(
        "members",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("deployment", deployment),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy),
          Argument("organizationLogins", organizationLogins),
          Argument("query", query),
          Argument("role", role)
        )
      )

    /**
     * The name of the enterprise.
     */
    def name: SelectionBuilder[Enterprise, String] = Field("name", Scalar())

    /**
     * A list of organizations that belong to this enterprise.
     */
    def organizations[A](
                          after: Option[String] = None,
                          before: Option[String] = None,
                          first: Option[Int] = None,
                          last: Option[Int] = None,
                          orderBy: Option[OrganizationOrder] = None,
                          query: Option[String] = None
                        )(
                          innerSelection: SelectionBuilder[OrganizationConnection, A]
                        ): SelectionBuilder[Enterprise, A] =
      Field(
        "organizations",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy),
          Argument("query", query)
        )
      )

    /**
     * Enterprise information only visible to enterprise owners.
     */
    def ownerInfo[A](
                      innerSelection: SelectionBuilder[EnterpriseOwnerInfo, A]
                    ): SelectionBuilder[Enterprise, Option[A]] =
      Field("ownerInfo", OptionOf(Obj(innerSelection)))

    /**
     * The HTTP path for this enterprise.
     */
    def resourcePath: SelectionBuilder[Enterprise, URI] =
      Field("resourcePath", Scalar())

    /**
     * The URL-friendly identifier for the enterprise.
     */
    def slug: SelectionBuilder[Enterprise, String] = Field("slug", Scalar())

    /**
     * The HTTP URL for this enterprise.
     */
    def url: SelectionBuilder[Enterprise, URI] = Field("url", Scalar())

    /**
     * A list of user accounts on this enterprise.
     */
    def userAccounts[A](
                         after: Option[String] = None,
                         before: Option[String] = None,
                         first: Option[Int] = None,
                         last: Option[Int] = None
                       )(
                         innerSelection: SelectionBuilder[EnterpriseUserAccountConnection, A]
                       ): SelectionBuilder[Enterprise, A] =
      Field(
        "userAccounts",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )

    /**
     * Is the current viewer an admin of this enterprise?
     */
    def viewerIsAdmin: SelectionBuilder[Enterprise, Boolean] =
      Field("viewerIsAdmin", Scalar())

    /**
     * The URL of the enterprise website.
     */
    def websiteUrl: SelectionBuilder[Enterprise, Option[URI]] =
      Field("websiteUrl", OptionOf(Scalar()))
  }

  type EnterpriseAdministratorConnection

  object EnterpriseAdministratorConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[EnterpriseAdministratorEdge, A]
                ): SelectionBuilder[EnterpriseAdministratorConnection, Option[
      List[Option[A]]
    ]] = Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[User, A]
                ): SelectionBuilder[EnterpriseAdministratorConnection, Option[
      List[Option[A]]
    ]] = Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[EnterpriseAdministratorConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[EnterpriseAdministratorConnection, Int] =
      Field("totalCount", Scalar())
  }

  type EnterpriseAdministratorEdge

  object EnterpriseAdministratorEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[EnterpriseAdministratorEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[EnterpriseAdministratorEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))

    /**
     * The role of the administrator.
     */
    def role: SelectionBuilder[
      EnterpriseAdministratorEdge,
      EnterpriseAdministratorRole
    ] = Field("role", Scalar())
  }

  type EnterpriseAdministratorInvitation

  object EnterpriseAdministratorInvitation {

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt
    : SelectionBuilder[EnterpriseAdministratorInvitation, DateTime] =
      Field("createdAt", Scalar())

    /**
     * The email of the person who was invited to the enterprise.
     */
    def email
    : SelectionBuilder[EnterpriseAdministratorInvitation, Option[String]] =
      Field("email", OptionOf(Scalar()))

    /**
     * The enterprise the invitation is for.
     */
    def enterprise[A](
                       innerSelection: SelectionBuilder[Enterprise, A]
                     ): SelectionBuilder[EnterpriseAdministratorInvitation, A] =
      Field("enterprise", Obj(innerSelection))

    def id: SelectionBuilder[EnterpriseAdministratorInvitation, String] =
      Field("id", Scalar())

    /**
     * The user who was invited to the enterprise.
     */
    def invitee[A](
                    innerSelection: SelectionBuilder[User, A]
                  ): SelectionBuilder[EnterpriseAdministratorInvitation, Option[A]] =
      Field("invitee", OptionOf(Obj(innerSelection)))

    /**
     * The user who created the invitation.
     */
    def inviter[A](
                    innerSelection: SelectionBuilder[User, A]
                  ): SelectionBuilder[EnterpriseAdministratorInvitation, Option[A]] =
      Field("inviter", OptionOf(Obj(innerSelection)))

    /**
     * The invitee's pending role in the enterprise (owner or billing_manager).
     */
    def role: SelectionBuilder[
      EnterpriseAdministratorInvitation,
      EnterpriseAdministratorRole
    ] = Field("role", Scalar())
  }

  type EnterpriseAdministratorInvitationConnection

  object EnterpriseAdministratorInvitationConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[
                    EnterpriseAdministratorInvitationEdge,
                    A
                  ]
                ): SelectionBuilder[EnterpriseAdministratorInvitationConnection, Option[
      List[Option[A]]
    ]] = Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[EnterpriseAdministratorInvitation, A]
                ): SelectionBuilder[EnterpriseAdministratorInvitationConnection, Option[
      List[Option[A]]
    ]] = Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[EnterpriseAdministratorInvitationConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount
    : SelectionBuilder[EnterpriseAdministratorInvitationConnection, Int] =
      Field("totalCount", Scalar())
  }

  type EnterpriseAdministratorInvitationEdge

  object EnterpriseAdministratorInvitationEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor
    : SelectionBuilder[EnterpriseAdministratorInvitationEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[EnterpriseAdministratorInvitation, A]
               ): SelectionBuilder[EnterpriseAdministratorInvitationEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type EnterpriseBillingInfo

  object EnterpriseBillingInfo {

    /**
     * The number of licenseable users/emails across the enterprise.
     */
    def allLicensableUsersCount: SelectionBuilder[EnterpriseBillingInfo, Int] =
      Field("allLicensableUsersCount", Scalar())

    /**
     * The number of data packs used by all organizations owned by the enterprise.
     */
    def assetPacks: SelectionBuilder[EnterpriseBillingInfo, Int] =
      Field("assetPacks", Scalar())

    /**
     * The number of available seats across all owned organizations based on the unique number of billable users.
     */
    @deprecated(
      "`availableSeats` will be replaced with `totalAvailableLicenses` to provide more clarity on the value being returned Use EnterpriseBillingInfo.totalAvailableLicenses instead. Removal on 2020-01-01 UTC.",
      ""
    )
    def availableSeats: SelectionBuilder[EnterpriseBillingInfo, Int] =
      Field("availableSeats", Scalar())

    /**
     * The bandwidth quota in GB for all organizations owned by the enterprise.
     */
    def bandwidthQuota: SelectionBuilder[EnterpriseBillingInfo, Double] =
      Field("bandwidthQuota", Scalar())

    /**
     * The bandwidth usage in GB for all organizations owned by the enterprise.
     */
    def bandwidthUsage: SelectionBuilder[EnterpriseBillingInfo, Double] =
      Field("bandwidthUsage", Scalar())

    /**
     * The bandwidth usage as a percentage of the bandwidth quota.
     */
    def bandwidthUsagePercentage: SelectionBuilder[EnterpriseBillingInfo, Int] =
      Field("bandwidthUsagePercentage", Scalar())

    /**
     * The total seats across all organizations owned by the enterprise.
     */
    @deprecated(
      "`seats` will be replaced with `totalLicenses` to provide more clarity on the value being returned Use EnterpriseBillingInfo.totalLicenses instead. Removal on 2020-01-01 UTC.",
      ""
    )
    def seats: SelectionBuilder[EnterpriseBillingInfo, Int] =
      Field("seats", Scalar())

    /**
     * The storage quota in GB for all organizations owned by the enterprise.
     */
    def storageQuota: SelectionBuilder[EnterpriseBillingInfo, Double] =
      Field("storageQuota", Scalar())

    /**
     * The storage usage in GB for all organizations owned by the enterprise.
     */
    def storageUsage: SelectionBuilder[EnterpriseBillingInfo, Double] =
      Field("storageUsage", Scalar())

    /**
     * The storage usage as a percentage of the storage quota.
     */
    def storageUsagePercentage: SelectionBuilder[EnterpriseBillingInfo, Int] =
      Field("storageUsagePercentage", Scalar())

    /**
     * The number of available licenses across all owned organizations based on the unique number of billable users.
     */
    def totalAvailableLicenses: SelectionBuilder[EnterpriseBillingInfo, Int] =
      Field("totalAvailableLicenses", Scalar())

    /**
     * The total number of licenses allocated.
     */
    def totalLicenses: SelectionBuilder[EnterpriseBillingInfo, Int] =
      Field("totalLicenses", Scalar())
  }

  type EnterpriseIdentityProvider

  object EnterpriseIdentityProvider {

    /**
     * The digest algorithm used to sign SAML requests for the identity provider.
     */
    def digestMethod: SelectionBuilder[EnterpriseIdentityProvider, Option[
      SamlDigestAlgorithm
    ]] = Field("digestMethod", OptionOf(Scalar()))

    /**
     * The enterprise this identity provider belongs to.
     */
    def enterprise[A](
                       innerSelection: SelectionBuilder[Enterprise, A]
                     ): SelectionBuilder[EnterpriseIdentityProvider, Option[A]] =
      Field("enterprise", OptionOf(Obj(innerSelection)))

    /**
     * ExternalIdentities provisioned by this identity provider.
     */
    def externalIdentities[A](
                               after: Option[String] = None,
                               before: Option[String] = None,
                               first: Option[Int] = None,
                               last: Option[Int] = None
                             )(
                               innerSelection: SelectionBuilder[ExternalIdentityConnection, A]
                             ): SelectionBuilder[EnterpriseIdentityProvider, A] =
      Field(
        "externalIdentities",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )

    def id: SelectionBuilder[EnterpriseIdentityProvider, String] =
      Field("id", Scalar())

    /**
     * The x509 certificate used by the identity provider to sign assertions and responses.
     */
    def idpCertificate: SelectionBuilder[EnterpriseIdentityProvider, Option[
      X509Certificate
    ]] = Field("idpCertificate", OptionOf(Scalar()))

    /**
     * The Issuer Entity ID for the SAML identity provider.
     */
    def issuer: SelectionBuilder[EnterpriseIdentityProvider, Option[String]] =
      Field("issuer", OptionOf(Scalar()))

    /**
     * Recovery codes that can be used by admins to access the enterprise if the identity provider is unavailable.
     */
    def recoveryCodes
    : SelectionBuilder[EnterpriseIdentityProvider, Option[List[String]]] =
      Field("recoveryCodes", OptionOf(ListOf(Scalar())))

    /**
     * The signature algorithm used to sign SAML requests for the identity provider.
     */
    def signatureMethod: SelectionBuilder[EnterpriseIdentityProvider, Option[
      SamlSignatureAlgorithm
    ]] = Field("signatureMethod", OptionOf(Scalar()))

    /**
     * The URL endpoint for the identity provider's SAML SSO.
     */
    def ssoUrl: SelectionBuilder[EnterpriseIdentityProvider, Option[URI]] =
      Field("ssoUrl", OptionOf(Scalar()))
  }

  type EnterpriseMemberConnection

  object EnterpriseMemberConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[EnterpriseMemberEdge, A]
                ): SelectionBuilder[EnterpriseMemberConnection, Option[List[Option[A]]]] =
      Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A],
                  onUser: SelectionBuilder[User, A]
                ): SelectionBuilder[EnterpriseMemberConnection, Option[List[Option[A]]]] =
      Field(
        "nodes",
        OptionOf(
          ListOf(
            OptionOf(
              ChoiceOf(
                Map(
                  "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount),
                  "User" -> Obj(onUser)
                )
              )
            )
          )
        )
      )

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[EnterpriseMemberConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[EnterpriseMemberConnection, Int] =
      Field("totalCount", Scalar())
  }

  type EnterpriseMemberEdge

  object EnterpriseMemberEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[EnterpriseMemberEdge, String] =
      Field("cursor", Scalar())

    /**
     * Whether the user does not have a license for the enterprise.
     */
    @deprecated("All members consume a license Removal on 2021-01-01 UTC.", "")
    def isUnlicensed: SelectionBuilder[EnterpriseMemberEdge, Boolean] =
      Field("isUnlicensed", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 onEnterpriseUserAccount: SelectionBuilder[EnterpriseUserAccount, A],
                 onUser: SelectionBuilder[User, A]
               ): SelectionBuilder[EnterpriseMemberEdge, Option[A]] =
      Field(
        "node",
        OptionOf(
          ChoiceOf(
            Map(
              "EnterpriseUserAccount" -> Obj(onEnterpriseUserAccount),
              "User" -> Obj(onUser)
            )
          )
        )
      )
  }

  type EnterpriseOrganizationMembershipConnection

  object EnterpriseOrganizationMembershipConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[
                    EnterpriseOrganizationMembershipEdge,
                    A
                  ]
                ): SelectionBuilder[EnterpriseOrganizationMembershipConnection, Option[
      List[Option[A]]
    ]] = Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[Organization, A]
                ): SelectionBuilder[EnterpriseOrganizationMembershipConnection, Option[
      List[Option[A]]
    ]] = Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[EnterpriseOrganizationMembershipConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount
    : SelectionBuilder[EnterpriseOrganizationMembershipConnection, Int] =
      Field("totalCount", Scalar())
  }

  type EnterpriseOrganizationMembershipEdge

  object EnterpriseOrganizationMembershipEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[EnterpriseOrganizationMembershipEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[Organization, A]
               ): SelectionBuilder[EnterpriseOrganizationMembershipEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))

    /**
     * The role of the user in the enterprise membership.
     */
    def role: SelectionBuilder[
      EnterpriseOrganizationMembershipEdge,
      EnterpriseUserAccountMembershipRole
    ] = Field("role", Scalar())
  }

  type EnterpriseOutsideCollaboratorConnection

  object EnterpriseOutsideCollaboratorConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[EnterpriseOutsideCollaboratorEdge, A]
                ): SelectionBuilder[EnterpriseOutsideCollaboratorConnection, Option[
      List[Option[A]]
    ]] = Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[User, A]
                ): SelectionBuilder[EnterpriseOutsideCollaboratorConnection, Option[
      List[Option[A]]
    ]] = Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[EnterpriseOutsideCollaboratorConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount
    : SelectionBuilder[EnterpriseOutsideCollaboratorConnection, Int] =
      Field("totalCount", Scalar())
  }

  type EnterpriseOutsideCollaboratorEdge

  object EnterpriseOutsideCollaboratorEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[EnterpriseOutsideCollaboratorEdge, String] =
      Field("cursor", Scalar())

    /**
     * Whether the outside collaborator does not have a license for the enterprise.
     */
    @deprecated(
      "All outside collaborators consume a license Removal on 2021-01-01 UTC.",
      ""
    )
    def isUnlicensed
    : SelectionBuilder[EnterpriseOutsideCollaboratorEdge, Boolean] =
      Field("isUnlicensed", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[EnterpriseOutsideCollaboratorEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))

    /**
     * The enterprise organization repositories this user is a member of.
     */
    def repositories[A](
                         after: Option[String] = None,
                         before: Option[String] = None,
                         first: Option[Int] = None,
                         last: Option[Int] = None,
                         orderBy: Option[RepositoryOrder] = None
                       )(
                         innerSelection: SelectionBuilder[EnterpriseRepositoryInfoConnection, A]
                       ): SelectionBuilder[EnterpriseOutsideCollaboratorEdge, A] =
      Field(
        "repositories",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy)
        )
      )
  }

  type EnterpriseOwnerInfo

  object EnterpriseOwnerInfo {

    /**
     * A list of enterprise organizations configured with the provided action execution capabilities setting value.
     */
    def actionExecutionCapabilitySettingOrganizations[A](
                                                          after: Option[String] = None,
                                                          before: Option[String] = None,
                                                          first: Option[Int] = None,
                                                          last: Option[Int] = None,
                                                          orderBy: Option[OrganizationOrder] = None
                                                        )(
                                                          innerSelection: SelectionBuilder[OrganizationConnection, A]
                                                        ): SelectionBuilder[EnterpriseOwnerInfo, A] =
      Field(
        "actionExecutionCapabilitySettingOrganizations",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy)
        )
      )

    /**
     * A list of all of the administrators for this enterprise.
     */
    def admins[A](
                   after: Option[String] = None,
                   before: Option[String] = None,
                   first: Option[Int] = None,
                   last: Option[Int] = None,
                   orderBy: Option[EnterpriseMemberOrder] = None,
                   query: Option[String] = None,
                   role: Option[EnterpriseAdministratorRole] = None
                 )(
                   innerSelection: SelectionBuilder[EnterpriseAdministratorConnection, A]
                 ): SelectionBuilder[EnterpriseOwnerInfo, A] =
      Field(
        "admins",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy),
          Argument("query", query),
          Argument("role", role)
        )
      )

    /**
     * A list of users in the enterprise who currently have two-factor authentication disabled.
     */
    def affiliatedUsersWithTwoFactorDisabled[A](
                                                 after: Option[String] = None,
                                                 before: Option[String] = None,
                                                 first: Option[Int] = None,
                                                 last: Option[Int] = None
                                               )(
                                                 innerSelection: SelectionBuilder[UserConnection, A]
                                               ): SelectionBuilder[EnterpriseOwnerInfo, A] =
      Field(
        "affiliatedUsersWithTwoFactorDisabled",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )

    /**
     * Whether or not affiliated users with two-factor authentication disabled exist in the enterprise.
     */
    def affiliatedUsersWithTwoFactorDisabledExist
    : SelectionBuilder[EnterpriseOwnerInfo, Boolean] =
      Field("affiliatedUsersWithTwoFactorDisabledExist", Scalar())

    /**
     * The setting value for whether private repository forking is enabled for repositories in organizations in this enterprise.
     */
    def allowPrivateRepositoryForkingSetting: SelectionBuilder[
      EnterpriseOwnerInfo,
      EnterpriseEnabledDisabledSettingValue
    ] = Field("allowPrivateRepositoryForkingSetting", Scalar())

    /**
     * A list of enterprise organizations configured with the provided private repository forking setting value.
     */
    def allowPrivateRepositoryForkingSettingOrganizations[A](
                                                              after: Option[String] = None,
                                                              before: Option[String] = None,
                                                              first: Option[Int] = None,
                                                              last: Option[Int] = None,
                                                              orderBy: Option[OrganizationOrder] = None,
                                                              value: Boolean
                                                            )(
                                                              innerSelection: SelectionBuilder[OrganizationConnection, A]
                                                            ): SelectionBuilder[EnterpriseOwnerInfo, A] =
      Field(
        "allowPrivateRepositoryForkingSettingOrganizations",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy),
          Argument("value", value)
        )
      )

    /**
     * The setting value for base repository permissions for organizations in this enterprise.
     */
    def defaultRepositoryPermissionSetting: SelectionBuilder[
      EnterpriseOwnerInfo,
      EnterpriseDefaultRepositoryPermissionSettingValue
    ] = Field("defaultRepositoryPermissionSetting", Scalar())

    /**
     * A list of enterprise organizations configured with the provided default repository permission.
     */
    def defaultRepositoryPermissionSettingOrganizations[A](
                                                            after: Option[String] = None,
                                                            before: Option[String] = None,
                                                            first: Option[Int] = None,
                                                            last: Option[Int] = None,
                                                            orderBy: Option[OrganizationOrder] = None,
                                                            value: DefaultRepositoryPermissionField
                                                          )(
                                                            innerSelection: SelectionBuilder[OrganizationConnection, A]
                                                          ): SelectionBuilder[EnterpriseOwnerInfo, A] =
      Field(
        "defaultRepositoryPermissionSettingOrganizations",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy),
          Argument("value", value)
        )
      )

    /**
     * Enterprise Server installations owned by the enterprise.
     */
    def enterpriseServerInstallations[A](
                                          after: Option[String] = None,
                                          before: Option[String] = None,
                                          connectedOnly: Option[Boolean] = None,
                                          first: Option[Int] = None,
                                          last: Option[Int] = None,
                                          orderBy: Option[EnterpriseServerInstallationOrder] = None
                                        )(
                                          innerSelection: SelectionBuilder[
                                            EnterpriseServerInstallationConnection,
                                            A
                                          ]
                                        ): SelectionBuilder[EnterpriseOwnerInfo, A] =
      Field(
        "enterpriseServerInstallations",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("connectedOnly", connectedOnly),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy)
        )
      )

    /**
     * The setting value for whether the enterprise has an IP allow list enabled.
     */
    def ipAllowListEnabledSetting: SelectionBuilder[
      EnterpriseOwnerInfo,
      IpAllowListEnabledSettingValue
    ] = Field("ipAllowListEnabledSetting", Scalar())

    /**
     * The IP addresses that are allowed to access resources owned by the enterprise.
     */
    def ipAllowListEntries[A](
                               after: Option[String] = None,
                               before: Option[String] = None,
                               first: Option[Int] = None,
                               last: Option[Int] = None,
                               orderBy: Option[IpAllowListEntryOrder] = None
                             )(
                               innerSelection: SelectionBuilder[IpAllowListEntryConnection, A]
                             ): SelectionBuilder[EnterpriseOwnerInfo, A] =
      Field(
        "ipAllowListEntries",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy)
        )
      )

    /**
     * Whether or not the default repository permission is currently being updated.
     */
    def isUpdatingDefaultRepositoryPermission
    : SelectionBuilder[EnterpriseOwnerInfo, Boolean] =
      Field("isUpdatingDefaultRepositoryPermission", Scalar())

    /**
     * Whether the two-factor authentication requirement is currently being enforced.
     */
    def isUpdatingTwoFactorRequirement
    : SelectionBuilder[EnterpriseOwnerInfo, Boolean] =
      Field("isUpdatingTwoFactorRequirement", Scalar())

    /**
     * The setting value for whether organization members with admin permissions on a
     * repository can change repository visibility.
     */
    def membersCanChangeRepositoryVisibilitySetting: SelectionBuilder[
      EnterpriseOwnerInfo,
      EnterpriseEnabledDisabledSettingValue
    ] = Field("membersCanChangeRepositoryVisibilitySetting", Scalar())

    /**
     * A list of enterprise organizations configured with the provided can change repository visibility setting value.
     */
    def membersCanChangeRepositoryVisibilitySettingOrganizations[A](
                                                                     after: Option[String] = None,
                                                                     before: Option[String] = None,
                                                                     first: Option[Int] = None,
                                                                     last: Option[Int] = None,
                                                                     orderBy: Option[OrganizationOrder] = None,
                                                                     value: Boolean
                                                                   )(
                                                                     innerSelection: SelectionBuilder[OrganizationConnection, A]
                                                                   ): SelectionBuilder[EnterpriseOwnerInfo, A] =
      Field(
        "membersCanChangeRepositoryVisibilitySettingOrganizations",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy),
          Argument("value", value)
        )
      )

    /**
     * The setting value for whether members of organizations in the enterprise can create internal repositories.
     */
    def membersCanCreateInternalRepositoriesSetting
    : SelectionBuilder[EnterpriseOwnerInfo, Option[Boolean]] =
      Field("membersCanCreateInternalRepositoriesSetting", OptionOf(Scalar()))

    /**
     * The setting value for whether members of organizations in the enterprise can create private repositories.
     */
    def membersCanCreatePrivateRepositoriesSetting
    : SelectionBuilder[EnterpriseOwnerInfo, Option[Boolean]] =
      Field("membersCanCreatePrivateRepositoriesSetting", OptionOf(Scalar()))

    /**
     * The setting value for whether members of organizations in the enterprise can create public repositories.
     */
    def membersCanCreatePublicRepositoriesSetting
    : SelectionBuilder[EnterpriseOwnerInfo, Option[Boolean]] =
      Field("membersCanCreatePublicRepositoriesSetting", OptionOf(Scalar()))

    /**
     * The setting value for whether members of organizations in the enterprise can create repositories.
     */
    def membersCanCreateRepositoriesSetting
    : SelectionBuilder[EnterpriseOwnerInfo, Option[
      EnterpriseMembersCanCreateRepositoriesSettingValue
    ]] = Field("membersCanCreateRepositoriesSetting", OptionOf(Scalar()))

    /**
     * A list of enterprise organizations configured with the provided repository creation setting value.
     */
    def membersCanCreateRepositoriesSettingOrganizations[A](
                                                             after: Option[String] = None,
                                                             before: Option[String] = None,
                                                             first: Option[Int] = None,
                                                             last: Option[Int] = None,
                                                             orderBy: Option[OrganizationOrder] = None,
                                                             value: OrganizationMembersCanCreateRepositoriesSettingValue
                                                           )(
                                                             innerSelection: SelectionBuilder[OrganizationConnection, A]
                                                           ): SelectionBuilder[EnterpriseOwnerInfo, A] =
      Field(
        "membersCanCreateRepositoriesSettingOrganizations",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy),
          Argument("value", value)
        )
      )

    /**
     * The setting value for whether members with admin permissions for repositories can delete issues.
     */
    def membersCanDeleteIssuesSetting: SelectionBuilder[
      EnterpriseOwnerInfo,
      EnterpriseEnabledDisabledSettingValue
    ] = Field("membersCanDeleteIssuesSetting", Scalar())

    /**
     * A list of enterprise organizations configured with the provided members can delete issues setting value.
     */
    def membersCanDeleteIssuesSettingOrganizations[A](
                                                       after: Option[String] = None,
                                                       before: Option[String] = None,
                                                       first: Option[Int] = None,
                                                       last: Option[Int] = None,
                                                       orderBy: Option[OrganizationOrder] = None,
                                                       value: Boolean
                                                     )(
                                                       innerSelection: SelectionBuilder[OrganizationConnection, A]
                                                     ): SelectionBuilder[EnterpriseOwnerInfo, A] =
      Field(
        "membersCanDeleteIssuesSettingOrganizations",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy),
          Argument("value", value)
        )
      )

    /**
     * The setting value for whether members with admin permissions for repositories can delete or transfer repositories.
     */
    def membersCanDeleteRepositoriesSetting: SelectionBuilder[
      EnterpriseOwnerInfo,
      EnterpriseEnabledDisabledSettingValue
    ] = Field("membersCanDeleteRepositoriesSetting", Scalar())

    /**
     * A list of enterprise organizations configured with the provided members can delete repositories setting value.
     */
    def membersCanDeleteRepositoriesSettingOrganizations[A](
                                                             after: Option[String] = None,
                                                             before: Option[String] = None,
                                                             first: Option[Int] = None,
                                                             last: Option[Int] = None,
                                                             orderBy: Option[OrganizationOrder] = None,
                                                             value: Boolean
                                                           )(
                                                             innerSelection: SelectionBuilder[OrganizationConnection, A]
                                                           ): SelectionBuilder[EnterpriseOwnerInfo, A] =
      Field(
        "membersCanDeleteRepositoriesSettingOrganizations",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy),
          Argument("value", value)
        )
      )

    /**
     * The setting value for whether members of organizations in the enterprise can invite outside collaborators.
     */
    def membersCanInviteCollaboratorsSetting: SelectionBuilder[
      EnterpriseOwnerInfo,
      EnterpriseEnabledDisabledSettingValue
    ] = Field("membersCanInviteCollaboratorsSetting", Scalar())

    /**
     * A list of enterprise organizations configured with the provided members can invite collaborators setting value.
     */
    def membersCanInviteCollaboratorsSettingOrganizations[A](
                                                              after: Option[String] = None,
                                                              before: Option[String] = None,
                                                              first: Option[Int] = None,
                                                              last: Option[Int] = None,
                                                              orderBy: Option[OrganizationOrder] = None,
                                                              value: Boolean
                                                            )(
                                                              innerSelection: SelectionBuilder[OrganizationConnection, A]
                                                            ): SelectionBuilder[EnterpriseOwnerInfo, A] =
      Field(
        "membersCanInviteCollaboratorsSettingOrganizations",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy),
          Argument("value", value)
        )
      )

    /**
     * Indicates whether members of this enterprise's organizations can purchase additional services for those organizations.
     */
    def membersCanMakePurchasesSetting: SelectionBuilder[
      EnterpriseOwnerInfo,
      EnterpriseMembersCanMakePurchasesSettingValue
    ] = Field("membersCanMakePurchasesSetting", Scalar())

    /**
     * The setting value for whether members with admin permissions for repositories can update protected branches.
     */
    def membersCanUpdateProtectedBranchesSetting: SelectionBuilder[
      EnterpriseOwnerInfo,
      EnterpriseEnabledDisabledSettingValue
    ] = Field("membersCanUpdateProtectedBranchesSetting", Scalar())

    /**
     * A list of enterprise organizations configured with the provided members can update protected branches setting value.
     */
    def membersCanUpdateProtectedBranchesSettingOrganizations[A](
                                                                  after: Option[String] = None,
                                                                  before: Option[String] = None,
                                                                  first: Option[Int] = None,
                                                                  last: Option[Int] = None,
                                                                  orderBy: Option[OrganizationOrder] = None,
                                                                  value: Boolean
                                                                )(
                                                                  innerSelection: SelectionBuilder[OrganizationConnection, A]
                                                                ): SelectionBuilder[EnterpriseOwnerInfo, A] =
      Field(
        "membersCanUpdateProtectedBranchesSettingOrganizations",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy),
          Argument("value", value)
        )
      )

    /**
     * The setting value for whether members can view dependency insights.
     */
    def membersCanViewDependencyInsightsSetting: SelectionBuilder[
      EnterpriseOwnerInfo,
      EnterpriseEnabledDisabledSettingValue
    ] = Field("membersCanViewDependencyInsightsSetting", Scalar())

    /**
     * A list of enterprise organizations configured with the provided members can view dependency insights setting value.
     */
    def membersCanViewDependencyInsightsSettingOrganizations[A](
                                                                 after: Option[String] = None,
                                                                 before: Option[String] = None,
                                                                 first: Option[Int] = None,
                                                                 last: Option[Int] = None,
                                                                 orderBy: Option[OrganizationOrder] = None,
                                                                 value: Boolean
                                                               )(
                                                                 innerSelection: SelectionBuilder[OrganizationConnection, A]
                                                               ): SelectionBuilder[EnterpriseOwnerInfo, A] =
      Field(
        "membersCanViewDependencyInsightsSettingOrganizations",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy),
          Argument("value", value)
        )
      )

    /**
     * The setting value for whether organization projects are enabled for organizations in this enterprise.
     */
    def organizationProjectsSetting: SelectionBuilder[
      EnterpriseOwnerInfo,
      EnterpriseEnabledDisabledSettingValue
    ] = Field("organizationProjectsSetting", Scalar())

    /**
     * A list of enterprise organizations configured with the provided organization projects setting value.
     */
    def organizationProjectsSettingOrganizations[A](
                                                     after: Option[String] = None,
                                                     before: Option[String] = None,
                                                     first: Option[Int] = None,
                                                     last: Option[Int] = None,
                                                     orderBy: Option[OrganizationOrder] = None,
                                                     value: Boolean
                                                   )(
                                                     innerSelection: SelectionBuilder[OrganizationConnection, A]
                                                   ): SelectionBuilder[EnterpriseOwnerInfo, A] =
      Field(
        "organizationProjectsSettingOrganizations",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy),
          Argument("value", value)
        )
      )

    /**
     * A list of outside collaborators across the repositories in the enterprise.
     */
    def outsideCollaborators[A](
                                 after: Option[String] = None,
                                 before: Option[String] = None,
                                 first: Option[Int] = None,
                                 last: Option[Int] = None,
                                 login: Option[String] = None,
                                 orderBy: Option[EnterpriseMemberOrder] = None,
                                 query: Option[String] = None,
                                 visibility: Option[RepositoryVisibility] = None
                               )(
                                 innerSelection: SelectionBuilder[
                                   EnterpriseOutsideCollaboratorConnection,
                                   A
                                 ]
                               ): SelectionBuilder[EnterpriseOwnerInfo, A] =
      Field(
        "outsideCollaborators",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("login", login),
          Argument("orderBy", orderBy),
          Argument("query", query),
          Argument("visibility", visibility)
        )
      )

    /**
     * A list of pending administrator invitations for the enterprise.
     */
    def pendingAdminInvitations[A](
                                    after: Option[String] = None,
                                    before: Option[String] = None,
                                    first: Option[Int] = None,
                                    last: Option[Int] = None,
                                    orderBy: Option[EnterpriseAdministratorInvitationOrder] = None,
                                    query: Option[String] = None,
                                    role: Option[EnterpriseAdministratorRole] = None
                                  )(
                                    innerSelection: SelectionBuilder[
                                      EnterpriseAdministratorInvitationConnection,
                                      A
                                    ]
                                  ): SelectionBuilder[EnterpriseOwnerInfo, A] =
      Field(
        "pendingAdminInvitations",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy),
          Argument("query", query),
          Argument("role", role)
        )
      )

    /**
     * A list of pending collaborator invitations across the repositories in the enterprise.
     */
    def pendingCollaboratorInvitations[A](
                                           after: Option[String] = None,
                                           before: Option[String] = None,
                                           first: Option[Int] = None,
                                           last: Option[Int] = None,
                                           orderBy: Option[RepositoryInvitationOrder] = None,
                                           query: Option[String] = None
                                         )(
                                           innerSelection: SelectionBuilder[RepositoryInvitationConnection, A]
                                         ): SelectionBuilder[EnterpriseOwnerInfo, A] =
      Field(
        "pendingCollaboratorInvitations",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy),
          Argument("query", query)
        )
      )

    /**
     * A list of pending collaborators across the repositories in the enterprise.
     */
    @deprecated(
      "Repository invitations can now be associated with an email, not only an invitee. Use the `pendingCollaboratorInvitations` field instead. Removal on 2020-10-01 UTC.",
      ""
    )
    def pendingCollaborators[A](
                                 after: Option[String] = None,
                                 before: Option[String] = None,
                                 first: Option[Int] = None,
                                 last: Option[Int] = None,
                                 orderBy: Option[RepositoryInvitationOrder] = None,
                                 query: Option[String] = None
                               )(
                                 innerSelection: SelectionBuilder[
                                   EnterprisePendingCollaboratorConnection,
                                   A
                                 ]
                               ): SelectionBuilder[EnterpriseOwnerInfo, A] =
      Field(
        "pendingCollaborators",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy),
          Argument("query", query)
        )
      )

    /**
     * A list of pending member invitations for organizations in the enterprise.
     */
    def pendingMemberInvitations[A](
                                     after: Option[String] = None,
                                     before: Option[String] = None,
                                     first: Option[Int] = None,
                                     last: Option[Int] = None,
                                     query: Option[String] = None
                                   )(
                                     innerSelection: SelectionBuilder[
                                       EnterprisePendingMemberInvitationConnection,
                                       A
                                     ]
                                   ): SelectionBuilder[EnterpriseOwnerInfo, A] =
      Field(
        "pendingMemberInvitations",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("query", query)
        )
      )

    /**
     * The setting value for whether repository projects are enabled in this enterprise.
     */
    def repositoryProjectsSetting: SelectionBuilder[
      EnterpriseOwnerInfo,
      EnterpriseEnabledDisabledSettingValue
    ] = Field("repositoryProjectsSetting", Scalar())

    /**
     * A list of enterprise organizations configured with the provided repository projects setting value.
     */
    def repositoryProjectsSettingOrganizations[A](
                                                   after: Option[String] = None,
                                                   before: Option[String] = None,
                                                   first: Option[Int] = None,
                                                   last: Option[Int] = None,
                                                   orderBy: Option[OrganizationOrder] = None,
                                                   value: Boolean
                                                 )(
                                                   innerSelection: SelectionBuilder[OrganizationConnection, A]
                                                 ): SelectionBuilder[EnterpriseOwnerInfo, A] =
      Field(
        "repositoryProjectsSettingOrganizations",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy),
          Argument("value", value)
        )
      )

    /**
     * The SAML Identity Provider for the enterprise.
     */
    def samlIdentityProvider[A](
                                 innerSelection: SelectionBuilder[EnterpriseIdentityProvider, A]
                               ): SelectionBuilder[EnterpriseOwnerInfo, Option[A]] =
      Field("samlIdentityProvider", OptionOf(Obj(innerSelection)))

    /**
     * A list of enterprise organizations configured with the SAML single sign-on setting value.
     */
    def samlIdentityProviderSettingOrganizations[A](
                                                     after: Option[String] = None,
                                                     before: Option[String] = None,
                                                     first: Option[Int] = None,
                                                     last: Option[Int] = None,
                                                     orderBy: Option[OrganizationOrder] = None,
                                                     value: IdentityProviderConfigurationState
                                                   )(
                                                     innerSelection: SelectionBuilder[OrganizationConnection, A]
                                                   ): SelectionBuilder[EnterpriseOwnerInfo, A] =
      Field(
        "samlIdentityProviderSettingOrganizations",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy),
          Argument("value", value)
        )
      )

    /**
     * The setting value for whether team discussions are enabled for organizations in this enterprise.
     */
    def teamDiscussionsSetting: SelectionBuilder[
      EnterpriseOwnerInfo,
      EnterpriseEnabledDisabledSettingValue
    ] = Field("teamDiscussionsSetting", Scalar())

    /**
     * A list of enterprise organizations configured with the provided team discussions setting value.
     */
    def teamDiscussionsSettingOrganizations[A](
                                                after: Option[String] = None,
                                                before: Option[String] = None,
                                                first: Option[Int] = None,
                                                last: Option[Int] = None,
                                                orderBy: Option[OrganizationOrder] = None,
                                                value: Boolean
                                              )(
                                                innerSelection: SelectionBuilder[OrganizationConnection, A]
                                              ): SelectionBuilder[EnterpriseOwnerInfo, A] =
      Field(
        "teamDiscussionsSettingOrganizations",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy),
          Argument("value", value)
        )
      )

    /**
     * The setting value for whether the enterprise requires two-factor authentication for its organizations and users.
     */
    def twoFactorRequiredSetting
    : SelectionBuilder[EnterpriseOwnerInfo, EnterpriseEnabledSettingValue] =
      Field("twoFactorRequiredSetting", Scalar())

    /**
     * A list of enterprise organizations configured with the two-factor authentication setting value.
     */
    def twoFactorRequiredSettingOrganizations[A](
                                                  after: Option[String] = None,
                                                  before: Option[String] = None,
                                                  first: Option[Int] = None,
                                                  last: Option[Int] = None,
                                                  orderBy: Option[OrganizationOrder] = None,
                                                  value: Boolean
                                                )(
                                                  innerSelection: SelectionBuilder[OrganizationConnection, A]
                                                ): SelectionBuilder[EnterpriseOwnerInfo, A] =
      Field(
        "twoFactorRequiredSettingOrganizations",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy),
          Argument("value", value)
        )
      )
  }

  type EnterprisePendingCollaboratorConnection

  object EnterprisePendingCollaboratorConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[EnterprisePendingCollaboratorEdge, A]
                ): SelectionBuilder[EnterprisePendingCollaboratorConnection, Option[
      List[Option[A]]
    ]] = Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[User, A]
                ): SelectionBuilder[EnterprisePendingCollaboratorConnection, Option[
      List[Option[A]]
    ]] = Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[EnterprisePendingCollaboratorConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount
    : SelectionBuilder[EnterprisePendingCollaboratorConnection, Int] =
      Field("totalCount", Scalar())
  }

  type EnterprisePendingCollaboratorEdge

  object EnterprisePendingCollaboratorEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[EnterprisePendingCollaboratorEdge, String] =
      Field("cursor", Scalar())

    /**
     * Whether the invited collaborator does not have a license for the enterprise.
     */
    @deprecated(
      "All pending collaborators consume a license Removal on 2021-01-01 UTC.",
      ""
    )
    def isUnlicensed
    : SelectionBuilder[EnterprisePendingCollaboratorEdge, Boolean] =
      Field("isUnlicensed", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[EnterprisePendingCollaboratorEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))

    /**
     * The enterprise organization repositories this user is a member of.
     */
    def repositories[A](
                         after: Option[String] = None,
                         before: Option[String] = None,
                         first: Option[Int] = None,
                         last: Option[Int] = None,
                         orderBy: Option[RepositoryOrder] = None
                       )(
                         innerSelection: SelectionBuilder[EnterpriseRepositoryInfoConnection, A]
                       ): SelectionBuilder[EnterprisePendingCollaboratorEdge, A] =
      Field(
        "repositories",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy)
        )
      )
  }

  type EnterprisePendingMemberInvitationConnection

  object EnterprisePendingMemberInvitationConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[
                    EnterprisePendingMemberInvitationEdge,
                    A
                  ]
                ): SelectionBuilder[EnterprisePendingMemberInvitationConnection, Option[
      List[Option[A]]
    ]] = Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[OrganizationInvitation, A]
                ): SelectionBuilder[EnterprisePendingMemberInvitationConnection, Option[
      List[Option[A]]
    ]] = Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[EnterprisePendingMemberInvitationConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount
    : SelectionBuilder[EnterprisePendingMemberInvitationConnection, Int] =
      Field("totalCount", Scalar())

    /**
     * Identifies the total count of unique users in the connection.
     */
    def totalUniqueUserCount
    : SelectionBuilder[EnterprisePendingMemberInvitationConnection, Int] =
      Field("totalUniqueUserCount", Scalar())
  }

  type EnterprisePendingMemberInvitationEdge

  object EnterprisePendingMemberInvitationEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor
    : SelectionBuilder[EnterprisePendingMemberInvitationEdge, String] =
      Field("cursor", Scalar())

    /**
     * Whether the invitation has a license for the enterprise.
     */
    @deprecated(
      "All pending members consume a license Removal on 2020-07-01 UTC.",
      ""
    )
    def isUnlicensed
    : SelectionBuilder[EnterprisePendingMemberInvitationEdge, Boolean] =
      Field("isUnlicensed", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[OrganizationInvitation, A]
               ): SelectionBuilder[EnterprisePendingMemberInvitationEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type EnterpriseRepositoryInfo

  object EnterpriseRepositoryInfo {
    def id: SelectionBuilder[EnterpriseRepositoryInfo, String] =
      Field("id", Scalar())

    /**
     * Identifies if the repository is private.
     */
    def isPrivate: SelectionBuilder[EnterpriseRepositoryInfo, Boolean] =
      Field("isPrivate", Scalar())

    /**
     * The repository's name.
     */
    def name: SelectionBuilder[EnterpriseRepositoryInfo, String] =
      Field("name", Scalar())

    /**
     * The repository's name with owner.
     */
    def nameWithOwner: SelectionBuilder[EnterpriseRepositoryInfo, String] =
      Field("nameWithOwner", Scalar())
  }

  type EnterpriseRepositoryInfoConnection

  object EnterpriseRepositoryInfoConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[EnterpriseRepositoryInfoEdge, A]
                ): SelectionBuilder[EnterpriseRepositoryInfoConnection, Option[
      List[Option[A]]
    ]] = Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[EnterpriseRepositoryInfo, A]
                ): SelectionBuilder[EnterpriseRepositoryInfoConnection, Option[
      List[Option[A]]
    ]] = Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[EnterpriseRepositoryInfoConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[EnterpriseRepositoryInfoConnection, Int] =
      Field("totalCount", Scalar())
  }

  type EnterpriseRepositoryInfoEdge

  object EnterpriseRepositoryInfoEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[EnterpriseRepositoryInfoEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[EnterpriseRepositoryInfo, A]
               ): SelectionBuilder[EnterpriseRepositoryInfoEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type EnterpriseServerInstallation

  object EnterpriseServerInstallation {

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[EnterpriseServerInstallation, DateTime] =
      Field("createdAt", Scalar())

    /**
     * The customer name to which the Enterprise Server installation belongs.
     */
    def customerName: SelectionBuilder[EnterpriseServerInstallation, String] =
      Field("customerName", Scalar())

    /**
     * The host name of the Enterprise Server installation.
     */
    def hostName: SelectionBuilder[EnterpriseServerInstallation, String] =
      Field("hostName", Scalar())

    def id: SelectionBuilder[EnterpriseServerInstallation, String] =
      Field("id", Scalar())

    /**
     * Whether or not the installation is connected to an Enterprise Server installation via GitHub Connect.
     */
    def isConnected: SelectionBuilder[EnterpriseServerInstallation, Boolean] =
      Field("isConnected", Scalar())

    /**
     * Identifies the date and time when the object was last updated.
     */
    def updatedAt: SelectionBuilder[EnterpriseServerInstallation, DateTime] =
      Field("updatedAt", Scalar())

    /**
     * User accounts on this Enterprise Server installation.
     */
    def userAccounts[A](
                         after: Option[String] = None,
                         before: Option[String] = None,
                         first: Option[Int] = None,
                         last: Option[Int] = None,
                         orderBy: Option[EnterpriseServerUserAccountOrder] = None
                       )(
                         innerSelection: SelectionBuilder[
                           EnterpriseServerUserAccountConnection,
                           A
                         ]
                       ): SelectionBuilder[EnterpriseServerInstallation, A] =
      Field(
        "userAccounts",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy)
        )
      )

    /**
     * User accounts uploads for the Enterprise Server installation.
     */
    def userAccountsUploads[A](
                                after: Option[String] = None,
                                before: Option[String] = None,
                                first: Option[Int] = None,
                                last: Option[Int] = None,
                                orderBy: Option[EnterpriseServerUserAccountsUploadOrder] = None
                              )(
                                innerSelection: SelectionBuilder[
                                  EnterpriseServerUserAccountsUploadConnection,
                                  A
                                ]
                              ): SelectionBuilder[EnterpriseServerInstallation, A] =
      Field(
        "userAccountsUploads",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy)
        )
      )
  }

  type EnterpriseServerInstallationConnection

  object EnterpriseServerInstallationConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[EnterpriseServerInstallationEdge, A]
                ): SelectionBuilder[EnterpriseServerInstallationConnection, Option[
      List[Option[A]]
    ]] = Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[EnterpriseServerInstallation, A]
                ): SelectionBuilder[EnterpriseServerInstallationConnection, Option[
      List[Option[A]]
    ]] = Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[EnterpriseServerInstallationConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount
    : SelectionBuilder[EnterpriseServerInstallationConnection, Int] =
      Field("totalCount", Scalar())
  }

  type EnterpriseServerInstallationEdge

  object EnterpriseServerInstallationEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[EnterpriseServerInstallationEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[EnterpriseServerInstallation, A]
               ): SelectionBuilder[EnterpriseServerInstallationEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type EnterpriseServerUserAccount

  object EnterpriseServerUserAccount {

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[EnterpriseServerUserAccount, DateTime] =
      Field("createdAt", Scalar())

    /**
     * User emails belonging to this user account.
     */
    def emails[A](
                   after: Option[String] = None,
                   before: Option[String] = None,
                   first: Option[Int] = None,
                   last: Option[Int] = None,
                   orderBy: Option[EnterpriseServerUserAccountEmailOrder] = None
                 )(
                   innerSelection: SelectionBuilder[
                     EnterpriseServerUserAccountEmailConnection,
                     A
                   ]
                 ): SelectionBuilder[EnterpriseServerUserAccount, A] =
      Field(
        "emails",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy)
        )
      )

    /**
     * The Enterprise Server installation on which this user account exists.
     */
    def enterpriseServerInstallation[A](
                                         innerSelection: SelectionBuilder[EnterpriseServerInstallation, A]
                                       ): SelectionBuilder[EnterpriseServerUserAccount, A] =
      Field("enterpriseServerInstallation", Obj(innerSelection))

    def id: SelectionBuilder[EnterpriseServerUserAccount, String] =
      Field("id", Scalar())

    /**
     * Whether the user account is a site administrator on the Enterprise Server installation.
     */
    def isSiteAdmin: SelectionBuilder[EnterpriseServerUserAccount, Boolean] =
      Field("isSiteAdmin", Scalar())

    /**
     * The login of the user account on the Enterprise Server installation.
     */
    def login: SelectionBuilder[EnterpriseServerUserAccount, String] =
      Field("login", Scalar())

    /**
     * The profile name of the user account on the Enterprise Server installation.
     */
    def profileName
    : SelectionBuilder[EnterpriseServerUserAccount, Option[String]] =
      Field("profileName", OptionOf(Scalar()))

    /**
     * The date and time when the user account was created on the Enterprise Server installation.
     */
    def remoteCreatedAt
    : SelectionBuilder[EnterpriseServerUserAccount, DateTime] =
      Field("remoteCreatedAt", Scalar())

    /**
     * The ID of the user account on the Enterprise Server installation.
     */
    def remoteUserId: SelectionBuilder[EnterpriseServerUserAccount, Int] =
      Field("remoteUserId", Scalar())

    /**
     * Identifies the date and time when the object was last updated.
     */
    def updatedAt: SelectionBuilder[EnterpriseServerUserAccount, DateTime] =
      Field("updatedAt", Scalar())
  }

  type EnterpriseServerUserAccountConnection

  object EnterpriseServerUserAccountConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[EnterpriseServerUserAccountEdge, A]
                ): SelectionBuilder[EnterpriseServerUserAccountConnection, Option[
      List[Option[A]]
    ]] = Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[EnterpriseServerUserAccount, A]
                ): SelectionBuilder[EnterpriseServerUserAccountConnection, Option[
      List[Option[A]]
    ]] = Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[EnterpriseServerUserAccountConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount
    : SelectionBuilder[EnterpriseServerUserAccountConnection, Int] =
      Field("totalCount", Scalar())
  }

  type EnterpriseServerUserAccountEdge

  object EnterpriseServerUserAccountEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[EnterpriseServerUserAccountEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[EnterpriseServerUserAccount, A]
               ): SelectionBuilder[EnterpriseServerUserAccountEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type EnterpriseServerUserAccountEmail

  object EnterpriseServerUserAccountEmail {

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt
    : SelectionBuilder[EnterpriseServerUserAccountEmail, DateTime] =
      Field("createdAt", Scalar())

    /**
     * The email address.
     */
    def email: SelectionBuilder[EnterpriseServerUserAccountEmail, String] =
      Field("email", Scalar())

    def id: SelectionBuilder[EnterpriseServerUserAccountEmail, String] =
      Field("id", Scalar())

    /**
     * Indicates whether this is the primary email of the associated user account.
     */
    def isPrimary: SelectionBuilder[EnterpriseServerUserAccountEmail, Boolean] =
      Field("isPrimary", Scalar())

    /**
     * Identifies the date and time when the object was last updated.
     */
    def updatedAt
    : SelectionBuilder[EnterpriseServerUserAccountEmail, DateTime] =
      Field("updatedAt", Scalar())

    /**
     * The user account to which the email belongs.
     */
    def userAccount[A](
                        innerSelection: SelectionBuilder[EnterpriseServerUserAccount, A]
                      ): SelectionBuilder[EnterpriseServerUserAccountEmail, A] =
      Field("userAccount", Obj(innerSelection))
  }

  type EnterpriseServerUserAccountEmailConnection

  object EnterpriseServerUserAccountEmailConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[
                    EnterpriseServerUserAccountEmailEdge,
                    A
                  ]
                ): SelectionBuilder[EnterpriseServerUserAccountEmailConnection, Option[
      List[Option[A]]
    ]] = Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[EnterpriseServerUserAccountEmail, A]
                ): SelectionBuilder[EnterpriseServerUserAccountEmailConnection, Option[
      List[Option[A]]
    ]] = Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[EnterpriseServerUserAccountEmailConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount
    : SelectionBuilder[EnterpriseServerUserAccountEmailConnection, Int] =
      Field("totalCount", Scalar())
  }

  type EnterpriseServerUserAccountEmailEdge

  object EnterpriseServerUserAccountEmailEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[EnterpriseServerUserAccountEmailEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[EnterpriseServerUserAccountEmail, A]
               ): SelectionBuilder[EnterpriseServerUserAccountEmailEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type EnterpriseServerUserAccountsUpload

  object EnterpriseServerUserAccountsUpload {

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt
    : SelectionBuilder[EnterpriseServerUserAccountsUpload, DateTime] =
      Field("createdAt", Scalar())

    /**
     * The enterprise to which this upload belongs.
     */
    def enterprise[A](
                       innerSelection: SelectionBuilder[Enterprise, A]
                     ): SelectionBuilder[EnterpriseServerUserAccountsUpload, A] =
      Field("enterprise", Obj(innerSelection))

    /**
     * The Enterprise Server installation for which this upload was generated.
     */
    def enterpriseServerInstallation[A](
                                         innerSelection: SelectionBuilder[EnterpriseServerInstallation, A]
                                       ): SelectionBuilder[EnterpriseServerUserAccountsUpload, A] =
      Field("enterpriseServerInstallation", Obj(innerSelection))

    def id: SelectionBuilder[EnterpriseServerUserAccountsUpload, String] =
      Field("id", Scalar())

    /**
     * The name of the file uploaded.
     */
    def name: SelectionBuilder[EnterpriseServerUserAccountsUpload, String] =
      Field("name", Scalar())

    /**
     * The synchronization state of the upload
     */
    def syncState: SelectionBuilder[
      EnterpriseServerUserAccountsUpload,
      EnterpriseServerUserAccountsUploadSyncState
    ] = Field("syncState", Scalar())

    /**
     * Identifies the date and time when the object was last updated.
     */
    def updatedAt
    : SelectionBuilder[EnterpriseServerUserAccountsUpload, DateTime] =
      Field("updatedAt", Scalar())
  }

  type EnterpriseServerUserAccountsUploadConnection

  object EnterpriseServerUserAccountsUploadConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[
                    EnterpriseServerUserAccountsUploadEdge,
                    A
                  ]
                ): SelectionBuilder[EnterpriseServerUserAccountsUploadConnection, Option[
      List[Option[A]]
    ]] = Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[EnterpriseServerUserAccountsUpload, A]
                ): SelectionBuilder[EnterpriseServerUserAccountsUploadConnection, Option[
      List[Option[A]]
    ]] = Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[EnterpriseServerUserAccountsUploadConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount
    : SelectionBuilder[EnterpriseServerUserAccountsUploadConnection, Int] =
      Field("totalCount", Scalar())
  }

  type EnterpriseServerUserAccountsUploadEdge

  object EnterpriseServerUserAccountsUploadEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor
    : SelectionBuilder[EnterpriseServerUserAccountsUploadEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[EnterpriseServerUserAccountsUpload, A]
               ): SelectionBuilder[EnterpriseServerUserAccountsUploadEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type EnterpriseUserAccount

  object EnterpriseUserAccount {

    /**
     * A URL pointing to the enterprise user account's public avatar.
     */
    def avatarUrl(
                   size: Option[Int] = None
                 ): SelectionBuilder[EnterpriseUserAccount, URI] =
      Field("avatarUrl", Scalar(), arguments = List(Argument("size", size)))

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[EnterpriseUserAccount, DateTime] =
      Field("createdAt", Scalar())

    /**
     * The enterprise in which this user account exists.
     */
    def enterprise[A](
                       innerSelection: SelectionBuilder[Enterprise, A]
                     ): SelectionBuilder[EnterpriseUserAccount, A] =
      Field("enterprise", Obj(innerSelection))

    def id: SelectionBuilder[EnterpriseUserAccount, String] =
      Field("id", Scalar())

    /**
     * An identifier for the enterprise user account, a login or email address
     */
    def login: SelectionBuilder[EnterpriseUserAccount, String] =
      Field("login", Scalar())

    /**
     * The name of the enterprise user account
     */
    def name: SelectionBuilder[EnterpriseUserAccount, Option[String]] =
      Field("name", OptionOf(Scalar()))

    /**
     * A list of enterprise organizations this user is a member of.
     */
    def organizations[A](
                          after: Option[String] = None,
                          before: Option[String] = None,
                          first: Option[Int] = None,
                          last: Option[Int] = None,
                          orderBy: Option[OrganizationOrder] = None,
                          query: Option[String] = None,
                          role: Option[EnterpriseUserAccountMembershipRole] = None
                        )(
                          innerSelection: SelectionBuilder[
                            EnterpriseOrganizationMembershipConnection,
                            A
                          ]
                        ): SelectionBuilder[EnterpriseUserAccount, A] =
      Field(
        "organizations",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy),
          Argument("query", query),
          Argument("role", role)
        )
      )

    /**
     * The HTTP path for this user.
     */
    def resourcePath: SelectionBuilder[EnterpriseUserAccount, URI] =
      Field("resourcePath", Scalar())

    /**
     * Identifies the date and time when the object was last updated.
     */
    def updatedAt: SelectionBuilder[EnterpriseUserAccount, DateTime] =
      Field("updatedAt", Scalar())

    /**
     * The HTTP URL for this user.
     */
    def url: SelectionBuilder[EnterpriseUserAccount, URI] =
      Field("url", Scalar())

    /**
     * The user within the enterprise.
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[EnterpriseUserAccount, Option[A]] =
      Field("user", OptionOf(Obj(innerSelection)))
  }

  type EnterpriseUserAccountConnection

  object EnterpriseUserAccountConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[EnterpriseUserAccountEdge, A]
                ): SelectionBuilder[EnterpriseUserAccountConnection, Option[
      List[Option[A]]
    ]] = Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[EnterpriseUserAccount, A]
                ): SelectionBuilder[EnterpriseUserAccountConnection, Option[
      List[Option[A]]
    ]] = Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[EnterpriseUserAccountConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[EnterpriseUserAccountConnection, Int] =
      Field("totalCount", Scalar())
  }

  type EnterpriseUserAccountEdge

  object EnterpriseUserAccountEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[EnterpriseUserAccountEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[EnterpriseUserAccount, A]
               ): SelectionBuilder[EnterpriseUserAccountEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type ExternalIdentity

  object ExternalIdentity {

    /**
     * The GUID for this identity
     */
    def guid: SelectionBuilder[ExternalIdentity, String] =
      Field("guid", Scalar())

    def id: SelectionBuilder[ExternalIdentity, String] = Field("id", Scalar())

    /**
     * Organization invitation for this SCIM-provisioned external identity
     */
    def organizationInvitation[A](
                                   innerSelection: SelectionBuilder[OrganizationInvitation, A]
                                 ): SelectionBuilder[ExternalIdentity, Option[A]] =
      Field("organizationInvitation", OptionOf(Obj(innerSelection)))

    /**
     * SAML Identity attributes
     */
    def samlIdentity[A](
                         innerSelection: SelectionBuilder[ExternalIdentitySamlAttributes, A]
                       ): SelectionBuilder[ExternalIdentity, Option[A]] =
      Field("samlIdentity", OptionOf(Obj(innerSelection)))

    /**
     * SCIM Identity attributes
     */
    def scimIdentity[A](
                         innerSelection: SelectionBuilder[ExternalIdentityScimAttributes, A]
                       ): SelectionBuilder[ExternalIdentity, Option[A]] =
      Field("scimIdentity", OptionOf(Obj(innerSelection)))

    /**
     * User linked to this external identity. Will be NULL if this identity has not been claimed by an organization member.
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[ExternalIdentity, Option[A]] =
      Field("user", OptionOf(Obj(innerSelection)))
  }

  type ExternalIdentityConnection

  object ExternalIdentityConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[ExternalIdentityEdge, A]
                ): SelectionBuilder[ExternalIdentityConnection, Option[List[Option[A]]]] =
      Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[ExternalIdentity, A]
                ): SelectionBuilder[ExternalIdentityConnection, Option[List[Option[A]]]] =
      Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[ExternalIdentityConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[ExternalIdentityConnection, Int] =
      Field("totalCount", Scalar())
  }

  type ExternalIdentityEdge

  object ExternalIdentityEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[ExternalIdentityEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[ExternalIdentity, A]
               ): SelectionBuilder[ExternalIdentityEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type ExternalIdentitySamlAttributes

  object ExternalIdentitySamlAttributes {

    /**
     * The emails associated with the SAML identity
     */
    def emails[A](
                   innerSelection: SelectionBuilder[UserEmailMetadata, A]
                 ): SelectionBuilder[ExternalIdentitySamlAttributes, Option[List[A]]] =
      Field("emails", OptionOf(ListOf(Obj(innerSelection))))

    /**
     * Family name of the SAML identity
     */
    def familyName
    : SelectionBuilder[ExternalIdentitySamlAttributes, Option[String]] =
      Field("familyName", OptionOf(Scalar()))

    /**
     * Given name of the SAML identity
     */
    def givenName
    : SelectionBuilder[ExternalIdentitySamlAttributes, Option[String]] =
      Field("givenName", OptionOf(Scalar()))

    /**
     * The groups linked to this identity in IDP
     */
    def groups: SelectionBuilder[ExternalIdentitySamlAttributes, Option[
      List[String]
    ]] = Field("groups", OptionOf(ListOf(Scalar())))

    /**
     * The NameID of the SAML identity
     */
    def nameId
    : SelectionBuilder[ExternalIdentitySamlAttributes, Option[String]] =
      Field("nameId", OptionOf(Scalar()))

    /**
     * The userName of the SAML identity
     */
    def username
    : SelectionBuilder[ExternalIdentitySamlAttributes, Option[String]] =
      Field("username", OptionOf(Scalar()))
  }

  type ExternalIdentityScimAttributes

  object ExternalIdentityScimAttributes {

    /**
     * The emails associated with the SCIM identity
     */
    def emails[A](
                   innerSelection: SelectionBuilder[UserEmailMetadata, A]
                 ): SelectionBuilder[ExternalIdentityScimAttributes, Option[List[A]]] =
      Field("emails", OptionOf(ListOf(Obj(innerSelection))))

    /**
     * Family name of the SCIM identity
     */
    def familyName
    : SelectionBuilder[ExternalIdentityScimAttributes, Option[String]] =
      Field("familyName", OptionOf(Scalar()))

    /**
     * Given name of the SCIM identity
     */
    def givenName
    : SelectionBuilder[ExternalIdentityScimAttributes, Option[String]] =
      Field("givenName", OptionOf(Scalar()))

    /**
     * The groups linked to this identity in IDP
     */
    def groups: SelectionBuilder[ExternalIdentityScimAttributes, Option[
      List[String]
    ]] = Field("groups", OptionOf(ListOf(Scalar())))

    /**
     * The userName of the SCIM identity
     */
    def username
    : SelectionBuilder[ExternalIdentityScimAttributes, Option[String]] =
      Field("username", OptionOf(Scalar()))
  }

  type FollowUserPayload

  object FollowUserPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId: SelectionBuilder[FollowUserPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The user that was followed.
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[FollowUserPayload, Option[A]] =
      Field("user", OptionOf(Obj(innerSelection)))
  }

  type FollowerConnection

  object FollowerConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[UserEdge, A]
                ): SelectionBuilder[FollowerConnection, Option[List[Option[A]]]] =
      Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[User, A]
                ): SelectionBuilder[FollowerConnection, Option[List[Option[A]]]] =
      Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[FollowerConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[FollowerConnection, Int] =
      Field("totalCount", Scalar())
  }

  type FollowingConnection

  object FollowingConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[UserEdge, A]
                ): SelectionBuilder[FollowingConnection, Option[List[Option[A]]]] =
      Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[User, A]
                ): SelectionBuilder[FollowingConnection, Option[List[Option[A]]]] =
      Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[FollowingConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[FollowingConnection, Int] =
      Field("totalCount", Scalar())
  }

  type FundingLink

  object FundingLink {

    /**
     * The funding platform this link is for.
     */
    def platform: SelectionBuilder[FundingLink, FundingPlatform] =
      Field("platform", Scalar())

    /**
     * The configured URL for this funding link.
     */
    def url: SelectionBuilder[FundingLink, URI] = Field("url", Scalar())
  }

  type GenericHovercardContext

  object GenericHovercardContext {

    /**
     * A string describing this context
     */
    def message: SelectionBuilder[GenericHovercardContext, String] =
      Field("message", Scalar())

    /**
     * An octicon to accompany this context
     */
    def octicon: SelectionBuilder[GenericHovercardContext, String] =
      Field("octicon", Scalar())
  }

  type Gist

  object Gist {

    /**
     * A list of comments associated with the gist
     */
    def comments[A](
                     after: Option[String] = None,
                     before: Option[String] = None,
                     first: Option[Int] = None,
                     last: Option[Int] = None
                   )(
                     innerSelection: SelectionBuilder[GistCommentConnection, A]
                   ): SelectionBuilder[Gist, A] =
      Field(
        "comments",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[Gist, DateTime] =
      Field("createdAt", Scalar())

    /**
     * The gist description.
     */
    def description: SelectionBuilder[Gist, Option[String]] =
      Field("description", OptionOf(Scalar()))

    /**
     * The files in this gist.
     */
    def files[A](limit: Option[Int] = None, oid: Option[GitObjectID] = None)(
      innerSelection: SelectionBuilder[GistFile, A]
    ): SelectionBuilder[Gist, Option[List[Option[A]]]] =
      Field(
        "files",
        OptionOf(ListOf(OptionOf(Obj(innerSelection)))),
        arguments = List(Argument("limit", limit), Argument("oid", oid))
      )

    /**
     * A list of forks associated with the gist
     */
    def forks[A](
                  after: Option[String] = None,
                  before: Option[String] = None,
                  first: Option[Int] = None,
                  last: Option[Int] = None,
                  orderBy: Option[GistOrder] = None
                )(
                  innerSelection: SelectionBuilder[GistConnection, A]
                ): SelectionBuilder[Gist, A] =
      Field(
        "forks",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy)
        )
      )

    def id: SelectionBuilder[Gist, String] = Field("id", Scalar())

    /**
     * Identifies if the gist is a fork.
     */
    def isFork: SelectionBuilder[Gist, Boolean] = Field("isFork", Scalar())

    /**
     * Whether the gist is public or not.
     */
    def isPublic: SelectionBuilder[Gist, Boolean] = Field("isPublic", Scalar())

    /**
     * The gist name.
     */
    def name: SelectionBuilder[Gist, String] = Field("name", Scalar())

    /**
     * The gist owner.
     */
    def owner[A](
                  onUser: Option[SelectionBuilder[User, A]] = None,
                  onOrganization: Option[SelectionBuilder[Organization, A]] = None
                ): SelectionBuilder[Gist, Option[A]] =
      Field(
        "owner",
        OptionOf(
          ChoiceOf(
            Map("User" -> onUser, "Organization" -> onOrganization).collect {
              case (k, Some(v)) => k -> Obj(v)
            }
          )
        )
      )

    /**
     * Identifies when the gist was last pushed to.
     */
    def pushedAt: SelectionBuilder[Gist, Option[DateTime]] =
      Field("pushedAt", OptionOf(Scalar()))

    /**
     * The HTML path to this resource.
     */
    def resourcePath: SelectionBuilder[Gist, URI] =
      Field("resourcePath", Scalar())

    /**
     * A list of users who have starred this starrable.
     */
    def stargazers[A](
                       after: Option[String] = None,
                       before: Option[String] = None,
                       first: Option[Int] = None,
                       last: Option[Int] = None,
                       orderBy: Option[StarOrder] = None
                     )(
                       innerSelection: SelectionBuilder[StargazerConnection, A]
                     ): SelectionBuilder[Gist, A] =
      Field(
        "stargazers",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy)
        )
      )

    /**
     * Identifies the date and time when the object was last updated.
     */
    def updatedAt: SelectionBuilder[Gist, DateTime] =
      Field("updatedAt", Scalar())

    /**
     * The HTTP URL for this Gist.
     */
    def url: SelectionBuilder[Gist, URI] = Field("url", Scalar())

    /**
     * Returns a boolean indicating whether the viewing user has starred this starrable.
     */
    def viewerHasStarred: SelectionBuilder[Gist, Boolean] =
      Field("viewerHasStarred", Scalar())
  }

  type GistComment

  object GistComment {

    /**
     * The actor who authored the comment.
     */
    def author[A](
                   onBot: Option[SelectionBuilder[Bot, A]] = None,
                   onEnterpriseUserAccount: Option[
                     SelectionBuilder[EnterpriseUserAccount, A]
                   ] = None,
                   onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                   onUser: Option[SelectionBuilder[User, A]] = None,
                   onOrganization: Option[SelectionBuilder[Organization, A]] = None
                 ): SelectionBuilder[GistComment, Option[A]] =
      Field(
        "author",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * Author's association with the gist.
     */
    def authorAssociation
    : SelectionBuilder[GistComment, CommentAuthorAssociation] =
      Field("authorAssociation", Scalar())

    /**
     * Identifies the comment body.
     */
    def body: SelectionBuilder[GistComment, String] = Field("body", Scalar())

    /**
     * The body rendered to HTML.
     */
    def bodyHTML: SelectionBuilder[GistComment, HTML] =
      Field("bodyHTML", Scalar())

    /**
     * The body rendered to text.
     */
    def bodyText: SelectionBuilder[GistComment, String] =
      Field("bodyText", Scalar())

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[GistComment, DateTime] =
      Field("createdAt", Scalar())

    /**
     * Check if this comment was created via an email reply.
     */
    def createdViaEmail: SelectionBuilder[GistComment, Boolean] =
      Field("createdViaEmail", Scalar())

    /**
     * Identifies the primary key from the database.
     */
    def databaseId: SelectionBuilder[GistComment, Option[Int]] =
      Field("databaseId", OptionOf(Scalar()))

    /**
     * The actor who edited the comment.
     */
    def editor[A](
                   onBot: Option[SelectionBuilder[Bot, A]] = None,
                   onEnterpriseUserAccount: Option[
                     SelectionBuilder[EnterpriseUserAccount, A]
                   ] = None,
                   onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                   onUser: Option[SelectionBuilder[User, A]] = None,
                   onOrganization: Option[SelectionBuilder[Organization, A]] = None
                 ): SelectionBuilder[GistComment, Option[A]] =
      Field(
        "editor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * The associated gist.
     */
    def gist[A](
                 innerSelection: SelectionBuilder[Gist, A]
               ): SelectionBuilder[GistComment, A] = Field("gist", Obj(innerSelection))

    def id: SelectionBuilder[GistComment, String] = Field("id", Scalar())

    /**
     * Check if this comment was edited and includes an edit with the creation data
     */
    def includesCreatedEdit: SelectionBuilder[GistComment, Boolean] =
      Field("includesCreatedEdit", Scalar())

    /**
     * Returns whether or not a comment has been minimized.
     */
    def isMinimized: SelectionBuilder[GistComment, Boolean] =
      Field("isMinimized", Scalar())

    /**
     * The moment the editor made the last edit
     */
    def lastEditedAt: SelectionBuilder[GistComment, Option[DateTime]] =
      Field("lastEditedAt", OptionOf(Scalar()))

    /**
     * Returns why the comment was minimized.
     */
    def minimizedReason: SelectionBuilder[GistComment, Option[String]] =
      Field("minimizedReason", OptionOf(Scalar()))

    /**
     * Identifies when the comment was published at.
     */
    def publishedAt: SelectionBuilder[GistComment, Option[DateTime]] =
      Field("publishedAt", OptionOf(Scalar()))

    /**
     * Identifies the date and time when the object was last updated.
     */
    def updatedAt: SelectionBuilder[GistComment, DateTime] =
      Field("updatedAt", Scalar())

    /**
     * A list of edits to this content.
     */
    def userContentEdits[A](
                             after: Option[String] = None,
                             before: Option[String] = None,
                             first: Option[Int] = None,
                             last: Option[Int] = None
                           )(
                             innerSelection: SelectionBuilder[UserContentEditConnection, A]
                           ): SelectionBuilder[GistComment, Option[A]] =
      Field(
        "userContentEdits",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )

    /**
     * Check if the current viewer can delete this object.
     */
    def viewerCanDelete: SelectionBuilder[GistComment, Boolean] =
      Field("viewerCanDelete", Scalar())

    /**
     * Check if the current viewer can minimize this object.
     */
    def viewerCanMinimize: SelectionBuilder[GistComment, Boolean] =
      Field("viewerCanMinimize", Scalar())

    /**
     * Check if the current viewer can update this object.
     */
    def viewerCanUpdate: SelectionBuilder[GistComment, Boolean] =
      Field("viewerCanUpdate", Scalar())

    /**
     * Reasons why the current viewer can not update this comment.
     */
    def viewerCannotUpdateReasons
    : SelectionBuilder[GistComment, List[CommentCannotUpdateReason]] =
      Field("viewerCannotUpdateReasons", ListOf(Scalar()))

    /**
     * Did the viewer author this comment.
     */
    def viewerDidAuthor: SelectionBuilder[GistComment, Boolean] =
      Field("viewerDidAuthor", Scalar())
  }

  type GistCommentConnection

  object GistCommentConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[GistCommentEdge, A]
                ): SelectionBuilder[GistCommentConnection, Option[List[Option[A]]]] =
      Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[GistComment, A]
                ): SelectionBuilder[GistCommentConnection, Option[List[Option[A]]]] =
      Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[GistCommentConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[GistCommentConnection, Int] =
      Field("totalCount", Scalar())
  }

  type GistCommentEdge

  object GistCommentEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[GistCommentEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[GistComment, A]
               ): SelectionBuilder[GistCommentEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type GistConnection

  object GistConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[GistEdge, A]
                ): SelectionBuilder[GistConnection, Option[List[Option[A]]]] =
      Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[Gist, A]
                ): SelectionBuilder[GistConnection, Option[List[Option[A]]]] =
      Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[GistConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[GistConnection, Int] =
      Field("totalCount", Scalar())
  }

  type GistEdge

  object GistEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[GistEdge, String] = Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[Gist, A]
               ): SelectionBuilder[GistEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type GistFile

  object GistFile {

    /**
     * The file name encoded to remove characters that are invalid in URL paths.
     */
    def encodedName: SelectionBuilder[GistFile, Option[String]] =
      Field("encodedName", OptionOf(Scalar()))

    /**
     * The gist file encoding.
     */
    def encoding: SelectionBuilder[GistFile, Option[String]] =
      Field("encoding", OptionOf(Scalar()))

    /**
     * The file extension from the file name.
     */
    def extension: SelectionBuilder[GistFile, Option[String]] =
      Field("extension", OptionOf(Scalar()))

    /**
     * Indicates if this file is an image.
     */
    def isImage: SelectionBuilder[GistFile, Boolean] =
      Field("isImage", Scalar())

    /**
     * Whether the file's contents were truncated.
     */
    def isTruncated: SelectionBuilder[GistFile, Boolean] =
      Field("isTruncated", Scalar())

    /**
     * The programming language this file is written in.
     */
    def language[A](
                     innerSelection: SelectionBuilder[Language, A]
                   ): SelectionBuilder[GistFile, Option[A]] =
      Field("language", OptionOf(Obj(innerSelection)))

    /**
     * The gist file name.
     */
    def name: SelectionBuilder[GistFile, Option[String]] =
      Field("name", OptionOf(Scalar()))

    /**
     * The gist file size in bytes.
     */
    def size: SelectionBuilder[GistFile, Option[Int]] =
      Field("size", OptionOf(Scalar()))

    /**
     * UTF8 text data or null if the file is binary
     */
    def text(
              truncate: Option[Int] = None
            ): SelectionBuilder[GistFile, Option[String]] =
      Field(
        "text",
        OptionOf(Scalar()),
        arguments = List(Argument("truncate", truncate))
      )
  }

  type GitActor

  object GitActor {

    /**
     * A URL pointing to the author's public avatar.
     */
    def avatarUrl(size: Option[Int] = None): SelectionBuilder[GitActor, URI] =
      Field("avatarUrl", Scalar(), arguments = List(Argument("size", size)))

    /**
     * The timestamp of the Git action (authoring or committing).
     */
    def date: SelectionBuilder[GitActor, Option[GitTimestamp]] =
      Field("date", OptionOf(Scalar()))

    /**
     * The email in the Git commit.
     */
    def email: SelectionBuilder[GitActor, Option[String]] =
      Field("email", OptionOf(Scalar()))

    /**
     * The name in the Git commit.
     */
    def name: SelectionBuilder[GitActor, Option[String]] =
      Field("name", OptionOf(Scalar()))

    /**
     * The GitHub user corresponding to the email field. Null if no such user exists.
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[GitActor, Option[A]] =
      Field("user", OptionOf(Obj(innerSelection)))
  }

  type GitHubMetadata

  object GitHubMetadata {

    /**
     * Returns a String that's a SHA of `github-services`
     */
    def gitHubServicesSha: SelectionBuilder[GitHubMetadata, GitObjectID] =
      Field("gitHubServicesSha", Scalar())

    /**
     * IP addresses that users connect to for git operations
     */
    def gitIpAddresses: SelectionBuilder[GitHubMetadata, Option[List[String]]] =
      Field("gitIpAddresses", OptionOf(ListOf(Scalar())))

    /**
     * IP addresses that service hooks are sent from
     */
    def hookIpAddresses
    : SelectionBuilder[GitHubMetadata, Option[List[String]]] =
      Field("hookIpAddresses", OptionOf(ListOf(Scalar())))

    /**
     * IP addresses that the importer connects from
     */
    def importerIpAddresses
    : SelectionBuilder[GitHubMetadata, Option[List[String]]] =
      Field("importerIpAddresses", OptionOf(ListOf(Scalar())))

    /**
     * Whether or not users are verified
     */
    def isPasswordAuthenticationVerifiable
    : SelectionBuilder[GitHubMetadata, Boolean] =
      Field("isPasswordAuthenticationVerifiable", Scalar())

    /**
     * IP addresses for GitHub Pages' A records
     */
    def pagesIpAddresses
    : SelectionBuilder[GitHubMetadata, Option[List[String]]] =
      Field("pagesIpAddresses", OptionOf(ListOf(Scalar())))
  }

  type GpgSignature

  object GpgSignature {

    /**
     * Email used to sign this object.
     */
    def email: SelectionBuilder[GpgSignature, String] = Field("email", Scalar())

    /**
     * True if the signature is valid and verified by GitHub.
     */
    def isValid: SelectionBuilder[GpgSignature, Boolean] =
      Field("isValid", Scalar())

    /**
     * Hex-encoded ID of the key that signed this object.
     */
    def keyId: SelectionBuilder[GpgSignature, Option[String]] =
      Field("keyId", OptionOf(Scalar()))

    /**
     * Payload for GPG signing object. Raw ODB object without the signature header.
     */
    def payload: SelectionBuilder[GpgSignature, String] =
      Field("payload", Scalar())

    /**
     * ASCII-armored signature header from object.
     */
    def signature: SelectionBuilder[GpgSignature, String] =
      Field("signature", Scalar())

    /**
     * GitHub user corresponding to the email signing this commit.
     */
    def signer[A](
                   innerSelection: SelectionBuilder[User, A]
                 ): SelectionBuilder[GpgSignature, Option[A]] =
      Field("signer", OptionOf(Obj(innerSelection)))

    /**
     * The state of this signature. `VALID` if signature is valid and verified by
     * GitHub, otherwise represents reason why signature is considered invalid.
     */
    def state: SelectionBuilder[GpgSignature, GitSignatureState] =
      Field("state", Scalar())

    /**
     * True if the signature was made with GitHub's signing key.
     */
    def wasSignedByGitHub: SelectionBuilder[GpgSignature, Boolean] =
      Field("wasSignedByGitHub", Scalar())
  }

  type HeadRefDeletedEvent

  object HeadRefDeletedEvent {

    /**
     * Identifies the actor who performed the event.
     */
    def actor[A](
                  onBot: Option[SelectionBuilder[Bot, A]] = None,
                  onEnterpriseUserAccount: Option[
                    SelectionBuilder[EnterpriseUserAccount, A]
                  ] = None,
                  onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                  onUser: Option[SelectionBuilder[User, A]] = None,
                  onOrganization: Option[SelectionBuilder[Organization, A]] = None
                ): SelectionBuilder[HeadRefDeletedEvent, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[HeadRefDeletedEvent, DateTime] =
      Field("createdAt", Scalar())

    /**
     * Identifies the Ref associated with the `head_ref_deleted` event.
     */
    def headRef[A](
                    innerSelection: SelectionBuilder[Ref, A]
                  ): SelectionBuilder[HeadRefDeletedEvent, Option[A]] =
      Field("headRef", OptionOf(Obj(innerSelection)))

    /**
     * Identifies the name of the Ref associated with the `head_ref_deleted` event.
     */
    def headRefName: SelectionBuilder[HeadRefDeletedEvent, String] =
      Field("headRefName", Scalar())

    def id: SelectionBuilder[HeadRefDeletedEvent, String] =
      Field("id", Scalar())

    /**
     * PullRequest referenced by event.
     */
    def pullRequest[A](
                        innerSelection: SelectionBuilder[PullRequest, A]
                      ): SelectionBuilder[HeadRefDeletedEvent, A] =
      Field("pullRequest", Obj(innerSelection))
  }

  type HeadRefForcePushedEvent

  object HeadRefForcePushedEvent {

    /**
     * Identifies the actor who performed the event.
     */
    def actor[A](
                  onBot: Option[SelectionBuilder[Bot, A]] = None,
                  onEnterpriseUserAccount: Option[
                    SelectionBuilder[EnterpriseUserAccount, A]
                  ] = None,
                  onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                  onUser: Option[SelectionBuilder[User, A]] = None,
                  onOrganization: Option[SelectionBuilder[Organization, A]] = None
                ): SelectionBuilder[HeadRefForcePushedEvent, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * Identifies the after commit SHA for the 'head_ref_force_pushed' event.
     */
    def afterCommit[A](
                        innerSelection: SelectionBuilder[Commit, A]
                      ): SelectionBuilder[HeadRefForcePushedEvent, Option[A]] =
      Field("afterCommit", OptionOf(Obj(innerSelection)))

    /**
     * Identifies the before commit SHA for the 'head_ref_force_pushed' event.
     */
    def beforeCommit[A](
                         innerSelection: SelectionBuilder[Commit, A]
                       ): SelectionBuilder[HeadRefForcePushedEvent, Option[A]] =
      Field("beforeCommit", OptionOf(Obj(innerSelection)))

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[HeadRefForcePushedEvent, DateTime] =
      Field("createdAt", Scalar())

    def id: SelectionBuilder[HeadRefForcePushedEvent, String] =
      Field("id", Scalar())

    /**
     * PullRequest referenced by event.
     */
    def pullRequest[A](
                        innerSelection: SelectionBuilder[PullRequest, A]
                      ): SelectionBuilder[HeadRefForcePushedEvent, A] =
      Field("pullRequest", Obj(innerSelection))

    /**
     * Identifies the fully qualified ref name for the 'head_ref_force_pushed' event.
     */
    def ref[A](
                innerSelection: SelectionBuilder[Ref, A]
              ): SelectionBuilder[HeadRefForcePushedEvent, Option[A]] =
      Field("ref", OptionOf(Obj(innerSelection)))
  }

  type HeadRefRestoredEvent

  object HeadRefRestoredEvent {

    /**
     * Identifies the actor who performed the event.
     */
    def actor[A](
                  onBot: Option[SelectionBuilder[Bot, A]] = None,
                  onEnterpriseUserAccount: Option[
                    SelectionBuilder[EnterpriseUserAccount, A]
                  ] = None,
                  onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                  onUser: Option[SelectionBuilder[User, A]] = None,
                  onOrganization: Option[SelectionBuilder[Organization, A]] = None
                ): SelectionBuilder[HeadRefRestoredEvent, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[HeadRefRestoredEvent, DateTime] =
      Field("createdAt", Scalar())

    def id: SelectionBuilder[HeadRefRestoredEvent, String] =
      Field("id", Scalar())

    /**
     * PullRequest referenced by event.
     */
    def pullRequest[A](
                        innerSelection: SelectionBuilder[PullRequest, A]
                      ): SelectionBuilder[HeadRefRestoredEvent, A] =
      Field("pullRequest", Obj(innerSelection))
  }

  type Hovercard

  object Hovercard {

    /**
     * Each of the contexts for this hovercard
     */
    def contexts[A](
                     onOrganizationsHovercardContext: Option[
                       SelectionBuilder[OrganizationsHovercardContext, A]
                     ] = None,
                     onOrganizationTeamsHovercardContext: Option[
                       SelectionBuilder[OrganizationTeamsHovercardContext, A]
                     ] = None,
                     onGenericHovercardContext: Option[
                       SelectionBuilder[GenericHovercardContext, A]
                     ] = None,
                     onViewerHovercardContext: Option[
                       SelectionBuilder[ViewerHovercardContext, A]
                     ] = None,
                     onReviewStatusHovercardContext: Option[
                       SelectionBuilder[ReviewStatusHovercardContext, A]
                     ] = None
                   ): SelectionBuilder[Hovercard, List[A]] =
      Field(
        "contexts",
        ListOf(
          ChoiceOf(
            Map(
              "OrganizationsHovercardContext" -> onOrganizationsHovercardContext,
              "OrganizationTeamsHovercardContext" -> onOrganizationTeamsHovercardContext,
              "GenericHovercardContext" -> onGenericHovercardContext,
              "ViewerHovercardContext" -> onViewerHovercardContext,
              "ReviewStatusHovercardContext" -> onReviewStatusHovercardContext
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )
  }

  type ImportProjectPayload

  object ImportProjectPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[ImportProjectPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The new Project!
     */
    def project[A](
                    innerSelection: SelectionBuilder[Project, A]
                  ): SelectionBuilder[ImportProjectPayload, Option[A]] =
      Field("project", OptionOf(Obj(innerSelection)))
  }

  type InviteEnterpriseAdminPayload

  object InviteEnterpriseAdminPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[InviteEnterpriseAdminPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The created enterprise administrator invitation.
     */
    def invitation[A](
                       innerSelection: SelectionBuilder[EnterpriseAdministratorInvitation, A]
                     ): SelectionBuilder[InviteEnterpriseAdminPayload, Option[A]] =
      Field("invitation", OptionOf(Obj(innerSelection)))
  }

  type IpAllowListEntry

  object IpAllowListEntry {

    /**
     * A single IP address or range of IP addresses in CIDR notation.
     */
    def allowListValue: SelectionBuilder[IpAllowListEntry, String] =
      Field("allowListValue", Scalar())

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[IpAllowListEntry, DateTime] =
      Field("createdAt", Scalar())

    def id: SelectionBuilder[IpAllowListEntry, String] = Field("id", Scalar())

    /**
     * Whether the entry is currently active.
     */
    def isActive: SelectionBuilder[IpAllowListEntry, Boolean] =
      Field("isActive", Scalar())

    /**
     * The name of the IP allow list entry.
     */
    def name: SelectionBuilder[IpAllowListEntry, Option[String]] =
      Field("name", OptionOf(Scalar()))

    /**
     * The owner of the IP allow list entry.
     */
    def owner[A](
                  onEnterprise: SelectionBuilder[Enterprise, A],
                  onOrganization: SelectionBuilder[Organization, A]
                ): SelectionBuilder[IpAllowListEntry, A] =
      Field(
        "owner",
        ChoiceOf(
          Map(
            "Enterprise" -> Obj(onEnterprise),
            "Organization" -> Obj(onOrganization)
          )
        )
      )

    /**
     * Identifies the date and time when the object was last updated.
     */
    def updatedAt: SelectionBuilder[IpAllowListEntry, DateTime] =
      Field("updatedAt", Scalar())
  }

  type IpAllowListEntryConnection

  object IpAllowListEntryConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[IpAllowListEntryEdge, A]
                ): SelectionBuilder[IpAllowListEntryConnection, Option[List[Option[A]]]] =
      Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[IpAllowListEntry, A]
                ): SelectionBuilder[IpAllowListEntryConnection, Option[List[Option[A]]]] =
      Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[IpAllowListEntryConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[IpAllowListEntryConnection, Int] =
      Field("totalCount", Scalar())
  }

  type IpAllowListEntryEdge

  object IpAllowListEntryEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[IpAllowListEntryEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[IpAllowListEntry, A]
               ): SelectionBuilder[IpAllowListEntryEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type Issue

  object Issue {

    /**
     * Reason that the conversation was locked.
     */
    def activeLockReason: SelectionBuilder[Issue, Option[LockReason]] =
      Field("activeLockReason", OptionOf(Scalar()))

    /**
     * A list of Users assigned to this object.
     */
    def assignees[A](
                      after: Option[String] = None,
                      before: Option[String] = None,
                      first: Option[Int] = None,
                      last: Option[Int] = None
                    )(
                      innerSelection: SelectionBuilder[UserConnection, A]
                    ): SelectionBuilder[Issue, A] =
      Field(
        "assignees",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )

    /**
     * The actor who authored the comment.
     */
    def author[A](
                   onBot: Option[SelectionBuilder[Bot, A]] = None,
                   onEnterpriseUserAccount: Option[
                     SelectionBuilder[EnterpriseUserAccount, A]
                   ] = None,
                   onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                   onUser: Option[SelectionBuilder[User, A]] = None,
                   onOrganization: Option[SelectionBuilder[Organization, A]] = None
                 ): SelectionBuilder[Issue, Option[A]] =
      Field(
        "author",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * Author's association with the subject of the comment.
     */
    def authorAssociation: SelectionBuilder[Issue, CommentAuthorAssociation] =
      Field("authorAssociation", Scalar())

    /**
     * Identifies the body of the issue.
     */
    def body: SelectionBuilder[Issue, String] = Field("body", Scalar())

    /**
     * The body rendered to HTML.
     */
    def bodyHTML: SelectionBuilder[Issue, HTML] = Field("bodyHTML", Scalar())

    /**
     * Identifies the body of the issue rendered to text.
     */
    def bodyText: SelectionBuilder[Issue, String] = Field("bodyText", Scalar())

    /**
     * `true` if the object is closed (definition of closed may depend on type)
     */
    def closed: SelectionBuilder[Issue, Boolean] = Field("closed", Scalar())

    /**
     * Identifies the date and time when the object was closed.
     */
    def closedAt: SelectionBuilder[Issue, Option[DateTime]] =
      Field("closedAt", OptionOf(Scalar()))

    /**
     * A list of comments associated with the Issue.
     */
    def comments[A](
                     after: Option[String] = None,
                     before: Option[String] = None,
                     first: Option[Int] = None,
                     last: Option[Int] = None
                   )(
                     innerSelection: SelectionBuilder[IssueCommentConnection, A]
                   ): SelectionBuilder[Issue, A] =
      Field(
        "comments",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[Issue, DateTime] =
      Field("createdAt", Scalar())

    /**
     * Check if this comment was created via an email reply.
     */
    def createdViaEmail: SelectionBuilder[Issue, Boolean] =
      Field("createdViaEmail", Scalar())

    /**
     * Identifies the primary key from the database.
     */
    def databaseId: SelectionBuilder[Issue, Option[Int]] =
      Field("databaseId", OptionOf(Scalar()))

    /**
     * The actor who edited the comment.
     */
    def editor[A](
                   onBot: Option[SelectionBuilder[Bot, A]] = None,
                   onEnterpriseUserAccount: Option[
                     SelectionBuilder[EnterpriseUserAccount, A]
                   ] = None,
                   onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                   onUser: Option[SelectionBuilder[User, A]] = None,
                   onOrganization: Option[SelectionBuilder[Organization, A]] = None
                 ): SelectionBuilder[Issue, Option[A]] =
      Field(
        "editor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * The hovercard information for this issue
     */
    def hovercard[A](includeNotificationContexts: Option[Boolean] = None)(
      innerSelection: SelectionBuilder[Hovercard, A]
    ): SelectionBuilder[Issue, A] =
      Field(
        "hovercard",
        Obj(innerSelection),
        arguments = List(
          Argument("includeNotificationContexts", includeNotificationContexts)
        )
      )

    def id: SelectionBuilder[Issue, String] = Field("id", Scalar())

    /**
     * Check if this comment was edited and includes an edit with the creation data
     */
    def includesCreatedEdit: SelectionBuilder[Issue, Boolean] =
      Field("includesCreatedEdit", Scalar())

    /**
     * A list of labels associated with the object.
     */
    def labels[A](
                   after: Option[String] = None,
                   before: Option[String] = None,
                   first: Option[Int] = None,
                   last: Option[Int] = None,
                   orderBy: Option[LabelOrder] = None
                 )(
                   innerSelection: SelectionBuilder[LabelConnection, A]
                 ): SelectionBuilder[Issue, Option[A]] =
      Field(
        "labels",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy)
        )
      )

    /**
     * The moment the editor made the last edit
     */
    def lastEditedAt: SelectionBuilder[Issue, Option[DateTime]] =
      Field("lastEditedAt", OptionOf(Scalar()))

    /**
     * `true` if the object is locked
     */
    def locked: SelectionBuilder[Issue, Boolean] = Field("locked", Scalar())

    /**
     * Identifies the milestone associated with the issue.
     */
    def milestone[A](
                      innerSelection: SelectionBuilder[Milestone, A]
                    ): SelectionBuilder[Issue, Option[A]] =
      Field("milestone", OptionOf(Obj(innerSelection)))

    /**
     * Identifies the issue number.
     */
    def number: SelectionBuilder[Issue, Int] = Field("number", Scalar())

    /**
     * A list of Users that are participating in the Issue conversation.
     */
    def participants[A](
                         after: Option[String] = None,
                         before: Option[String] = None,
                         first: Option[Int] = None,
                         last: Option[Int] = None
                       )(
                         innerSelection: SelectionBuilder[UserConnection, A]
                       ): SelectionBuilder[Issue, A] =
      Field(
        "participants",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )

    /**
     * List of project cards associated with this issue.
     */
    def projectCards[A](
                         after: Option[String] = None,
                         archivedStates: Option[List[Option[ProjectCardArchivedState]]] = None,
                         before: Option[String] = None,
                         first: Option[Int] = None,
                         last: Option[Int] = None
                       )(
                         innerSelection: SelectionBuilder[ProjectCardConnection, A]
                       ): SelectionBuilder[Issue, A] =
      Field(
        "projectCards",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("archivedStates", archivedStates),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )

    /**
     * Identifies when the comment was published at.
     */
    def publishedAt: SelectionBuilder[Issue, Option[DateTime]] =
      Field("publishedAt", OptionOf(Scalar()))

    /**
     * A list of reactions grouped by content left on the subject.
     */
    def reactionGroups[A](
                           innerSelection: SelectionBuilder[ReactionGroup, A]
                         ): SelectionBuilder[Issue, Option[List[A]]] =
      Field("reactionGroups", OptionOf(ListOf(Obj(innerSelection))))

    /**
     * A list of Reactions left on the Issue.
     */
    def reactions[A](
                      after: Option[String] = None,
                      before: Option[String] = None,
                      content: Option[ReactionContent] = None,
                      first: Option[Int] = None,
                      last: Option[Int] = None,
                      orderBy: Option[ReactionOrder] = None
                    )(
                      innerSelection: SelectionBuilder[ReactionConnection, A]
                    ): SelectionBuilder[Issue, A] =
      Field(
        "reactions",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("content", content),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy)
        )
      )

    /**
     * The repository associated with this node.
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[Issue, A] = Field("repository", Obj(innerSelection))

    /**
     * The HTTP path for this issue
     */
    def resourcePath: SelectionBuilder[Issue, URI] =
      Field("resourcePath", Scalar())

    /**
     * Identifies the state of the issue.
     */
    def state: SelectionBuilder[Issue, IssueState] = Field("state", Scalar())

    /**
     * A list of events, comments, commits, etc. associated with the issue.
     */
    @deprecated(
      "`timeline` will be removed Use Issue.timelineItems instead. Removal on 2020-10-01 UTC.",
      ""
    )
    def timeline[A](
                     after: Option[String] = None,
                     before: Option[String] = None,
                     first: Option[Int] = None,
                     last: Option[Int] = None,
                     since: Option[DateTime] = None
                   )(
                     innerSelection: SelectionBuilder[IssueTimelineConnection, A]
                   ): SelectionBuilder[Issue, A] =
      Field(
        "timeline",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("since", since)
        )
      )

    /**
     * A list of events, comments, commits, etc. associated with the issue.
     */
    def timelineItems[A](
                          after: Option[String] = None,
                          before: Option[String] = None,
                          first: Option[Int] = None,
                          itemTypes: Option[List[IssueTimelineItemsItemType]] = None,
                          last: Option[Int] = None,
                          since: Option[DateTime] = None,
                          skip: Option[Int] = None
                        )(
                          innerSelection: SelectionBuilder[IssueTimelineItemsConnection, A]
                        ): SelectionBuilder[Issue, A] =
      Field(
        "timelineItems",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("itemTypes", itemTypes),
          Argument("last", last),
          Argument("since", since),
          Argument("skip", skip)
        )
      )

    /**
     * Identifies the issue title.
     */
    def title: SelectionBuilder[Issue, String] = Field("title", Scalar())

    /**
     * Identifies the date and time when the object was last updated.
     */
    def updatedAt: SelectionBuilder[Issue, DateTime] =
      Field("updatedAt", Scalar())

    /**
     * The HTTP URL for this issue
     */
    def url: SelectionBuilder[Issue, URI] = Field("url", Scalar())

    /**
     * A list of edits to this content.
     */
    def userContentEdits[A](
                             after: Option[String] = None,
                             before: Option[String] = None,
                             first: Option[Int] = None,
                             last: Option[Int] = None
                           )(
                             innerSelection: SelectionBuilder[UserContentEditConnection, A]
                           ): SelectionBuilder[Issue, Option[A]] =
      Field(
        "userContentEdits",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )

    /**
     * Can user react to this subject
     */
    def viewerCanReact: SelectionBuilder[Issue, Boolean] =
      Field("viewerCanReact", Scalar())

    /**
     * Check if the viewer is able to change their subscription status for the repository.
     */
    def viewerCanSubscribe: SelectionBuilder[Issue, Boolean] =
      Field("viewerCanSubscribe", Scalar())

    /**
     * Check if the current viewer can update this object.
     */
    def viewerCanUpdate: SelectionBuilder[Issue, Boolean] =
      Field("viewerCanUpdate", Scalar())

    /**
     * Reasons why the current viewer can not update this comment.
     */
    def viewerCannotUpdateReasons
    : SelectionBuilder[Issue, List[CommentCannotUpdateReason]] =
      Field("viewerCannotUpdateReasons", ListOf(Scalar()))

    /**
     * Did the viewer author this comment.
     */
    def viewerDidAuthor: SelectionBuilder[Issue, Boolean] =
      Field("viewerDidAuthor", Scalar())

    /**
     * Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
     */
    def viewerSubscription: SelectionBuilder[Issue, Option[SubscriptionState]] =
      Field("viewerSubscription", OptionOf(Scalar()))
  }

  type IssueComment

  object IssueComment {

    /**
     * The actor who authored the comment.
     */
    def author[A](
                   onBot: Option[SelectionBuilder[Bot, A]] = None,
                   onEnterpriseUserAccount: Option[
                     SelectionBuilder[EnterpriseUserAccount, A]
                   ] = None,
                   onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                   onUser: Option[SelectionBuilder[User, A]] = None,
                   onOrganization: Option[SelectionBuilder[Organization, A]] = None
                 ): SelectionBuilder[IssueComment, Option[A]] =
      Field(
        "author",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * Author's association with the subject of the comment.
     */
    def authorAssociation
    : SelectionBuilder[IssueComment, CommentAuthorAssociation] =
      Field("authorAssociation", Scalar())

    /**
     * The body as Markdown.
     */
    def body: SelectionBuilder[IssueComment, String] = Field("body", Scalar())

    /**
     * The body rendered to HTML.
     */
    def bodyHTML: SelectionBuilder[IssueComment, HTML] =
      Field("bodyHTML", Scalar())

    /**
     * The body rendered to text.
     */
    def bodyText: SelectionBuilder[IssueComment, String] =
      Field("bodyText", Scalar())

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[IssueComment, DateTime] =
      Field("createdAt", Scalar())

    /**
     * Check if this comment was created via an email reply.
     */
    def createdViaEmail: SelectionBuilder[IssueComment, Boolean] =
      Field("createdViaEmail", Scalar())

    /**
     * Identifies the primary key from the database.
     */
    def databaseId: SelectionBuilder[IssueComment, Option[Int]] =
      Field("databaseId", OptionOf(Scalar()))

    /**
     * The actor who edited the comment.
     */
    def editor[A](
                   onBot: Option[SelectionBuilder[Bot, A]] = None,
                   onEnterpriseUserAccount: Option[
                     SelectionBuilder[EnterpriseUserAccount, A]
                   ] = None,
                   onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                   onUser: Option[SelectionBuilder[User, A]] = None,
                   onOrganization: Option[SelectionBuilder[Organization, A]] = None
                 ): SelectionBuilder[IssueComment, Option[A]] =
      Field(
        "editor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    def id: SelectionBuilder[IssueComment, String] = Field("id", Scalar())

    /**
     * Check if this comment was edited and includes an edit with the creation data
     */
    def includesCreatedEdit: SelectionBuilder[IssueComment, Boolean] =
      Field("includesCreatedEdit", Scalar())

    /**
     * Returns whether or not a comment has been minimized.
     */
    def isMinimized: SelectionBuilder[IssueComment, Boolean] =
      Field("isMinimized", Scalar())

    /**
     * Identifies the issue associated with the comment.
     */
    def issue[A](
                  innerSelection: SelectionBuilder[Issue, A]
                ): SelectionBuilder[IssueComment, A] = Field("issue", Obj(innerSelection))

    /**
     * The moment the editor made the last edit
     */
    def lastEditedAt: SelectionBuilder[IssueComment, Option[DateTime]] =
      Field("lastEditedAt", OptionOf(Scalar()))

    /**
     * Returns why the comment was minimized.
     */
    def minimizedReason: SelectionBuilder[IssueComment, Option[String]] =
      Field("minimizedReason", OptionOf(Scalar()))

    /**
     * Identifies when the comment was published at.
     */
    def publishedAt: SelectionBuilder[IssueComment, Option[DateTime]] =
      Field("publishedAt", OptionOf(Scalar()))

    /**
     * Returns the pull request associated with the comment, if this comment was made on a
     * pull request.
     */
    def pullRequest[A](
                        innerSelection: SelectionBuilder[PullRequest, A]
                      ): SelectionBuilder[IssueComment, Option[A]] =
      Field("pullRequest", OptionOf(Obj(innerSelection)))

    /**
     * A list of reactions grouped by content left on the subject.
     */
    def reactionGroups[A](
                           innerSelection: SelectionBuilder[ReactionGroup, A]
                         ): SelectionBuilder[IssueComment, Option[List[A]]] =
      Field("reactionGroups", OptionOf(ListOf(Obj(innerSelection))))

    /**
     * A list of Reactions left on the Issue.
     */
    def reactions[A](
                      after: Option[String] = None,
                      before: Option[String] = None,
                      content: Option[ReactionContent] = None,
                      first: Option[Int] = None,
                      last: Option[Int] = None,
                      orderBy: Option[ReactionOrder] = None
                    )(
                      innerSelection: SelectionBuilder[ReactionConnection, A]
                    ): SelectionBuilder[IssueComment, A] =
      Field(
        "reactions",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("content", content),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy)
        )
      )

    /**
     * The repository associated with this node.
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[IssueComment, A] =
      Field("repository", Obj(innerSelection))

    /**
     * The HTTP path for this issue comment
     */
    def resourcePath: SelectionBuilder[IssueComment, URI] =
      Field("resourcePath", Scalar())

    /**
     * Identifies the date and time when the object was last updated.
     */
    def updatedAt: SelectionBuilder[IssueComment, DateTime] =
      Field("updatedAt", Scalar())

    /**
     * The HTTP URL for this issue comment
     */
    def url: SelectionBuilder[IssueComment, URI] = Field("url", Scalar())

    /**
     * A list of edits to this content.
     */
    def userContentEdits[A](
                             after: Option[String] = None,
                             before: Option[String] = None,
                             first: Option[Int] = None,
                             last: Option[Int] = None
                           )(
                             innerSelection: SelectionBuilder[UserContentEditConnection, A]
                           ): SelectionBuilder[IssueComment, Option[A]] =
      Field(
        "userContentEdits",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )

    /**
     * Check if the current viewer can delete this object.
     */
    def viewerCanDelete: SelectionBuilder[IssueComment, Boolean] =
      Field("viewerCanDelete", Scalar())

    /**
     * Check if the current viewer can minimize this object.
     */
    def viewerCanMinimize: SelectionBuilder[IssueComment, Boolean] =
      Field("viewerCanMinimize", Scalar())

    /**
     * Can user react to this subject
     */
    def viewerCanReact: SelectionBuilder[IssueComment, Boolean] =
      Field("viewerCanReact", Scalar())

    /**
     * Check if the current viewer can update this object.
     */
    def viewerCanUpdate: SelectionBuilder[IssueComment, Boolean] =
      Field("viewerCanUpdate", Scalar())

    /**
     * Reasons why the current viewer can not update this comment.
     */
    def viewerCannotUpdateReasons
    : SelectionBuilder[IssueComment, List[CommentCannotUpdateReason]] =
      Field("viewerCannotUpdateReasons", ListOf(Scalar()))

    /**
     * Did the viewer author this comment.
     */
    def viewerDidAuthor: SelectionBuilder[IssueComment, Boolean] =
      Field("viewerDidAuthor", Scalar())
  }

  type IssueCommentConnection

  object IssueCommentConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[IssueCommentEdge, A]
                ): SelectionBuilder[IssueCommentConnection, Option[List[Option[A]]]] =
      Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[IssueComment, A]
                ): SelectionBuilder[IssueCommentConnection, Option[List[Option[A]]]] =
      Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[IssueCommentConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[IssueCommentConnection, Int] =
      Field("totalCount", Scalar())
  }

  type IssueCommentEdge

  object IssueCommentEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[IssueCommentEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[IssueComment, A]
               ): SelectionBuilder[IssueCommentEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type IssueConnection

  object IssueConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[IssueEdge, A]
                ): SelectionBuilder[IssueConnection, Option[List[Option[A]]]] =
      Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[Issue, A]
                ): SelectionBuilder[IssueConnection, Option[List[Option[A]]]] =
      Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[IssueConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[IssueConnection, Int] =
      Field("totalCount", Scalar())
  }

  type IssueContributionsByRepository

  object IssueContributionsByRepository {

    /**
     * The issue contributions.
     */
    def contributions[A](
                          after: Option[String] = None,
                          before: Option[String] = None,
                          first: Option[Int] = None,
                          last: Option[Int] = None,
                          orderBy: Option[ContributionOrder] = None
                        )(
                          innerSelection: SelectionBuilder[CreatedIssueContributionConnection, A]
                        ): SelectionBuilder[IssueContributionsByRepository, A] =
      Field(
        "contributions",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy)
        )
      )

    /**
     * The repository in which the issues were opened.
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[IssueContributionsByRepository, A] =
      Field("repository", Obj(innerSelection))
  }

  type IssueEdge

  object IssueEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[IssueEdge, String] = Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[Issue, A]
               ): SelectionBuilder[IssueEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type IssueTemplate

  object IssueTemplate {

    /**
     * The template purpose.
     */
    def about: SelectionBuilder[IssueTemplate, Option[String]] =
      Field("about", OptionOf(Scalar()))

    /**
     * The suggested issue body.
     */
    def body: SelectionBuilder[IssueTemplate, Option[String]] =
      Field("body", OptionOf(Scalar()))

    /**
     * The template name.
     */
    def name: SelectionBuilder[IssueTemplate, String] = Field("name", Scalar())

    /**
     * The suggested issue title.
     */
    def title: SelectionBuilder[IssueTemplate, Option[String]] =
      Field("title", OptionOf(Scalar()))
  }

  type IssueTimelineConnection

  object IssueTimelineConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[IssueTimelineItemEdge, A]
                ): SelectionBuilder[IssueTimelineConnection, Option[List[Option[A]]]] =
      Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  onAssignedEvent: SelectionBuilder[AssignedEvent, A],
                  onClosedEvent: SelectionBuilder[ClosedEvent, A],
                  onCommit: SelectionBuilder[Commit, A],
                  onCrossReferencedEvent: SelectionBuilder[CrossReferencedEvent, A],
                  onDemilestonedEvent: SelectionBuilder[DemilestonedEvent, A],
                  onIssueComment: SelectionBuilder[IssueComment, A],
                  onLabeledEvent: SelectionBuilder[LabeledEvent, A],
                  onLockedEvent: SelectionBuilder[LockedEvent, A],
                  onMilestonedEvent: SelectionBuilder[MilestonedEvent, A],
                  onReferencedEvent: SelectionBuilder[ReferencedEvent, A],
                  onRenamedTitleEvent: SelectionBuilder[RenamedTitleEvent, A],
                  onReopenedEvent: SelectionBuilder[ReopenedEvent, A],
                  onSubscribedEvent: SelectionBuilder[SubscribedEvent, A],
                  onTransferredEvent: SelectionBuilder[TransferredEvent, A],
                  onUnassignedEvent: SelectionBuilder[UnassignedEvent, A],
                  onUnlabeledEvent: SelectionBuilder[UnlabeledEvent, A],
                  onUnlockedEvent: SelectionBuilder[UnlockedEvent, A],
                  onUnsubscribedEvent: SelectionBuilder[UnsubscribedEvent, A],
                  onUserBlockedEvent: SelectionBuilder[UserBlockedEvent, A]
                ): SelectionBuilder[IssueTimelineConnection, Option[List[Option[A]]]] =
      Field(
        "nodes",
        OptionOf(
          ListOf(
            OptionOf(
              ChoiceOf(
                Map(
                  "AssignedEvent" -> Obj(onAssignedEvent),
                  "ClosedEvent" -> Obj(onClosedEvent),
                  "Commit" -> Obj(onCommit),
                  "CrossReferencedEvent" -> Obj(onCrossReferencedEvent),
                  "DemilestonedEvent" -> Obj(onDemilestonedEvent),
                  "IssueComment" -> Obj(onIssueComment),
                  "LabeledEvent" -> Obj(onLabeledEvent),
                  "LockedEvent" -> Obj(onLockedEvent),
                  "MilestonedEvent" -> Obj(onMilestonedEvent),
                  "ReferencedEvent" -> Obj(onReferencedEvent),
                  "RenamedTitleEvent" -> Obj(onRenamedTitleEvent),
                  "ReopenedEvent" -> Obj(onReopenedEvent),
                  "SubscribedEvent" -> Obj(onSubscribedEvent),
                  "TransferredEvent" -> Obj(onTransferredEvent),
                  "UnassignedEvent" -> Obj(onUnassignedEvent),
                  "UnlabeledEvent" -> Obj(onUnlabeledEvent),
                  "UnlockedEvent" -> Obj(onUnlockedEvent),
                  "UnsubscribedEvent" -> Obj(onUnsubscribedEvent),
                  "UserBlockedEvent" -> Obj(onUserBlockedEvent)
                )
              )
            )
          )
        )
      )

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[IssueTimelineConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[IssueTimelineConnection, Int] =
      Field("totalCount", Scalar())
  }

  type IssueTimelineItemEdge

  object IssueTimelineItemEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[IssueTimelineItemEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 onAssignedEvent: SelectionBuilder[AssignedEvent, A],
                 onClosedEvent: SelectionBuilder[ClosedEvent, A],
                 onCommit: SelectionBuilder[Commit, A],
                 onCrossReferencedEvent: SelectionBuilder[CrossReferencedEvent, A],
                 onDemilestonedEvent: SelectionBuilder[DemilestonedEvent, A],
                 onIssueComment: SelectionBuilder[IssueComment, A],
                 onLabeledEvent: SelectionBuilder[LabeledEvent, A],
                 onLockedEvent: SelectionBuilder[LockedEvent, A],
                 onMilestonedEvent: SelectionBuilder[MilestonedEvent, A],
                 onReferencedEvent: SelectionBuilder[ReferencedEvent, A],
                 onRenamedTitleEvent: SelectionBuilder[RenamedTitleEvent, A],
                 onReopenedEvent: SelectionBuilder[ReopenedEvent, A],
                 onSubscribedEvent: SelectionBuilder[SubscribedEvent, A],
                 onTransferredEvent: SelectionBuilder[TransferredEvent, A],
                 onUnassignedEvent: SelectionBuilder[UnassignedEvent, A],
                 onUnlabeledEvent: SelectionBuilder[UnlabeledEvent, A],
                 onUnlockedEvent: SelectionBuilder[UnlockedEvent, A],
                 onUnsubscribedEvent: SelectionBuilder[UnsubscribedEvent, A],
                 onUserBlockedEvent: SelectionBuilder[UserBlockedEvent, A]
               ): SelectionBuilder[IssueTimelineItemEdge, Option[A]] =
      Field(
        "node",
        OptionOf(
          ChoiceOf(
            Map(
              "AssignedEvent" -> Obj(onAssignedEvent),
              "ClosedEvent" -> Obj(onClosedEvent),
              "Commit" -> Obj(onCommit),
              "CrossReferencedEvent" -> Obj(onCrossReferencedEvent),
              "DemilestonedEvent" -> Obj(onDemilestonedEvent),
              "IssueComment" -> Obj(onIssueComment),
              "LabeledEvent" -> Obj(onLabeledEvent),
              "LockedEvent" -> Obj(onLockedEvent),
              "MilestonedEvent" -> Obj(onMilestonedEvent),
              "ReferencedEvent" -> Obj(onReferencedEvent),
              "RenamedTitleEvent" -> Obj(onRenamedTitleEvent),
              "ReopenedEvent" -> Obj(onReopenedEvent),
              "SubscribedEvent" -> Obj(onSubscribedEvent),
              "TransferredEvent" -> Obj(onTransferredEvent),
              "UnassignedEvent" -> Obj(onUnassignedEvent),
              "UnlabeledEvent" -> Obj(onUnlabeledEvent),
              "UnlockedEvent" -> Obj(onUnlockedEvent),
              "UnsubscribedEvent" -> Obj(onUnsubscribedEvent),
              "UserBlockedEvent" -> Obj(onUserBlockedEvent)
            )
          )
        )
      )
  }

  type IssueTimelineItemsConnection

  object IssueTimelineItemsConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[IssueTimelineItemsEdge, A]
                ): SelectionBuilder[IssueTimelineItemsConnection, Option[List[Option[A]]]] =
      Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Identifies the count of items after applying `before` and `after` filters.
     */
    def filteredCount: SelectionBuilder[IssueTimelineItemsConnection, Int] =
      Field("filteredCount", Scalar())

    /**
     * A list of nodes.
     */
    def nodes[A](
                  onAddedToProjectEvent: SelectionBuilder[AddedToProjectEvent, A],
                  onAssignedEvent: SelectionBuilder[AssignedEvent, A],
                  onClosedEvent: SelectionBuilder[ClosedEvent, A],
                  onCommentDeletedEvent: SelectionBuilder[CommentDeletedEvent, A],
                  onConnectedEvent: SelectionBuilder[ConnectedEvent, A],
                  onConvertedNoteToIssueEvent: SelectionBuilder[
                    ConvertedNoteToIssueEvent,
                    A
                  ],
                  onCrossReferencedEvent: SelectionBuilder[CrossReferencedEvent, A],
                  onDemilestonedEvent: SelectionBuilder[DemilestonedEvent, A],
                  onDisconnectedEvent: SelectionBuilder[DisconnectedEvent, A],
                  onIssueComment: SelectionBuilder[IssueComment, A],
                  onLabeledEvent: SelectionBuilder[LabeledEvent, A],
                  onLockedEvent: SelectionBuilder[LockedEvent, A],
                  onMarkedAsDuplicateEvent: SelectionBuilder[MarkedAsDuplicateEvent, A],
                  onMentionedEvent: SelectionBuilder[MentionedEvent, A],
                  onMilestonedEvent: SelectionBuilder[MilestonedEvent, A],
                  onMovedColumnsInProjectEvent: SelectionBuilder[
                    MovedColumnsInProjectEvent,
                    A
                  ],
                  onPinnedEvent: SelectionBuilder[PinnedEvent, A],
                  onReferencedEvent: SelectionBuilder[ReferencedEvent, A],
                  onRemovedFromProjectEvent: SelectionBuilder[RemovedFromProjectEvent, A],
                  onRenamedTitleEvent: SelectionBuilder[RenamedTitleEvent, A],
                  onReopenedEvent: SelectionBuilder[ReopenedEvent, A],
                  onSubscribedEvent: SelectionBuilder[SubscribedEvent, A],
                  onTransferredEvent: SelectionBuilder[TransferredEvent, A],
                  onUnassignedEvent: SelectionBuilder[UnassignedEvent, A],
                  onUnlabeledEvent: SelectionBuilder[UnlabeledEvent, A],
                  onUnlockedEvent: SelectionBuilder[UnlockedEvent, A],
                  onUnmarkedAsDuplicateEvent: SelectionBuilder[
                    UnmarkedAsDuplicateEvent,
                    A
                  ],
                  onUnpinnedEvent: SelectionBuilder[UnpinnedEvent, A],
                  onUnsubscribedEvent: SelectionBuilder[UnsubscribedEvent, A],
                  onUserBlockedEvent: SelectionBuilder[UserBlockedEvent, A]
                ): SelectionBuilder[IssueTimelineItemsConnection, Option[List[Option[A]]]] =
      Field(
        "nodes",
        OptionOf(
          ListOf(
            OptionOf(
              ChoiceOf(
                Map(
                  "AddedToProjectEvent" -> Obj(onAddedToProjectEvent),
                  "AssignedEvent" -> Obj(onAssignedEvent),
                  "ClosedEvent" -> Obj(onClosedEvent),
                  "CommentDeletedEvent" -> Obj(onCommentDeletedEvent),
                  "ConnectedEvent" -> Obj(onConnectedEvent),
                  "ConvertedNoteToIssueEvent" -> Obj(
                    onConvertedNoteToIssueEvent
                  ),
                  "CrossReferencedEvent" -> Obj(onCrossReferencedEvent),
                  "DemilestonedEvent" -> Obj(onDemilestonedEvent),
                  "DisconnectedEvent" -> Obj(onDisconnectedEvent),
                  "IssueComment" -> Obj(onIssueComment),
                  "LabeledEvent" -> Obj(onLabeledEvent),
                  "LockedEvent" -> Obj(onLockedEvent),
                  "MarkedAsDuplicateEvent" -> Obj(onMarkedAsDuplicateEvent),
                  "MentionedEvent" -> Obj(onMentionedEvent),
                  "MilestonedEvent" -> Obj(onMilestonedEvent),
                  "MovedColumnsInProjectEvent" -> Obj(
                    onMovedColumnsInProjectEvent
                  ),
                  "PinnedEvent" -> Obj(onPinnedEvent),
                  "ReferencedEvent" -> Obj(onReferencedEvent),
                  "RemovedFromProjectEvent" -> Obj(onRemovedFromProjectEvent),
                  "RenamedTitleEvent" -> Obj(onRenamedTitleEvent),
                  "ReopenedEvent" -> Obj(onReopenedEvent),
                  "SubscribedEvent" -> Obj(onSubscribedEvent),
                  "TransferredEvent" -> Obj(onTransferredEvent),
                  "UnassignedEvent" -> Obj(onUnassignedEvent),
                  "UnlabeledEvent" -> Obj(onUnlabeledEvent),
                  "UnlockedEvent" -> Obj(onUnlockedEvent),
                  "UnmarkedAsDuplicateEvent" -> Obj(onUnmarkedAsDuplicateEvent),
                  "UnpinnedEvent" -> Obj(onUnpinnedEvent),
                  "UnsubscribedEvent" -> Obj(onUnsubscribedEvent),
                  "UserBlockedEvent" -> Obj(onUserBlockedEvent)
                )
              )
            )
          )
        )
      )

    /**
     * Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing.
     */
    def pageCount: SelectionBuilder[IssueTimelineItemsConnection, Int] =
      Field("pageCount", Scalar())

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[IssueTimelineItemsConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[IssueTimelineItemsConnection, Int] =
      Field("totalCount", Scalar())

    /**
     * Identifies the date and time when the timeline was last updated.
     */
    def updatedAt: SelectionBuilder[IssueTimelineItemsConnection, DateTime] =
      Field("updatedAt", Scalar())
  }

  type IssueTimelineItemsEdge

  object IssueTimelineItemsEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[IssueTimelineItemsEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 onAddedToProjectEvent: SelectionBuilder[AddedToProjectEvent, A],
                 onAssignedEvent: SelectionBuilder[AssignedEvent, A],
                 onClosedEvent: SelectionBuilder[ClosedEvent, A],
                 onCommentDeletedEvent: SelectionBuilder[CommentDeletedEvent, A],
                 onConnectedEvent: SelectionBuilder[ConnectedEvent, A],
                 onConvertedNoteToIssueEvent: SelectionBuilder[
                   ConvertedNoteToIssueEvent,
                   A
                 ],
                 onCrossReferencedEvent: SelectionBuilder[CrossReferencedEvent, A],
                 onDemilestonedEvent: SelectionBuilder[DemilestonedEvent, A],
                 onDisconnectedEvent: SelectionBuilder[DisconnectedEvent, A],
                 onIssueComment: SelectionBuilder[IssueComment, A],
                 onLabeledEvent: SelectionBuilder[LabeledEvent, A],
                 onLockedEvent: SelectionBuilder[LockedEvent, A],
                 onMarkedAsDuplicateEvent: SelectionBuilder[MarkedAsDuplicateEvent, A],
                 onMentionedEvent: SelectionBuilder[MentionedEvent, A],
                 onMilestonedEvent: SelectionBuilder[MilestonedEvent, A],
                 onMovedColumnsInProjectEvent: SelectionBuilder[
                   MovedColumnsInProjectEvent,
                   A
                 ],
                 onPinnedEvent: SelectionBuilder[PinnedEvent, A],
                 onReferencedEvent: SelectionBuilder[ReferencedEvent, A],
                 onRemovedFromProjectEvent: SelectionBuilder[RemovedFromProjectEvent, A],
                 onRenamedTitleEvent: SelectionBuilder[RenamedTitleEvent, A],
                 onReopenedEvent: SelectionBuilder[ReopenedEvent, A],
                 onSubscribedEvent: SelectionBuilder[SubscribedEvent, A],
                 onTransferredEvent: SelectionBuilder[TransferredEvent, A],
                 onUnassignedEvent: SelectionBuilder[UnassignedEvent, A],
                 onUnlabeledEvent: SelectionBuilder[UnlabeledEvent, A],
                 onUnlockedEvent: SelectionBuilder[UnlockedEvent, A],
                 onUnmarkedAsDuplicateEvent: SelectionBuilder[
                   UnmarkedAsDuplicateEvent,
                   A
                 ],
                 onUnpinnedEvent: SelectionBuilder[UnpinnedEvent, A],
                 onUnsubscribedEvent: SelectionBuilder[UnsubscribedEvent, A],
                 onUserBlockedEvent: SelectionBuilder[UserBlockedEvent, A]
               ): SelectionBuilder[IssueTimelineItemsEdge, Option[A]] =
      Field(
        "node",
        OptionOf(
          ChoiceOf(
            Map(
              "AddedToProjectEvent" -> Obj(onAddedToProjectEvent),
              "AssignedEvent" -> Obj(onAssignedEvent),
              "ClosedEvent" -> Obj(onClosedEvent),
              "CommentDeletedEvent" -> Obj(onCommentDeletedEvent),
              "ConnectedEvent" -> Obj(onConnectedEvent),
              "ConvertedNoteToIssueEvent" -> Obj(onConvertedNoteToIssueEvent),
              "CrossReferencedEvent" -> Obj(onCrossReferencedEvent),
              "DemilestonedEvent" -> Obj(onDemilestonedEvent),
              "DisconnectedEvent" -> Obj(onDisconnectedEvent),
              "IssueComment" -> Obj(onIssueComment),
              "LabeledEvent" -> Obj(onLabeledEvent),
              "LockedEvent" -> Obj(onLockedEvent),
              "MarkedAsDuplicateEvent" -> Obj(onMarkedAsDuplicateEvent),
              "MentionedEvent" -> Obj(onMentionedEvent),
              "MilestonedEvent" -> Obj(onMilestonedEvent),
              "MovedColumnsInProjectEvent" -> Obj(onMovedColumnsInProjectEvent),
              "PinnedEvent" -> Obj(onPinnedEvent),
              "ReferencedEvent" -> Obj(onReferencedEvent),
              "RemovedFromProjectEvent" -> Obj(onRemovedFromProjectEvent),
              "RenamedTitleEvent" -> Obj(onRenamedTitleEvent),
              "ReopenedEvent" -> Obj(onReopenedEvent),
              "SubscribedEvent" -> Obj(onSubscribedEvent),
              "TransferredEvent" -> Obj(onTransferredEvent),
              "UnassignedEvent" -> Obj(onUnassignedEvent),
              "UnlabeledEvent" -> Obj(onUnlabeledEvent),
              "UnlockedEvent" -> Obj(onUnlockedEvent),
              "UnmarkedAsDuplicateEvent" -> Obj(onUnmarkedAsDuplicateEvent),
              "UnpinnedEvent" -> Obj(onUnpinnedEvent),
              "UnsubscribedEvent" -> Obj(onUnsubscribedEvent),
              "UserBlockedEvent" -> Obj(onUserBlockedEvent)
            )
          )
        )
      )
  }

  type JoinedGitHubContribution

  object JoinedGitHubContribution {

    /**
     * Whether this contribution is associated with a record you do not have access to. For
     * example, your own 'first issue' contribution may have been made on a repository you can no
     * longer access.
     */
    def isRestricted: SelectionBuilder[JoinedGitHubContribution, Boolean] =
      Field("isRestricted", Scalar())

    /**
     * When this contribution was made.
     */
    def occurredAt: SelectionBuilder[JoinedGitHubContribution, DateTime] =
      Field("occurredAt", Scalar())

    /**
     * The HTTP path for this contribution.
     */
    def resourcePath: SelectionBuilder[JoinedGitHubContribution, URI] =
      Field("resourcePath", Scalar())

    /**
     * The HTTP URL for this contribution.
     */
    def url: SelectionBuilder[JoinedGitHubContribution, URI] =
      Field("url", Scalar())

    /**
     * The user who made this contribution.
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[JoinedGitHubContribution, A] =
      Field("user", Obj(innerSelection))
  }

  type Label

  object Label {

    /**
     * Identifies the label color.
     */
    def color: SelectionBuilder[Label, String] = Field("color", Scalar())

    /**
     * Identifies the date and time when the label was created.
     */
    def createdAt: SelectionBuilder[Label, Option[DateTime]] =
      Field("createdAt", OptionOf(Scalar()))

    /**
     * A brief description of this label.
     */
    def description: SelectionBuilder[Label, Option[String]] =
      Field("description", OptionOf(Scalar()))

    def id: SelectionBuilder[Label, String] = Field("id", Scalar())

    /**
     * Indicates whether or not this is a default label.
     */
    def isDefault: SelectionBuilder[Label, Boolean] =
      Field("isDefault", Scalar())

    /**
     * A list of issues associated with this label.
     */
    def issues[A](
                   after: Option[String] = None,
                   before: Option[String] = None,
                   filterBy: Option[IssueFilters] = None,
                   first: Option[Int] = None,
                   labels: Option[List[String]] = None,
                   last: Option[Int] = None,
                   orderBy: Option[IssueOrder] = None,
                   states: Option[List[IssueState]] = None
                 )(
                   innerSelection: SelectionBuilder[IssueConnection, A]
                 ): SelectionBuilder[Label, A] =
      Field(
        "issues",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("filterBy", filterBy),
          Argument("first", first),
          Argument("labels", labels),
          Argument("last", last),
          Argument("orderBy", orderBy),
          Argument("states", states)
        )
      )

    /**
     * Identifies the label name.
     */
    def name: SelectionBuilder[Label, String] = Field("name", Scalar())

    /**
     * A list of pull requests associated with this label.
     */
    def pullRequests[A](
                         after: Option[String] = None,
                         baseRefName: Option[String] = None,
                         before: Option[String] = None,
                         first: Option[Int] = None,
                         headRefName: Option[String] = None,
                         labels: Option[List[String]] = None,
                         last: Option[Int] = None,
                         orderBy: Option[IssueOrder] = None,
                         states: Option[List[PullRequestState]] = None
                       )(
                         innerSelection: SelectionBuilder[PullRequestConnection, A]
                       ): SelectionBuilder[Label, A] =
      Field(
        "pullRequests",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("baseRefName", baseRefName),
          Argument("before", before),
          Argument("first", first),
          Argument("headRefName", headRefName),
          Argument("labels", labels),
          Argument("last", last),
          Argument("orderBy", orderBy),
          Argument("states", states)
        )
      )

    /**
     * The repository associated with this label.
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[Label, A] = Field("repository", Obj(innerSelection))

    /**
     * The HTTP path for this label.
     */
    def resourcePath: SelectionBuilder[Label, URI] =
      Field("resourcePath", Scalar())

    /**
     * Identifies the date and time when the label was last updated.
     */
    def updatedAt: SelectionBuilder[Label, Option[DateTime]] =
      Field("updatedAt", OptionOf(Scalar()))

    /**
     * The HTTP URL for this label.
     */
    def url: SelectionBuilder[Label, URI] = Field("url", Scalar())
  }

  type LabelConnection

  object LabelConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[LabelEdge, A]
                ): SelectionBuilder[LabelConnection, Option[List[Option[A]]]] =
      Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[Label, A]
                ): SelectionBuilder[LabelConnection, Option[List[Option[A]]]] =
      Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[LabelConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[LabelConnection, Int] =
      Field("totalCount", Scalar())
  }

  type LabelEdge

  object LabelEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[LabelEdge, String] = Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[Label, A]
               ): SelectionBuilder[LabelEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type LabeledEvent

  object LabeledEvent {

    /**
     * Identifies the actor who performed the event.
     */
    def actor[A](
                  onBot: Option[SelectionBuilder[Bot, A]] = None,
                  onEnterpriseUserAccount: Option[
                    SelectionBuilder[EnterpriseUserAccount, A]
                  ] = None,
                  onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                  onUser: Option[SelectionBuilder[User, A]] = None,
                  onOrganization: Option[SelectionBuilder[Organization, A]] = None
                ): SelectionBuilder[LabeledEvent, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[LabeledEvent, DateTime] =
      Field("createdAt", Scalar())

    def id: SelectionBuilder[LabeledEvent, String] = Field("id", Scalar())

    /**
     * Identifies the label associated with the 'labeled' event.
     */
    def label[A](
                  innerSelection: SelectionBuilder[Label, A]
                ): SelectionBuilder[LabeledEvent, A] = Field("label", Obj(innerSelection))

    /**
     * Identifies the `Labelable` associated with the event.
     */
    def labelable[A](
                      onIssue: Option[SelectionBuilder[Issue, A]] = None,
                      onPullRequest: Option[SelectionBuilder[PullRequest, A]] = None
                    ): SelectionBuilder[LabeledEvent, A] =
      Field(
        "labelable",
        ChoiceOf(
          Map("Issue" -> onIssue, "PullRequest" -> onPullRequest).collect {
            case (k, Some(v)) => k -> Obj(v)
          }
        )
      )
  }

  type Language

  object Language {

    /**
     * The color defined for the current language.
     */
    def color: SelectionBuilder[Language, Option[String]] =
      Field("color", OptionOf(Scalar()))

    def id: SelectionBuilder[Language, String] = Field("id", Scalar())

    /**
     * The name of the current language.
     */
    def name: SelectionBuilder[Language, String] = Field("name", Scalar())
  }

  type LanguageConnection

  object LanguageConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[LanguageEdge, A]
                ): SelectionBuilder[LanguageConnection, Option[List[Option[A]]]] =
      Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[Language, A]
                ): SelectionBuilder[LanguageConnection, Option[List[Option[A]]]] =
      Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[LanguageConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[LanguageConnection, Int] =
      Field("totalCount", Scalar())

    /**
     * The total size in bytes of files written in that language.
     */
    def totalSize: SelectionBuilder[LanguageConnection, Int] =
      Field("totalSize", Scalar())
  }

  type LanguageEdge

  object LanguageEdge {
    def cursor: SelectionBuilder[LanguageEdge, String] =
      Field("cursor", Scalar())

    def node[A](
                 innerSelection: SelectionBuilder[Language, A]
               ): SelectionBuilder[LanguageEdge, A] = Field("node", Obj(innerSelection))

    /**
     * The number of bytes of code written in the language.
     */
    def size: SelectionBuilder[LanguageEdge, Int] = Field("size", Scalar())
  }

  type License

  object License {

    /**
     * The full text of the license
     */
    def body: SelectionBuilder[License, String] = Field("body", Scalar())

    /**
     * The conditions set by the license
     */
    def conditions[A](
                       innerSelection: SelectionBuilder[LicenseRule, A]
                     ): SelectionBuilder[License, List[Option[A]]] =
      Field("conditions", ListOf(OptionOf(Obj(innerSelection))))

    /**
     * A human-readable description of the license
     */
    def description: SelectionBuilder[License, Option[String]] =
      Field("description", OptionOf(Scalar()))

    /**
     * Whether the license should be featured
     */
    def featured: SelectionBuilder[License, Boolean] =
      Field("featured", Scalar())

    /**
     * Whether the license should be displayed in license pickers
     */
    def hidden: SelectionBuilder[License, Boolean] = Field("hidden", Scalar())

    def id: SelectionBuilder[License, String] = Field("id", Scalar())

    /**
     * Instructions on how to implement the license
     */
    def implementation: SelectionBuilder[License, Option[String]] =
      Field("implementation", OptionOf(Scalar()))

    /**
     * The lowercased SPDX ID of the license
     */
    def key: SelectionBuilder[License, String] = Field("key", Scalar())

    /**
     * The limitations set by the license
     */
    def limitations[A](
                        innerSelection: SelectionBuilder[LicenseRule, A]
                      ): SelectionBuilder[License, List[Option[A]]] =
      Field("limitations", ListOf(OptionOf(Obj(innerSelection))))

    /**
     * The license full name specified by <https://spdx.org/licenses>
     */
    def name: SelectionBuilder[License, String] = Field("name", Scalar())

    /**
     * Customary short name if applicable (e.g, GPLv3)
     */
    def nickname: SelectionBuilder[License, Option[String]] =
      Field("nickname", OptionOf(Scalar()))

    /**
     * The permissions set by the license
     */
    def permissions[A](
                        innerSelection: SelectionBuilder[LicenseRule, A]
                      ): SelectionBuilder[License, List[Option[A]]] =
      Field("permissions", ListOf(OptionOf(Obj(innerSelection))))

    /**
     * Whether the license is a pseudo-license placeholder (e.g., other, no-license)
     */
    def pseudoLicense: SelectionBuilder[License, Boolean] =
      Field("pseudoLicense", Scalar())

    /**
     * Short identifier specified by <https://spdx.org/licenses>
     */
    def spdxId: SelectionBuilder[License, Option[String]] =
      Field("spdxId", OptionOf(Scalar()))

    /**
     * URL to the license on <https://choosealicense.com>
     */
    def url: SelectionBuilder[License, Option[URI]] =
      Field("url", OptionOf(Scalar()))
  }

  type LicenseRule

  object LicenseRule {

    /**
     * A description of the rule
     */
    def description: SelectionBuilder[LicenseRule, String] =
      Field("description", Scalar())

    /**
     * The machine-readable rule key
     */
    def key: SelectionBuilder[LicenseRule, String] = Field("key", Scalar())

    /**
     * The human-readable rule label
     */
    def label: SelectionBuilder[LicenseRule, String] = Field("label", Scalar())
  }

  type LinkRepositoryToProjectPayload

  object LinkRepositoryToProjectPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[LinkRepositoryToProjectPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The linked Project.
     */
    def project[A](
                    innerSelection: SelectionBuilder[Project, A]
                  ): SelectionBuilder[LinkRepositoryToProjectPayload, Option[A]] =
      Field("project", OptionOf(Obj(innerSelection)))

    /**
     * The linked Repository.
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[LinkRepositoryToProjectPayload, Option[A]] =
      Field("repository", OptionOf(Obj(innerSelection)))
  }

  type LockLockablePayload

  object LockLockablePayload {

    /**
     * Identifies the actor who performed the event.
     */
    def actor[A](
                  onBot: Option[SelectionBuilder[Bot, A]] = None,
                  onEnterpriseUserAccount: Option[
                    SelectionBuilder[EnterpriseUserAccount, A]
                  ] = None,
                  onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                  onUser: Option[SelectionBuilder[User, A]] = None,
                  onOrganization: Option[SelectionBuilder[Organization, A]] = None
                ): SelectionBuilder[LockLockablePayload, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[LockLockablePayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The item that was locked.
     */
    def lockedRecord[A](
                         onIssue: Option[SelectionBuilder[Issue, A]] = None,
                         onPullRequest: Option[SelectionBuilder[PullRequest, A]] = None
                       ): SelectionBuilder[LockLockablePayload, Option[A]] =
      Field(
        "lockedRecord",
        OptionOf(
          ChoiceOf(
            Map("Issue" -> onIssue, "PullRequest" -> onPullRequest).collect {
              case (k, Some(v)) => k -> Obj(v)
            }
          )
        )
      )
  }

  type LockedEvent

  object LockedEvent {

    /**
     * Identifies the actor who performed the event.
     */
    def actor[A](
                  onBot: Option[SelectionBuilder[Bot, A]] = None,
                  onEnterpriseUserAccount: Option[
                    SelectionBuilder[EnterpriseUserAccount, A]
                  ] = None,
                  onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                  onUser: Option[SelectionBuilder[User, A]] = None,
                  onOrganization: Option[SelectionBuilder[Organization, A]] = None
                ): SelectionBuilder[LockedEvent, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[LockedEvent, DateTime] =
      Field("createdAt", Scalar())

    def id: SelectionBuilder[LockedEvent, String] = Field("id", Scalar())

    /**
     * Reason that the conversation was locked (optional).
     */
    def lockReason: SelectionBuilder[LockedEvent, Option[LockReason]] =
      Field("lockReason", OptionOf(Scalar()))

    /**
     * Object that was locked.
     */
    def lockable[A](
                     onIssue: Option[SelectionBuilder[Issue, A]] = None,
                     onPullRequest: Option[SelectionBuilder[PullRequest, A]] = None
                   ): SelectionBuilder[LockedEvent, A] =
      Field(
        "lockable",
        ChoiceOf(
          Map("Issue" -> onIssue, "PullRequest" -> onPullRequest).collect {
            case (k, Some(v)) => k -> Obj(v)
          }
        )
      )
  }

  type Mannequin

  object Mannequin {

    /**
     * A URL pointing to the GitHub App's public avatar.
     */
    def avatarUrl(size: Option[Int] = None): SelectionBuilder[Mannequin, URI] =
      Field("avatarUrl", Scalar(), arguments = List(Argument("size", size)))

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[Mannequin, DateTime] =
      Field("createdAt", Scalar())

    /**
     * Identifies the primary key from the database.
     */
    def databaseId: SelectionBuilder[Mannequin, Option[Int]] =
      Field("databaseId", OptionOf(Scalar()))

    /**
     * The mannequin's email on the source instance.
     */
    def email: SelectionBuilder[Mannequin, Option[String]] =
      Field("email", OptionOf(Scalar()))

    def id: SelectionBuilder[Mannequin, String] = Field("id", Scalar())

    /**
     * The username of the actor.
     */
    def login: SelectionBuilder[Mannequin, String] = Field("login", Scalar())

    /**
     * The HTML path to this resource.
     */
    def resourcePath: SelectionBuilder[Mannequin, URI] =
      Field("resourcePath", Scalar())

    /**
     * Identifies the date and time when the object was last updated.
     */
    def updatedAt: SelectionBuilder[Mannequin, DateTime] =
      Field("updatedAt", Scalar())

    /**
     * The URL to this resource.
     */
    def url: SelectionBuilder[Mannequin, URI] = Field("url", Scalar())
  }

  type MarkFileAsViewedPayload

  object MarkFileAsViewedPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[MarkFileAsViewedPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The updated pull request.
     */
    def pullRequest[A](
                        innerSelection: SelectionBuilder[PullRequest, A]
                      ): SelectionBuilder[MarkFileAsViewedPayload, Option[A]] =
      Field("pullRequest", OptionOf(Obj(innerSelection)))
  }

  type MarkPullRequestReadyForReviewPayload

  object MarkPullRequestReadyForReviewPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[MarkPullRequestReadyForReviewPayload, Option[
      String
    ]] = Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The pull request that is ready for review.
     */
    def pullRequest[A](
                        innerSelection: SelectionBuilder[PullRequest, A]
                      ): SelectionBuilder[MarkPullRequestReadyForReviewPayload, Option[A]] =
      Field("pullRequest", OptionOf(Obj(innerSelection)))
  }

  type MarkedAsDuplicateEvent

  object MarkedAsDuplicateEvent {

    /**
     * Identifies the actor who performed the event.
     */
    def actor[A](
                  onBot: Option[SelectionBuilder[Bot, A]] = None,
                  onEnterpriseUserAccount: Option[
                    SelectionBuilder[EnterpriseUserAccount, A]
                  ] = None,
                  onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                  onUser: Option[SelectionBuilder[User, A]] = None,
                  onOrganization: Option[SelectionBuilder[Organization, A]] = None
                ): SelectionBuilder[MarkedAsDuplicateEvent, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * The authoritative issue or pull request which has been duplicated by another.
     */
    def canonical[A](
                      onIssue: SelectionBuilder[Issue, A],
                      onPullRequest: SelectionBuilder[PullRequest, A]
                    ): SelectionBuilder[MarkedAsDuplicateEvent, Option[A]] =
      Field(
        "canonical",
        OptionOf(
          ChoiceOf(
            Map("Issue" -> Obj(onIssue), "PullRequest" -> Obj(onPullRequest))
          )
        )
      )

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[MarkedAsDuplicateEvent, DateTime] =
      Field("createdAt", Scalar())

    /**
     * The issue or pull request which has been marked as a duplicate of another.
     */
    def duplicate[A](
                      onIssue: SelectionBuilder[Issue, A],
                      onPullRequest: SelectionBuilder[PullRequest, A]
                    ): SelectionBuilder[MarkedAsDuplicateEvent, Option[A]] =
      Field(
        "duplicate",
        OptionOf(
          ChoiceOf(
            Map("Issue" -> Obj(onIssue), "PullRequest" -> Obj(onPullRequest))
          )
        )
      )

    def id: SelectionBuilder[MarkedAsDuplicateEvent, String] =
      Field("id", Scalar())

    /**
     * Canonical and duplicate belong to different repositories.
     */
    def isCrossRepository: SelectionBuilder[MarkedAsDuplicateEvent, Boolean] =
      Field("isCrossRepository", Scalar())
  }

  type MarketplaceCategory

  object MarketplaceCategory {

    /**
     * The category's description.
     */
    def description: SelectionBuilder[MarketplaceCategory, Option[String]] =
      Field("description", OptionOf(Scalar()))

    /**
     * The technical description of how apps listed in this category work with GitHub.
     */
    def howItWorks: SelectionBuilder[MarketplaceCategory, Option[String]] =
      Field("howItWorks", OptionOf(Scalar()))

    def id: SelectionBuilder[MarketplaceCategory, String] =
      Field("id", Scalar())

    /**
     * The category's name.
     */
    def name: SelectionBuilder[MarketplaceCategory, String] =
      Field("name", Scalar())

    /**
     * How many Marketplace listings have this as their primary category.
     */
    def primaryListingCount: SelectionBuilder[MarketplaceCategory, Int] =
      Field("primaryListingCount", Scalar())

    /**
     * The HTTP path for this Marketplace category.
     */
    def resourcePath: SelectionBuilder[MarketplaceCategory, URI] =
      Field("resourcePath", Scalar())

    /**
     * How many Marketplace listings have this as their secondary category.
     */
    def secondaryListingCount: SelectionBuilder[MarketplaceCategory, Int] =
      Field("secondaryListingCount", Scalar())

    /**
     * The short name of the category used in its URL.
     */
    def slug: SelectionBuilder[MarketplaceCategory, String] =
      Field("slug", Scalar())

    /**
     * The HTTP URL for this Marketplace category.
     */
    def url: SelectionBuilder[MarketplaceCategory, URI] = Field("url", Scalar())
  }

  type MarketplaceListing

  object MarketplaceListing {

    /**
     * The GitHub App this listing represents.
     */
    def app[A](
                innerSelection: SelectionBuilder[App, A]
              ): SelectionBuilder[MarketplaceListing, Option[A]] =
      Field("app", OptionOf(Obj(innerSelection)))

    /**
     * URL to the listing owner's company site.
     */
    def companyUrl: SelectionBuilder[MarketplaceListing, Option[URI]] =
      Field("companyUrl", OptionOf(Scalar()))

    /**
     * The HTTP path for configuring access to the listing's integration or OAuth app
     */
    def configurationResourcePath: SelectionBuilder[MarketplaceListing, URI] =
      Field("configurationResourcePath", Scalar())

    /**
     * The HTTP URL for configuring access to the listing's integration or OAuth app
     */
    def configurationUrl: SelectionBuilder[MarketplaceListing, URI] =
      Field("configurationUrl", Scalar())

    /**
     * URL to the listing's documentation.
     */
    def documentationUrl: SelectionBuilder[MarketplaceListing, Option[URI]] =
      Field("documentationUrl", OptionOf(Scalar()))

    /**
     * The listing's detailed description.
     */
    def extendedDescription
    : SelectionBuilder[MarketplaceListing, Option[String]] =
      Field("extendedDescription", OptionOf(Scalar()))

    /**
     * The listing's detailed description rendered to HTML.
     */
    def extendedDescriptionHTML: SelectionBuilder[MarketplaceListing, HTML] =
      Field("extendedDescriptionHTML", Scalar())

    /**
     * The listing's introductory description.
     */
    def fullDescription: SelectionBuilder[MarketplaceListing, String] =
      Field("fullDescription", Scalar())

    /**
     * The listing's introductory description rendered to HTML.
     */
    def fullDescriptionHTML: SelectionBuilder[MarketplaceListing, HTML] =
      Field("fullDescriptionHTML", Scalar())

    /**
     * Does this listing have any plans with a free trial?
     */
    def hasPublishedFreeTrialPlans
    : SelectionBuilder[MarketplaceListing, Boolean] =
      Field("hasPublishedFreeTrialPlans", Scalar())

    /**
     * Does this listing have a terms of service link?
     */
    def hasTermsOfService: SelectionBuilder[MarketplaceListing, Boolean] =
      Field("hasTermsOfService", Scalar())

    /**
     * A technical description of how this app works with GitHub.
     */
    def howItWorks: SelectionBuilder[MarketplaceListing, Option[String]] =
      Field("howItWorks", OptionOf(Scalar()))

    /**
     * The listing's technical description rendered to HTML.
     */
    def howItWorksHTML: SelectionBuilder[MarketplaceListing, HTML] =
      Field("howItWorksHTML", Scalar())

    def id: SelectionBuilder[MarketplaceListing, String] = Field("id", Scalar())

    /**
     * URL to install the product to the viewer's account or organization.
     */
    def installationUrl: SelectionBuilder[MarketplaceListing, Option[URI]] =
      Field("installationUrl", OptionOf(Scalar()))

    /**
     * Whether this listing's app has been installed for the current viewer
     */
    def installedForViewer: SelectionBuilder[MarketplaceListing, Boolean] =
      Field("installedForViewer", Scalar())

    /**
     * Whether this listing has been removed from the Marketplace.
     */
    def isArchived: SelectionBuilder[MarketplaceListing, Boolean] =
      Field("isArchived", Scalar())

    /**
     * Whether this listing is still an editable draft that has not been submitted
     * for review and is not publicly visible in the Marketplace.
     */
    def isDraft: SelectionBuilder[MarketplaceListing, Boolean] =
      Field("isDraft", Scalar())

    /**
     * Whether the product this listing represents is available as part of a paid plan.
     */
    def isPaid: SelectionBuilder[MarketplaceListing, Boolean] =
      Field("isPaid", Scalar())

    /**
     * Whether this listing has been approved for display in the Marketplace.
     */
    def isPublic: SelectionBuilder[MarketplaceListing, Boolean] =
      Field("isPublic", Scalar())

    /**
     * Whether this listing has been rejected by GitHub for display in the Marketplace.
     */
    def isRejected: SelectionBuilder[MarketplaceListing, Boolean] =
      Field("isRejected", Scalar())

    /**
     * Whether this listing has been approved for unverified display in the Marketplace.
     */
    def isUnverified: SelectionBuilder[MarketplaceListing, Boolean] =
      Field("isUnverified", Scalar())

    /**
     * Whether this draft listing has been submitted for review for approval to be unverified in the Marketplace.
     */
    def isUnverifiedPending: SelectionBuilder[MarketplaceListing, Boolean] =
      Field("isUnverifiedPending", Scalar())

    /**
     * Whether this draft listing has been submitted for review from GitHub for approval to be verified in the Marketplace.
     */
    def isVerificationPendingFromDraft
    : SelectionBuilder[MarketplaceListing, Boolean] =
      Field("isVerificationPendingFromDraft", Scalar())

    /**
     * Whether this unverified listing has been submitted for review from GitHub for approval to be verified in the Marketplace.
     */
    def isVerificationPendingFromUnverified
    : SelectionBuilder[MarketplaceListing, Boolean] =
      Field("isVerificationPendingFromUnverified", Scalar())

    /**
     * Whether this listing has been approved for verified display in the Marketplace.
     */
    def isVerified: SelectionBuilder[MarketplaceListing, Boolean] =
      Field("isVerified", Scalar())

    /**
     * The hex color code, without the leading '#', for the logo background.
     */
    def logoBackgroundColor: SelectionBuilder[MarketplaceListing, String] =
      Field("logoBackgroundColor", Scalar())

    /**
     * URL for the listing's logo image.
     */
    def logoUrl(
                 size: Option[Int] = None
               ): SelectionBuilder[MarketplaceListing, Option[URI]] =
      Field(
        "logoUrl",
        OptionOf(Scalar()),
        arguments = List(Argument("size", size))
      )

    /**
     * The listing's full name.
     */
    def name: SelectionBuilder[MarketplaceListing, String] =
      Field("name", Scalar())

    /**
     * The listing's very short description without a trailing period or ampersands.
     */
    def normalizedShortDescription
    : SelectionBuilder[MarketplaceListing, String] =
      Field("normalizedShortDescription", Scalar())

    /**
     * URL to the listing's detailed pricing.
     */
    def pricingUrl: SelectionBuilder[MarketplaceListing, Option[URI]] =
      Field("pricingUrl", OptionOf(Scalar()))

    /**
     * The category that best describes the listing.
     */
    def primaryCategory[A](
                            innerSelection: SelectionBuilder[MarketplaceCategory, A]
                          ): SelectionBuilder[MarketplaceListing, A] =
      Field("primaryCategory", Obj(innerSelection))

    /**
     * URL to the listing's privacy policy, may return an empty string for listings that do not require a privacy policy URL.
     */
    def privacyPolicyUrl: SelectionBuilder[MarketplaceListing, URI] =
      Field("privacyPolicyUrl", Scalar())

    /**
     * The HTTP path for the Marketplace listing.
     */
    def resourcePath: SelectionBuilder[MarketplaceListing, URI] =
      Field("resourcePath", Scalar())

    /**
     * The URLs for the listing's screenshots.
     */
    def screenshotUrls
    : SelectionBuilder[MarketplaceListing, List[Option[String]]] =
      Field("screenshotUrls", ListOf(OptionOf(Scalar())))

    /**
     * An alternate category that describes the listing.
     */
    def secondaryCategory[A](
                              innerSelection: SelectionBuilder[MarketplaceCategory, A]
                            ): SelectionBuilder[MarketplaceListing, Option[A]] =
      Field("secondaryCategory", OptionOf(Obj(innerSelection)))

    /**
     * The listing's very short description.
     */
    def shortDescription: SelectionBuilder[MarketplaceListing, String] =
      Field("shortDescription", Scalar())

    /**
     * The short name of the listing used in its URL.
     */
    def slug: SelectionBuilder[MarketplaceListing, String] =
      Field("slug", Scalar())

    /**
     * URL to the listing's status page.
     */
    def statusUrl: SelectionBuilder[MarketplaceListing, Option[URI]] =
      Field("statusUrl", OptionOf(Scalar()))

    /**
     * An email address for support for this listing's app.
     */
    def supportEmail: SelectionBuilder[MarketplaceListing, Option[String]] =
      Field("supportEmail", OptionOf(Scalar()))

    /**
     * Either a URL or an email address for support for this listing's app, may
     * return an empty string for listings that do not require a support URL.
     */
    def supportUrl: SelectionBuilder[MarketplaceListing, URI] =
      Field("supportUrl", Scalar())

    /**
     * URL to the listing's terms of service.
     */
    def termsOfServiceUrl: SelectionBuilder[MarketplaceListing, Option[URI]] =
      Field("termsOfServiceUrl", OptionOf(Scalar()))

    /**
     * The HTTP URL for the Marketplace listing.
     */
    def url: SelectionBuilder[MarketplaceListing, URI] = Field("url", Scalar())

    /**
     * Can the current viewer add plans for this Marketplace listing.
     */
    def viewerCanAddPlans: SelectionBuilder[MarketplaceListing, Boolean] =
      Field("viewerCanAddPlans", Scalar())

    /**
     * Can the current viewer approve this Marketplace listing.
     */
    def viewerCanApprove: SelectionBuilder[MarketplaceListing, Boolean] =
      Field("viewerCanApprove", Scalar())

    /**
     * Can the current viewer delist this Marketplace listing.
     */
    def viewerCanDelist: SelectionBuilder[MarketplaceListing, Boolean] =
      Field("viewerCanDelist", Scalar())

    /**
     * Can the current viewer edit this Marketplace listing.
     */
    def viewerCanEdit: SelectionBuilder[MarketplaceListing, Boolean] =
      Field("viewerCanEdit", Scalar())

    /**
     * Can the current viewer edit the primary and secondary category of this
     * Marketplace listing.
     */
    def viewerCanEditCategories: SelectionBuilder[MarketplaceListing, Boolean] =
      Field("viewerCanEditCategories", Scalar())

    /**
     * Can the current viewer edit the plans for this Marketplace listing.
     */
    def viewerCanEditPlans: SelectionBuilder[MarketplaceListing, Boolean] =
      Field("viewerCanEditPlans", Scalar())

    /**
     * Can the current viewer return this Marketplace listing to draft state
     * so it becomes editable again.
     */
    def viewerCanRedraft: SelectionBuilder[MarketplaceListing, Boolean] =
      Field("viewerCanRedraft", Scalar())

    /**
     * Can the current viewer reject this Marketplace listing by returning it to
     * an editable draft state or rejecting it entirely.
     */
    def viewerCanReject: SelectionBuilder[MarketplaceListing, Boolean] =
      Field("viewerCanReject", Scalar())

    /**
     * Can the current viewer request this listing be reviewed for display in
     * the Marketplace as verified.
     */
    def viewerCanRequestApproval
    : SelectionBuilder[MarketplaceListing, Boolean] =
      Field("viewerCanRequestApproval", Scalar())

    /**
     * Indicates whether the current user has an active subscription to this Marketplace listing.
     */
    def viewerHasPurchased: SelectionBuilder[MarketplaceListing, Boolean] =
      Field("viewerHasPurchased", Scalar())

    /**
     * Indicates if the current user has purchased a subscription to this Marketplace listing
     * for all of the organizations the user owns.
     */
    def viewerHasPurchasedForAllOrganizations
    : SelectionBuilder[MarketplaceListing, Boolean] =
      Field("viewerHasPurchasedForAllOrganizations", Scalar())

    /**
     * Does the current viewer role allow them to administer this Marketplace listing.
     */
    def viewerIsListingAdmin: SelectionBuilder[MarketplaceListing, Boolean] =
      Field("viewerIsListingAdmin", Scalar())
  }

  type MarketplaceListingConnection

  object MarketplaceListingConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[MarketplaceListingEdge, A]
                ): SelectionBuilder[MarketplaceListingConnection, Option[List[Option[A]]]] =
      Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[MarketplaceListing, A]
                ): SelectionBuilder[MarketplaceListingConnection, Option[List[Option[A]]]] =
      Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[MarketplaceListingConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[MarketplaceListingConnection, Int] =
      Field("totalCount", Scalar())
  }

  type MarketplaceListingEdge

  object MarketplaceListingEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[MarketplaceListingEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[MarketplaceListing, A]
               ): SelectionBuilder[MarketplaceListingEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type MembersCanDeleteReposClearAuditEntry

  object MembersCanDeleteReposClearAuditEntry {

    /**
     * The action name
     */
    def action: SelectionBuilder[MembersCanDeleteReposClearAuditEntry, String] =
      Field("action", Scalar())

    /**
     * The user who initiated the action
     */
    def actor[A](
                  onBot: SelectionBuilder[Bot, A],
                  onOrganization: SelectionBuilder[Organization, A],
                  onUser: SelectionBuilder[User, A]
                ): SelectionBuilder[MembersCanDeleteReposClearAuditEntry, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> Obj(onBot),
              "Organization" -> Obj(onOrganization),
              "User" -> Obj(onUser)
            )
          )
        )
      )

    /**
     * The IP address of the actor
     */
    def actorIp: SelectionBuilder[MembersCanDeleteReposClearAuditEntry, Option[
      String
    ]] = Field("actorIp", OptionOf(Scalar()))

    /**
     * A readable representation of the actor's location
     */
    def actorLocation[A](
                          innerSelection: SelectionBuilder[ActorLocation, A]
                        ): SelectionBuilder[MembersCanDeleteReposClearAuditEntry, Option[A]] =
      Field("actorLocation", OptionOf(Obj(innerSelection)))

    /**
     * The username of the user who initiated the action
     */
    def actorLogin
    : SelectionBuilder[MembersCanDeleteReposClearAuditEntry, Option[
      String
    ]] = Field("actorLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the actor.
     */
    def actorResourcePath
    : SelectionBuilder[MembersCanDeleteReposClearAuditEntry, Option[URI]] =
      Field("actorResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the actor.
     */
    def actorUrl
    : SelectionBuilder[MembersCanDeleteReposClearAuditEntry, Option[URI]] =
      Field("actorUrl", OptionOf(Scalar()))

    /**
     * The time the action was initiated
     */
    def createdAt: SelectionBuilder[
      MembersCanDeleteReposClearAuditEntry,
      PreciseDateTime
    ] = Field("createdAt", Scalar())

    /**
     * The HTTP path for this enterprise.
     */
    def enterpriseResourcePath
    : SelectionBuilder[MembersCanDeleteReposClearAuditEntry, Option[URI]] =
      Field("enterpriseResourcePath", OptionOf(Scalar()))

    /**
     * The slug of the enterprise.
     */
    def enterpriseSlug
    : SelectionBuilder[MembersCanDeleteReposClearAuditEntry, Option[
      String
    ]] = Field("enterpriseSlug", OptionOf(Scalar()))

    /**
     * The HTTP URL for this enterprise.
     */
    def enterpriseUrl
    : SelectionBuilder[MembersCanDeleteReposClearAuditEntry, Option[URI]] =
      Field("enterpriseUrl", OptionOf(Scalar()))

    def id: SelectionBuilder[MembersCanDeleteReposClearAuditEntry, String] =
      Field("id", Scalar())

    /**
     * The corresponding operation type for the action
     */
    def operationType
    : SelectionBuilder[MembersCanDeleteReposClearAuditEntry, Option[
      OperationType
    ]] = Field("operationType", OptionOf(Scalar()))

    /**
     * The Organization associated with the Audit Entry.
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[MembersCanDeleteReposClearAuditEntry, Option[A]] =
      Field("organization", OptionOf(Obj(innerSelection)))

    /**
     * The name of the Organization.
     */
    def organizationName
    : SelectionBuilder[MembersCanDeleteReposClearAuditEntry, Option[
      String
    ]] = Field("organizationName", OptionOf(Scalar()))

    /**
     * The HTTP path for the organization
     */
    def organizationResourcePath
    : SelectionBuilder[MembersCanDeleteReposClearAuditEntry, Option[URI]] =
      Field("organizationResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the organization
     */
    def organizationUrl
    : SelectionBuilder[MembersCanDeleteReposClearAuditEntry, Option[URI]] =
      Field("organizationUrl", OptionOf(Scalar()))

    /**
     * The user affected by the action
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[MembersCanDeleteReposClearAuditEntry, Option[A]] =
      Field("user", OptionOf(Obj(innerSelection)))

    /**
     * For actions involving two users, the actor is the initiator and the user is the affected user.
     */
    def userLogin
    : SelectionBuilder[MembersCanDeleteReposClearAuditEntry, Option[
      String
    ]] = Field("userLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the user.
     */
    def userResourcePath
    : SelectionBuilder[MembersCanDeleteReposClearAuditEntry, Option[URI]] =
      Field("userResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the user.
     */
    def userUrl
    : SelectionBuilder[MembersCanDeleteReposClearAuditEntry, Option[URI]] =
      Field("userUrl", OptionOf(Scalar()))
  }

  type MembersCanDeleteReposDisableAuditEntry

  object MembersCanDeleteReposDisableAuditEntry {

    /**
     * The action name
     */
    def action
    : SelectionBuilder[MembersCanDeleteReposDisableAuditEntry, String] =
      Field("action", Scalar())

    /**
     * The user who initiated the action
     */
    def actor[A](
                  onBot: SelectionBuilder[Bot, A],
                  onOrganization: SelectionBuilder[Organization, A],
                  onUser: SelectionBuilder[User, A]
                ): SelectionBuilder[MembersCanDeleteReposDisableAuditEntry, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> Obj(onBot),
              "Organization" -> Obj(onOrganization),
              "User" -> Obj(onUser)
            )
          )
        )
      )

    /**
     * The IP address of the actor
     */
    def actorIp
    : SelectionBuilder[MembersCanDeleteReposDisableAuditEntry, Option[
      String
    ]] = Field("actorIp", OptionOf(Scalar()))

    /**
     * A readable representation of the actor's location
     */
    def actorLocation[A](
                          innerSelection: SelectionBuilder[ActorLocation, A]
                        ): SelectionBuilder[MembersCanDeleteReposDisableAuditEntry, Option[A]] =
      Field("actorLocation", OptionOf(Obj(innerSelection)))

    /**
     * The username of the user who initiated the action
     */
    def actorLogin
    : SelectionBuilder[MembersCanDeleteReposDisableAuditEntry, Option[
      String
    ]] = Field("actorLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the actor.
     */
    def actorResourcePath
    : SelectionBuilder[MembersCanDeleteReposDisableAuditEntry, Option[
      URI
    ]] = Field("actorResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the actor.
     */
    def actorUrl
    : SelectionBuilder[MembersCanDeleteReposDisableAuditEntry, Option[
      URI
    ]] = Field("actorUrl", OptionOf(Scalar()))

    /**
     * The time the action was initiated
     */
    def createdAt: SelectionBuilder[
      MembersCanDeleteReposDisableAuditEntry,
      PreciseDateTime
    ] = Field("createdAt", Scalar())

    /**
     * The HTTP path for this enterprise.
     */
    def enterpriseResourcePath
    : SelectionBuilder[MembersCanDeleteReposDisableAuditEntry, Option[
      URI
    ]] = Field("enterpriseResourcePath", OptionOf(Scalar()))

    /**
     * The slug of the enterprise.
     */
    def enterpriseSlug
    : SelectionBuilder[MembersCanDeleteReposDisableAuditEntry, Option[
      String
    ]] = Field("enterpriseSlug", OptionOf(Scalar()))

    /**
     * The HTTP URL for this enterprise.
     */
    def enterpriseUrl
    : SelectionBuilder[MembersCanDeleteReposDisableAuditEntry, Option[
      URI
    ]] = Field("enterpriseUrl", OptionOf(Scalar()))

    def id: SelectionBuilder[MembersCanDeleteReposDisableAuditEntry, String] =
      Field("id", Scalar())

    /**
     * The corresponding operation type for the action
     */
    def operationType
    : SelectionBuilder[MembersCanDeleteReposDisableAuditEntry, Option[
      OperationType
    ]] = Field("operationType", OptionOf(Scalar()))

    /**
     * The Organization associated with the Audit Entry.
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[MembersCanDeleteReposDisableAuditEntry, Option[A]] =
      Field("organization", OptionOf(Obj(innerSelection)))

    /**
     * The name of the Organization.
     */
    def organizationName
    : SelectionBuilder[MembersCanDeleteReposDisableAuditEntry, Option[
      String
    ]] = Field("organizationName", OptionOf(Scalar()))

    /**
     * The HTTP path for the organization
     */
    def organizationResourcePath
    : SelectionBuilder[MembersCanDeleteReposDisableAuditEntry, Option[
      URI
    ]] = Field("organizationResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the organization
     */
    def organizationUrl
    : SelectionBuilder[MembersCanDeleteReposDisableAuditEntry, Option[
      URI
    ]] = Field("organizationUrl", OptionOf(Scalar()))

    /**
     * The user affected by the action
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[MembersCanDeleteReposDisableAuditEntry, Option[A]] =
      Field("user", OptionOf(Obj(innerSelection)))

    /**
     * For actions involving two users, the actor is the initiator and the user is the affected user.
     */
    def userLogin
    : SelectionBuilder[MembersCanDeleteReposDisableAuditEntry, Option[
      String
    ]] = Field("userLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the user.
     */
    def userResourcePath
    : SelectionBuilder[MembersCanDeleteReposDisableAuditEntry, Option[
      URI
    ]] = Field("userResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the user.
     */
    def userUrl
    : SelectionBuilder[MembersCanDeleteReposDisableAuditEntry, Option[
      URI
    ]] = Field("userUrl", OptionOf(Scalar()))
  }

  type MembersCanDeleteReposEnableAuditEntry

  object MembersCanDeleteReposEnableAuditEntry {

    /**
     * The action name
     */
    def action
    : SelectionBuilder[MembersCanDeleteReposEnableAuditEntry, String] =
      Field("action", Scalar())

    /**
     * The user who initiated the action
     */
    def actor[A](
                  onBot: SelectionBuilder[Bot, A],
                  onOrganization: SelectionBuilder[Organization, A],
                  onUser: SelectionBuilder[User, A]
                ): SelectionBuilder[MembersCanDeleteReposEnableAuditEntry, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> Obj(onBot),
              "Organization" -> Obj(onOrganization),
              "User" -> Obj(onUser)
            )
          )
        )
      )

    /**
     * The IP address of the actor
     */
    def actorIp: SelectionBuilder[MembersCanDeleteReposEnableAuditEntry, Option[
      String
    ]] = Field("actorIp", OptionOf(Scalar()))

    /**
     * A readable representation of the actor's location
     */
    def actorLocation[A](
                          innerSelection: SelectionBuilder[ActorLocation, A]
                        ): SelectionBuilder[MembersCanDeleteReposEnableAuditEntry, Option[A]] =
      Field("actorLocation", OptionOf(Obj(innerSelection)))

    /**
     * The username of the user who initiated the action
     */
    def actorLogin
    : SelectionBuilder[MembersCanDeleteReposEnableAuditEntry, Option[
      String
    ]] = Field("actorLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the actor.
     */
    def actorResourcePath
    : SelectionBuilder[MembersCanDeleteReposEnableAuditEntry, Option[URI]] =
      Field("actorResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the actor.
     */
    def actorUrl
    : SelectionBuilder[MembersCanDeleteReposEnableAuditEntry, Option[URI]] =
      Field("actorUrl", OptionOf(Scalar()))

    /**
     * The time the action was initiated
     */
    def createdAt: SelectionBuilder[
      MembersCanDeleteReposEnableAuditEntry,
      PreciseDateTime
    ] = Field("createdAt", Scalar())

    /**
     * The HTTP path for this enterprise.
     */
    def enterpriseResourcePath
    : SelectionBuilder[MembersCanDeleteReposEnableAuditEntry, Option[URI]] =
      Field("enterpriseResourcePath", OptionOf(Scalar()))

    /**
     * The slug of the enterprise.
     */
    def enterpriseSlug
    : SelectionBuilder[MembersCanDeleteReposEnableAuditEntry, Option[
      String
    ]] = Field("enterpriseSlug", OptionOf(Scalar()))

    /**
     * The HTTP URL for this enterprise.
     */
    def enterpriseUrl
    : SelectionBuilder[MembersCanDeleteReposEnableAuditEntry, Option[URI]] =
      Field("enterpriseUrl", OptionOf(Scalar()))

    def id: SelectionBuilder[MembersCanDeleteReposEnableAuditEntry, String] =
      Field("id", Scalar())

    /**
     * The corresponding operation type for the action
     */
    def operationType
    : SelectionBuilder[MembersCanDeleteReposEnableAuditEntry, Option[
      OperationType
    ]] = Field("operationType", OptionOf(Scalar()))

    /**
     * The Organization associated with the Audit Entry.
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[MembersCanDeleteReposEnableAuditEntry, Option[A]] =
      Field("organization", OptionOf(Obj(innerSelection)))

    /**
     * The name of the Organization.
     */
    def organizationName
    : SelectionBuilder[MembersCanDeleteReposEnableAuditEntry, Option[
      String
    ]] = Field("organizationName", OptionOf(Scalar()))

    /**
     * The HTTP path for the organization
     */
    def organizationResourcePath
    : SelectionBuilder[MembersCanDeleteReposEnableAuditEntry, Option[URI]] =
      Field("organizationResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the organization
     */
    def organizationUrl
    : SelectionBuilder[MembersCanDeleteReposEnableAuditEntry, Option[URI]] =
      Field("organizationUrl", OptionOf(Scalar()))

    /**
     * The user affected by the action
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[MembersCanDeleteReposEnableAuditEntry, Option[A]] =
      Field("user", OptionOf(Obj(innerSelection)))

    /**
     * For actions involving two users, the actor is the initiator and the user is the affected user.
     */
    def userLogin
    : SelectionBuilder[MembersCanDeleteReposEnableAuditEntry, Option[
      String
    ]] = Field("userLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the user.
     */
    def userResourcePath
    : SelectionBuilder[MembersCanDeleteReposEnableAuditEntry, Option[URI]] =
      Field("userResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the user.
     */
    def userUrl
    : SelectionBuilder[MembersCanDeleteReposEnableAuditEntry, Option[URI]] =
      Field("userUrl", OptionOf(Scalar()))
  }

  type MentionedEvent

  object MentionedEvent {

    /**
     * Identifies the actor who performed the event.
     */
    def actor[A](
                  onBot: Option[SelectionBuilder[Bot, A]] = None,
                  onEnterpriseUserAccount: Option[
                    SelectionBuilder[EnterpriseUserAccount, A]
                  ] = None,
                  onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                  onUser: Option[SelectionBuilder[User, A]] = None,
                  onOrganization: Option[SelectionBuilder[Organization, A]] = None
                ): SelectionBuilder[MentionedEvent, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[MentionedEvent, DateTime] =
      Field("createdAt", Scalar())

    /**
     * Identifies the primary key from the database.
     */
    def databaseId: SelectionBuilder[MentionedEvent, Option[Int]] =
      Field("databaseId", OptionOf(Scalar()))

    def id: SelectionBuilder[MentionedEvent, String] = Field("id", Scalar())
  }

  type MergeBranchPayload

  object MergeBranchPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId: SelectionBuilder[MergeBranchPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The resulting merge Commit.
     */
    def mergeCommit[A](
                        innerSelection: SelectionBuilder[Commit, A]
                      ): SelectionBuilder[MergeBranchPayload, Option[A]] =
      Field("mergeCommit", OptionOf(Obj(innerSelection)))
  }

  type MergePullRequestPayload

  object MergePullRequestPayload {

    /**
     * Identifies the actor who performed the event.
     */
    def actor[A](
                  onBot: Option[SelectionBuilder[Bot, A]] = None,
                  onEnterpriseUserAccount: Option[
                    SelectionBuilder[EnterpriseUserAccount, A]
                  ] = None,
                  onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                  onUser: Option[SelectionBuilder[User, A]] = None,
                  onOrganization: Option[SelectionBuilder[Organization, A]] = None
                ): SelectionBuilder[MergePullRequestPayload, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[MergePullRequestPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The pull request that was merged.
     */
    def pullRequest[A](
                        innerSelection: SelectionBuilder[PullRequest, A]
                      ): SelectionBuilder[MergePullRequestPayload, Option[A]] =
      Field("pullRequest", OptionOf(Obj(innerSelection)))
  }

  type MergedEvent

  object MergedEvent {

    /**
     * Identifies the actor who performed the event.
     */
    def actor[A](
                  onBot: Option[SelectionBuilder[Bot, A]] = None,
                  onEnterpriseUserAccount: Option[
                    SelectionBuilder[EnterpriseUserAccount, A]
                  ] = None,
                  onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                  onUser: Option[SelectionBuilder[User, A]] = None,
                  onOrganization: Option[SelectionBuilder[Organization, A]] = None
                ): SelectionBuilder[MergedEvent, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * Identifies the commit associated with the `merge` event.
     */
    def commit[A](
                   innerSelection: SelectionBuilder[Commit, A]
                 ): SelectionBuilder[MergedEvent, Option[A]] =
      Field("commit", OptionOf(Obj(innerSelection)))

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[MergedEvent, DateTime] =
      Field("createdAt", Scalar())

    def id: SelectionBuilder[MergedEvent, String] = Field("id", Scalar())

    /**
     * Identifies the Ref associated with the `merge` event.
     */
    def mergeRef[A](
                     innerSelection: SelectionBuilder[Ref, A]
                   ): SelectionBuilder[MergedEvent, Option[A]] =
      Field("mergeRef", OptionOf(Obj(innerSelection)))

    /**
     * Identifies the name of the Ref associated with the `merge` event.
     */
    def mergeRefName: SelectionBuilder[MergedEvent, String] =
      Field("mergeRefName", Scalar())

    /**
     * PullRequest referenced by event.
     */
    def pullRequest[A](
                        innerSelection: SelectionBuilder[PullRequest, A]
                      ): SelectionBuilder[MergedEvent, A] =
      Field("pullRequest", Obj(innerSelection))

    /**
     * The HTTP path for this merged event.
     */
    def resourcePath: SelectionBuilder[MergedEvent, URI] =
      Field("resourcePath", Scalar())

    /**
     * The HTTP URL for this merged event.
     */
    def url: SelectionBuilder[MergedEvent, URI] = Field("url", Scalar())
  }

  type Milestone

  object Milestone {

    /**
     * `true` if the object is closed (definition of closed may depend on type)
     */
    def closed: SelectionBuilder[Milestone, Boolean] = Field("closed", Scalar())

    /**
     * Identifies the date and time when the object was closed.
     */
    def closedAt: SelectionBuilder[Milestone, Option[DateTime]] =
      Field("closedAt", OptionOf(Scalar()))

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[Milestone, DateTime] =
      Field("createdAt", Scalar())

    /**
     * Identifies the actor who created the milestone.
     */
    def creator[A](
                    onBot: Option[SelectionBuilder[Bot, A]] = None,
                    onEnterpriseUserAccount: Option[
                      SelectionBuilder[EnterpriseUserAccount, A]
                    ] = None,
                    onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                    onUser: Option[SelectionBuilder[User, A]] = None,
                    onOrganization: Option[SelectionBuilder[Organization, A]] = None
                  ): SelectionBuilder[Milestone, Option[A]] =
      Field(
        "creator",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * Identifies the description of the milestone.
     */
    def description: SelectionBuilder[Milestone, Option[String]] =
      Field("description", OptionOf(Scalar()))

    /**
     * Identifies the due date of the milestone.
     */
    def dueOn: SelectionBuilder[Milestone, Option[DateTime]] =
      Field("dueOn", OptionOf(Scalar()))

    def id: SelectionBuilder[Milestone, String] = Field("id", Scalar())

    /**
     * Just for debugging on review-lab
     */
    def issuePrioritiesDebug: SelectionBuilder[Milestone, String] =
      Field("issuePrioritiesDebug", Scalar())

    /**
     * A list of issues associated with the milestone.
     */
    def issues[A](
                   after: Option[String] = None,
                   before: Option[String] = None,
                   filterBy: Option[IssueFilters] = None,
                   first: Option[Int] = None,
                   labels: Option[List[String]] = None,
                   last: Option[Int] = None,
                   orderBy: Option[IssueOrder] = None,
                   states: Option[List[IssueState]] = None
                 )(
                   innerSelection: SelectionBuilder[IssueConnection, A]
                 ): SelectionBuilder[Milestone, A] =
      Field(
        "issues",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("filterBy", filterBy),
          Argument("first", first),
          Argument("labels", labels),
          Argument("last", last),
          Argument("orderBy", orderBy),
          Argument("states", states)
        )
      )

    /**
     * Identifies the number of the milestone.
     */
    def number: SelectionBuilder[Milestone, Int] = Field("number", Scalar())

    /**
     * A list of pull requests associated with the milestone.
     */
    def pullRequests[A](
                         after: Option[String] = None,
                         baseRefName: Option[String] = None,
                         before: Option[String] = None,
                         first: Option[Int] = None,
                         headRefName: Option[String] = None,
                         labels: Option[List[String]] = None,
                         last: Option[Int] = None,
                         orderBy: Option[IssueOrder] = None,
                         states: Option[List[PullRequestState]] = None
                       )(
                         innerSelection: SelectionBuilder[PullRequestConnection, A]
                       ): SelectionBuilder[Milestone, A] =
      Field(
        "pullRequests",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("baseRefName", baseRefName),
          Argument("before", before),
          Argument("first", first),
          Argument("headRefName", headRefName),
          Argument("labels", labels),
          Argument("last", last),
          Argument("orderBy", orderBy),
          Argument("states", states)
        )
      )

    /**
     * The repository associated with this milestone.
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[Milestone, A] = Field("repository", Obj(innerSelection))

    /**
     * The HTTP path for this milestone
     */
    def resourcePath: SelectionBuilder[Milestone, URI] =
      Field("resourcePath", Scalar())

    /**
     * Identifies the state of the milestone.
     */
    def state: SelectionBuilder[Milestone, MilestoneState] =
      Field("state", Scalar())

    /**
     * Identifies the title of the milestone.
     */
    def title: SelectionBuilder[Milestone, String] = Field("title", Scalar())

    /**
     * Identifies the date and time when the object was last updated.
     */
    def updatedAt: SelectionBuilder[Milestone, DateTime] =
      Field("updatedAt", Scalar())

    /**
     * The HTTP URL for this milestone
     */
    def url: SelectionBuilder[Milestone, URI] = Field("url", Scalar())
  }

  type MilestoneConnection

  object MilestoneConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[MilestoneEdge, A]
                ): SelectionBuilder[MilestoneConnection, Option[List[Option[A]]]] =
      Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[Milestone, A]
                ): SelectionBuilder[MilestoneConnection, Option[List[Option[A]]]] =
      Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[MilestoneConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[MilestoneConnection, Int] =
      Field("totalCount", Scalar())
  }

  type MilestoneEdge

  object MilestoneEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[MilestoneEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[Milestone, A]
               ): SelectionBuilder[MilestoneEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type MilestonedEvent

  object MilestonedEvent {

    /**
     * Identifies the actor who performed the event.
     */
    def actor[A](
                  onBot: Option[SelectionBuilder[Bot, A]] = None,
                  onEnterpriseUserAccount: Option[
                    SelectionBuilder[EnterpriseUserAccount, A]
                  ] = None,
                  onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                  onUser: Option[SelectionBuilder[User, A]] = None,
                  onOrganization: Option[SelectionBuilder[Organization, A]] = None
                ): SelectionBuilder[MilestonedEvent, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[MilestonedEvent, DateTime] =
      Field("createdAt", Scalar())

    def id: SelectionBuilder[MilestonedEvent, String] = Field("id", Scalar())

    /**
     * Identifies the milestone title associated with the 'milestoned' event.
     */
    def milestoneTitle: SelectionBuilder[MilestonedEvent, String] =
      Field("milestoneTitle", Scalar())

    /**
     * Object referenced by event.
     */
    def subject[A](
                    onIssue: SelectionBuilder[Issue, A],
                    onPullRequest: SelectionBuilder[PullRequest, A]
                  ): SelectionBuilder[MilestonedEvent, A] =
      Field(
        "subject",
        ChoiceOf(
          Map("Issue" -> Obj(onIssue), "PullRequest" -> Obj(onPullRequest))
        )
      )
  }

  type MinimizeCommentPayload

  object MinimizeCommentPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[MinimizeCommentPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The comment that was minimized.
     */
    def minimizedComment[A](
                             onIssueComment: Option[SelectionBuilder[IssueComment, A]] = None,
                             onPullRequestReviewComment: Option[
                               SelectionBuilder[PullRequestReviewComment, A]
                             ] = None,
                             onGistComment: Option[SelectionBuilder[GistComment, A]] = None,
                             onCommitComment: Option[SelectionBuilder[CommitComment, A]] = None
                           ): SelectionBuilder[MinimizeCommentPayload, Option[A]] =
      Field(
        "minimizedComment",
        OptionOf(
          ChoiceOf(
            Map(
              "IssueComment" -> onIssueComment,
              "PullRequestReviewComment" -> onPullRequestReviewComment,
              "GistComment" -> onGistComment,
              "CommitComment" -> onCommitComment
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )
  }

  type MoveProjectCardPayload

  object MoveProjectCardPayload {

    /**
     * The new edge of the moved card.
     */
    def cardEdge[A](
                     innerSelection: SelectionBuilder[ProjectCardEdge, A]
                   ): SelectionBuilder[MoveProjectCardPayload, Option[A]] =
      Field("cardEdge", OptionOf(Obj(innerSelection)))

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[MoveProjectCardPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))
  }

  type MoveProjectColumnPayload

  object MoveProjectColumnPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[MoveProjectColumnPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The new edge of the moved column.
     */
    def columnEdge[A](
                       innerSelection: SelectionBuilder[ProjectColumnEdge, A]
                     ): SelectionBuilder[MoveProjectColumnPayload, Option[A]] =
      Field("columnEdge", OptionOf(Obj(innerSelection)))
  }

  type MovedColumnsInProjectEvent

  object MovedColumnsInProjectEvent {

    /**
     * Identifies the actor who performed the event.
     */
    def actor[A](
                  onBot: Option[SelectionBuilder[Bot, A]] = None,
                  onEnterpriseUserAccount: Option[
                    SelectionBuilder[EnterpriseUserAccount, A]
                  ] = None,
                  onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                  onUser: Option[SelectionBuilder[User, A]] = None,
                  onOrganization: Option[SelectionBuilder[Organization, A]] = None
                ): SelectionBuilder[MovedColumnsInProjectEvent, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[MovedColumnsInProjectEvent, DateTime] =
      Field("createdAt", Scalar())

    /**
     * Identifies the primary key from the database.
     */
    def databaseId: SelectionBuilder[MovedColumnsInProjectEvent, Option[Int]] =
      Field("databaseId", OptionOf(Scalar()))

    def id: SelectionBuilder[MovedColumnsInProjectEvent, String] =
      Field("id", Scalar())

    /**
     * Column name the issue or pull request was moved from.
     */
    def previousProjectColumnName
    : SelectionBuilder[MovedColumnsInProjectEvent, String] =
      Field("previousProjectColumnName", Scalar())

    /**
     * Project referenced by event.
     */
    def project[A](
                    innerSelection: SelectionBuilder[Project, A]
                  ): SelectionBuilder[MovedColumnsInProjectEvent, Option[A]] =
      Field("project", OptionOf(Obj(innerSelection)))

    /**
     * Project card referenced by this project event.
     */
    def projectCard[A](
                        innerSelection: SelectionBuilder[ProjectCard, A]
                      ): SelectionBuilder[MovedColumnsInProjectEvent, Option[A]] =
      Field("projectCard", OptionOf(Obj(innerSelection)))

    /**
     * Column name the issue or pull request was moved to.
     */
    def projectColumnName
    : SelectionBuilder[MovedColumnsInProjectEvent, String] =
      Field("projectColumnName", Scalar())
  }

  type OauthApplicationCreateAuditEntry

  object OauthApplicationCreateAuditEntry {

    /**
     * The action name
     */
    def action: SelectionBuilder[OauthApplicationCreateAuditEntry, String] =
      Field("action", Scalar())

    /**
     * The user who initiated the action
     */
    def actor[A](
                  onBot: SelectionBuilder[Bot, A],
                  onOrganization: SelectionBuilder[Organization, A],
                  onUser: SelectionBuilder[User, A]
                ): SelectionBuilder[OauthApplicationCreateAuditEntry, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> Obj(onBot),
              "Organization" -> Obj(onOrganization),
              "User" -> Obj(onUser)
            )
          )
        )
      )

    /**
     * The IP address of the actor
     */
    def actorIp
    : SelectionBuilder[OauthApplicationCreateAuditEntry, Option[String]] =
      Field("actorIp", OptionOf(Scalar()))

    /**
     * A readable representation of the actor's location
     */
    def actorLocation[A](
                          innerSelection: SelectionBuilder[ActorLocation, A]
                        ): SelectionBuilder[OauthApplicationCreateAuditEntry, Option[A]] =
      Field("actorLocation", OptionOf(Obj(innerSelection)))

    /**
     * The username of the user who initiated the action
     */
    def actorLogin
    : SelectionBuilder[OauthApplicationCreateAuditEntry, Option[String]] =
      Field("actorLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the actor.
     */
    def actorResourcePath
    : SelectionBuilder[OauthApplicationCreateAuditEntry, Option[URI]] =
      Field("actorResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the actor.
     */
    def actorUrl
    : SelectionBuilder[OauthApplicationCreateAuditEntry, Option[URI]] =
      Field("actorUrl", OptionOf(Scalar()))

    /**
     * The application URL of the OAuth Application.
     */
    def applicationUrl
    : SelectionBuilder[OauthApplicationCreateAuditEntry, Option[URI]] =
      Field("applicationUrl", OptionOf(Scalar()))

    /**
     * The callback URL of the OAuth Application.
     */
    def callbackUrl
    : SelectionBuilder[OauthApplicationCreateAuditEntry, Option[URI]] =
      Field("callbackUrl", OptionOf(Scalar()))

    /**
     * The time the action was initiated
     */
    def createdAt
    : SelectionBuilder[OauthApplicationCreateAuditEntry, PreciseDateTime] =
      Field("createdAt", Scalar())

    def id: SelectionBuilder[OauthApplicationCreateAuditEntry, String] =
      Field("id", Scalar())

    /**
     * The name of the OAuth Application.
     */
    def oauthApplicationName
    : SelectionBuilder[OauthApplicationCreateAuditEntry, Option[String]] =
      Field("oauthApplicationName", OptionOf(Scalar()))

    /**
     * The HTTP path for the OAuth Application
     */
    def oauthApplicationResourcePath
    : SelectionBuilder[OauthApplicationCreateAuditEntry, Option[URI]] =
      Field("oauthApplicationResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the OAuth Application
     */
    def oauthApplicationUrl
    : SelectionBuilder[OauthApplicationCreateAuditEntry, Option[URI]] =
      Field("oauthApplicationUrl", OptionOf(Scalar()))

    /**
     * The corresponding operation type for the action
     */
    def operationType
    : SelectionBuilder[OauthApplicationCreateAuditEntry, Option[
      OperationType
    ]] = Field("operationType", OptionOf(Scalar()))

    /**
     * The Organization associated with the Audit Entry.
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[OauthApplicationCreateAuditEntry, Option[A]] =
      Field("organization", OptionOf(Obj(innerSelection)))

    /**
     * The name of the Organization.
     */
    def organizationName
    : SelectionBuilder[OauthApplicationCreateAuditEntry, Option[String]] =
      Field("organizationName", OptionOf(Scalar()))

    /**
     * The HTTP path for the organization
     */
    def organizationResourcePath
    : SelectionBuilder[OauthApplicationCreateAuditEntry, Option[URI]] =
      Field("organizationResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the organization
     */
    def organizationUrl
    : SelectionBuilder[OauthApplicationCreateAuditEntry, Option[URI]] =
      Field("organizationUrl", OptionOf(Scalar()))

    /**
     * The rate limit of the OAuth Application.
     */
    def rateLimit
    : SelectionBuilder[OauthApplicationCreateAuditEntry, Option[Int]] =
      Field("rateLimit", OptionOf(Scalar()))

    /**
     * The state of the OAuth Application.
     */
    def state: SelectionBuilder[OauthApplicationCreateAuditEntry, Option[
      OauthApplicationCreateAuditEntryState
    ]] = Field("state", OptionOf(Scalar()))

    /**
     * The user affected by the action
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[OauthApplicationCreateAuditEntry, Option[A]] =
      Field("user", OptionOf(Obj(innerSelection)))

    /**
     * For actions involving two users, the actor is the initiator and the user is the affected user.
     */
    def userLogin
    : SelectionBuilder[OauthApplicationCreateAuditEntry, Option[String]] =
      Field("userLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the user.
     */
    def userResourcePath
    : SelectionBuilder[OauthApplicationCreateAuditEntry, Option[URI]] =
      Field("userResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the user.
     */
    def userUrl
    : SelectionBuilder[OauthApplicationCreateAuditEntry, Option[URI]] =
      Field("userUrl", OptionOf(Scalar()))
  }

  type OrgAddBillingManagerAuditEntry

  object OrgAddBillingManagerAuditEntry {

    /**
     * The action name
     */
    def action: SelectionBuilder[OrgAddBillingManagerAuditEntry, String] =
      Field("action", Scalar())

    /**
     * The user who initiated the action
     */
    def actor[A](
                  onBot: SelectionBuilder[Bot, A],
                  onOrganization: SelectionBuilder[Organization, A],
                  onUser: SelectionBuilder[User, A]
                ): SelectionBuilder[OrgAddBillingManagerAuditEntry, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> Obj(onBot),
              "Organization" -> Obj(onOrganization),
              "User" -> Obj(onUser)
            )
          )
        )
      )

    /**
     * The IP address of the actor
     */
    def actorIp
    : SelectionBuilder[OrgAddBillingManagerAuditEntry, Option[String]] =
      Field("actorIp", OptionOf(Scalar()))

    /**
     * A readable representation of the actor's location
     */
    def actorLocation[A](
                          innerSelection: SelectionBuilder[ActorLocation, A]
                        ): SelectionBuilder[OrgAddBillingManagerAuditEntry, Option[A]] =
      Field("actorLocation", OptionOf(Obj(innerSelection)))

    /**
     * The username of the user who initiated the action
     */
    def actorLogin
    : SelectionBuilder[OrgAddBillingManagerAuditEntry, Option[String]] =
      Field("actorLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the actor.
     */
    def actorResourcePath
    : SelectionBuilder[OrgAddBillingManagerAuditEntry, Option[URI]] =
      Field("actorResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the actor.
     */
    def actorUrl
    : SelectionBuilder[OrgAddBillingManagerAuditEntry, Option[URI]] =
      Field("actorUrl", OptionOf(Scalar()))

    /**
     * The time the action was initiated
     */
    def createdAt
    : SelectionBuilder[OrgAddBillingManagerAuditEntry, PreciseDateTime] =
      Field("createdAt", Scalar())

    def id: SelectionBuilder[OrgAddBillingManagerAuditEntry, String] =
      Field("id", Scalar())

    /**
     * The email address used to invite a billing manager for the organization.
     */
    def invitationEmail
    : SelectionBuilder[OrgAddBillingManagerAuditEntry, Option[String]] =
      Field("invitationEmail", OptionOf(Scalar()))

    /**
     * The corresponding operation type for the action
     */
    def operationType: SelectionBuilder[OrgAddBillingManagerAuditEntry, Option[
      OperationType
    ]] = Field("operationType", OptionOf(Scalar()))

    /**
     * The Organization associated with the Audit Entry.
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[OrgAddBillingManagerAuditEntry, Option[A]] =
      Field("organization", OptionOf(Obj(innerSelection)))

    /**
     * The name of the Organization.
     */
    def organizationName
    : SelectionBuilder[OrgAddBillingManagerAuditEntry, Option[String]] =
      Field("organizationName", OptionOf(Scalar()))

    /**
     * The HTTP path for the organization
     */
    def organizationResourcePath
    : SelectionBuilder[OrgAddBillingManagerAuditEntry, Option[URI]] =
      Field("organizationResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the organization
     */
    def organizationUrl
    : SelectionBuilder[OrgAddBillingManagerAuditEntry, Option[URI]] =
      Field("organizationUrl", OptionOf(Scalar()))

    /**
     * The user affected by the action
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[OrgAddBillingManagerAuditEntry, Option[A]] =
      Field("user", OptionOf(Obj(innerSelection)))

    /**
     * For actions involving two users, the actor is the initiator and the user is the affected user.
     */
    def userLogin
    : SelectionBuilder[OrgAddBillingManagerAuditEntry, Option[String]] =
      Field("userLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the user.
     */
    def userResourcePath
    : SelectionBuilder[OrgAddBillingManagerAuditEntry, Option[URI]] =
      Field("userResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the user.
     */
    def userUrl: SelectionBuilder[OrgAddBillingManagerAuditEntry, Option[URI]] =
      Field("userUrl", OptionOf(Scalar()))
  }

  type OrgAddMemberAuditEntry

  object OrgAddMemberAuditEntry {

    /**
     * The action name
     */
    def action: SelectionBuilder[OrgAddMemberAuditEntry, String] =
      Field("action", Scalar())

    /**
     * The user who initiated the action
     */
    def actor[A](
                  onBot: SelectionBuilder[Bot, A],
                  onOrganization: SelectionBuilder[Organization, A],
                  onUser: SelectionBuilder[User, A]
                ): SelectionBuilder[OrgAddMemberAuditEntry, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> Obj(onBot),
              "Organization" -> Obj(onOrganization),
              "User" -> Obj(onUser)
            )
          )
        )
      )

    /**
     * The IP address of the actor
     */
    def actorIp: SelectionBuilder[OrgAddMemberAuditEntry, Option[String]] =
      Field("actorIp", OptionOf(Scalar()))

    /**
     * A readable representation of the actor's location
     */
    def actorLocation[A](
                          innerSelection: SelectionBuilder[ActorLocation, A]
                        ): SelectionBuilder[OrgAddMemberAuditEntry, Option[A]] =
      Field("actorLocation", OptionOf(Obj(innerSelection)))

    /**
     * The username of the user who initiated the action
     */
    def actorLogin: SelectionBuilder[OrgAddMemberAuditEntry, Option[String]] =
      Field("actorLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the actor.
     */
    def actorResourcePath
    : SelectionBuilder[OrgAddMemberAuditEntry, Option[URI]] =
      Field("actorResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the actor.
     */
    def actorUrl: SelectionBuilder[OrgAddMemberAuditEntry, Option[URI]] =
      Field("actorUrl", OptionOf(Scalar()))

    /**
     * The time the action was initiated
     */
    def createdAt: SelectionBuilder[OrgAddMemberAuditEntry, PreciseDateTime] =
      Field("createdAt", Scalar())

    def id: SelectionBuilder[OrgAddMemberAuditEntry, String] =
      Field("id", Scalar())

    /**
     * The corresponding operation type for the action
     */
    def operationType
    : SelectionBuilder[OrgAddMemberAuditEntry, Option[OperationType]] =
      Field("operationType", OptionOf(Scalar()))

    /**
     * The Organization associated with the Audit Entry.
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[OrgAddMemberAuditEntry, Option[A]] =
      Field("organization", OptionOf(Obj(innerSelection)))

    /**
     * The name of the Organization.
     */
    def organizationName
    : SelectionBuilder[OrgAddMemberAuditEntry, Option[String]] =
      Field("organizationName", OptionOf(Scalar()))

    /**
     * The HTTP path for the organization
     */
    def organizationResourcePath
    : SelectionBuilder[OrgAddMemberAuditEntry, Option[URI]] =
      Field("organizationResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the organization
     */
    def organizationUrl: SelectionBuilder[OrgAddMemberAuditEntry, Option[URI]] =
      Field("organizationUrl", OptionOf(Scalar()))

    /**
     * The permission level of the member added to the organization.
     */
    def permission: SelectionBuilder[OrgAddMemberAuditEntry, Option[
      OrgAddMemberAuditEntryPermission
    ]] = Field("permission", OptionOf(Scalar()))

    /**
     * The user affected by the action
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[OrgAddMemberAuditEntry, Option[A]] =
      Field("user", OptionOf(Obj(innerSelection)))

    /**
     * For actions involving two users, the actor is the initiator and the user is the affected user.
     */
    def userLogin: SelectionBuilder[OrgAddMemberAuditEntry, Option[String]] =
      Field("userLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the user.
     */
    def userResourcePath
    : SelectionBuilder[OrgAddMemberAuditEntry, Option[URI]] =
      Field("userResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the user.
     */
    def userUrl: SelectionBuilder[OrgAddMemberAuditEntry, Option[URI]] =
      Field("userUrl", OptionOf(Scalar()))
  }

  type OrgBlockUserAuditEntry

  object OrgBlockUserAuditEntry {

    /**
     * The action name
     */
    def action: SelectionBuilder[OrgBlockUserAuditEntry, String] =
      Field("action", Scalar())

    /**
     * The user who initiated the action
     */
    def actor[A](
                  onBot: SelectionBuilder[Bot, A],
                  onOrganization: SelectionBuilder[Organization, A],
                  onUser: SelectionBuilder[User, A]
                ): SelectionBuilder[OrgBlockUserAuditEntry, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> Obj(onBot),
              "Organization" -> Obj(onOrganization),
              "User" -> Obj(onUser)
            )
          )
        )
      )

    /**
     * The IP address of the actor
     */
    def actorIp: SelectionBuilder[OrgBlockUserAuditEntry, Option[String]] =
      Field("actorIp", OptionOf(Scalar()))

    /**
     * A readable representation of the actor's location
     */
    def actorLocation[A](
                          innerSelection: SelectionBuilder[ActorLocation, A]
                        ): SelectionBuilder[OrgBlockUserAuditEntry, Option[A]] =
      Field("actorLocation", OptionOf(Obj(innerSelection)))

    /**
     * The username of the user who initiated the action
     */
    def actorLogin: SelectionBuilder[OrgBlockUserAuditEntry, Option[String]] =
      Field("actorLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the actor.
     */
    def actorResourcePath
    : SelectionBuilder[OrgBlockUserAuditEntry, Option[URI]] =
      Field("actorResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the actor.
     */
    def actorUrl: SelectionBuilder[OrgBlockUserAuditEntry, Option[URI]] =
      Field("actorUrl", OptionOf(Scalar()))

    /**
     * The blocked user.
     */
    def blockedUser[A](
                        innerSelection: SelectionBuilder[User, A]
                      ): SelectionBuilder[OrgBlockUserAuditEntry, Option[A]] =
      Field("blockedUser", OptionOf(Obj(innerSelection)))

    /**
     * The username of the blocked user.
     */
    def blockedUserName
    : SelectionBuilder[OrgBlockUserAuditEntry, Option[String]] =
      Field("blockedUserName", OptionOf(Scalar()))

    /**
     * The HTTP path for the blocked user.
     */
    def blockedUserResourcePath
    : SelectionBuilder[OrgBlockUserAuditEntry, Option[URI]] =
      Field("blockedUserResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the blocked user.
     */
    def blockedUserUrl: SelectionBuilder[OrgBlockUserAuditEntry, Option[URI]] =
      Field("blockedUserUrl", OptionOf(Scalar()))

    /**
     * The time the action was initiated
     */
    def createdAt: SelectionBuilder[OrgBlockUserAuditEntry, PreciseDateTime] =
      Field("createdAt", Scalar())

    def id: SelectionBuilder[OrgBlockUserAuditEntry, String] =
      Field("id", Scalar())

    /**
     * The corresponding operation type for the action
     */
    def operationType
    : SelectionBuilder[OrgBlockUserAuditEntry, Option[OperationType]] =
      Field("operationType", OptionOf(Scalar()))

    /**
     * The Organization associated with the Audit Entry.
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[OrgBlockUserAuditEntry, Option[A]] =
      Field("organization", OptionOf(Obj(innerSelection)))

    /**
     * The name of the Organization.
     */
    def organizationName
    : SelectionBuilder[OrgBlockUserAuditEntry, Option[String]] =
      Field("organizationName", OptionOf(Scalar()))

    /**
     * The HTTP path for the organization
     */
    def organizationResourcePath
    : SelectionBuilder[OrgBlockUserAuditEntry, Option[URI]] =
      Field("organizationResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the organization
     */
    def organizationUrl: SelectionBuilder[OrgBlockUserAuditEntry, Option[URI]] =
      Field("organizationUrl", OptionOf(Scalar()))

    /**
     * The user affected by the action
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[OrgBlockUserAuditEntry, Option[A]] =
      Field("user", OptionOf(Obj(innerSelection)))

    /**
     * For actions involving two users, the actor is the initiator and the user is the affected user.
     */
    def userLogin: SelectionBuilder[OrgBlockUserAuditEntry, Option[String]] =
      Field("userLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the user.
     */
    def userResourcePath
    : SelectionBuilder[OrgBlockUserAuditEntry, Option[URI]] =
      Field("userResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the user.
     */
    def userUrl: SelectionBuilder[OrgBlockUserAuditEntry, Option[URI]] =
      Field("userUrl", OptionOf(Scalar()))
  }

  type OrgConfigDisableCollaboratorsOnlyAuditEntry

  object OrgConfigDisableCollaboratorsOnlyAuditEntry {

    /**
     * The action name
     */
    def action: SelectionBuilder[
      OrgConfigDisableCollaboratorsOnlyAuditEntry,
      String
    ] = Field("action", Scalar())

    /**
     * The user who initiated the action
     */
    def actor[A](
                  onBot: SelectionBuilder[Bot, A],
                  onOrganization: SelectionBuilder[Organization, A],
                  onUser: SelectionBuilder[User, A]
                ): SelectionBuilder[OrgConfigDisableCollaboratorsOnlyAuditEntry, Option[
      A
    ]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> Obj(onBot),
              "Organization" -> Obj(onOrganization),
              "User" -> Obj(onUser)
            )
          )
        )
      )

    /**
     * The IP address of the actor
     */
    def actorIp
    : SelectionBuilder[OrgConfigDisableCollaboratorsOnlyAuditEntry, Option[
      String
    ]] = Field("actorIp", OptionOf(Scalar()))

    /**
     * A readable representation of the actor's location
     */
    def actorLocation[A](
                          innerSelection: SelectionBuilder[ActorLocation, A]
                        ): SelectionBuilder[OrgConfigDisableCollaboratorsOnlyAuditEntry, Option[
      A
    ]] = Field("actorLocation", OptionOf(Obj(innerSelection)))

    /**
     * The username of the user who initiated the action
     */
    def actorLogin
    : SelectionBuilder[OrgConfigDisableCollaboratorsOnlyAuditEntry, Option[
      String
    ]] = Field("actorLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the actor.
     */
    def actorResourcePath
    : SelectionBuilder[OrgConfigDisableCollaboratorsOnlyAuditEntry, Option[
      URI
    ]] = Field("actorResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the actor.
     */
    def actorUrl
    : SelectionBuilder[OrgConfigDisableCollaboratorsOnlyAuditEntry, Option[
      URI
    ]] = Field("actorUrl", OptionOf(Scalar()))

    /**
     * The time the action was initiated
     */
    def createdAt: SelectionBuilder[
      OrgConfigDisableCollaboratorsOnlyAuditEntry,
      PreciseDateTime
    ] = Field("createdAt", Scalar())

    def id: SelectionBuilder[
      OrgConfigDisableCollaboratorsOnlyAuditEntry,
      String
    ] = Field("id", Scalar())

    /**
     * The corresponding operation type for the action
     */
    def operationType
    : SelectionBuilder[OrgConfigDisableCollaboratorsOnlyAuditEntry, Option[
      OperationType
    ]] = Field("operationType", OptionOf(Scalar()))

    /**
     * The Organization associated with the Audit Entry.
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[OrgConfigDisableCollaboratorsOnlyAuditEntry, Option[
      A
    ]] = Field("organization", OptionOf(Obj(innerSelection)))

    /**
     * The name of the Organization.
     */
    def organizationName
    : SelectionBuilder[OrgConfigDisableCollaboratorsOnlyAuditEntry, Option[
      String
    ]] = Field("organizationName", OptionOf(Scalar()))

    /**
     * The HTTP path for the organization
     */
    def organizationResourcePath
    : SelectionBuilder[OrgConfigDisableCollaboratorsOnlyAuditEntry, Option[
      URI
    ]] = Field("organizationResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the organization
     */
    def organizationUrl
    : SelectionBuilder[OrgConfigDisableCollaboratorsOnlyAuditEntry, Option[
      URI
    ]] = Field("organizationUrl", OptionOf(Scalar()))

    /**
     * The user affected by the action
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[OrgConfigDisableCollaboratorsOnlyAuditEntry, Option[
      A
    ]] = Field("user", OptionOf(Obj(innerSelection)))

    /**
     * For actions involving two users, the actor is the initiator and the user is the affected user.
     */
    def userLogin
    : SelectionBuilder[OrgConfigDisableCollaboratorsOnlyAuditEntry, Option[
      String
    ]] = Field("userLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the user.
     */
    def userResourcePath
    : SelectionBuilder[OrgConfigDisableCollaboratorsOnlyAuditEntry, Option[
      URI
    ]] = Field("userResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the user.
     */
    def userUrl
    : SelectionBuilder[OrgConfigDisableCollaboratorsOnlyAuditEntry, Option[
      URI
    ]] = Field("userUrl", OptionOf(Scalar()))
  }

  type OrgConfigEnableCollaboratorsOnlyAuditEntry

  object OrgConfigEnableCollaboratorsOnlyAuditEntry {

    /**
     * The action name
     */
    def action
    : SelectionBuilder[OrgConfigEnableCollaboratorsOnlyAuditEntry, String] =
      Field("action", Scalar())

    /**
     * The user who initiated the action
     */
    def actor[A](
                  onBot: SelectionBuilder[Bot, A],
                  onOrganization: SelectionBuilder[Organization, A],
                  onUser: SelectionBuilder[User, A]
                ): SelectionBuilder[OrgConfigEnableCollaboratorsOnlyAuditEntry, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> Obj(onBot),
              "Organization" -> Obj(onOrganization),
              "User" -> Obj(onUser)
            )
          )
        )
      )

    /**
     * The IP address of the actor
     */
    def actorIp
    : SelectionBuilder[OrgConfigEnableCollaboratorsOnlyAuditEntry, Option[
      String
    ]] = Field("actorIp", OptionOf(Scalar()))

    /**
     * A readable representation of the actor's location
     */
    def actorLocation[A](
                          innerSelection: SelectionBuilder[ActorLocation, A]
                        ): SelectionBuilder[OrgConfigEnableCollaboratorsOnlyAuditEntry, Option[A]] =
      Field("actorLocation", OptionOf(Obj(innerSelection)))

    /**
     * The username of the user who initiated the action
     */
    def actorLogin
    : SelectionBuilder[OrgConfigEnableCollaboratorsOnlyAuditEntry, Option[
      String
    ]] = Field("actorLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the actor.
     */
    def actorResourcePath
    : SelectionBuilder[OrgConfigEnableCollaboratorsOnlyAuditEntry, Option[
      URI
    ]] = Field("actorResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the actor.
     */
    def actorUrl
    : SelectionBuilder[OrgConfigEnableCollaboratorsOnlyAuditEntry, Option[
      URI
    ]] = Field("actorUrl", OptionOf(Scalar()))

    /**
     * The time the action was initiated
     */
    def createdAt: SelectionBuilder[
      OrgConfigEnableCollaboratorsOnlyAuditEntry,
      PreciseDateTime
    ] = Field("createdAt", Scalar())

    def id
    : SelectionBuilder[OrgConfigEnableCollaboratorsOnlyAuditEntry, String] =
      Field("id", Scalar())

    /**
     * The corresponding operation type for the action
     */
    def operationType
    : SelectionBuilder[OrgConfigEnableCollaboratorsOnlyAuditEntry, Option[
      OperationType
    ]] = Field("operationType", OptionOf(Scalar()))

    /**
     * The Organization associated with the Audit Entry.
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[OrgConfigEnableCollaboratorsOnlyAuditEntry, Option[A]] =
      Field("organization", OptionOf(Obj(innerSelection)))

    /**
     * The name of the Organization.
     */
    def organizationName
    : SelectionBuilder[OrgConfigEnableCollaboratorsOnlyAuditEntry, Option[
      String
    ]] = Field("organizationName", OptionOf(Scalar()))

    /**
     * The HTTP path for the organization
     */
    def organizationResourcePath
    : SelectionBuilder[OrgConfigEnableCollaboratorsOnlyAuditEntry, Option[
      URI
    ]] = Field("organizationResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the organization
     */
    def organizationUrl
    : SelectionBuilder[OrgConfigEnableCollaboratorsOnlyAuditEntry, Option[
      URI
    ]] = Field("organizationUrl", OptionOf(Scalar()))

    /**
     * The user affected by the action
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[OrgConfigEnableCollaboratorsOnlyAuditEntry, Option[A]] =
      Field("user", OptionOf(Obj(innerSelection)))

    /**
     * For actions involving two users, the actor is the initiator and the user is the affected user.
     */
    def userLogin
    : SelectionBuilder[OrgConfigEnableCollaboratorsOnlyAuditEntry, Option[
      String
    ]] = Field("userLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the user.
     */
    def userResourcePath
    : SelectionBuilder[OrgConfigEnableCollaboratorsOnlyAuditEntry, Option[
      URI
    ]] = Field("userResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the user.
     */
    def userUrl
    : SelectionBuilder[OrgConfigEnableCollaboratorsOnlyAuditEntry, Option[
      URI
    ]] = Field("userUrl", OptionOf(Scalar()))
  }

  type OrgCreateAuditEntry

  object OrgCreateAuditEntry {

    /**
     * The action name
     */
    def action: SelectionBuilder[OrgCreateAuditEntry, String] =
      Field("action", Scalar())

    /**
     * The user who initiated the action
     */
    def actor[A](
                  onBot: SelectionBuilder[Bot, A],
                  onOrganization: SelectionBuilder[Organization, A],
                  onUser: SelectionBuilder[User, A]
                ): SelectionBuilder[OrgCreateAuditEntry, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> Obj(onBot),
              "Organization" -> Obj(onOrganization),
              "User" -> Obj(onUser)
            )
          )
        )
      )

    /**
     * The IP address of the actor
     */
    def actorIp: SelectionBuilder[OrgCreateAuditEntry, Option[String]] =
      Field("actorIp", OptionOf(Scalar()))

    /**
     * A readable representation of the actor's location
     */
    def actorLocation[A](
                          innerSelection: SelectionBuilder[ActorLocation, A]
                        ): SelectionBuilder[OrgCreateAuditEntry, Option[A]] =
      Field("actorLocation", OptionOf(Obj(innerSelection)))

    /**
     * The username of the user who initiated the action
     */
    def actorLogin: SelectionBuilder[OrgCreateAuditEntry, Option[String]] =
      Field("actorLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the actor.
     */
    def actorResourcePath: SelectionBuilder[OrgCreateAuditEntry, Option[URI]] =
      Field("actorResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the actor.
     */
    def actorUrl: SelectionBuilder[OrgCreateAuditEntry, Option[URI]] =
      Field("actorUrl", OptionOf(Scalar()))

    /**
     * The billing plan for the Organization.
     */
    def billingPlan: SelectionBuilder[OrgCreateAuditEntry, Option[
      OrgCreateAuditEntryBillingPlan
    ]] = Field("billingPlan", OptionOf(Scalar()))

    /**
     * The time the action was initiated
     */
    def createdAt: SelectionBuilder[OrgCreateAuditEntry, PreciseDateTime] =
      Field("createdAt", Scalar())

    def id: SelectionBuilder[OrgCreateAuditEntry, String] =
      Field("id", Scalar())

    /**
     * The corresponding operation type for the action
     */
    def operationType
    : SelectionBuilder[OrgCreateAuditEntry, Option[OperationType]] =
      Field("operationType", OptionOf(Scalar()))

    /**
     * The Organization associated with the Audit Entry.
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[OrgCreateAuditEntry, Option[A]] =
      Field("organization", OptionOf(Obj(innerSelection)))

    /**
     * The name of the Organization.
     */
    def organizationName
    : SelectionBuilder[OrgCreateAuditEntry, Option[String]] =
      Field("organizationName", OptionOf(Scalar()))

    /**
     * The HTTP path for the organization
     */
    def organizationResourcePath
    : SelectionBuilder[OrgCreateAuditEntry, Option[URI]] =
      Field("organizationResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the organization
     */
    def organizationUrl: SelectionBuilder[OrgCreateAuditEntry, Option[URI]] =
      Field("organizationUrl", OptionOf(Scalar()))

    /**
     * The user affected by the action
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[OrgCreateAuditEntry, Option[A]] =
      Field("user", OptionOf(Obj(innerSelection)))

    /**
     * For actions involving two users, the actor is the initiator and the user is the affected user.
     */
    def userLogin: SelectionBuilder[OrgCreateAuditEntry, Option[String]] =
      Field("userLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the user.
     */
    def userResourcePath: SelectionBuilder[OrgCreateAuditEntry, Option[URI]] =
      Field("userResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the user.
     */
    def userUrl: SelectionBuilder[OrgCreateAuditEntry, Option[URI]] =
      Field("userUrl", OptionOf(Scalar()))
  }

  type OrgDisableOauthAppRestrictionsAuditEntry

  object OrgDisableOauthAppRestrictionsAuditEntry {

    /**
     * The action name
     */
    def action
    : SelectionBuilder[OrgDisableOauthAppRestrictionsAuditEntry, String] =
      Field("action", Scalar())

    /**
     * The user who initiated the action
     */
    def actor[A](
                  onBot: SelectionBuilder[Bot, A],
                  onOrganization: SelectionBuilder[Organization, A],
                  onUser: SelectionBuilder[User, A]
                ): SelectionBuilder[OrgDisableOauthAppRestrictionsAuditEntry, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> Obj(onBot),
              "Organization" -> Obj(onOrganization),
              "User" -> Obj(onUser)
            )
          )
        )
      )

    /**
     * The IP address of the actor
     */
    def actorIp
    : SelectionBuilder[OrgDisableOauthAppRestrictionsAuditEntry, Option[
      String
    ]] = Field("actorIp", OptionOf(Scalar()))

    /**
     * A readable representation of the actor's location
     */
    def actorLocation[A](
                          innerSelection: SelectionBuilder[ActorLocation, A]
                        ): SelectionBuilder[OrgDisableOauthAppRestrictionsAuditEntry, Option[A]] =
      Field("actorLocation", OptionOf(Obj(innerSelection)))

    /**
     * The username of the user who initiated the action
     */
    def actorLogin
    : SelectionBuilder[OrgDisableOauthAppRestrictionsAuditEntry, Option[
      String
    ]] = Field("actorLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the actor.
     */
    def actorResourcePath
    : SelectionBuilder[OrgDisableOauthAppRestrictionsAuditEntry, Option[
      URI
    ]] = Field("actorResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the actor.
     */
    def actorUrl
    : SelectionBuilder[OrgDisableOauthAppRestrictionsAuditEntry, Option[
      URI
    ]] = Field("actorUrl", OptionOf(Scalar()))

    /**
     * The time the action was initiated
     */
    def createdAt: SelectionBuilder[
      OrgDisableOauthAppRestrictionsAuditEntry,
      PreciseDateTime
    ] = Field("createdAt", Scalar())

    def id: SelectionBuilder[OrgDisableOauthAppRestrictionsAuditEntry, String] =
      Field("id", Scalar())

    /**
     * The corresponding operation type for the action
     */
    def operationType
    : SelectionBuilder[OrgDisableOauthAppRestrictionsAuditEntry, Option[
      OperationType
    ]] = Field("operationType", OptionOf(Scalar()))

    /**
     * The Organization associated with the Audit Entry.
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[OrgDisableOauthAppRestrictionsAuditEntry, Option[A]] =
      Field("organization", OptionOf(Obj(innerSelection)))

    /**
     * The name of the Organization.
     */
    def organizationName
    : SelectionBuilder[OrgDisableOauthAppRestrictionsAuditEntry, Option[
      String
    ]] = Field("organizationName", OptionOf(Scalar()))

    /**
     * The HTTP path for the organization
     */
    def organizationResourcePath
    : SelectionBuilder[OrgDisableOauthAppRestrictionsAuditEntry, Option[
      URI
    ]] = Field("organizationResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the organization
     */
    def organizationUrl
    : SelectionBuilder[OrgDisableOauthAppRestrictionsAuditEntry, Option[
      URI
    ]] = Field("organizationUrl", OptionOf(Scalar()))

    /**
     * The user affected by the action
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[OrgDisableOauthAppRestrictionsAuditEntry, Option[A]] =
      Field("user", OptionOf(Obj(innerSelection)))

    /**
     * For actions involving two users, the actor is the initiator and the user is the affected user.
     */
    def userLogin
    : SelectionBuilder[OrgDisableOauthAppRestrictionsAuditEntry, Option[
      String
    ]] = Field("userLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the user.
     */
    def userResourcePath
    : SelectionBuilder[OrgDisableOauthAppRestrictionsAuditEntry, Option[
      URI
    ]] = Field("userResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the user.
     */
    def userUrl
    : SelectionBuilder[OrgDisableOauthAppRestrictionsAuditEntry, Option[
      URI
    ]] = Field("userUrl", OptionOf(Scalar()))
  }

  type OrgDisableSamlAuditEntry

  object OrgDisableSamlAuditEntry {

    /**
     * The action name
     */
    def action: SelectionBuilder[OrgDisableSamlAuditEntry, String] =
      Field("action", Scalar())

    /**
     * The user who initiated the action
     */
    def actor[A](
                  onBot: SelectionBuilder[Bot, A],
                  onOrganization: SelectionBuilder[Organization, A],
                  onUser: SelectionBuilder[User, A]
                ): SelectionBuilder[OrgDisableSamlAuditEntry, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> Obj(onBot),
              "Organization" -> Obj(onOrganization),
              "User" -> Obj(onUser)
            )
          )
        )
      )

    /**
     * The IP address of the actor
     */
    def actorIp: SelectionBuilder[OrgDisableSamlAuditEntry, Option[String]] =
      Field("actorIp", OptionOf(Scalar()))

    /**
     * A readable representation of the actor's location
     */
    def actorLocation[A](
                          innerSelection: SelectionBuilder[ActorLocation, A]
                        ): SelectionBuilder[OrgDisableSamlAuditEntry, Option[A]] =
      Field("actorLocation", OptionOf(Obj(innerSelection)))

    /**
     * The username of the user who initiated the action
     */
    def actorLogin: SelectionBuilder[OrgDisableSamlAuditEntry, Option[String]] =
      Field("actorLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the actor.
     */
    def actorResourcePath
    : SelectionBuilder[OrgDisableSamlAuditEntry, Option[URI]] =
      Field("actorResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the actor.
     */
    def actorUrl: SelectionBuilder[OrgDisableSamlAuditEntry, Option[URI]] =
      Field("actorUrl", OptionOf(Scalar()))

    /**
     * The time the action was initiated
     */
    def createdAt: SelectionBuilder[OrgDisableSamlAuditEntry, PreciseDateTime] =
      Field("createdAt", Scalar())

    /**
     * The SAML provider's digest algorithm URL.
     */
    def digestMethodUrl
    : SelectionBuilder[OrgDisableSamlAuditEntry, Option[URI]] =
      Field("digestMethodUrl", OptionOf(Scalar()))

    def id: SelectionBuilder[OrgDisableSamlAuditEntry, String] =
      Field("id", Scalar())

    /**
     * The SAML provider's issuer URL.
     */
    def issuerUrl: SelectionBuilder[OrgDisableSamlAuditEntry, Option[URI]] =
      Field("issuerUrl", OptionOf(Scalar()))

    /**
     * The corresponding operation type for the action
     */
    def operationType
    : SelectionBuilder[OrgDisableSamlAuditEntry, Option[OperationType]] =
      Field("operationType", OptionOf(Scalar()))

    /**
     * The Organization associated with the Audit Entry.
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[OrgDisableSamlAuditEntry, Option[A]] =
      Field("organization", OptionOf(Obj(innerSelection)))

    /**
     * The name of the Organization.
     */
    def organizationName
    : SelectionBuilder[OrgDisableSamlAuditEntry, Option[String]] =
      Field("organizationName", OptionOf(Scalar()))

    /**
     * The HTTP path for the organization
     */
    def organizationResourcePath
    : SelectionBuilder[OrgDisableSamlAuditEntry, Option[URI]] =
      Field("organizationResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the organization
     */
    def organizationUrl
    : SelectionBuilder[OrgDisableSamlAuditEntry, Option[URI]] =
      Field("organizationUrl", OptionOf(Scalar()))

    /**
     * The SAML provider's signature algorithm URL.
     */
    def signatureMethodUrl
    : SelectionBuilder[OrgDisableSamlAuditEntry, Option[URI]] =
      Field("signatureMethodUrl", OptionOf(Scalar()))

    /**
     * The SAML provider's single sign-on URL.
     */
    def singleSignOnUrl
    : SelectionBuilder[OrgDisableSamlAuditEntry, Option[URI]] =
      Field("singleSignOnUrl", OptionOf(Scalar()))

    /**
     * The user affected by the action
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[OrgDisableSamlAuditEntry, Option[A]] =
      Field("user", OptionOf(Obj(innerSelection)))

    /**
     * For actions involving two users, the actor is the initiator and the user is the affected user.
     */
    def userLogin: SelectionBuilder[OrgDisableSamlAuditEntry, Option[String]] =
      Field("userLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the user.
     */
    def userResourcePath
    : SelectionBuilder[OrgDisableSamlAuditEntry, Option[URI]] =
      Field("userResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the user.
     */
    def userUrl: SelectionBuilder[OrgDisableSamlAuditEntry, Option[URI]] =
      Field("userUrl", OptionOf(Scalar()))
  }

  type OrgDisableTwoFactorRequirementAuditEntry

  object OrgDisableTwoFactorRequirementAuditEntry {

    /**
     * The action name
     */
    def action
    : SelectionBuilder[OrgDisableTwoFactorRequirementAuditEntry, String] =
      Field("action", Scalar())

    /**
     * The user who initiated the action
     */
    def actor[A](
                  onBot: SelectionBuilder[Bot, A],
                  onOrganization: SelectionBuilder[Organization, A],
                  onUser: SelectionBuilder[User, A]
                ): SelectionBuilder[OrgDisableTwoFactorRequirementAuditEntry, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> Obj(onBot),
              "Organization" -> Obj(onOrganization),
              "User" -> Obj(onUser)
            )
          )
        )
      )

    /**
     * The IP address of the actor
     */
    def actorIp
    : SelectionBuilder[OrgDisableTwoFactorRequirementAuditEntry, Option[
      String
    ]] = Field("actorIp", OptionOf(Scalar()))

    /**
     * A readable representation of the actor's location
     */
    def actorLocation[A](
                          innerSelection: SelectionBuilder[ActorLocation, A]
                        ): SelectionBuilder[OrgDisableTwoFactorRequirementAuditEntry, Option[A]] =
      Field("actorLocation", OptionOf(Obj(innerSelection)))

    /**
     * The username of the user who initiated the action
     */
    def actorLogin
    : SelectionBuilder[OrgDisableTwoFactorRequirementAuditEntry, Option[
      String
    ]] = Field("actorLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the actor.
     */
    def actorResourcePath
    : SelectionBuilder[OrgDisableTwoFactorRequirementAuditEntry, Option[
      URI
    ]] = Field("actorResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the actor.
     */
    def actorUrl
    : SelectionBuilder[OrgDisableTwoFactorRequirementAuditEntry, Option[
      URI
    ]] = Field("actorUrl", OptionOf(Scalar()))

    /**
     * The time the action was initiated
     */
    def createdAt: SelectionBuilder[
      OrgDisableTwoFactorRequirementAuditEntry,
      PreciseDateTime
    ] = Field("createdAt", Scalar())

    def id: SelectionBuilder[OrgDisableTwoFactorRequirementAuditEntry, String] =
      Field("id", Scalar())

    /**
     * The corresponding operation type for the action
     */
    def operationType
    : SelectionBuilder[OrgDisableTwoFactorRequirementAuditEntry, Option[
      OperationType
    ]] = Field("operationType", OptionOf(Scalar()))

    /**
     * The Organization associated with the Audit Entry.
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[OrgDisableTwoFactorRequirementAuditEntry, Option[A]] =
      Field("organization", OptionOf(Obj(innerSelection)))

    /**
     * The name of the Organization.
     */
    def organizationName
    : SelectionBuilder[OrgDisableTwoFactorRequirementAuditEntry, Option[
      String
    ]] = Field("organizationName", OptionOf(Scalar()))

    /**
     * The HTTP path for the organization
     */
    def organizationResourcePath
    : SelectionBuilder[OrgDisableTwoFactorRequirementAuditEntry, Option[
      URI
    ]] = Field("organizationResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the organization
     */
    def organizationUrl
    : SelectionBuilder[OrgDisableTwoFactorRequirementAuditEntry, Option[
      URI
    ]] = Field("organizationUrl", OptionOf(Scalar()))

    /**
     * The user affected by the action
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[OrgDisableTwoFactorRequirementAuditEntry, Option[A]] =
      Field("user", OptionOf(Obj(innerSelection)))

    /**
     * For actions involving two users, the actor is the initiator and the user is the affected user.
     */
    def userLogin
    : SelectionBuilder[OrgDisableTwoFactorRequirementAuditEntry, Option[
      String
    ]] = Field("userLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the user.
     */
    def userResourcePath
    : SelectionBuilder[OrgDisableTwoFactorRequirementAuditEntry, Option[
      URI
    ]] = Field("userResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the user.
     */
    def userUrl
    : SelectionBuilder[OrgDisableTwoFactorRequirementAuditEntry, Option[
      URI
    ]] = Field("userUrl", OptionOf(Scalar()))
  }

  type OrgEnableOauthAppRestrictionsAuditEntry

  object OrgEnableOauthAppRestrictionsAuditEntry {

    /**
     * The action name
     */
    def action
    : SelectionBuilder[OrgEnableOauthAppRestrictionsAuditEntry, String] =
      Field("action", Scalar())

    /**
     * The user who initiated the action
     */
    def actor[A](
                  onBot: SelectionBuilder[Bot, A],
                  onOrganization: SelectionBuilder[Organization, A],
                  onUser: SelectionBuilder[User, A]
                ): SelectionBuilder[OrgEnableOauthAppRestrictionsAuditEntry, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> Obj(onBot),
              "Organization" -> Obj(onOrganization),
              "User" -> Obj(onUser)
            )
          )
        )
      )

    /**
     * The IP address of the actor
     */
    def actorIp
    : SelectionBuilder[OrgEnableOauthAppRestrictionsAuditEntry, Option[
      String
    ]] = Field("actorIp", OptionOf(Scalar()))

    /**
     * A readable representation of the actor's location
     */
    def actorLocation[A](
                          innerSelection: SelectionBuilder[ActorLocation, A]
                        ): SelectionBuilder[OrgEnableOauthAppRestrictionsAuditEntry, Option[A]] =
      Field("actorLocation", OptionOf(Obj(innerSelection)))

    /**
     * The username of the user who initiated the action
     */
    def actorLogin
    : SelectionBuilder[OrgEnableOauthAppRestrictionsAuditEntry, Option[
      String
    ]] = Field("actorLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the actor.
     */
    def actorResourcePath
    : SelectionBuilder[OrgEnableOauthAppRestrictionsAuditEntry, Option[
      URI
    ]] = Field("actorResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the actor.
     */
    def actorUrl
    : SelectionBuilder[OrgEnableOauthAppRestrictionsAuditEntry, Option[
      URI
    ]] = Field("actorUrl", OptionOf(Scalar()))

    /**
     * The time the action was initiated
     */
    def createdAt: SelectionBuilder[
      OrgEnableOauthAppRestrictionsAuditEntry,
      PreciseDateTime
    ] = Field("createdAt", Scalar())

    def id: SelectionBuilder[OrgEnableOauthAppRestrictionsAuditEntry, String] =
      Field("id", Scalar())

    /**
     * The corresponding operation type for the action
     */
    def operationType
    : SelectionBuilder[OrgEnableOauthAppRestrictionsAuditEntry, Option[
      OperationType
    ]] = Field("operationType", OptionOf(Scalar()))

    /**
     * The Organization associated with the Audit Entry.
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[OrgEnableOauthAppRestrictionsAuditEntry, Option[A]] =
      Field("organization", OptionOf(Obj(innerSelection)))

    /**
     * The name of the Organization.
     */
    def organizationName
    : SelectionBuilder[OrgEnableOauthAppRestrictionsAuditEntry, Option[
      String
    ]] = Field("organizationName", OptionOf(Scalar()))

    /**
     * The HTTP path for the organization
     */
    def organizationResourcePath
    : SelectionBuilder[OrgEnableOauthAppRestrictionsAuditEntry, Option[
      URI
    ]] = Field("organizationResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the organization
     */
    def organizationUrl
    : SelectionBuilder[OrgEnableOauthAppRestrictionsAuditEntry, Option[
      URI
    ]] = Field("organizationUrl", OptionOf(Scalar()))

    /**
     * The user affected by the action
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[OrgEnableOauthAppRestrictionsAuditEntry, Option[A]] =
      Field("user", OptionOf(Obj(innerSelection)))

    /**
     * For actions involving two users, the actor is the initiator and the user is the affected user.
     */
    def userLogin
    : SelectionBuilder[OrgEnableOauthAppRestrictionsAuditEntry, Option[
      String
    ]] = Field("userLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the user.
     */
    def userResourcePath
    : SelectionBuilder[OrgEnableOauthAppRestrictionsAuditEntry, Option[
      URI
    ]] = Field("userResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the user.
     */
    def userUrl
    : SelectionBuilder[OrgEnableOauthAppRestrictionsAuditEntry, Option[
      URI
    ]] = Field("userUrl", OptionOf(Scalar()))
  }

  type OrgEnableSamlAuditEntry

  object OrgEnableSamlAuditEntry {

    /**
     * The action name
     */
    def action: SelectionBuilder[OrgEnableSamlAuditEntry, String] =
      Field("action", Scalar())

    /**
     * The user who initiated the action
     */
    def actor[A](
                  onBot: SelectionBuilder[Bot, A],
                  onOrganization: SelectionBuilder[Organization, A],
                  onUser: SelectionBuilder[User, A]
                ): SelectionBuilder[OrgEnableSamlAuditEntry, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> Obj(onBot),
              "Organization" -> Obj(onOrganization),
              "User" -> Obj(onUser)
            )
          )
        )
      )

    /**
     * The IP address of the actor
     */
    def actorIp: SelectionBuilder[OrgEnableSamlAuditEntry, Option[String]] =
      Field("actorIp", OptionOf(Scalar()))

    /**
     * A readable representation of the actor's location
     */
    def actorLocation[A](
                          innerSelection: SelectionBuilder[ActorLocation, A]
                        ): SelectionBuilder[OrgEnableSamlAuditEntry, Option[A]] =
      Field("actorLocation", OptionOf(Obj(innerSelection)))

    /**
     * The username of the user who initiated the action
     */
    def actorLogin: SelectionBuilder[OrgEnableSamlAuditEntry, Option[String]] =
      Field("actorLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the actor.
     */
    def actorResourcePath
    : SelectionBuilder[OrgEnableSamlAuditEntry, Option[URI]] =
      Field("actorResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the actor.
     */
    def actorUrl: SelectionBuilder[OrgEnableSamlAuditEntry, Option[URI]] =
      Field("actorUrl", OptionOf(Scalar()))

    /**
     * The time the action was initiated
     */
    def createdAt: SelectionBuilder[OrgEnableSamlAuditEntry, PreciseDateTime] =
      Field("createdAt", Scalar())

    /**
     * The SAML provider's digest algorithm URL.
     */
    def digestMethodUrl
    : SelectionBuilder[OrgEnableSamlAuditEntry, Option[URI]] =
      Field("digestMethodUrl", OptionOf(Scalar()))

    def id: SelectionBuilder[OrgEnableSamlAuditEntry, String] =
      Field("id", Scalar())

    /**
     * The SAML provider's issuer URL.
     */
    def issuerUrl: SelectionBuilder[OrgEnableSamlAuditEntry, Option[URI]] =
      Field("issuerUrl", OptionOf(Scalar()))

    /**
     * The corresponding operation type for the action
     */
    def operationType
    : SelectionBuilder[OrgEnableSamlAuditEntry, Option[OperationType]] =
      Field("operationType", OptionOf(Scalar()))

    /**
     * The Organization associated with the Audit Entry.
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[OrgEnableSamlAuditEntry, Option[A]] =
      Field("organization", OptionOf(Obj(innerSelection)))

    /**
     * The name of the Organization.
     */
    def organizationName
    : SelectionBuilder[OrgEnableSamlAuditEntry, Option[String]] =
      Field("organizationName", OptionOf(Scalar()))

    /**
     * The HTTP path for the organization
     */
    def organizationResourcePath
    : SelectionBuilder[OrgEnableSamlAuditEntry, Option[URI]] =
      Field("organizationResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the organization
     */
    def organizationUrl
    : SelectionBuilder[OrgEnableSamlAuditEntry, Option[URI]] =
      Field("organizationUrl", OptionOf(Scalar()))

    /**
     * The SAML provider's signature algorithm URL.
     */
    def signatureMethodUrl
    : SelectionBuilder[OrgEnableSamlAuditEntry, Option[URI]] =
      Field("signatureMethodUrl", OptionOf(Scalar()))

    /**
     * The SAML provider's single sign-on URL.
     */
    def singleSignOnUrl
    : SelectionBuilder[OrgEnableSamlAuditEntry, Option[URI]] =
      Field("singleSignOnUrl", OptionOf(Scalar()))

    /**
     * The user affected by the action
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[OrgEnableSamlAuditEntry, Option[A]] =
      Field("user", OptionOf(Obj(innerSelection)))

    /**
     * For actions involving two users, the actor is the initiator and the user is the affected user.
     */
    def userLogin: SelectionBuilder[OrgEnableSamlAuditEntry, Option[String]] =
      Field("userLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the user.
     */
    def userResourcePath
    : SelectionBuilder[OrgEnableSamlAuditEntry, Option[URI]] =
      Field("userResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the user.
     */
    def userUrl: SelectionBuilder[OrgEnableSamlAuditEntry, Option[URI]] =
      Field("userUrl", OptionOf(Scalar()))
  }

  type OrgEnableTwoFactorRequirementAuditEntry

  object OrgEnableTwoFactorRequirementAuditEntry {

    /**
     * The action name
     */
    def action
    : SelectionBuilder[OrgEnableTwoFactorRequirementAuditEntry, String] =
      Field("action", Scalar())

    /**
     * The user who initiated the action
     */
    def actor[A](
                  onBot: SelectionBuilder[Bot, A],
                  onOrganization: SelectionBuilder[Organization, A],
                  onUser: SelectionBuilder[User, A]
                ): SelectionBuilder[OrgEnableTwoFactorRequirementAuditEntry, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> Obj(onBot),
              "Organization" -> Obj(onOrganization),
              "User" -> Obj(onUser)
            )
          )
        )
      )

    /**
     * The IP address of the actor
     */
    def actorIp
    : SelectionBuilder[OrgEnableTwoFactorRequirementAuditEntry, Option[
      String
    ]] = Field("actorIp", OptionOf(Scalar()))

    /**
     * A readable representation of the actor's location
     */
    def actorLocation[A](
                          innerSelection: SelectionBuilder[ActorLocation, A]
                        ): SelectionBuilder[OrgEnableTwoFactorRequirementAuditEntry, Option[A]] =
      Field("actorLocation", OptionOf(Obj(innerSelection)))

    /**
     * The username of the user who initiated the action
     */
    def actorLogin
    : SelectionBuilder[OrgEnableTwoFactorRequirementAuditEntry, Option[
      String
    ]] = Field("actorLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the actor.
     */
    def actorResourcePath
    : SelectionBuilder[OrgEnableTwoFactorRequirementAuditEntry, Option[
      URI
    ]] = Field("actorResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the actor.
     */
    def actorUrl
    : SelectionBuilder[OrgEnableTwoFactorRequirementAuditEntry, Option[
      URI
    ]] = Field("actorUrl", OptionOf(Scalar()))

    /**
     * The time the action was initiated
     */
    def createdAt: SelectionBuilder[
      OrgEnableTwoFactorRequirementAuditEntry,
      PreciseDateTime
    ] = Field("createdAt", Scalar())

    def id: SelectionBuilder[OrgEnableTwoFactorRequirementAuditEntry, String] =
      Field("id", Scalar())

    /**
     * The corresponding operation type for the action
     */
    def operationType
    : SelectionBuilder[OrgEnableTwoFactorRequirementAuditEntry, Option[
      OperationType
    ]] = Field("operationType", OptionOf(Scalar()))

    /**
     * The Organization associated with the Audit Entry.
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[OrgEnableTwoFactorRequirementAuditEntry, Option[A]] =
      Field("organization", OptionOf(Obj(innerSelection)))

    /**
     * The name of the Organization.
     */
    def organizationName
    : SelectionBuilder[OrgEnableTwoFactorRequirementAuditEntry, Option[
      String
    ]] = Field("organizationName", OptionOf(Scalar()))

    /**
     * The HTTP path for the organization
     */
    def organizationResourcePath
    : SelectionBuilder[OrgEnableTwoFactorRequirementAuditEntry, Option[
      URI
    ]] = Field("organizationResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the organization
     */
    def organizationUrl
    : SelectionBuilder[OrgEnableTwoFactorRequirementAuditEntry, Option[
      URI
    ]] = Field("organizationUrl", OptionOf(Scalar()))

    /**
     * The user affected by the action
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[OrgEnableTwoFactorRequirementAuditEntry, Option[A]] =
      Field("user", OptionOf(Obj(innerSelection)))

    /**
     * For actions involving two users, the actor is the initiator and the user is the affected user.
     */
    def userLogin
    : SelectionBuilder[OrgEnableTwoFactorRequirementAuditEntry, Option[
      String
    ]] = Field("userLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the user.
     */
    def userResourcePath
    : SelectionBuilder[OrgEnableTwoFactorRequirementAuditEntry, Option[
      URI
    ]] = Field("userResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the user.
     */
    def userUrl
    : SelectionBuilder[OrgEnableTwoFactorRequirementAuditEntry, Option[
      URI
    ]] = Field("userUrl", OptionOf(Scalar()))
  }

  type OrgInviteMemberAuditEntry

  object OrgInviteMemberAuditEntry {

    /**
     * The action name
     */
    def action: SelectionBuilder[OrgInviteMemberAuditEntry, String] =
      Field("action", Scalar())

    /**
     * The user who initiated the action
     */
    def actor[A](
                  onBot: SelectionBuilder[Bot, A],
                  onOrganization: SelectionBuilder[Organization, A],
                  onUser: SelectionBuilder[User, A]
                ): SelectionBuilder[OrgInviteMemberAuditEntry, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> Obj(onBot),
              "Organization" -> Obj(onOrganization),
              "User" -> Obj(onUser)
            )
          )
        )
      )

    /**
     * The IP address of the actor
     */
    def actorIp: SelectionBuilder[OrgInviteMemberAuditEntry, Option[String]] =
      Field("actorIp", OptionOf(Scalar()))

    /**
     * A readable representation of the actor's location
     */
    def actorLocation[A](
                          innerSelection: SelectionBuilder[ActorLocation, A]
                        ): SelectionBuilder[OrgInviteMemberAuditEntry, Option[A]] =
      Field("actorLocation", OptionOf(Obj(innerSelection)))

    /**
     * The username of the user who initiated the action
     */
    def actorLogin
    : SelectionBuilder[OrgInviteMemberAuditEntry, Option[String]] =
      Field("actorLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the actor.
     */
    def actorResourcePath
    : SelectionBuilder[OrgInviteMemberAuditEntry, Option[URI]] =
      Field("actorResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the actor.
     */
    def actorUrl: SelectionBuilder[OrgInviteMemberAuditEntry, Option[URI]] =
      Field("actorUrl", OptionOf(Scalar()))

    /**
     * The time the action was initiated
     */
    def createdAt
    : SelectionBuilder[OrgInviteMemberAuditEntry, PreciseDateTime] =
      Field("createdAt", Scalar())

    /**
     * The email address of the organization invitation.
     */
    def email: SelectionBuilder[OrgInviteMemberAuditEntry, Option[String]] =
      Field("email", OptionOf(Scalar()))

    def id: SelectionBuilder[OrgInviteMemberAuditEntry, String] =
      Field("id", Scalar())

    /**
     * The corresponding operation type for the action
     */
    def operationType
    : SelectionBuilder[OrgInviteMemberAuditEntry, Option[OperationType]] =
      Field("operationType", OptionOf(Scalar()))

    /**
     * The Organization associated with the Audit Entry.
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[OrgInviteMemberAuditEntry, Option[A]] =
      Field("organization", OptionOf(Obj(innerSelection)))

    /**
     * The organization invitation.
     */
    def organizationInvitation[A](
                                   innerSelection: SelectionBuilder[OrganizationInvitation, A]
                                 ): SelectionBuilder[OrgInviteMemberAuditEntry, Option[A]] =
      Field("organizationInvitation", OptionOf(Obj(innerSelection)))

    /**
     * The name of the Organization.
     */
    def organizationName
    : SelectionBuilder[OrgInviteMemberAuditEntry, Option[String]] =
      Field("organizationName", OptionOf(Scalar()))

    /**
     * The HTTP path for the organization
     */
    def organizationResourcePath
    : SelectionBuilder[OrgInviteMemberAuditEntry, Option[URI]] =
      Field("organizationResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the organization
     */
    def organizationUrl
    : SelectionBuilder[OrgInviteMemberAuditEntry, Option[URI]] =
      Field("organizationUrl", OptionOf(Scalar()))

    /**
     * The user affected by the action
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[OrgInviteMemberAuditEntry, Option[A]] =
      Field("user", OptionOf(Obj(innerSelection)))

    /**
     * For actions involving two users, the actor is the initiator and the user is the affected user.
     */
    def userLogin: SelectionBuilder[OrgInviteMemberAuditEntry, Option[String]] =
      Field("userLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the user.
     */
    def userResourcePath
    : SelectionBuilder[OrgInviteMemberAuditEntry, Option[URI]] =
      Field("userResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the user.
     */
    def userUrl: SelectionBuilder[OrgInviteMemberAuditEntry, Option[URI]] =
      Field("userUrl", OptionOf(Scalar()))
  }

  type OrgInviteToBusinessAuditEntry

  object OrgInviteToBusinessAuditEntry {

    /**
     * The action name
     */
    def action: SelectionBuilder[OrgInviteToBusinessAuditEntry, String] =
      Field("action", Scalar())

    /**
     * The user who initiated the action
     */
    def actor[A](
                  onBot: SelectionBuilder[Bot, A],
                  onOrganization: SelectionBuilder[Organization, A],
                  onUser: SelectionBuilder[User, A]
                ): SelectionBuilder[OrgInviteToBusinessAuditEntry, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> Obj(onBot),
              "Organization" -> Obj(onOrganization),
              "User" -> Obj(onUser)
            )
          )
        )
      )

    /**
     * The IP address of the actor
     */
    def actorIp
    : SelectionBuilder[OrgInviteToBusinessAuditEntry, Option[String]] =
      Field("actorIp", OptionOf(Scalar()))

    /**
     * A readable representation of the actor's location
     */
    def actorLocation[A](
                          innerSelection: SelectionBuilder[ActorLocation, A]
                        ): SelectionBuilder[OrgInviteToBusinessAuditEntry, Option[A]] =
      Field("actorLocation", OptionOf(Obj(innerSelection)))

    /**
     * The username of the user who initiated the action
     */
    def actorLogin
    : SelectionBuilder[OrgInviteToBusinessAuditEntry, Option[String]] =
      Field("actorLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the actor.
     */
    def actorResourcePath
    : SelectionBuilder[OrgInviteToBusinessAuditEntry, Option[URI]] =
      Field("actorResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the actor.
     */
    def actorUrl: SelectionBuilder[OrgInviteToBusinessAuditEntry, Option[URI]] =
      Field("actorUrl", OptionOf(Scalar()))

    /**
     * The time the action was initiated
     */
    def createdAt
    : SelectionBuilder[OrgInviteToBusinessAuditEntry, PreciseDateTime] =
      Field("createdAt", Scalar())

    /**
     * The HTTP path for this enterprise.
     */
    def enterpriseResourcePath
    : SelectionBuilder[OrgInviteToBusinessAuditEntry, Option[URI]] =
      Field("enterpriseResourcePath", OptionOf(Scalar()))

    /**
     * The slug of the enterprise.
     */
    def enterpriseSlug
    : SelectionBuilder[OrgInviteToBusinessAuditEntry, Option[String]] =
      Field("enterpriseSlug", OptionOf(Scalar()))

    /**
     * The HTTP URL for this enterprise.
     */
    def enterpriseUrl
    : SelectionBuilder[OrgInviteToBusinessAuditEntry, Option[URI]] =
      Field("enterpriseUrl", OptionOf(Scalar()))

    def id: SelectionBuilder[OrgInviteToBusinessAuditEntry, String] =
      Field("id", Scalar())

    /**
     * The corresponding operation type for the action
     */
    def operationType: SelectionBuilder[OrgInviteToBusinessAuditEntry, Option[
      OperationType
    ]] = Field("operationType", OptionOf(Scalar()))

    /**
     * The Organization associated with the Audit Entry.
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[OrgInviteToBusinessAuditEntry, Option[A]] =
      Field("organization", OptionOf(Obj(innerSelection)))

    /**
     * The name of the Organization.
     */
    def organizationName
    : SelectionBuilder[OrgInviteToBusinessAuditEntry, Option[String]] =
      Field("organizationName", OptionOf(Scalar()))

    /**
     * The HTTP path for the organization
     */
    def organizationResourcePath
    : SelectionBuilder[OrgInviteToBusinessAuditEntry, Option[URI]] =
      Field("organizationResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the organization
     */
    def organizationUrl
    : SelectionBuilder[OrgInviteToBusinessAuditEntry, Option[URI]] =
      Field("organizationUrl", OptionOf(Scalar()))

    /**
     * The user affected by the action
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[OrgInviteToBusinessAuditEntry, Option[A]] =
      Field("user", OptionOf(Obj(innerSelection)))

    /**
     * For actions involving two users, the actor is the initiator and the user is the affected user.
     */
    def userLogin
    : SelectionBuilder[OrgInviteToBusinessAuditEntry, Option[String]] =
      Field("userLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the user.
     */
    def userResourcePath
    : SelectionBuilder[OrgInviteToBusinessAuditEntry, Option[URI]] =
      Field("userResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the user.
     */
    def userUrl: SelectionBuilder[OrgInviteToBusinessAuditEntry, Option[URI]] =
      Field("userUrl", OptionOf(Scalar()))
  }

  type OrgOauthAppAccessApprovedAuditEntry

  object OrgOauthAppAccessApprovedAuditEntry {

    /**
     * The action name
     */
    def action: SelectionBuilder[OrgOauthAppAccessApprovedAuditEntry, String] =
      Field("action", Scalar())

    /**
     * The user who initiated the action
     */
    def actor[A](
                  onBot: SelectionBuilder[Bot, A],
                  onOrganization: SelectionBuilder[Organization, A],
                  onUser: SelectionBuilder[User, A]
                ): SelectionBuilder[OrgOauthAppAccessApprovedAuditEntry, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> Obj(onBot),
              "Organization" -> Obj(onOrganization),
              "User" -> Obj(onUser)
            )
          )
        )
      )

    /**
     * The IP address of the actor
     */
    def actorIp: SelectionBuilder[OrgOauthAppAccessApprovedAuditEntry, Option[
      String
    ]] = Field("actorIp", OptionOf(Scalar()))

    /**
     * A readable representation of the actor's location
     */
    def actorLocation[A](
                          innerSelection: SelectionBuilder[ActorLocation, A]
                        ): SelectionBuilder[OrgOauthAppAccessApprovedAuditEntry, Option[A]] =
      Field("actorLocation", OptionOf(Obj(innerSelection)))

    /**
     * The username of the user who initiated the action
     */
    def actorLogin
    : SelectionBuilder[OrgOauthAppAccessApprovedAuditEntry, Option[
      String
    ]] = Field("actorLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the actor.
     */
    def actorResourcePath
    : SelectionBuilder[OrgOauthAppAccessApprovedAuditEntry, Option[URI]] =
      Field("actorResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the actor.
     */
    def actorUrl
    : SelectionBuilder[OrgOauthAppAccessApprovedAuditEntry, Option[URI]] =
      Field("actorUrl", OptionOf(Scalar()))

    /**
     * The time the action was initiated
     */
    def createdAt: SelectionBuilder[
      OrgOauthAppAccessApprovedAuditEntry,
      PreciseDateTime
    ] = Field("createdAt", Scalar())

    def id: SelectionBuilder[OrgOauthAppAccessApprovedAuditEntry, String] =
      Field("id", Scalar())

    /**
     * The name of the OAuth Application.
     */
    def oauthApplicationName
    : SelectionBuilder[OrgOauthAppAccessApprovedAuditEntry, Option[
      String
    ]] = Field("oauthApplicationName", OptionOf(Scalar()))

    /**
     * The HTTP path for the OAuth Application
     */
    def oauthApplicationResourcePath
    : SelectionBuilder[OrgOauthAppAccessApprovedAuditEntry, Option[URI]] =
      Field("oauthApplicationResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the OAuth Application
     */
    def oauthApplicationUrl
    : SelectionBuilder[OrgOauthAppAccessApprovedAuditEntry, Option[URI]] =
      Field("oauthApplicationUrl", OptionOf(Scalar()))

    /**
     * The corresponding operation type for the action
     */
    def operationType
    : SelectionBuilder[OrgOauthAppAccessApprovedAuditEntry, Option[
      OperationType
    ]] = Field("operationType", OptionOf(Scalar()))

    /**
     * The Organization associated with the Audit Entry.
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[OrgOauthAppAccessApprovedAuditEntry, Option[A]] =
      Field("organization", OptionOf(Obj(innerSelection)))

    /**
     * The name of the Organization.
     */
    def organizationName
    : SelectionBuilder[OrgOauthAppAccessApprovedAuditEntry, Option[
      String
    ]] = Field("organizationName", OptionOf(Scalar()))

    /**
     * The HTTP path for the organization
     */
    def organizationResourcePath
    : SelectionBuilder[OrgOauthAppAccessApprovedAuditEntry, Option[URI]] =
      Field("organizationResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the organization
     */
    def organizationUrl
    : SelectionBuilder[OrgOauthAppAccessApprovedAuditEntry, Option[URI]] =
      Field("organizationUrl", OptionOf(Scalar()))

    /**
     * The user affected by the action
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[OrgOauthAppAccessApprovedAuditEntry, Option[A]] =
      Field("user", OptionOf(Obj(innerSelection)))

    /**
     * For actions involving two users, the actor is the initiator and the user is the affected user.
     */
    def userLogin: SelectionBuilder[OrgOauthAppAccessApprovedAuditEntry, Option[
      String
    ]] = Field("userLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the user.
     */
    def userResourcePath
    : SelectionBuilder[OrgOauthAppAccessApprovedAuditEntry, Option[URI]] =
      Field("userResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the user.
     */
    def userUrl
    : SelectionBuilder[OrgOauthAppAccessApprovedAuditEntry, Option[URI]] =
      Field("userUrl", OptionOf(Scalar()))
  }

  type OrgOauthAppAccessDeniedAuditEntry

  object OrgOauthAppAccessDeniedAuditEntry {

    /**
     * The action name
     */
    def action: SelectionBuilder[OrgOauthAppAccessDeniedAuditEntry, String] =
      Field("action", Scalar())

    /**
     * The user who initiated the action
     */
    def actor[A](
                  onBot: SelectionBuilder[Bot, A],
                  onOrganization: SelectionBuilder[Organization, A],
                  onUser: SelectionBuilder[User, A]
                ): SelectionBuilder[OrgOauthAppAccessDeniedAuditEntry, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> Obj(onBot),
              "Organization" -> Obj(onOrganization),
              "User" -> Obj(onUser)
            )
          )
        )
      )

    /**
     * The IP address of the actor
     */
    def actorIp
    : SelectionBuilder[OrgOauthAppAccessDeniedAuditEntry, Option[String]] =
      Field("actorIp", OptionOf(Scalar()))

    /**
     * A readable representation of the actor's location
     */
    def actorLocation[A](
                          innerSelection: SelectionBuilder[ActorLocation, A]
                        ): SelectionBuilder[OrgOauthAppAccessDeniedAuditEntry, Option[A]] =
      Field("actorLocation", OptionOf(Obj(innerSelection)))

    /**
     * The username of the user who initiated the action
     */
    def actorLogin
    : SelectionBuilder[OrgOauthAppAccessDeniedAuditEntry, Option[String]] =
      Field("actorLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the actor.
     */
    def actorResourcePath
    : SelectionBuilder[OrgOauthAppAccessDeniedAuditEntry, Option[URI]] =
      Field("actorResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the actor.
     */
    def actorUrl
    : SelectionBuilder[OrgOauthAppAccessDeniedAuditEntry, Option[URI]] =
      Field("actorUrl", OptionOf(Scalar()))

    /**
     * The time the action was initiated
     */
    def createdAt
    : SelectionBuilder[OrgOauthAppAccessDeniedAuditEntry, PreciseDateTime] =
      Field("createdAt", Scalar())

    def id: SelectionBuilder[OrgOauthAppAccessDeniedAuditEntry, String] =
      Field("id", Scalar())

    /**
     * The name of the OAuth Application.
     */
    def oauthApplicationName
    : SelectionBuilder[OrgOauthAppAccessDeniedAuditEntry, Option[String]] =
      Field("oauthApplicationName", OptionOf(Scalar()))

    /**
     * The HTTP path for the OAuth Application
     */
    def oauthApplicationResourcePath
    : SelectionBuilder[OrgOauthAppAccessDeniedAuditEntry, Option[URI]] =
      Field("oauthApplicationResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the OAuth Application
     */
    def oauthApplicationUrl
    : SelectionBuilder[OrgOauthAppAccessDeniedAuditEntry, Option[URI]] =
      Field("oauthApplicationUrl", OptionOf(Scalar()))

    /**
     * The corresponding operation type for the action
     */
    def operationType
    : SelectionBuilder[OrgOauthAppAccessDeniedAuditEntry, Option[
      OperationType
    ]] = Field("operationType", OptionOf(Scalar()))

    /**
     * The Organization associated with the Audit Entry.
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[OrgOauthAppAccessDeniedAuditEntry, Option[A]] =
      Field("organization", OptionOf(Obj(innerSelection)))

    /**
     * The name of the Organization.
     */
    def organizationName
    : SelectionBuilder[OrgOauthAppAccessDeniedAuditEntry, Option[String]] =
      Field("organizationName", OptionOf(Scalar()))

    /**
     * The HTTP path for the organization
     */
    def organizationResourcePath
    : SelectionBuilder[OrgOauthAppAccessDeniedAuditEntry, Option[URI]] =
      Field("organizationResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the organization
     */
    def organizationUrl
    : SelectionBuilder[OrgOauthAppAccessDeniedAuditEntry, Option[URI]] =
      Field("organizationUrl", OptionOf(Scalar()))

    /**
     * The user affected by the action
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[OrgOauthAppAccessDeniedAuditEntry, Option[A]] =
      Field("user", OptionOf(Obj(innerSelection)))

    /**
     * For actions involving two users, the actor is the initiator and the user is the affected user.
     */
    def userLogin
    : SelectionBuilder[OrgOauthAppAccessDeniedAuditEntry, Option[String]] =
      Field("userLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the user.
     */
    def userResourcePath
    : SelectionBuilder[OrgOauthAppAccessDeniedAuditEntry, Option[URI]] =
      Field("userResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the user.
     */
    def userUrl
    : SelectionBuilder[OrgOauthAppAccessDeniedAuditEntry, Option[URI]] =
      Field("userUrl", OptionOf(Scalar()))
  }

  type OrgOauthAppAccessRequestedAuditEntry

  object OrgOauthAppAccessRequestedAuditEntry {

    /**
     * The action name
     */
    def action: SelectionBuilder[OrgOauthAppAccessRequestedAuditEntry, String] =
      Field("action", Scalar())

    /**
     * The user who initiated the action
     */
    def actor[A](
                  onBot: SelectionBuilder[Bot, A],
                  onOrganization: SelectionBuilder[Organization, A],
                  onUser: SelectionBuilder[User, A]
                ): SelectionBuilder[OrgOauthAppAccessRequestedAuditEntry, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> Obj(onBot),
              "Organization" -> Obj(onOrganization),
              "User" -> Obj(onUser)
            )
          )
        )
      )

    /**
     * The IP address of the actor
     */
    def actorIp: SelectionBuilder[OrgOauthAppAccessRequestedAuditEntry, Option[
      String
    ]] = Field("actorIp", OptionOf(Scalar()))

    /**
     * A readable representation of the actor's location
     */
    def actorLocation[A](
                          innerSelection: SelectionBuilder[ActorLocation, A]
                        ): SelectionBuilder[OrgOauthAppAccessRequestedAuditEntry, Option[A]] =
      Field("actorLocation", OptionOf(Obj(innerSelection)))

    /**
     * The username of the user who initiated the action
     */
    def actorLogin
    : SelectionBuilder[OrgOauthAppAccessRequestedAuditEntry, Option[
      String
    ]] = Field("actorLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the actor.
     */
    def actorResourcePath
    : SelectionBuilder[OrgOauthAppAccessRequestedAuditEntry, Option[URI]] =
      Field("actorResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the actor.
     */
    def actorUrl
    : SelectionBuilder[OrgOauthAppAccessRequestedAuditEntry, Option[URI]] =
      Field("actorUrl", OptionOf(Scalar()))

    /**
     * The time the action was initiated
     */
    def createdAt: SelectionBuilder[
      OrgOauthAppAccessRequestedAuditEntry,
      PreciseDateTime
    ] = Field("createdAt", Scalar())

    def id: SelectionBuilder[OrgOauthAppAccessRequestedAuditEntry, String] =
      Field("id", Scalar())

    /**
     * The name of the OAuth Application.
     */
    def oauthApplicationName
    : SelectionBuilder[OrgOauthAppAccessRequestedAuditEntry, Option[
      String
    ]] = Field("oauthApplicationName", OptionOf(Scalar()))

    /**
     * The HTTP path for the OAuth Application
     */
    def oauthApplicationResourcePath
    : SelectionBuilder[OrgOauthAppAccessRequestedAuditEntry, Option[URI]] =
      Field("oauthApplicationResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the OAuth Application
     */
    def oauthApplicationUrl
    : SelectionBuilder[OrgOauthAppAccessRequestedAuditEntry, Option[URI]] =
      Field("oauthApplicationUrl", OptionOf(Scalar()))

    /**
     * The corresponding operation type for the action
     */
    def operationType
    : SelectionBuilder[OrgOauthAppAccessRequestedAuditEntry, Option[
      OperationType
    ]] = Field("operationType", OptionOf(Scalar()))

    /**
     * The Organization associated with the Audit Entry.
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[OrgOauthAppAccessRequestedAuditEntry, Option[A]] =
      Field("organization", OptionOf(Obj(innerSelection)))

    /**
     * The name of the Organization.
     */
    def organizationName
    : SelectionBuilder[OrgOauthAppAccessRequestedAuditEntry, Option[
      String
    ]] = Field("organizationName", OptionOf(Scalar()))

    /**
     * The HTTP path for the organization
     */
    def organizationResourcePath
    : SelectionBuilder[OrgOauthAppAccessRequestedAuditEntry, Option[URI]] =
      Field("organizationResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the organization
     */
    def organizationUrl
    : SelectionBuilder[OrgOauthAppAccessRequestedAuditEntry, Option[URI]] =
      Field("organizationUrl", OptionOf(Scalar()))

    /**
     * The user affected by the action
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[OrgOauthAppAccessRequestedAuditEntry, Option[A]] =
      Field("user", OptionOf(Obj(innerSelection)))

    /**
     * For actions involving two users, the actor is the initiator and the user is the affected user.
     */
    def userLogin
    : SelectionBuilder[OrgOauthAppAccessRequestedAuditEntry, Option[
      String
    ]] = Field("userLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the user.
     */
    def userResourcePath
    : SelectionBuilder[OrgOauthAppAccessRequestedAuditEntry, Option[URI]] =
      Field("userResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the user.
     */
    def userUrl
    : SelectionBuilder[OrgOauthAppAccessRequestedAuditEntry, Option[URI]] =
      Field("userUrl", OptionOf(Scalar()))
  }

  type OrgRemoveBillingManagerAuditEntry

  object OrgRemoveBillingManagerAuditEntry {

    /**
     * The action name
     */
    def action: SelectionBuilder[OrgRemoveBillingManagerAuditEntry, String] =
      Field("action", Scalar())

    /**
     * The user who initiated the action
     */
    def actor[A](
                  onBot: SelectionBuilder[Bot, A],
                  onOrganization: SelectionBuilder[Organization, A],
                  onUser: SelectionBuilder[User, A]
                ): SelectionBuilder[OrgRemoveBillingManagerAuditEntry, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> Obj(onBot),
              "Organization" -> Obj(onOrganization),
              "User" -> Obj(onUser)
            )
          )
        )
      )

    /**
     * The IP address of the actor
     */
    def actorIp
    : SelectionBuilder[OrgRemoveBillingManagerAuditEntry, Option[String]] =
      Field("actorIp", OptionOf(Scalar()))

    /**
     * A readable representation of the actor's location
     */
    def actorLocation[A](
                          innerSelection: SelectionBuilder[ActorLocation, A]
                        ): SelectionBuilder[OrgRemoveBillingManagerAuditEntry, Option[A]] =
      Field("actorLocation", OptionOf(Obj(innerSelection)))

    /**
     * The username of the user who initiated the action
     */
    def actorLogin
    : SelectionBuilder[OrgRemoveBillingManagerAuditEntry, Option[String]] =
      Field("actorLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the actor.
     */
    def actorResourcePath
    : SelectionBuilder[OrgRemoveBillingManagerAuditEntry, Option[URI]] =
      Field("actorResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the actor.
     */
    def actorUrl
    : SelectionBuilder[OrgRemoveBillingManagerAuditEntry, Option[URI]] =
      Field("actorUrl", OptionOf(Scalar()))

    /**
     * The time the action was initiated
     */
    def createdAt
    : SelectionBuilder[OrgRemoveBillingManagerAuditEntry, PreciseDateTime] =
      Field("createdAt", Scalar())

    def id: SelectionBuilder[OrgRemoveBillingManagerAuditEntry, String] =
      Field("id", Scalar())

    /**
     * The corresponding operation type for the action
     */
    def operationType
    : SelectionBuilder[OrgRemoveBillingManagerAuditEntry, Option[
      OperationType
    ]] = Field("operationType", OptionOf(Scalar()))

    /**
     * The Organization associated with the Audit Entry.
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[OrgRemoveBillingManagerAuditEntry, Option[A]] =
      Field("organization", OptionOf(Obj(innerSelection)))

    /**
     * The name of the Organization.
     */
    def organizationName
    : SelectionBuilder[OrgRemoveBillingManagerAuditEntry, Option[String]] =
      Field("organizationName", OptionOf(Scalar()))

    /**
     * The HTTP path for the organization
     */
    def organizationResourcePath
    : SelectionBuilder[OrgRemoveBillingManagerAuditEntry, Option[URI]] =
      Field("organizationResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the organization
     */
    def organizationUrl
    : SelectionBuilder[OrgRemoveBillingManagerAuditEntry, Option[URI]] =
      Field("organizationUrl", OptionOf(Scalar()))

    /**
     * The reason for the billing manager being removed.
     */
    def reason: SelectionBuilder[OrgRemoveBillingManagerAuditEntry, Option[
      OrgRemoveBillingManagerAuditEntryReason
    ]] = Field("reason", OptionOf(Scalar()))

    /**
     * The user affected by the action
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[OrgRemoveBillingManagerAuditEntry, Option[A]] =
      Field("user", OptionOf(Obj(innerSelection)))

    /**
     * For actions involving two users, the actor is the initiator and the user is the affected user.
     */
    def userLogin
    : SelectionBuilder[OrgRemoveBillingManagerAuditEntry, Option[String]] =
      Field("userLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the user.
     */
    def userResourcePath
    : SelectionBuilder[OrgRemoveBillingManagerAuditEntry, Option[URI]] =
      Field("userResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the user.
     */
    def userUrl
    : SelectionBuilder[OrgRemoveBillingManagerAuditEntry, Option[URI]] =
      Field("userUrl", OptionOf(Scalar()))
  }

  type OrgRemoveMemberAuditEntry

  object OrgRemoveMemberAuditEntry {

    /**
     * The action name
     */
    def action: SelectionBuilder[OrgRemoveMemberAuditEntry, String] =
      Field("action", Scalar())

    /**
     * The user who initiated the action
     */
    def actor[A](
                  onBot: SelectionBuilder[Bot, A],
                  onOrganization: SelectionBuilder[Organization, A],
                  onUser: SelectionBuilder[User, A]
                ): SelectionBuilder[OrgRemoveMemberAuditEntry, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> Obj(onBot),
              "Organization" -> Obj(onOrganization),
              "User" -> Obj(onUser)
            )
          )
        )
      )

    /**
     * The IP address of the actor
     */
    def actorIp: SelectionBuilder[OrgRemoveMemberAuditEntry, Option[String]] =
      Field("actorIp", OptionOf(Scalar()))

    /**
     * A readable representation of the actor's location
     */
    def actorLocation[A](
                          innerSelection: SelectionBuilder[ActorLocation, A]
                        ): SelectionBuilder[OrgRemoveMemberAuditEntry, Option[A]] =
      Field("actorLocation", OptionOf(Obj(innerSelection)))

    /**
     * The username of the user who initiated the action
     */
    def actorLogin
    : SelectionBuilder[OrgRemoveMemberAuditEntry, Option[String]] =
      Field("actorLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the actor.
     */
    def actorResourcePath
    : SelectionBuilder[OrgRemoveMemberAuditEntry, Option[URI]] =
      Field("actorResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the actor.
     */
    def actorUrl: SelectionBuilder[OrgRemoveMemberAuditEntry, Option[URI]] =
      Field("actorUrl", OptionOf(Scalar()))

    /**
     * The time the action was initiated
     */
    def createdAt
    : SelectionBuilder[OrgRemoveMemberAuditEntry, PreciseDateTime] =
      Field("createdAt", Scalar())

    def id: SelectionBuilder[OrgRemoveMemberAuditEntry, String] =
      Field("id", Scalar())

    /**
     * The types of membership the member has with the organization.
     */
    def membershipTypes: SelectionBuilder[OrgRemoveMemberAuditEntry, Option[
      List[OrgRemoveMemberAuditEntryMembershipType]
    ]] = Field("membershipTypes", OptionOf(ListOf(Scalar())))

    /**
     * The corresponding operation type for the action
     */
    def operationType
    : SelectionBuilder[OrgRemoveMemberAuditEntry, Option[OperationType]] =
      Field("operationType", OptionOf(Scalar()))

    /**
     * The Organization associated with the Audit Entry.
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[OrgRemoveMemberAuditEntry, Option[A]] =
      Field("organization", OptionOf(Obj(innerSelection)))

    /**
     * The name of the Organization.
     */
    def organizationName
    : SelectionBuilder[OrgRemoveMemberAuditEntry, Option[String]] =
      Field("organizationName", OptionOf(Scalar()))

    /**
     * The HTTP path for the organization
     */
    def organizationResourcePath
    : SelectionBuilder[OrgRemoveMemberAuditEntry, Option[URI]] =
      Field("organizationResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the organization
     */
    def organizationUrl
    : SelectionBuilder[OrgRemoveMemberAuditEntry, Option[URI]] =
      Field("organizationUrl", OptionOf(Scalar()))

    /**
     * The reason for the member being removed.
     */
    def reason: SelectionBuilder[OrgRemoveMemberAuditEntry, Option[
      OrgRemoveMemberAuditEntryReason
    ]] = Field("reason", OptionOf(Scalar()))

    /**
     * The user affected by the action
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[OrgRemoveMemberAuditEntry, Option[A]] =
      Field("user", OptionOf(Obj(innerSelection)))

    /**
     * For actions involving two users, the actor is the initiator and the user is the affected user.
     */
    def userLogin: SelectionBuilder[OrgRemoveMemberAuditEntry, Option[String]] =
      Field("userLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the user.
     */
    def userResourcePath
    : SelectionBuilder[OrgRemoveMemberAuditEntry, Option[URI]] =
      Field("userResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the user.
     */
    def userUrl: SelectionBuilder[OrgRemoveMemberAuditEntry, Option[URI]] =
      Field("userUrl", OptionOf(Scalar()))
  }

  type OrgRemoveOutsideCollaboratorAuditEntry

  object OrgRemoveOutsideCollaboratorAuditEntry {

    /**
     * The action name
     */
    def action
    : SelectionBuilder[OrgRemoveOutsideCollaboratorAuditEntry, String] =
      Field("action", Scalar())

    /**
     * The user who initiated the action
     */
    def actor[A](
                  onBot: SelectionBuilder[Bot, A],
                  onOrganization: SelectionBuilder[Organization, A],
                  onUser: SelectionBuilder[User, A]
                ): SelectionBuilder[OrgRemoveOutsideCollaboratorAuditEntry, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> Obj(onBot),
              "Organization" -> Obj(onOrganization),
              "User" -> Obj(onUser)
            )
          )
        )
      )

    /**
     * The IP address of the actor
     */
    def actorIp
    : SelectionBuilder[OrgRemoveOutsideCollaboratorAuditEntry, Option[
      String
    ]] = Field("actorIp", OptionOf(Scalar()))

    /**
     * A readable representation of the actor's location
     */
    def actorLocation[A](
                          innerSelection: SelectionBuilder[ActorLocation, A]
                        ): SelectionBuilder[OrgRemoveOutsideCollaboratorAuditEntry, Option[A]] =
      Field("actorLocation", OptionOf(Obj(innerSelection)))

    /**
     * The username of the user who initiated the action
     */
    def actorLogin
    : SelectionBuilder[OrgRemoveOutsideCollaboratorAuditEntry, Option[
      String
    ]] = Field("actorLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the actor.
     */
    def actorResourcePath
    : SelectionBuilder[OrgRemoveOutsideCollaboratorAuditEntry, Option[
      URI
    ]] = Field("actorResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the actor.
     */
    def actorUrl
    : SelectionBuilder[OrgRemoveOutsideCollaboratorAuditEntry, Option[
      URI
    ]] = Field("actorUrl", OptionOf(Scalar()))

    /**
     * The time the action was initiated
     */
    def createdAt: SelectionBuilder[
      OrgRemoveOutsideCollaboratorAuditEntry,
      PreciseDateTime
    ] = Field("createdAt", Scalar())

    def id: SelectionBuilder[OrgRemoveOutsideCollaboratorAuditEntry, String] =
      Field("id", Scalar())

    /**
     * The types of membership the outside collaborator has with the organization.
     */
    def membershipTypes
    : SelectionBuilder[OrgRemoveOutsideCollaboratorAuditEntry, Option[
      List[OrgRemoveOutsideCollaboratorAuditEntryMembershipType]
    ]] = Field("membershipTypes", OptionOf(ListOf(Scalar())))

    /**
     * The corresponding operation type for the action
     */
    def operationType
    : SelectionBuilder[OrgRemoveOutsideCollaboratorAuditEntry, Option[
      OperationType
    ]] = Field("operationType", OptionOf(Scalar()))

    /**
     * The Organization associated with the Audit Entry.
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[OrgRemoveOutsideCollaboratorAuditEntry, Option[A]] =
      Field("organization", OptionOf(Obj(innerSelection)))

    /**
     * The name of the Organization.
     */
    def organizationName
    : SelectionBuilder[OrgRemoveOutsideCollaboratorAuditEntry, Option[
      String
    ]] = Field("organizationName", OptionOf(Scalar()))

    /**
     * The HTTP path for the organization
     */
    def organizationResourcePath
    : SelectionBuilder[OrgRemoveOutsideCollaboratorAuditEntry, Option[
      URI
    ]] = Field("organizationResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the organization
     */
    def organizationUrl
    : SelectionBuilder[OrgRemoveOutsideCollaboratorAuditEntry, Option[
      URI
    ]] = Field("organizationUrl", OptionOf(Scalar()))

    /**
     * The reason for the outside collaborator being removed from the Organization.
     */
    def reason: SelectionBuilder[OrgRemoveOutsideCollaboratorAuditEntry, Option[
      OrgRemoveOutsideCollaboratorAuditEntryReason
    ]] = Field("reason", OptionOf(Scalar()))

    /**
     * The user affected by the action
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[OrgRemoveOutsideCollaboratorAuditEntry, Option[A]] =
      Field("user", OptionOf(Obj(innerSelection)))

    /**
     * For actions involving two users, the actor is the initiator and the user is the affected user.
     */
    def userLogin
    : SelectionBuilder[OrgRemoveOutsideCollaboratorAuditEntry, Option[
      String
    ]] = Field("userLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the user.
     */
    def userResourcePath
    : SelectionBuilder[OrgRemoveOutsideCollaboratorAuditEntry, Option[
      URI
    ]] = Field("userResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the user.
     */
    def userUrl
    : SelectionBuilder[OrgRemoveOutsideCollaboratorAuditEntry, Option[
      URI
    ]] = Field("userUrl", OptionOf(Scalar()))
  }

  type OrgRestoreMemberAuditEntry

  object OrgRestoreMemberAuditEntry {

    /**
     * The action name
     */
    def action: SelectionBuilder[OrgRestoreMemberAuditEntry, String] =
      Field("action", Scalar())

    /**
     * The user who initiated the action
     */
    def actor[A](
                  onBot: SelectionBuilder[Bot, A],
                  onOrganization: SelectionBuilder[Organization, A],
                  onUser: SelectionBuilder[User, A]
                ): SelectionBuilder[OrgRestoreMemberAuditEntry, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> Obj(onBot),
              "Organization" -> Obj(onOrganization),
              "User" -> Obj(onUser)
            )
          )
        )
      )

    /**
     * The IP address of the actor
     */
    def actorIp: SelectionBuilder[OrgRestoreMemberAuditEntry, Option[String]] =
      Field("actorIp", OptionOf(Scalar()))

    /**
     * A readable representation of the actor's location
     */
    def actorLocation[A](
                          innerSelection: SelectionBuilder[ActorLocation, A]
                        ): SelectionBuilder[OrgRestoreMemberAuditEntry, Option[A]] =
      Field("actorLocation", OptionOf(Obj(innerSelection)))

    /**
     * The username of the user who initiated the action
     */
    def actorLogin
    : SelectionBuilder[OrgRestoreMemberAuditEntry, Option[String]] =
      Field("actorLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the actor.
     */
    def actorResourcePath
    : SelectionBuilder[OrgRestoreMemberAuditEntry, Option[URI]] =
      Field("actorResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the actor.
     */
    def actorUrl: SelectionBuilder[OrgRestoreMemberAuditEntry, Option[URI]] =
      Field("actorUrl", OptionOf(Scalar()))

    /**
     * The time the action was initiated
     */
    def createdAt
    : SelectionBuilder[OrgRestoreMemberAuditEntry, PreciseDateTime] =
      Field("createdAt", Scalar())

    def id: SelectionBuilder[OrgRestoreMemberAuditEntry, String] =
      Field("id", Scalar())

    /**
     * The corresponding operation type for the action
     */
    def operationType
    : SelectionBuilder[OrgRestoreMemberAuditEntry, Option[OperationType]] =
      Field("operationType", OptionOf(Scalar()))

    /**
     * The Organization associated with the Audit Entry.
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[OrgRestoreMemberAuditEntry, Option[A]] =
      Field("organization", OptionOf(Obj(innerSelection)))

    /**
     * The name of the Organization.
     */
    def organizationName
    : SelectionBuilder[OrgRestoreMemberAuditEntry, Option[String]] =
      Field("organizationName", OptionOf(Scalar()))

    /**
     * The HTTP path for the organization
     */
    def organizationResourcePath
    : SelectionBuilder[OrgRestoreMemberAuditEntry, Option[URI]] =
      Field("organizationResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the organization
     */
    def organizationUrl
    : SelectionBuilder[OrgRestoreMemberAuditEntry, Option[URI]] =
      Field("organizationUrl", OptionOf(Scalar()))

    /**
     * The number of custom email routings for the restored member.
     */
    def restoredCustomEmailRoutingsCount
    : SelectionBuilder[OrgRestoreMemberAuditEntry, Option[Int]] =
      Field("restoredCustomEmailRoutingsCount", OptionOf(Scalar()))

    /**
     * The number of issue assignemnts for the restored member.
     */
    def restoredIssueAssignmentsCount
    : SelectionBuilder[OrgRestoreMemberAuditEntry, Option[Int]] =
      Field("restoredIssueAssignmentsCount", OptionOf(Scalar()))

    /**
     * Restored organization membership objects.
     */
    def restoredMemberships[A](
                                onOrgRestoreMemberMembershipOrganizationAuditEntryData: SelectionBuilder[
                                  OrgRestoreMemberMembershipOrganizationAuditEntryData,
                                  A
                                ],
                                onOrgRestoreMemberMembershipRepositoryAuditEntryData: SelectionBuilder[
                                  OrgRestoreMemberMembershipRepositoryAuditEntryData,
                                  A
                                ],
                                onOrgRestoreMemberMembershipTeamAuditEntryData: SelectionBuilder[
                                  OrgRestoreMemberMembershipTeamAuditEntryData,
                                  A
                                ]
                              ): SelectionBuilder[OrgRestoreMemberAuditEntry, Option[List[A]]] =
      Field(
        "restoredMemberships",
        OptionOf(
          ListOf(
            ChoiceOf(
              Map(
                "OrgRestoreMemberMembershipOrganizationAuditEntryData" -> Obj(
                  onOrgRestoreMemberMembershipOrganizationAuditEntryData
                ),
                "OrgRestoreMemberMembershipRepositoryAuditEntryData" -> Obj(
                  onOrgRestoreMemberMembershipRepositoryAuditEntryData
                ),
                "OrgRestoreMemberMembershipTeamAuditEntryData" -> Obj(
                  onOrgRestoreMemberMembershipTeamAuditEntryData
                )
              )
            )
          )
        )
      )

    /**
     * The number of restored memberships.
     */
    def restoredMembershipsCount
    : SelectionBuilder[OrgRestoreMemberAuditEntry, Option[Int]] =
      Field("restoredMembershipsCount", OptionOf(Scalar()))

    /**
     * The number of repositories of the restored member.
     */
    def restoredRepositoriesCount
    : SelectionBuilder[OrgRestoreMemberAuditEntry, Option[Int]] =
      Field("restoredRepositoriesCount", OptionOf(Scalar()))

    /**
     * The number of starred repositories for the restored member.
     */
    def restoredRepositoryStarsCount
    : SelectionBuilder[OrgRestoreMemberAuditEntry, Option[Int]] =
      Field("restoredRepositoryStarsCount", OptionOf(Scalar()))

    /**
     * The number of watched repositories for the restored member.
     */
    def restoredRepositoryWatchesCount
    : SelectionBuilder[OrgRestoreMemberAuditEntry, Option[Int]] =
      Field("restoredRepositoryWatchesCount", OptionOf(Scalar()))

    /**
     * The user affected by the action
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[OrgRestoreMemberAuditEntry, Option[A]] =
      Field("user", OptionOf(Obj(innerSelection)))

    /**
     * For actions involving two users, the actor is the initiator and the user is the affected user.
     */
    def userLogin
    : SelectionBuilder[OrgRestoreMemberAuditEntry, Option[String]] =
      Field("userLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the user.
     */
    def userResourcePath
    : SelectionBuilder[OrgRestoreMemberAuditEntry, Option[URI]] =
      Field("userResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the user.
     */
    def userUrl: SelectionBuilder[OrgRestoreMemberAuditEntry, Option[URI]] =
      Field("userUrl", OptionOf(Scalar()))
  }

  type OrgRestoreMemberMembershipOrganizationAuditEntryData

  object OrgRestoreMemberMembershipOrganizationAuditEntryData {

    /**
     * The Organization associated with the Audit Entry.
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[
      OrgRestoreMemberMembershipOrganizationAuditEntryData,
      Option[A]
    ] = Field("organization", OptionOf(Obj(innerSelection)))

    /**
     * The name of the Organization.
     */
    def organizationName: SelectionBuilder[
      OrgRestoreMemberMembershipOrganizationAuditEntryData,
      Option[String]
    ] = Field("organizationName", OptionOf(Scalar()))

    /**
     * The HTTP path for the organization
     */
    def organizationResourcePath: SelectionBuilder[
      OrgRestoreMemberMembershipOrganizationAuditEntryData,
      Option[URI]
    ] = Field("organizationResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the organization
     */
    def organizationUrl: SelectionBuilder[
      OrgRestoreMemberMembershipOrganizationAuditEntryData,
      Option[URI]
    ] = Field("organizationUrl", OptionOf(Scalar()))
  }

  type OrgRestoreMemberMembershipRepositoryAuditEntryData

  object OrgRestoreMemberMembershipRepositoryAuditEntryData {

    /**
     * The repository associated with the action
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[
      OrgRestoreMemberMembershipRepositoryAuditEntryData,
      Option[A]
    ] = Field("repository", OptionOf(Obj(innerSelection)))

    /**
     * The name of the repository
     */
    def repositoryName: SelectionBuilder[
      OrgRestoreMemberMembershipRepositoryAuditEntryData,
      Option[String]
    ] = Field("repositoryName", OptionOf(Scalar()))

    /**
     * The HTTP path for the repository
     */
    def repositoryResourcePath: SelectionBuilder[
      OrgRestoreMemberMembershipRepositoryAuditEntryData,
      Option[URI]
    ] = Field("repositoryResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the repository
     */
    def repositoryUrl: SelectionBuilder[
      OrgRestoreMemberMembershipRepositoryAuditEntryData,
      Option[URI]
    ] = Field("repositoryUrl", OptionOf(Scalar()))
  }

  type OrgRestoreMemberMembershipTeamAuditEntryData

  object OrgRestoreMemberMembershipTeamAuditEntryData {

    /**
     * The team associated with the action
     */
    def team[A](
                 innerSelection: SelectionBuilder[Team, A]
               ): SelectionBuilder[OrgRestoreMemberMembershipTeamAuditEntryData, Option[
      A
    ]] = Field("team", OptionOf(Obj(innerSelection)))

    /**
     * The name of the team
     */
    def teamName
    : SelectionBuilder[OrgRestoreMemberMembershipTeamAuditEntryData, Option[
      String
    ]] = Field("teamName", OptionOf(Scalar()))

    /**
     * The HTTP path for this team
     */
    def teamResourcePath
    : SelectionBuilder[OrgRestoreMemberMembershipTeamAuditEntryData, Option[
      URI
    ]] = Field("teamResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for this team
     */
    def teamUrl
    : SelectionBuilder[OrgRestoreMemberMembershipTeamAuditEntryData, Option[
      URI
    ]] = Field("teamUrl", OptionOf(Scalar()))
  }

  type OrgUnblockUserAuditEntry

  object OrgUnblockUserAuditEntry {

    /**
     * The action name
     */
    def action: SelectionBuilder[OrgUnblockUserAuditEntry, String] =
      Field("action", Scalar())

    /**
     * The user who initiated the action
     */
    def actor[A](
                  onBot: SelectionBuilder[Bot, A],
                  onOrganization: SelectionBuilder[Organization, A],
                  onUser: SelectionBuilder[User, A]
                ): SelectionBuilder[OrgUnblockUserAuditEntry, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> Obj(onBot),
              "Organization" -> Obj(onOrganization),
              "User" -> Obj(onUser)
            )
          )
        )
      )

    /**
     * The IP address of the actor
     */
    def actorIp: SelectionBuilder[OrgUnblockUserAuditEntry, Option[String]] =
      Field("actorIp", OptionOf(Scalar()))

    /**
     * A readable representation of the actor's location
     */
    def actorLocation[A](
                          innerSelection: SelectionBuilder[ActorLocation, A]
                        ): SelectionBuilder[OrgUnblockUserAuditEntry, Option[A]] =
      Field("actorLocation", OptionOf(Obj(innerSelection)))

    /**
     * The username of the user who initiated the action
     */
    def actorLogin: SelectionBuilder[OrgUnblockUserAuditEntry, Option[String]] =
      Field("actorLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the actor.
     */
    def actorResourcePath
    : SelectionBuilder[OrgUnblockUserAuditEntry, Option[URI]] =
      Field("actorResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the actor.
     */
    def actorUrl: SelectionBuilder[OrgUnblockUserAuditEntry, Option[URI]] =
      Field("actorUrl", OptionOf(Scalar()))

    /**
     * The user being unblocked by the organization.
     */
    def blockedUser[A](
                        innerSelection: SelectionBuilder[User, A]
                      ): SelectionBuilder[OrgUnblockUserAuditEntry, Option[A]] =
      Field("blockedUser", OptionOf(Obj(innerSelection)))

    /**
     * The username of the blocked user.
     */
    def blockedUserName
    : SelectionBuilder[OrgUnblockUserAuditEntry, Option[String]] =
      Field("blockedUserName", OptionOf(Scalar()))

    /**
     * The HTTP path for the blocked user.
     */
    def blockedUserResourcePath
    : SelectionBuilder[OrgUnblockUserAuditEntry, Option[URI]] =
      Field("blockedUserResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the blocked user.
     */
    def blockedUserUrl
    : SelectionBuilder[OrgUnblockUserAuditEntry, Option[URI]] =
      Field("blockedUserUrl", OptionOf(Scalar()))

    /**
     * The time the action was initiated
     */
    def createdAt: SelectionBuilder[OrgUnblockUserAuditEntry, PreciseDateTime] =
      Field("createdAt", Scalar())

    def id: SelectionBuilder[OrgUnblockUserAuditEntry, String] =
      Field("id", Scalar())

    /**
     * The corresponding operation type for the action
     */
    def operationType
    : SelectionBuilder[OrgUnblockUserAuditEntry, Option[OperationType]] =
      Field("operationType", OptionOf(Scalar()))

    /**
     * The Organization associated with the Audit Entry.
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[OrgUnblockUserAuditEntry, Option[A]] =
      Field("organization", OptionOf(Obj(innerSelection)))

    /**
     * The name of the Organization.
     */
    def organizationName
    : SelectionBuilder[OrgUnblockUserAuditEntry, Option[String]] =
      Field("organizationName", OptionOf(Scalar()))

    /**
     * The HTTP path for the organization
     */
    def organizationResourcePath
    : SelectionBuilder[OrgUnblockUserAuditEntry, Option[URI]] =
      Field("organizationResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the organization
     */
    def organizationUrl
    : SelectionBuilder[OrgUnblockUserAuditEntry, Option[URI]] =
      Field("organizationUrl", OptionOf(Scalar()))

    /**
     * The user affected by the action
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[OrgUnblockUserAuditEntry, Option[A]] =
      Field("user", OptionOf(Obj(innerSelection)))

    /**
     * For actions involving two users, the actor is the initiator and the user is the affected user.
     */
    def userLogin: SelectionBuilder[OrgUnblockUserAuditEntry, Option[String]] =
      Field("userLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the user.
     */
    def userResourcePath
    : SelectionBuilder[OrgUnblockUserAuditEntry, Option[URI]] =
      Field("userResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the user.
     */
    def userUrl: SelectionBuilder[OrgUnblockUserAuditEntry, Option[URI]] =
      Field("userUrl", OptionOf(Scalar()))
  }

  type OrgUpdateDefaultRepositoryPermissionAuditEntry

  object OrgUpdateDefaultRepositoryPermissionAuditEntry {

    /**
     * The action name
     */
    def action: SelectionBuilder[
      OrgUpdateDefaultRepositoryPermissionAuditEntry,
      String
    ] = Field("action", Scalar())

    /**
     * The user who initiated the action
     */
    def actor[A](
                  onBot: SelectionBuilder[Bot, A],
                  onOrganization: SelectionBuilder[Organization, A],
                  onUser: SelectionBuilder[User, A]
                ): SelectionBuilder[OrgUpdateDefaultRepositoryPermissionAuditEntry, Option[
      A
    ]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> Obj(onBot),
              "Organization" -> Obj(onOrganization),
              "User" -> Obj(onUser)
            )
          )
        )
      )

    /**
     * The IP address of the actor
     */
    def actorIp: SelectionBuilder[
      OrgUpdateDefaultRepositoryPermissionAuditEntry,
      Option[String]
    ] = Field("actorIp", OptionOf(Scalar()))

    /**
     * A readable representation of the actor's location
     */
    def actorLocation[A](
                          innerSelection: SelectionBuilder[ActorLocation, A]
                        ): SelectionBuilder[OrgUpdateDefaultRepositoryPermissionAuditEntry, Option[
      A
    ]] = Field("actorLocation", OptionOf(Obj(innerSelection)))

    /**
     * The username of the user who initiated the action
     */
    def actorLogin: SelectionBuilder[
      OrgUpdateDefaultRepositoryPermissionAuditEntry,
      Option[String]
    ] = Field("actorLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the actor.
     */
    def actorResourcePath: SelectionBuilder[
      OrgUpdateDefaultRepositoryPermissionAuditEntry,
      Option[URI]
    ] = Field("actorResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the actor.
     */
    def actorUrl: SelectionBuilder[
      OrgUpdateDefaultRepositoryPermissionAuditEntry,
      Option[URI]
    ] = Field("actorUrl", OptionOf(Scalar()))

    /**
     * The time the action was initiated
     */
    def createdAt: SelectionBuilder[
      OrgUpdateDefaultRepositoryPermissionAuditEntry,
      PreciseDateTime
    ] = Field("createdAt", Scalar())

    def id: SelectionBuilder[
      OrgUpdateDefaultRepositoryPermissionAuditEntry,
      String
    ] = Field("id", Scalar())

    /**
     * The corresponding operation type for the action
     */
    def operationType: SelectionBuilder[
      OrgUpdateDefaultRepositoryPermissionAuditEntry,
      Option[OperationType]
    ] = Field("operationType", OptionOf(Scalar()))

    /**
     * The Organization associated with the Audit Entry.
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[OrgUpdateDefaultRepositoryPermissionAuditEntry, Option[
      A
    ]] = Field("organization", OptionOf(Obj(innerSelection)))

    /**
     * The name of the Organization.
     */
    def organizationName: SelectionBuilder[
      OrgUpdateDefaultRepositoryPermissionAuditEntry,
      Option[String]
    ] = Field("organizationName", OptionOf(Scalar()))

    /**
     * The HTTP path for the organization
     */
    def organizationResourcePath: SelectionBuilder[
      OrgUpdateDefaultRepositoryPermissionAuditEntry,
      Option[URI]
    ] = Field("organizationResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the organization
     */
    def organizationUrl: SelectionBuilder[
      OrgUpdateDefaultRepositoryPermissionAuditEntry,
      Option[URI]
    ] = Field("organizationUrl", OptionOf(Scalar()))

    /**
     * The new default repository permission level for the organization.
     */
    def permission: SelectionBuilder[
      OrgUpdateDefaultRepositoryPermissionAuditEntry,
      Option[OrgUpdateDefaultRepositoryPermissionAuditEntryPermission]
    ] = Field("permission", OptionOf(Scalar()))

    /**
     * The former default repository permission level for the organization.
     */
    def permissionWas: SelectionBuilder[
      OrgUpdateDefaultRepositoryPermissionAuditEntry,
      Option[OrgUpdateDefaultRepositoryPermissionAuditEntryPermission]
    ] = Field("permissionWas", OptionOf(Scalar()))

    /**
     * The user affected by the action
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[OrgUpdateDefaultRepositoryPermissionAuditEntry, Option[
      A
    ]] = Field("user", OptionOf(Obj(innerSelection)))

    /**
     * For actions involving two users, the actor is the initiator and the user is the affected user.
     */
    def userLogin: SelectionBuilder[
      OrgUpdateDefaultRepositoryPermissionAuditEntry,
      Option[String]
    ] = Field("userLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the user.
     */
    def userResourcePath: SelectionBuilder[
      OrgUpdateDefaultRepositoryPermissionAuditEntry,
      Option[URI]
    ] = Field("userResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the user.
     */
    def userUrl: SelectionBuilder[
      OrgUpdateDefaultRepositoryPermissionAuditEntry,
      Option[URI]
    ] = Field("userUrl", OptionOf(Scalar()))
  }

  type OrgUpdateMemberAuditEntry

  object OrgUpdateMemberAuditEntry {

    /**
     * The action name
     */
    def action: SelectionBuilder[OrgUpdateMemberAuditEntry, String] =
      Field("action", Scalar())

    /**
     * The user who initiated the action
     */
    def actor[A](
                  onBot: SelectionBuilder[Bot, A],
                  onOrganization: SelectionBuilder[Organization, A],
                  onUser: SelectionBuilder[User, A]
                ): SelectionBuilder[OrgUpdateMemberAuditEntry, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> Obj(onBot),
              "Organization" -> Obj(onOrganization),
              "User" -> Obj(onUser)
            )
          )
        )
      )

    /**
     * The IP address of the actor
     */
    def actorIp: SelectionBuilder[OrgUpdateMemberAuditEntry, Option[String]] =
      Field("actorIp", OptionOf(Scalar()))

    /**
     * A readable representation of the actor's location
     */
    def actorLocation[A](
                          innerSelection: SelectionBuilder[ActorLocation, A]
                        ): SelectionBuilder[OrgUpdateMemberAuditEntry, Option[A]] =
      Field("actorLocation", OptionOf(Obj(innerSelection)))

    /**
     * The username of the user who initiated the action
     */
    def actorLogin
    : SelectionBuilder[OrgUpdateMemberAuditEntry, Option[String]] =
      Field("actorLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the actor.
     */
    def actorResourcePath
    : SelectionBuilder[OrgUpdateMemberAuditEntry, Option[URI]] =
      Field("actorResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the actor.
     */
    def actorUrl: SelectionBuilder[OrgUpdateMemberAuditEntry, Option[URI]] =
      Field("actorUrl", OptionOf(Scalar()))

    /**
     * The time the action was initiated
     */
    def createdAt
    : SelectionBuilder[OrgUpdateMemberAuditEntry, PreciseDateTime] =
      Field("createdAt", Scalar())

    def id: SelectionBuilder[OrgUpdateMemberAuditEntry, String] =
      Field("id", Scalar())

    /**
     * The corresponding operation type for the action
     */
    def operationType
    : SelectionBuilder[OrgUpdateMemberAuditEntry, Option[OperationType]] =
      Field("operationType", OptionOf(Scalar()))

    /**
     * The Organization associated with the Audit Entry.
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[OrgUpdateMemberAuditEntry, Option[A]] =
      Field("organization", OptionOf(Obj(innerSelection)))

    /**
     * The name of the Organization.
     */
    def organizationName
    : SelectionBuilder[OrgUpdateMemberAuditEntry, Option[String]] =
      Field("organizationName", OptionOf(Scalar()))

    /**
     * The HTTP path for the organization
     */
    def organizationResourcePath
    : SelectionBuilder[OrgUpdateMemberAuditEntry, Option[URI]] =
      Field("organizationResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the organization
     */
    def organizationUrl
    : SelectionBuilder[OrgUpdateMemberAuditEntry, Option[URI]] =
      Field("organizationUrl", OptionOf(Scalar()))

    /**
     * The new member permission level for the organization.
     */
    def permission: SelectionBuilder[OrgUpdateMemberAuditEntry, Option[
      OrgUpdateMemberAuditEntryPermission
    ]] = Field("permission", OptionOf(Scalar()))

    /**
     * The former member permission level for the organization.
     */
    def permissionWas: SelectionBuilder[OrgUpdateMemberAuditEntry, Option[
      OrgUpdateMemberAuditEntryPermission
    ]] = Field("permissionWas", OptionOf(Scalar()))

    /**
     * The user affected by the action
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[OrgUpdateMemberAuditEntry, Option[A]] =
      Field("user", OptionOf(Obj(innerSelection)))

    /**
     * For actions involving two users, the actor is the initiator and the user is the affected user.
     */
    def userLogin: SelectionBuilder[OrgUpdateMemberAuditEntry, Option[String]] =
      Field("userLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the user.
     */
    def userResourcePath
    : SelectionBuilder[OrgUpdateMemberAuditEntry, Option[URI]] =
      Field("userResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the user.
     */
    def userUrl: SelectionBuilder[OrgUpdateMemberAuditEntry, Option[URI]] =
      Field("userUrl", OptionOf(Scalar()))
  }

  type OrgUpdateMemberRepositoryCreationPermissionAuditEntry

  object OrgUpdateMemberRepositoryCreationPermissionAuditEntry {

    /**
     * The action name
     */
    def action: SelectionBuilder[
      OrgUpdateMemberRepositoryCreationPermissionAuditEntry,
      String
    ] = Field("action", Scalar())

    /**
     * The user who initiated the action
     */
    def actor[A](
                  onBot: SelectionBuilder[Bot, A],
                  onOrganization: SelectionBuilder[Organization, A],
                  onUser: SelectionBuilder[User, A]
                ): SelectionBuilder[
      OrgUpdateMemberRepositoryCreationPermissionAuditEntry,
      Option[A]
    ] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> Obj(onBot),
              "Organization" -> Obj(onOrganization),
              "User" -> Obj(onUser)
            )
          )
        )
      )

    /**
     * The IP address of the actor
     */
    def actorIp: SelectionBuilder[
      OrgUpdateMemberRepositoryCreationPermissionAuditEntry,
      Option[String]
    ] = Field("actorIp", OptionOf(Scalar()))

    /**
     * A readable representation of the actor's location
     */
    def actorLocation[A](
                          innerSelection: SelectionBuilder[ActorLocation, A]
                        ): SelectionBuilder[
      OrgUpdateMemberRepositoryCreationPermissionAuditEntry,
      Option[A]
    ] = Field("actorLocation", OptionOf(Obj(innerSelection)))

    /**
     * The username of the user who initiated the action
     */
    def actorLogin: SelectionBuilder[
      OrgUpdateMemberRepositoryCreationPermissionAuditEntry,
      Option[String]
    ] = Field("actorLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the actor.
     */
    def actorResourcePath: SelectionBuilder[
      OrgUpdateMemberRepositoryCreationPermissionAuditEntry,
      Option[URI]
    ] = Field("actorResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the actor.
     */
    def actorUrl: SelectionBuilder[
      OrgUpdateMemberRepositoryCreationPermissionAuditEntry,
      Option[URI]
    ] = Field("actorUrl", OptionOf(Scalar()))

    /**
     * Can members create repositories in the organization.
     */
    def canCreateRepositories: SelectionBuilder[
      OrgUpdateMemberRepositoryCreationPermissionAuditEntry,
      Option[Boolean]
    ] = Field("canCreateRepositories", OptionOf(Scalar()))

    /**
     * The time the action was initiated
     */
    def createdAt: SelectionBuilder[
      OrgUpdateMemberRepositoryCreationPermissionAuditEntry,
      PreciseDateTime
    ] = Field("createdAt", Scalar())

    def id: SelectionBuilder[
      OrgUpdateMemberRepositoryCreationPermissionAuditEntry,
      String
    ] = Field("id", Scalar())

    /**
     * The corresponding operation type for the action
     */
    def operationType: SelectionBuilder[
      OrgUpdateMemberRepositoryCreationPermissionAuditEntry,
      Option[OperationType]
    ] = Field("operationType", OptionOf(Scalar()))

    /**
     * The Organization associated with the Audit Entry.
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[
      OrgUpdateMemberRepositoryCreationPermissionAuditEntry,
      Option[A]
    ] = Field("organization", OptionOf(Obj(innerSelection)))

    /**
     * The name of the Organization.
     */
    def organizationName: SelectionBuilder[
      OrgUpdateMemberRepositoryCreationPermissionAuditEntry,
      Option[String]
    ] = Field("organizationName", OptionOf(Scalar()))

    /**
     * The HTTP path for the organization
     */
    def organizationResourcePath: SelectionBuilder[
      OrgUpdateMemberRepositoryCreationPermissionAuditEntry,
      Option[URI]
    ] = Field("organizationResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the organization
     */
    def organizationUrl: SelectionBuilder[
      OrgUpdateMemberRepositoryCreationPermissionAuditEntry,
      Option[URI]
    ] = Field("organizationUrl", OptionOf(Scalar()))

    /**
     * The user affected by the action
     */
    def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[
      OrgUpdateMemberRepositoryCreationPermissionAuditEntry,
      Option[A]
    ] = Field("user", OptionOf(Obj(innerSelection)))

    /**
     * For actions involving two users, the actor is the initiator and the user is the affected user.
     */
    def userLogin: SelectionBuilder[
      OrgUpdateMemberRepositoryCreationPermissionAuditEntry,
      Option[String]
    ] = Field("userLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the user.
     */
    def userResourcePath: SelectionBuilder[
      OrgUpdateMemberRepositoryCreationPermissionAuditEntry,
      Option[URI]
    ] = Field("userResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the user.
     */
    def userUrl: SelectionBuilder[
      OrgUpdateMemberRepositoryCreationPermissionAuditEntry,
      Option[URI]
    ] = Field("userUrl", OptionOf(Scalar()))

    /**
     * The permission for visibility level of repositories for this organization.
     */
    def visibility: SelectionBuilder[
      OrgUpdateMemberRepositoryCreationPermissionAuditEntry,
      Option[OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility]
    ] = Field("visibility", OptionOf(Scalar()))
  }

  type OrgUpdateMemberRepositoryInvitationPermissionAuditEntry

  object OrgUpdateMemberRepositoryInvitationPermissionAuditEntry {

    /**
     * The action name
     */
    def action: SelectionBuilder[
      OrgUpdateMemberRepositoryInvitationPermissionAuditEntry,
      String
    ] = Field("action", Scalar())

    /**
     * The user who initiated the action
     */
    def actor[A](
                  onBot: SelectionBuilder[Bot, A],
                  onOrganization: SelectionBuilder[Organization, A],
                  onUser: SelectionBuilder[User, A]
                ): SelectionBuilder[
      OrgUpdateMemberRepositoryInvitationPermissionAuditEntry,
      Option[A]
    ] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> Obj(onBot),
              "Organization" -> Obj(onOrganization),
              "User" -> Obj(onUser)
            )
          )
        )
      )

    /**
     * The IP address of the actor
     */
    def actorIp: SelectionBuilder[
      OrgUpdateMemberRepositoryInvitationPermissionAuditEntry,
      Option[String]
    ] = Field("actorIp", OptionOf(Scalar()))

    /**
     * A readable representation of the actor's location
     */
    def actorLocation[A](
                          innerSelection: SelectionBuilder[ActorLocation, A]
                        ): SelectionBuilder[
      OrgUpdateMemberRepositoryInvitationPermissionAuditEntry,
      Option[A]
    ] = Field("actorLocation", OptionOf(Obj(innerSelection)))

    /**
     * The username of the user who initiated the action
     */
    def actorLogin: SelectionBuilder[
      OrgUpdateMemberRepositoryInvitationPermissionAuditEntry,
      Option[String]
    ] = Field("actorLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the actor.
     */
    def actorResourcePath: SelectionBuilder[
      OrgUpdateMemberRepositoryInvitationPermissionAuditEntry,
      Option[URI]
    ] = Field("actorResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the actor.
     */
    def actorUrl: SelectionBuilder[
      OrgUpdateMemberRepositoryInvitationPermissionAuditEntry,
      Option[URI]
    ] = Field("actorUrl", OptionOf(Scalar()))

    /**
     * Can outside collaborators be invited to repositories in the organization.
     */
    def canInviteOutsideCollaboratorsToRepositories: SelectionBuilder[
      OrgUpdateMemberRepositoryInvitationPermissionAuditEntry,
      Option[Boolean]
    ] = Field("canInviteOutsideCollaboratorsToRepositories", OptionOf(Scalar()))

    /**
     * The time the action was initiated
     */
    def createdAt: SelectionBuilder[
      OrgUpdateMemberRepositoryInvitationPermissionAuditEntry,
      PreciseDateTime
    ] = Field("createdAt", Scalar())

    def id: SelectionBuilder[
      OrgUpdateMemberRepositoryInvitationPermissionAuditEntry,
      String
    ] = Field("id", Scalar())

    /**
     * The corresponding operation type for the action
     */
    def operationType: SelectionBuilder[
      OrgUpdateMemberRepositoryInvitationPermissionAuditEntry,
      Option[OperationType]
    ] = Field("operationType", OptionOf(Scalar()))

    /**
     * The Organization associated with the Audit Entry.
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[
      OrgUpdateMemberRepositoryInvitationPermissionAuditEntry,
      Option[A]
    ] = Field("organization", OptionOf(Obj(innerSelection)))

    /**
     * The name of the Organization.
     */
    def organizationName: SelectionBuilder[
      OrgUpdateMemberRepositoryInvitationPermissionAuditEntry,
      Option[String]
    ] = Field("organizationName", OptionOf(Scalar()))

    /**
     * The HTTP path for the organization
     */
    def organizationResourcePath: SelectionBuilder[
      OrgUpdateMemberRepositoryInvitationPermissionAuditEntry,
      Option[URI]
    ] = Field("organizationResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the organization
     */
    def organizationUrl: SelectionBuilder[
      OrgUpdateMemberRepositoryInvitationPermissionAuditEntry,
      Option[URI]
    ] = Field("organizationUrl", OptionOf(Scalar()))

    /**
     * The user affected by the action
     */
    def user[A](innerSelection: SelectionBuilder[User, A]): SelectionBuilder[
      OrgUpdateMemberRepositoryInvitationPermissionAuditEntry,
      Option[A]
    ] = Field("user", OptionOf(Obj(innerSelection)))

    /**
     * For actions involving two users, the actor is the initiator and the user is the affected user.
     */
    def userLogin: SelectionBuilder[
      OrgUpdateMemberRepositoryInvitationPermissionAuditEntry,
      Option[String]
    ] = Field("userLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the user.
     */
    def userResourcePath: SelectionBuilder[
      OrgUpdateMemberRepositoryInvitationPermissionAuditEntry,
      Option[URI]
    ] = Field("userResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the user.
     */
    def userUrl: SelectionBuilder[
      OrgUpdateMemberRepositoryInvitationPermissionAuditEntry,
      Option[URI]
    ] = Field("userUrl", OptionOf(Scalar()))
  }

  type Organization

  object Organization {

    /**
     * Determine if this repository owner has any items that can be pinned to their profile.
     */
    def anyPinnableItems(
                          `type`: Option[PinnableItemType] = None
                        ): SelectionBuilder[Organization, Boolean] =
      Field(
        "anyPinnableItems",
        Scalar(),
        arguments = List(Argument("type", `type`))
      )

    /**
     * Audit log entries of the organization
     */
    def auditLog[A](
                     after: Option[String] = None,
                     before: Option[String] = None,
                     first: Option[Int] = None,
                     last: Option[Int] = None,
                     orderBy: Option[AuditLogOrder] = None,
                     query: Option[String] = None
                   )(
                     innerSelection: SelectionBuilder[OrganizationAuditEntryConnection, A]
                   ): SelectionBuilder[Organization, A] =
      Field(
        "auditLog",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy),
          Argument("query", query)
        )
      )

    /**
     * A URL pointing to the organization's public avatar.
     */
    def avatarUrl(
                   size: Option[Int] = None
                 ): SelectionBuilder[Organization, URI] =
      Field("avatarUrl", Scalar(), arguments = List(Argument("size", size)))

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[Organization, DateTime] =
      Field("createdAt", Scalar())

    /**
     * Identifies the primary key from the database.
     */
    def databaseId: SelectionBuilder[Organization, Option[Int]] =
      Field("databaseId", OptionOf(Scalar()))

    /**
     * The organization's public profile description.
     */
    def description: SelectionBuilder[Organization, Option[String]] =
      Field("description", OptionOf(Scalar()))

    /**
     * The organization's public profile description rendered to HTML.
     */
    def descriptionHTML: SelectionBuilder[Organization, Option[String]] =
      Field("descriptionHTML", OptionOf(Scalar()))

    /**
     * The organization's public email.
     */
    def email: SelectionBuilder[Organization, Option[String]] =
      Field("email", OptionOf(Scalar()))

    def id: SelectionBuilder[Organization, String] = Field("id", Scalar())

    /**
     * The setting value for whether the organization has an IP allow list enabled.
     */
    def ipAllowListEnabledSetting
    : SelectionBuilder[Organization, IpAllowListEnabledSettingValue] =
      Field("ipAllowListEnabledSetting", Scalar())

    /**
     * The IP addresses that are allowed to access resources owned by the organization.
     */
    def ipAllowListEntries[A](
                               after: Option[String] = None,
                               before: Option[String] = None,
                               first: Option[Int] = None,
                               last: Option[Int] = None,
                               orderBy: Option[IpAllowListEntryOrder] = None
                             )(
                               innerSelection: SelectionBuilder[IpAllowListEntryConnection, A]
                             ): SelectionBuilder[Organization, A] =
      Field(
        "ipAllowListEntries",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy)
        )
      )

    /**
     * Whether the organization has verified its profile email and website.
     */
    def isVerified: SelectionBuilder[Organization, Boolean] =
      Field("isVerified", Scalar())

    /**
     * Showcases a selection of repositories and gists that the profile owner has
     * either curated or that have been selected automatically based on popularity.
     */
    def itemShowcase[A](
                         innerSelection: SelectionBuilder[ProfileItemShowcase, A]
                       ): SelectionBuilder[Organization, A] =
      Field("itemShowcase", Obj(innerSelection))

    /**
     * The organization's public profile location.
     */
    def location: SelectionBuilder[Organization, Option[String]] =
      Field("location", OptionOf(Scalar()))

    /**
     * The organization's login name.
     */
    def login: SelectionBuilder[Organization, String] = Field("login", Scalar())

    /**
     * Get the status messages members of this entity have set that are either public or visible only to the organization.
     */
    def memberStatuses[A](
                           after: Option[String] = None,
                           before: Option[String] = None,
                           first: Option[Int] = None,
                           last: Option[Int] = None,
                           orderBy: Option[UserStatusOrder] = None
                         )(
                           innerSelection: SelectionBuilder[UserStatusConnection, A]
                         ): SelectionBuilder[Organization, A] =
      Field(
        "memberStatuses",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy)
        )
      )

    /**
     * A list of users who are members of this organization.
     */
    def membersWithRole[A](
                            after: Option[String] = None,
                            before: Option[String] = None,
                            first: Option[Int] = None,
                            last: Option[Int] = None
                          )(
                            innerSelection: SelectionBuilder[OrganizationMemberConnection, A]
                          ): SelectionBuilder[Organization, A] =
      Field(
        "membersWithRole",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )

    /**
     * The organization's public profile name.
     */
    def name: SelectionBuilder[Organization, Option[String]] =
      Field("name", OptionOf(Scalar()))

    /**
     * The HTTP path creating a new team
     */
    def newTeamResourcePath: SelectionBuilder[Organization, URI] =
      Field("newTeamResourcePath", Scalar())

    /**
     * The HTTP URL creating a new team
     */
    def newTeamUrl: SelectionBuilder[Organization, URI] =
      Field("newTeamUrl", Scalar())

    /**
     * The billing email for the organization.
     */
    def organizationBillingEmail
    : SelectionBuilder[Organization, Option[String]] =
      Field("organizationBillingEmail", OptionOf(Scalar()))

    /**
     * A list of packages under the owner.
     */
    def packages[A](
                     after: Option[String] = None,
                     before: Option[String] = None,
                     first: Option[Int] = None,
                     last: Option[Int] = None,
                     names: Option[List[Option[String]]] = None,
                     orderBy: Option[PackageOrder] = None,
                     packageType: Option[PackageType] = None,
                     repositoryId: Option[String] = None
                   )(
                     innerSelection: SelectionBuilder[PackageConnection, A]
                   ): SelectionBuilder[Organization, A] =
      Field(
        "packages",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("names", names),
          Argument("orderBy", orderBy),
          Argument("packageType", packageType),
          Argument("repositoryId", repositoryId)
        )
      )

    /**
     * A list of users who have been invited to join this organization.
     */
    def pendingMembers[A](
                           after: Option[String] = None,
                           before: Option[String] = None,
                           first: Option[Int] = None,
                           last: Option[Int] = None
                         )(
                           innerSelection: SelectionBuilder[UserConnection, A]
                         ): SelectionBuilder[Organization, A] =
      Field(
        "pendingMembers",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )

    /**
     * A list of repositories and gists this profile owner can pin to their profile.
     */
    def pinnableItems[A](
                          after: Option[String] = None,
                          before: Option[String] = None,
                          first: Option[Int] = None,
                          last: Option[Int] = None,
                          types: Option[List[PinnableItemType]] = None
                        )(
                          innerSelection: SelectionBuilder[PinnableItemConnection, A]
                        ): SelectionBuilder[Organization, A] =
      Field(
        "pinnableItems",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("types", types)
        )
      )

    /**
     * A list of repositories and gists this profile owner has pinned to their profile
     */
    def pinnedItems[A](
                        after: Option[String] = None,
                        before: Option[String] = None,
                        first: Option[Int] = None,
                        last: Option[Int] = None,
                        types: Option[List[PinnableItemType]] = None
                      )(
                        innerSelection: SelectionBuilder[PinnableItemConnection, A]
                      ): SelectionBuilder[Organization, A] =
      Field(
        "pinnedItems",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("types", types)
        )
      )

    /**
     * Returns how many more items this profile owner can pin to their profile.
     */
    def pinnedItemsRemaining: SelectionBuilder[Organization, Int] =
      Field("pinnedItemsRemaining", Scalar())

    /**
     * Find project by number.
     */
    def project[A](number: Int)(
      innerSelection: SelectionBuilder[Project, A]
    ): SelectionBuilder[Organization, Option[A]] =
      Field(
        "project",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("number", number))
      )

    /**
     * A list of projects under the owner.
     */
    def projects[A](
                     after: Option[String] = None,
                     before: Option[String] = None,
                     first: Option[Int] = None,
                     last: Option[Int] = None,
                     orderBy: Option[ProjectOrder] = None,
                     search: Option[String] = None,
                     states: Option[List[ProjectState]] = None
                   )(
                     innerSelection: SelectionBuilder[ProjectConnection, A]
                   ): SelectionBuilder[Organization, A] =
      Field(
        "projects",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy),
          Argument("search", search),
          Argument("states", states)
        )
      )

    /**
     * The HTTP path listing organization's projects
     */
    def projectsResourcePath: SelectionBuilder[Organization, URI] =
      Field("projectsResourcePath", Scalar())

    /**
     * The HTTP URL listing organization's projects
     */
    def projectsUrl: SelectionBuilder[Organization, URI] =
      Field("projectsUrl", Scalar())

    /**
     * A list of repositories that the user owns.
     */
    def repositories[A](
                         affiliations: Option[List[Option[RepositoryAffiliation]]] = None,
                         after: Option[String] = None,
                         before: Option[String] = None,
                         first: Option[Int] = None,
                         isFork: Option[Boolean] = None,
                         isLocked: Option[Boolean] = None,
                         last: Option[Int] = None,
                         orderBy: Option[RepositoryOrder] = None,
                         ownerAffiliations: Option[List[Option[RepositoryAffiliation]]] = None,
                         privacy: Option[RepositoryPrivacy] = None
                       )(
                         innerSelection: SelectionBuilder[RepositoryConnection, A]
                       ): SelectionBuilder[Organization, A] =
      Field(
        "repositories",
        Obj(innerSelection),
        arguments = List(
          Argument("affiliations", affiliations),
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("isFork", isFork),
          Argument("isLocked", isLocked),
          Argument("last", last),
          Argument("orderBy", orderBy),
          Argument("ownerAffiliations", ownerAffiliations),
          Argument("privacy", privacy)
        )
      )

    /**
     * Find Repository.
     */
    def repository[A](name: String)(
      innerSelection: SelectionBuilder[Repository, A]
    ): SelectionBuilder[Organization, Option[A]] =
      Field(
        "repository",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("name", name))
      )

    /**
     * When true the organization requires all members, billing managers, and outside
     * collaborators to enable two-factor authentication.
     */
    def requiresTwoFactorAuthentication
    : SelectionBuilder[Organization, Option[Boolean]] =
      Field("requiresTwoFactorAuthentication", OptionOf(Scalar()))

    /**
     * The HTTP path for this organization.
     */
    def resourcePath: SelectionBuilder[Organization, URI] =
      Field("resourcePath", Scalar())

    /**
     * The Organization's SAML identity providers
     */
    def samlIdentityProvider[A](
                                 innerSelection: SelectionBuilder[OrganizationIdentityProvider, A]
                               ): SelectionBuilder[Organization, Option[A]] =
      Field("samlIdentityProvider", OptionOf(Obj(innerSelection)))

    /**
     * The GitHub Sponsors listing for this user.
     */
    def sponsorsListing[A](
                            innerSelection: SelectionBuilder[SponsorsListing, A]
                          ): SelectionBuilder[Organization, Option[A]] =
      Field("sponsorsListing", OptionOf(Obj(innerSelection)))

    /**
     * This object's sponsorships as the maintainer.
     */
    def sponsorshipsAsMaintainer[A](
                                     after: Option[String] = None,
                                     before: Option[String] = None,
                                     first: Option[Int] = None,
                                     includePrivate: Option[Boolean] = None,
                                     last: Option[Int] = None,
                                     orderBy: Option[SponsorshipOrder] = None
                                   )(
                                     innerSelection: SelectionBuilder[SponsorshipConnection, A]
                                   ): SelectionBuilder[Organization, A] =
      Field(
        "sponsorshipsAsMaintainer",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("includePrivate", includePrivate),
          Argument("last", last),
          Argument("orderBy", orderBy)
        )
      )

    /**
     * This object's sponsorships as the sponsor.
     */
    def sponsorshipsAsSponsor[A](
                                  after: Option[String] = None,
                                  before: Option[String] = None,
                                  first: Option[Int] = None,
                                  last: Option[Int] = None,
                                  orderBy: Option[SponsorshipOrder] = None
                                )(
                                  innerSelection: SelectionBuilder[SponsorshipConnection, A]
                                ): SelectionBuilder[Organization, A] =
      Field(
        "sponsorshipsAsSponsor",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy)
        )
      )

    /**
     * Find an organization's team by its slug.
     */
    def team[A](slug: String)(
      innerSelection: SelectionBuilder[Team, A]
    ): SelectionBuilder[Organization, Option[A]] =
      Field(
        "team",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("slug", slug))
      )

    /**
     * A list of teams in this organization.
     */
    def teams[A](
                  after: Option[String] = None,
                  before: Option[String] = None,
                  first: Option[Int] = None,
                  last: Option[Int] = None,
                  ldapMapped: Option[Boolean] = None,
                  orderBy: Option[TeamOrder] = None,
                  privacy: Option[TeamPrivacy] = None,
                  query: Option[String] = None,
                  role: Option[TeamRole] = None,
                  rootTeamsOnly: Option[Boolean] = None,
                  userLogins: Option[List[String]] = None
                )(
                  innerSelection: SelectionBuilder[TeamConnection, A]
                ): SelectionBuilder[Organization, A] =
      Field(
        "teams",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("ldapMapped", ldapMapped),
          Argument("orderBy", orderBy),
          Argument("privacy", privacy),
          Argument("query", query),
          Argument("role", role),
          Argument("rootTeamsOnly", rootTeamsOnly),
          Argument("userLogins", userLogins)
        )
      )

    /**
     * The HTTP path listing organization's teams
     */
    def teamsResourcePath: SelectionBuilder[Organization, URI] =
      Field("teamsResourcePath", Scalar())

    /**
     * The HTTP URL listing organization's teams
     */
    def teamsUrl: SelectionBuilder[Organization, URI] =
      Field("teamsUrl", Scalar())

    /**
     * The organization's Twitter username.
     */
    def twitterUsername: SelectionBuilder[Organization, Option[String]] =
      Field("twitterUsername", OptionOf(Scalar()))

    /**
     * Identifies the date and time when the object was last updated.
     */
    def updatedAt: SelectionBuilder[Organization, DateTime] =
      Field("updatedAt", Scalar())

    /**
     * The HTTP URL for this organization.
     */
    def url: SelectionBuilder[Organization, URI] = Field("url", Scalar())

    /**
     * Organization is adminable by the viewer.
     */
    def viewerCanAdminister: SelectionBuilder[Organization, Boolean] =
      Field("viewerCanAdminister", Scalar())

    /**
     * Can the viewer pin repositories and gists to the profile?
     */
    def viewerCanChangePinnedItems: SelectionBuilder[Organization, Boolean] =
      Field("viewerCanChangePinnedItems", Scalar())

    /**
     * Can the current viewer create new projects on this owner.
     */
    def viewerCanCreateProjects: SelectionBuilder[Organization, Boolean] =
      Field("viewerCanCreateProjects", Scalar())

    /**
     * Viewer can create repositories on this organization
     */
    def viewerCanCreateRepositories: SelectionBuilder[Organization, Boolean] =
      Field("viewerCanCreateRepositories", Scalar())

    /**
     * Viewer can create teams on this organization.
     */
    def viewerCanCreateTeams: SelectionBuilder[Organization, Boolean] =
      Field("viewerCanCreateTeams", Scalar())

    /**
     * Viewer is an active member of this organization.
     */
    def viewerIsAMember: SelectionBuilder[Organization, Boolean] =
      Field("viewerIsAMember", Scalar())

    /**
     * The organization's public profile URL.
     */
    def websiteUrl: SelectionBuilder[Organization, Option[URI]] =
      Field("websiteUrl", OptionOf(Scalar()))
  }

  type OrganizationAuditEntryConnection

  object OrganizationAuditEntryConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[OrganizationAuditEntryEdge, A]
                ): SelectionBuilder[OrganizationAuditEntryConnection, Option[
      List[Option[A]]
    ]] = Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  onMembersCanDeleteReposClearAuditEntry: SelectionBuilder[
                    MembersCanDeleteReposClearAuditEntry,
                    A
                  ],
                  onMembersCanDeleteReposDisableAuditEntry: SelectionBuilder[
                    MembersCanDeleteReposDisableAuditEntry,
                    A
                  ],
                  onMembersCanDeleteReposEnableAuditEntry: SelectionBuilder[
                    MembersCanDeleteReposEnableAuditEntry,
                    A
                  ],
                  onOauthApplicationCreateAuditEntry: SelectionBuilder[
                    OauthApplicationCreateAuditEntry,
                    A
                  ],
                  onOrgAddBillingManagerAuditEntry: SelectionBuilder[
                    OrgAddBillingManagerAuditEntry,
                    A
                  ],
                  onOrgAddMemberAuditEntry: SelectionBuilder[OrgAddMemberAuditEntry, A],
                  onOrgBlockUserAuditEntry: SelectionBuilder[OrgBlockUserAuditEntry, A],
                  onOrgConfigDisableCollaboratorsOnlyAuditEntry: SelectionBuilder[
                    OrgConfigDisableCollaboratorsOnlyAuditEntry,
                    A
                  ],
                  onOrgConfigEnableCollaboratorsOnlyAuditEntry: SelectionBuilder[
                    OrgConfigEnableCollaboratorsOnlyAuditEntry,
                    A
                  ],
                  onOrgCreateAuditEntry: SelectionBuilder[OrgCreateAuditEntry, A],
                  onOrgDisableOauthAppRestrictionsAuditEntry: SelectionBuilder[
                    OrgDisableOauthAppRestrictionsAuditEntry,
                    A
                  ],
                  onOrgDisableSamlAuditEntry: SelectionBuilder[
                    OrgDisableSamlAuditEntry,
                    A
                  ],
                  onOrgDisableTwoFactorRequirementAuditEntry: SelectionBuilder[
                    OrgDisableTwoFactorRequirementAuditEntry,
                    A
                  ],
                  onOrgEnableOauthAppRestrictionsAuditEntry: SelectionBuilder[
                    OrgEnableOauthAppRestrictionsAuditEntry,
                    A
                  ],
                  onOrgEnableSamlAuditEntry: SelectionBuilder[OrgEnableSamlAuditEntry, A],
                  onOrgEnableTwoFactorRequirementAuditEntry: SelectionBuilder[
                    OrgEnableTwoFactorRequirementAuditEntry,
                    A
                  ],
                  onOrgInviteMemberAuditEntry: SelectionBuilder[
                    OrgInviteMemberAuditEntry,
                    A
                  ],
                  onOrgInviteToBusinessAuditEntry: SelectionBuilder[
                    OrgInviteToBusinessAuditEntry,
                    A
                  ],
                  onOrgOauthAppAccessApprovedAuditEntry: SelectionBuilder[
                    OrgOauthAppAccessApprovedAuditEntry,
                    A
                  ],
                  onOrgOauthAppAccessDeniedAuditEntry: SelectionBuilder[
                    OrgOauthAppAccessDeniedAuditEntry,
                    A
                  ],
                  onOrgOauthAppAccessRequestedAuditEntry: SelectionBuilder[
                    OrgOauthAppAccessRequestedAuditEntry,
                    A
                  ],
                  onOrgRemoveBillingManagerAuditEntry: SelectionBuilder[
                    OrgRemoveBillingManagerAuditEntry,
                    A
                  ],
                  onOrgRemoveMemberAuditEntry: SelectionBuilder[
                    OrgRemoveMemberAuditEntry,
                    A
                  ],
                  onOrgRemoveOutsideCollaboratorAuditEntry: SelectionBuilder[
                    OrgRemoveOutsideCollaboratorAuditEntry,
                    A
                  ],
                  onOrgRestoreMemberAuditEntry: SelectionBuilder[
                    OrgRestoreMemberAuditEntry,
                    A
                  ],
                  onOrgUnblockUserAuditEntry: SelectionBuilder[
                    OrgUnblockUserAuditEntry,
                    A
                  ],
                  onOrgUpdateDefaultRepositoryPermissionAuditEntry: SelectionBuilder[
                    OrgUpdateDefaultRepositoryPermissionAuditEntry,
                    A
                  ],
                  onOrgUpdateMemberAuditEntry: SelectionBuilder[
                    OrgUpdateMemberAuditEntry,
                    A
                  ],
                  onOrgUpdateMemberRepositoryCreationPermissionAuditEntry: SelectionBuilder[
                    OrgUpdateMemberRepositoryCreationPermissionAuditEntry,
                    A
                  ],
                  onOrgUpdateMemberRepositoryInvitationPermissionAuditEntry: SelectionBuilder[
                    OrgUpdateMemberRepositoryInvitationPermissionAuditEntry,
                    A
                  ],
                  onPrivateRepositoryForkingDisableAuditEntry: SelectionBuilder[
                    PrivateRepositoryForkingDisableAuditEntry,
                    A
                  ],
                  onPrivateRepositoryForkingEnableAuditEntry: SelectionBuilder[
                    PrivateRepositoryForkingEnableAuditEntry,
                    A
                  ],
                  onRepoAccessAuditEntry: SelectionBuilder[RepoAccessAuditEntry, A],
                  onRepoAddMemberAuditEntry: SelectionBuilder[RepoAddMemberAuditEntry, A],
                  onRepoAddTopicAuditEntry: SelectionBuilder[RepoAddTopicAuditEntry, A],
                  onRepoArchivedAuditEntry: SelectionBuilder[RepoArchivedAuditEntry, A],
                  onRepoChangeMergeSettingAuditEntry: SelectionBuilder[
                    RepoChangeMergeSettingAuditEntry,
                    A
                  ],
                  onRepoConfigDisableAnonymousGitAccessAuditEntry: SelectionBuilder[
                    RepoConfigDisableAnonymousGitAccessAuditEntry,
                    A
                  ],
                  onRepoConfigDisableCollaboratorsOnlyAuditEntry: SelectionBuilder[
                    RepoConfigDisableCollaboratorsOnlyAuditEntry,
                    A
                  ],
                  onRepoConfigDisableContributorsOnlyAuditEntry: SelectionBuilder[
                    RepoConfigDisableContributorsOnlyAuditEntry,
                    A
                  ],
                  onRepoConfigDisableSockpuppetDisallowedAuditEntry: SelectionBuilder[
                    RepoConfigDisableSockpuppetDisallowedAuditEntry,
                    A
                  ],
                  onRepoConfigEnableAnonymousGitAccessAuditEntry: SelectionBuilder[
                    RepoConfigEnableAnonymousGitAccessAuditEntry,
                    A
                  ],
                  onRepoConfigEnableCollaboratorsOnlyAuditEntry: SelectionBuilder[
                    RepoConfigEnableCollaboratorsOnlyAuditEntry,
                    A
                  ],
                  onRepoConfigEnableContributorsOnlyAuditEntry: SelectionBuilder[
                    RepoConfigEnableContributorsOnlyAuditEntry,
                    A
                  ],
                  onRepoConfigEnableSockpuppetDisallowedAuditEntry: SelectionBuilder[
                    RepoConfigEnableSockpuppetDisallowedAuditEntry,
                    A
                  ],
                  onRepoConfigLockAnonymousGitAccessAuditEntry: SelectionBuilder[
                    RepoConfigLockAnonymousGitAccessAuditEntry,
                    A
                  ],
                  onRepoConfigUnlockAnonymousGitAccessAuditEntry: SelectionBuilder[
                    RepoConfigUnlockAnonymousGitAccessAuditEntry,
                    A
                  ],
                  onRepoCreateAuditEntry: SelectionBuilder[RepoCreateAuditEntry, A],
                  onRepoDestroyAuditEntry: SelectionBuilder[RepoDestroyAuditEntry, A],
                  onRepoRemoveMemberAuditEntry: SelectionBuilder[
                    RepoRemoveMemberAuditEntry,
                    A
                  ],
                  onRepoRemoveTopicAuditEntry: SelectionBuilder[
                    RepoRemoveTopicAuditEntry,
                    A
                  ],
                  onRepositoryVisibilityChangeDisableAuditEntry: SelectionBuilder[
                    RepositoryVisibilityChangeDisableAuditEntry,
                    A
                  ],
                  onRepositoryVisibilityChangeEnableAuditEntry: SelectionBuilder[
                    RepositoryVisibilityChangeEnableAuditEntry,
                    A
                  ],
                  onTeamAddMemberAuditEntry: SelectionBuilder[TeamAddMemberAuditEntry, A],
                  onTeamAddRepositoryAuditEntry: SelectionBuilder[
                    TeamAddRepositoryAuditEntry,
                    A
                  ],
                  onTeamChangeParentTeamAuditEntry: SelectionBuilder[
                    TeamChangeParentTeamAuditEntry,
                    A
                  ],
                  onTeamRemoveMemberAuditEntry: SelectionBuilder[
                    TeamRemoveMemberAuditEntry,
                    A
                  ],
                  onTeamRemoveRepositoryAuditEntry: SelectionBuilder[
                    TeamRemoveRepositoryAuditEntry,
                    A
                  ]
                ): SelectionBuilder[OrganizationAuditEntryConnection, Option[
      List[Option[A]]
    ]] =
      Field(
        "nodes",
        OptionOf(
          ListOf(
            OptionOf(
              ChoiceOf(
                Map(
                  "MembersCanDeleteReposClearAuditEntry" -> Obj(
                    onMembersCanDeleteReposClearAuditEntry
                  ),
                  "MembersCanDeleteReposDisableAuditEntry" -> Obj(
                    onMembersCanDeleteReposDisableAuditEntry
                  ),
                  "MembersCanDeleteReposEnableAuditEntry" -> Obj(
                    onMembersCanDeleteReposEnableAuditEntry
                  ),
                  "OauthApplicationCreateAuditEntry" -> Obj(
                    onOauthApplicationCreateAuditEntry
                  ),
                  "OrgAddBillingManagerAuditEntry" -> Obj(
                    onOrgAddBillingManagerAuditEntry
                  ),
                  "OrgAddMemberAuditEntry" -> Obj(onOrgAddMemberAuditEntry),
                  "OrgBlockUserAuditEntry" -> Obj(onOrgBlockUserAuditEntry),
                  "OrgConfigDisableCollaboratorsOnlyAuditEntry" -> Obj(
                    onOrgConfigDisableCollaboratorsOnlyAuditEntry
                  ),
                  "OrgConfigEnableCollaboratorsOnlyAuditEntry" -> Obj(
                    onOrgConfigEnableCollaboratorsOnlyAuditEntry
                  ),
                  "OrgCreateAuditEntry" -> Obj(onOrgCreateAuditEntry),
                  "OrgDisableOauthAppRestrictionsAuditEntry" -> Obj(
                    onOrgDisableOauthAppRestrictionsAuditEntry
                  ),
                  "OrgDisableSamlAuditEntry" -> Obj(onOrgDisableSamlAuditEntry),
                  "OrgDisableTwoFactorRequirementAuditEntry" -> Obj(
                    onOrgDisableTwoFactorRequirementAuditEntry
                  ),
                  "OrgEnableOauthAppRestrictionsAuditEntry" -> Obj(
                    onOrgEnableOauthAppRestrictionsAuditEntry
                  ),
                  "OrgEnableSamlAuditEntry" -> Obj(onOrgEnableSamlAuditEntry),
                  "OrgEnableTwoFactorRequirementAuditEntry" -> Obj(
                    onOrgEnableTwoFactorRequirementAuditEntry
                  ),
                  "OrgInviteMemberAuditEntry" -> Obj(
                    onOrgInviteMemberAuditEntry
                  ),
                  "OrgInviteToBusinessAuditEntry" -> Obj(
                    onOrgInviteToBusinessAuditEntry
                  ),
                  "OrgOauthAppAccessApprovedAuditEntry" -> Obj(
                    onOrgOauthAppAccessApprovedAuditEntry
                  ),
                  "OrgOauthAppAccessDeniedAuditEntry" -> Obj(
                    onOrgOauthAppAccessDeniedAuditEntry
                  ),
                  "OrgOauthAppAccessRequestedAuditEntry" -> Obj(
                    onOrgOauthAppAccessRequestedAuditEntry
                  ),
                  "OrgRemoveBillingManagerAuditEntry" -> Obj(
                    onOrgRemoveBillingManagerAuditEntry
                  ),
                  "OrgRemoveMemberAuditEntry" -> Obj(
                    onOrgRemoveMemberAuditEntry
                  ),
                  "OrgRemoveOutsideCollaboratorAuditEntry" -> Obj(
                    onOrgRemoveOutsideCollaboratorAuditEntry
                  ),
                  "OrgRestoreMemberAuditEntry" -> Obj(
                    onOrgRestoreMemberAuditEntry
                  ),
                  "OrgUnblockUserAuditEntry" -> Obj(onOrgUnblockUserAuditEntry),
                  "OrgUpdateDefaultRepositoryPermissionAuditEntry" -> Obj(
                    onOrgUpdateDefaultRepositoryPermissionAuditEntry
                  ),
                  "OrgUpdateMemberAuditEntry" -> Obj(
                    onOrgUpdateMemberAuditEntry
                  ),
                  "OrgUpdateMemberRepositoryCreationPermissionAuditEntry" -> Obj(
                    onOrgUpdateMemberRepositoryCreationPermissionAuditEntry
                  ),
                  "OrgUpdateMemberRepositoryInvitationPermissionAuditEntry" -> Obj(
                    onOrgUpdateMemberRepositoryInvitationPermissionAuditEntry
                  ),
                  "PrivateRepositoryForkingDisableAuditEntry" -> Obj(
                    onPrivateRepositoryForkingDisableAuditEntry
                  ),
                  "PrivateRepositoryForkingEnableAuditEntry" -> Obj(
                    onPrivateRepositoryForkingEnableAuditEntry
                  ),
                  "RepoAccessAuditEntry" -> Obj(onRepoAccessAuditEntry),
                  "RepoAddMemberAuditEntry" -> Obj(onRepoAddMemberAuditEntry),
                  "RepoAddTopicAuditEntry" -> Obj(onRepoAddTopicAuditEntry),
                  "RepoArchivedAuditEntry" -> Obj(onRepoArchivedAuditEntry),
                  "RepoChangeMergeSettingAuditEntry" -> Obj(
                    onRepoChangeMergeSettingAuditEntry
                  ),
                  "RepoConfigDisableAnonymousGitAccessAuditEntry" -> Obj(
                    onRepoConfigDisableAnonymousGitAccessAuditEntry
                  ),
                  "RepoConfigDisableCollaboratorsOnlyAuditEntry" -> Obj(
                    onRepoConfigDisableCollaboratorsOnlyAuditEntry
                  ),
                  "RepoConfigDisableContributorsOnlyAuditEntry" -> Obj(
                    onRepoConfigDisableContributorsOnlyAuditEntry
                  ),
                  "RepoConfigDisableSockpuppetDisallowedAuditEntry" -> Obj(
                    onRepoConfigDisableSockpuppetDisallowedAuditEntry
                  ),
                  "RepoConfigEnableAnonymousGitAccessAuditEntry" -> Obj(
                    onRepoConfigEnableAnonymousGitAccessAuditEntry
                  ),
                  "RepoConfigEnableCollaboratorsOnlyAuditEntry" -> Obj(
                    onRepoConfigEnableCollaboratorsOnlyAuditEntry
                  ),
                  "RepoConfigEnableContributorsOnlyAuditEntry" -> Obj(
                    onRepoConfigEnableContributorsOnlyAuditEntry
                  ),
                  "RepoConfigEnableSockpuppetDisallowedAuditEntry" -> Obj(
                    onRepoConfigEnableSockpuppetDisallowedAuditEntry
                  ),
                  "RepoConfigLockAnonymousGitAccessAuditEntry" -> Obj(
                    onRepoConfigLockAnonymousGitAccessAuditEntry
                  ),
                  "RepoConfigUnlockAnonymousGitAccessAuditEntry" -> Obj(
                    onRepoConfigUnlockAnonymousGitAccessAuditEntry
                  ),
                  "RepoCreateAuditEntry" -> Obj(onRepoCreateAuditEntry),
                  "RepoDestroyAuditEntry" -> Obj(onRepoDestroyAuditEntry),
                  "RepoRemoveMemberAuditEntry" -> Obj(
                    onRepoRemoveMemberAuditEntry
                  ),
                  "RepoRemoveTopicAuditEntry" -> Obj(
                    onRepoRemoveTopicAuditEntry
                  ),
                  "RepositoryVisibilityChangeDisableAuditEntry" -> Obj(
                    onRepositoryVisibilityChangeDisableAuditEntry
                  ),
                  "RepositoryVisibilityChangeEnableAuditEntry" -> Obj(
                    onRepositoryVisibilityChangeEnableAuditEntry
                  ),
                  "TeamAddMemberAuditEntry" -> Obj(onTeamAddMemberAuditEntry),
                  "TeamAddRepositoryAuditEntry" -> Obj(
                    onTeamAddRepositoryAuditEntry
                  ),
                  "TeamChangeParentTeamAuditEntry" -> Obj(
                    onTeamChangeParentTeamAuditEntry
                  ),
                  "TeamRemoveMemberAuditEntry" -> Obj(
                    onTeamRemoveMemberAuditEntry
                  ),
                  "TeamRemoveRepositoryAuditEntry" -> Obj(
                    onTeamRemoveRepositoryAuditEntry
                  )
                )
              )
            )
          )
        )
      )

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[OrganizationAuditEntryConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[OrganizationAuditEntryConnection, Int] =
      Field("totalCount", Scalar())
  }

  type OrganizationAuditEntryEdge

  object OrganizationAuditEntryEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[OrganizationAuditEntryEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 onMembersCanDeleteReposClearAuditEntry: SelectionBuilder[
                   MembersCanDeleteReposClearAuditEntry,
                   A
                 ],
                 onMembersCanDeleteReposDisableAuditEntry: SelectionBuilder[
                   MembersCanDeleteReposDisableAuditEntry,
                   A
                 ],
                 onMembersCanDeleteReposEnableAuditEntry: SelectionBuilder[
                   MembersCanDeleteReposEnableAuditEntry,
                   A
                 ],
                 onOauthApplicationCreateAuditEntry: SelectionBuilder[
                   OauthApplicationCreateAuditEntry,
                   A
                 ],
                 onOrgAddBillingManagerAuditEntry: SelectionBuilder[
                   OrgAddBillingManagerAuditEntry,
                   A
                 ],
                 onOrgAddMemberAuditEntry: SelectionBuilder[OrgAddMemberAuditEntry, A],
                 onOrgBlockUserAuditEntry: SelectionBuilder[OrgBlockUserAuditEntry, A],
                 onOrgConfigDisableCollaboratorsOnlyAuditEntry: SelectionBuilder[
                   OrgConfigDisableCollaboratorsOnlyAuditEntry,
                   A
                 ],
                 onOrgConfigEnableCollaboratorsOnlyAuditEntry: SelectionBuilder[
                   OrgConfigEnableCollaboratorsOnlyAuditEntry,
                   A
                 ],
                 onOrgCreateAuditEntry: SelectionBuilder[OrgCreateAuditEntry, A],
                 onOrgDisableOauthAppRestrictionsAuditEntry: SelectionBuilder[
                   OrgDisableOauthAppRestrictionsAuditEntry,
                   A
                 ],
                 onOrgDisableSamlAuditEntry: SelectionBuilder[
                   OrgDisableSamlAuditEntry,
                   A
                 ],
                 onOrgDisableTwoFactorRequirementAuditEntry: SelectionBuilder[
                   OrgDisableTwoFactorRequirementAuditEntry,
                   A
                 ],
                 onOrgEnableOauthAppRestrictionsAuditEntry: SelectionBuilder[
                   OrgEnableOauthAppRestrictionsAuditEntry,
                   A
                 ],
                 onOrgEnableSamlAuditEntry: SelectionBuilder[OrgEnableSamlAuditEntry, A],
                 onOrgEnableTwoFactorRequirementAuditEntry: SelectionBuilder[
                   OrgEnableTwoFactorRequirementAuditEntry,
                   A
                 ],
                 onOrgInviteMemberAuditEntry: SelectionBuilder[
                   OrgInviteMemberAuditEntry,
                   A
                 ],
                 onOrgInviteToBusinessAuditEntry: SelectionBuilder[
                   OrgInviteToBusinessAuditEntry,
                   A
                 ],
                 onOrgOauthAppAccessApprovedAuditEntry: SelectionBuilder[
                   OrgOauthAppAccessApprovedAuditEntry,
                   A
                 ],
                 onOrgOauthAppAccessDeniedAuditEntry: SelectionBuilder[
                   OrgOauthAppAccessDeniedAuditEntry,
                   A
                 ],
                 onOrgOauthAppAccessRequestedAuditEntry: SelectionBuilder[
                   OrgOauthAppAccessRequestedAuditEntry,
                   A
                 ],
                 onOrgRemoveBillingManagerAuditEntry: SelectionBuilder[
                   OrgRemoveBillingManagerAuditEntry,
                   A
                 ],
                 onOrgRemoveMemberAuditEntry: SelectionBuilder[
                   OrgRemoveMemberAuditEntry,
                   A
                 ],
                 onOrgRemoveOutsideCollaboratorAuditEntry: SelectionBuilder[
                   OrgRemoveOutsideCollaboratorAuditEntry,
                   A
                 ],
                 onOrgRestoreMemberAuditEntry: SelectionBuilder[
                   OrgRestoreMemberAuditEntry,
                   A
                 ],
                 onOrgUnblockUserAuditEntry: SelectionBuilder[
                   OrgUnblockUserAuditEntry,
                   A
                 ],
                 onOrgUpdateDefaultRepositoryPermissionAuditEntry: SelectionBuilder[
                   OrgUpdateDefaultRepositoryPermissionAuditEntry,
                   A
                 ],
                 onOrgUpdateMemberAuditEntry: SelectionBuilder[
                   OrgUpdateMemberAuditEntry,
                   A
                 ],
                 onOrgUpdateMemberRepositoryCreationPermissionAuditEntry: SelectionBuilder[
                   OrgUpdateMemberRepositoryCreationPermissionAuditEntry,
                   A
                 ],
                 onOrgUpdateMemberRepositoryInvitationPermissionAuditEntry: SelectionBuilder[
                   OrgUpdateMemberRepositoryInvitationPermissionAuditEntry,
                   A
                 ],
                 onPrivateRepositoryForkingDisableAuditEntry: SelectionBuilder[
                   PrivateRepositoryForkingDisableAuditEntry,
                   A
                 ],
                 onPrivateRepositoryForkingEnableAuditEntry: SelectionBuilder[
                   PrivateRepositoryForkingEnableAuditEntry,
                   A
                 ],
                 onRepoAccessAuditEntry: SelectionBuilder[RepoAccessAuditEntry, A],
                 onRepoAddMemberAuditEntry: SelectionBuilder[RepoAddMemberAuditEntry, A],
                 onRepoAddTopicAuditEntry: SelectionBuilder[RepoAddTopicAuditEntry, A],
                 onRepoArchivedAuditEntry: SelectionBuilder[RepoArchivedAuditEntry, A],
                 onRepoChangeMergeSettingAuditEntry: SelectionBuilder[
                   RepoChangeMergeSettingAuditEntry,
                   A
                 ],
                 onRepoConfigDisableAnonymousGitAccessAuditEntry: SelectionBuilder[
                   RepoConfigDisableAnonymousGitAccessAuditEntry,
                   A
                 ],
                 onRepoConfigDisableCollaboratorsOnlyAuditEntry: SelectionBuilder[
                   RepoConfigDisableCollaboratorsOnlyAuditEntry,
                   A
                 ],
                 onRepoConfigDisableContributorsOnlyAuditEntry: SelectionBuilder[
                   RepoConfigDisableContributorsOnlyAuditEntry,
                   A
                 ],
                 onRepoConfigDisableSockpuppetDisallowedAuditEntry: SelectionBuilder[
                   RepoConfigDisableSockpuppetDisallowedAuditEntry,
                   A
                 ],
                 onRepoConfigEnableAnonymousGitAccessAuditEntry: SelectionBuilder[
                   RepoConfigEnableAnonymousGitAccessAuditEntry,
                   A
                 ],
                 onRepoConfigEnableCollaboratorsOnlyAuditEntry: SelectionBuilder[
                   RepoConfigEnableCollaboratorsOnlyAuditEntry,
                   A
                 ],
                 onRepoConfigEnableContributorsOnlyAuditEntry: SelectionBuilder[
                   RepoConfigEnableContributorsOnlyAuditEntry,
                   A
                 ],
                 onRepoConfigEnableSockpuppetDisallowedAuditEntry: SelectionBuilder[
                   RepoConfigEnableSockpuppetDisallowedAuditEntry,
                   A
                 ],
                 onRepoConfigLockAnonymousGitAccessAuditEntry: SelectionBuilder[
                   RepoConfigLockAnonymousGitAccessAuditEntry,
                   A
                 ],
                 onRepoConfigUnlockAnonymousGitAccessAuditEntry: SelectionBuilder[
                   RepoConfigUnlockAnonymousGitAccessAuditEntry,
                   A
                 ],
                 onRepoCreateAuditEntry: SelectionBuilder[RepoCreateAuditEntry, A],
                 onRepoDestroyAuditEntry: SelectionBuilder[RepoDestroyAuditEntry, A],
                 onRepoRemoveMemberAuditEntry: SelectionBuilder[
                   RepoRemoveMemberAuditEntry,
                   A
                 ],
                 onRepoRemoveTopicAuditEntry: SelectionBuilder[
                   RepoRemoveTopicAuditEntry,
                   A
                 ],
                 onRepositoryVisibilityChangeDisableAuditEntry: SelectionBuilder[
                   RepositoryVisibilityChangeDisableAuditEntry,
                   A
                 ],
                 onRepositoryVisibilityChangeEnableAuditEntry: SelectionBuilder[
                   RepositoryVisibilityChangeEnableAuditEntry,
                   A
                 ],
                 onTeamAddMemberAuditEntry: SelectionBuilder[TeamAddMemberAuditEntry, A],
                 onTeamAddRepositoryAuditEntry: SelectionBuilder[
                   TeamAddRepositoryAuditEntry,
                   A
                 ],
                 onTeamChangeParentTeamAuditEntry: SelectionBuilder[
                   TeamChangeParentTeamAuditEntry,
                   A
                 ],
                 onTeamRemoveMemberAuditEntry: SelectionBuilder[
                   TeamRemoveMemberAuditEntry,
                   A
                 ],
                 onTeamRemoveRepositoryAuditEntry: SelectionBuilder[
                   TeamRemoveRepositoryAuditEntry,
                   A
                 ]
               ): SelectionBuilder[OrganizationAuditEntryEdge, Option[A]] =
      Field(
        "node",
        OptionOf(
          ChoiceOf(
            Map(
              "MembersCanDeleteReposClearAuditEntry" -> Obj(
                onMembersCanDeleteReposClearAuditEntry
              ),
              "MembersCanDeleteReposDisableAuditEntry" -> Obj(
                onMembersCanDeleteReposDisableAuditEntry
              ),
              "MembersCanDeleteReposEnableAuditEntry" -> Obj(
                onMembersCanDeleteReposEnableAuditEntry
              ),
              "OauthApplicationCreateAuditEntry" -> Obj(
                onOauthApplicationCreateAuditEntry
              ),
              "OrgAddBillingManagerAuditEntry" -> Obj(
                onOrgAddBillingManagerAuditEntry
              ),
              "OrgAddMemberAuditEntry" -> Obj(onOrgAddMemberAuditEntry),
              "OrgBlockUserAuditEntry" -> Obj(onOrgBlockUserAuditEntry),
              "OrgConfigDisableCollaboratorsOnlyAuditEntry" -> Obj(
                onOrgConfigDisableCollaboratorsOnlyAuditEntry
              ),
              "OrgConfigEnableCollaboratorsOnlyAuditEntry" -> Obj(
                onOrgConfigEnableCollaboratorsOnlyAuditEntry
              ),
              "OrgCreateAuditEntry" -> Obj(onOrgCreateAuditEntry),
              "OrgDisableOauthAppRestrictionsAuditEntry" -> Obj(
                onOrgDisableOauthAppRestrictionsAuditEntry
              ),
              "OrgDisableSamlAuditEntry" -> Obj(onOrgDisableSamlAuditEntry),
              "OrgDisableTwoFactorRequirementAuditEntry" -> Obj(
                onOrgDisableTwoFactorRequirementAuditEntry
              ),
              "OrgEnableOauthAppRestrictionsAuditEntry" -> Obj(
                onOrgEnableOauthAppRestrictionsAuditEntry
              ),
              "OrgEnableSamlAuditEntry" -> Obj(onOrgEnableSamlAuditEntry),
              "OrgEnableTwoFactorRequirementAuditEntry" -> Obj(
                onOrgEnableTwoFactorRequirementAuditEntry
              ),
              "OrgInviteMemberAuditEntry" -> Obj(onOrgInviteMemberAuditEntry),
              "OrgInviteToBusinessAuditEntry" -> Obj(
                onOrgInviteToBusinessAuditEntry
              ),
              "OrgOauthAppAccessApprovedAuditEntry" -> Obj(
                onOrgOauthAppAccessApprovedAuditEntry
              ),
              "OrgOauthAppAccessDeniedAuditEntry" -> Obj(
                onOrgOauthAppAccessDeniedAuditEntry
              ),
              "OrgOauthAppAccessRequestedAuditEntry" -> Obj(
                onOrgOauthAppAccessRequestedAuditEntry
              ),
              "OrgRemoveBillingManagerAuditEntry" -> Obj(
                onOrgRemoveBillingManagerAuditEntry
              ),
              "OrgRemoveMemberAuditEntry" -> Obj(onOrgRemoveMemberAuditEntry),
              "OrgRemoveOutsideCollaboratorAuditEntry" -> Obj(
                onOrgRemoveOutsideCollaboratorAuditEntry
              ),
              "OrgRestoreMemberAuditEntry" -> Obj(onOrgRestoreMemberAuditEntry),
              "OrgUnblockUserAuditEntry" -> Obj(onOrgUnblockUserAuditEntry),
              "OrgUpdateDefaultRepositoryPermissionAuditEntry" -> Obj(
                onOrgUpdateDefaultRepositoryPermissionAuditEntry
              ),
              "OrgUpdateMemberAuditEntry" -> Obj(onOrgUpdateMemberAuditEntry),
              "OrgUpdateMemberRepositoryCreationPermissionAuditEntry" -> Obj(
                onOrgUpdateMemberRepositoryCreationPermissionAuditEntry
              ),
              "OrgUpdateMemberRepositoryInvitationPermissionAuditEntry" -> Obj(
                onOrgUpdateMemberRepositoryInvitationPermissionAuditEntry
              ),
              "PrivateRepositoryForkingDisableAuditEntry" -> Obj(
                onPrivateRepositoryForkingDisableAuditEntry
              ),
              "PrivateRepositoryForkingEnableAuditEntry" -> Obj(
                onPrivateRepositoryForkingEnableAuditEntry
              ),
              "RepoAccessAuditEntry" -> Obj(onRepoAccessAuditEntry),
              "RepoAddMemberAuditEntry" -> Obj(onRepoAddMemberAuditEntry),
              "RepoAddTopicAuditEntry" -> Obj(onRepoAddTopicAuditEntry),
              "RepoArchivedAuditEntry" -> Obj(onRepoArchivedAuditEntry),
              "RepoChangeMergeSettingAuditEntry" -> Obj(
                onRepoChangeMergeSettingAuditEntry
              ),
              "RepoConfigDisableAnonymousGitAccessAuditEntry" -> Obj(
                onRepoConfigDisableAnonymousGitAccessAuditEntry
              ),
              "RepoConfigDisableCollaboratorsOnlyAuditEntry" -> Obj(
                onRepoConfigDisableCollaboratorsOnlyAuditEntry
              ),
              "RepoConfigDisableContributorsOnlyAuditEntry" -> Obj(
                onRepoConfigDisableContributorsOnlyAuditEntry
              ),
              "RepoConfigDisableSockpuppetDisallowedAuditEntry" -> Obj(
                onRepoConfigDisableSockpuppetDisallowedAuditEntry
              ),
              "RepoConfigEnableAnonymousGitAccessAuditEntry" -> Obj(
                onRepoConfigEnableAnonymousGitAccessAuditEntry
              ),
              "RepoConfigEnableCollaboratorsOnlyAuditEntry" -> Obj(
                onRepoConfigEnableCollaboratorsOnlyAuditEntry
              ),
              "RepoConfigEnableContributorsOnlyAuditEntry" -> Obj(
                onRepoConfigEnableContributorsOnlyAuditEntry
              ),
              "RepoConfigEnableSockpuppetDisallowedAuditEntry" -> Obj(
                onRepoConfigEnableSockpuppetDisallowedAuditEntry
              ),
              "RepoConfigLockAnonymousGitAccessAuditEntry" -> Obj(
                onRepoConfigLockAnonymousGitAccessAuditEntry
              ),
              "RepoConfigUnlockAnonymousGitAccessAuditEntry" -> Obj(
                onRepoConfigUnlockAnonymousGitAccessAuditEntry
              ),
              "RepoCreateAuditEntry" -> Obj(onRepoCreateAuditEntry),
              "RepoDestroyAuditEntry" -> Obj(onRepoDestroyAuditEntry),
              "RepoRemoveMemberAuditEntry" -> Obj(onRepoRemoveMemberAuditEntry),
              "RepoRemoveTopicAuditEntry" -> Obj(onRepoRemoveTopicAuditEntry),
              "RepositoryVisibilityChangeDisableAuditEntry" -> Obj(
                onRepositoryVisibilityChangeDisableAuditEntry
              ),
              "RepositoryVisibilityChangeEnableAuditEntry" -> Obj(
                onRepositoryVisibilityChangeEnableAuditEntry
              ),
              "TeamAddMemberAuditEntry" -> Obj(onTeamAddMemberAuditEntry),
              "TeamAddRepositoryAuditEntry" -> Obj(
                onTeamAddRepositoryAuditEntry
              ),
              "TeamChangeParentTeamAuditEntry" -> Obj(
                onTeamChangeParentTeamAuditEntry
              ),
              "TeamRemoveMemberAuditEntry" -> Obj(onTeamRemoveMemberAuditEntry),
              "TeamRemoveRepositoryAuditEntry" -> Obj(
                onTeamRemoveRepositoryAuditEntry
              )
            )
          )
        )
      )
  }

  type OrganizationConnection

  object OrganizationConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[OrganizationEdge, A]
                ): SelectionBuilder[OrganizationConnection, Option[List[Option[A]]]] =
      Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[Organization, A]
                ): SelectionBuilder[OrganizationConnection, Option[List[Option[A]]]] =
      Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[OrganizationConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[OrganizationConnection, Int] =
      Field("totalCount", Scalar())
  }

  type OrganizationEdge

  object OrganizationEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[OrganizationEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[Organization, A]
               ): SelectionBuilder[OrganizationEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type OrganizationIdentityProvider

  object OrganizationIdentityProvider {

    /**
     * The digest algorithm used to sign SAML requests for the Identity Provider.
     */
    def digestMethod
    : SelectionBuilder[OrganizationIdentityProvider, Option[URI]] =
      Field("digestMethod", OptionOf(Scalar()))

    /**
     * External Identities provisioned by this Identity Provider
     */
    def externalIdentities[A](
                               after: Option[String] = None,
                               before: Option[String] = None,
                               first: Option[Int] = None,
                               last: Option[Int] = None
                             )(
                               innerSelection: SelectionBuilder[ExternalIdentityConnection, A]
                             ): SelectionBuilder[OrganizationIdentityProvider, A] =
      Field(
        "externalIdentities",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )

    def id: SelectionBuilder[OrganizationIdentityProvider, String] =
      Field("id", Scalar())

    /**
     * The x509 certificate used by the Identity Provder to sign assertions and responses.
     */
    def idpCertificate: SelectionBuilder[OrganizationIdentityProvider, Option[
      X509Certificate
    ]] = Field("idpCertificate", OptionOf(Scalar()))

    /**
     * The Issuer Entity ID for the SAML Identity Provider
     */
    def issuer: SelectionBuilder[OrganizationIdentityProvider, Option[String]] =
      Field("issuer", OptionOf(Scalar()))

    /**
     * Organization this Identity Provider belongs to
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[OrganizationIdentityProvider, Option[A]] =
      Field("organization", OptionOf(Obj(innerSelection)))

    /**
     * The signature algorithm used to sign SAML requests for the Identity Provider.
     */
    def signatureMethod
    : SelectionBuilder[OrganizationIdentityProvider, Option[URI]] =
      Field("signatureMethod", OptionOf(Scalar()))

    /**
     * The URL endpoint for the Identity Provider's SAML SSO.
     */
    def ssoUrl: SelectionBuilder[OrganizationIdentityProvider, Option[URI]] =
      Field("ssoUrl", OptionOf(Scalar()))
  }

  type OrganizationInvitation

  object OrganizationInvitation {

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[OrganizationInvitation, DateTime] =
      Field("createdAt", Scalar())

    /**
     * The email address of the user invited to the organization.
     */
    def email: SelectionBuilder[OrganizationInvitation, Option[String]] =
      Field("email", OptionOf(Scalar()))

    def id: SelectionBuilder[OrganizationInvitation, String] =
      Field("id", Scalar())

    /**
     * The type of invitation that was sent (e.g. email, user).
     */
    def invitationType
    : SelectionBuilder[OrganizationInvitation, OrganizationInvitationType] =
      Field("invitationType", Scalar())

    /**
     * The user who was invited to the organization.
     */
    def invitee[A](
                    innerSelection: SelectionBuilder[User, A]
                  ): SelectionBuilder[OrganizationInvitation, Option[A]] =
      Field("invitee", OptionOf(Obj(innerSelection)))

    /**
     * The user who created the invitation.
     */
    def inviter[A](
                    innerSelection: SelectionBuilder[User, A]
                  ): SelectionBuilder[OrganizationInvitation, A] =
      Field("inviter", Obj(innerSelection))

    /**
     * The organization the invite is for
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[OrganizationInvitation, A] =
      Field("organization", Obj(innerSelection))

    /**
     * The user's pending role in the organization (e.g. member, owner).
     */
    def role
    : SelectionBuilder[OrganizationInvitation, OrganizationInvitationRole] =
      Field("role", Scalar())
  }

  type OrganizationInvitationConnection

  object OrganizationInvitationConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[OrganizationInvitationEdge, A]
                ): SelectionBuilder[OrganizationInvitationConnection, Option[
      List[Option[A]]
    ]] = Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[OrganizationInvitation, A]
                ): SelectionBuilder[OrganizationInvitationConnection, Option[
      List[Option[A]]
    ]] = Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[OrganizationInvitationConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[OrganizationInvitationConnection, Int] =
      Field("totalCount", Scalar())
  }

  type OrganizationInvitationEdge

  object OrganizationInvitationEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[OrganizationInvitationEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[OrganizationInvitation, A]
               ): SelectionBuilder[OrganizationInvitationEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type OrganizationMemberConnection

  object OrganizationMemberConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[OrganizationMemberEdge, A]
                ): SelectionBuilder[OrganizationMemberConnection, Option[List[Option[A]]]] =
      Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[User, A]
                ): SelectionBuilder[OrganizationMemberConnection, Option[List[Option[A]]]] =
      Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[OrganizationMemberConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[OrganizationMemberConnection, Int] =
      Field("totalCount", Scalar())
  }

  type OrganizationMemberEdge

  object OrganizationMemberEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[OrganizationMemberEdge, String] =
      Field("cursor", Scalar())

    /**
     * Whether the organization member has two factor enabled or not. Returns null if information is not available to viewer.
     */
    def hasTwoFactorEnabled
    : SelectionBuilder[OrganizationMemberEdge, Option[Boolean]] =
      Field("hasTwoFactorEnabled", OptionOf(Scalar()))

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[OrganizationMemberEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))

    /**
     * The role this user has in the organization.
     */
    def role: SelectionBuilder[OrganizationMemberEdge, Option[
      OrganizationMemberRole
    ]] = Field("role", OptionOf(Scalar()))
  }

  type OrganizationTeamsHovercardContext

  object OrganizationTeamsHovercardContext {

    /**
     * A string describing this context
     */
    def message: SelectionBuilder[OrganizationTeamsHovercardContext, String] =
      Field("message", Scalar())

    /**
     * An octicon to accompany this context
     */
    def octicon: SelectionBuilder[OrganizationTeamsHovercardContext, String] =
      Field("octicon", Scalar())

    /**
     * Teams in this organization the user is a member of that are relevant
     */
    def relevantTeams[A](
                          after: Option[String] = None,
                          before: Option[String] = None,
                          first: Option[Int] = None,
                          last: Option[Int] = None
                        )(
                          innerSelection: SelectionBuilder[TeamConnection, A]
                        ): SelectionBuilder[OrganizationTeamsHovercardContext, A] =
      Field(
        "relevantTeams",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )

    /**
     * The path for the full team list for this user
     */
    def teamsResourcePath
    : SelectionBuilder[OrganizationTeamsHovercardContext, URI] =
      Field("teamsResourcePath", Scalar())

    /**
     * The URL for the full team list for this user
     */
    def teamsUrl: SelectionBuilder[OrganizationTeamsHovercardContext, URI] =
      Field("teamsUrl", Scalar())

    /**
     * The total number of teams the user is on in the organization
     */
    def totalTeamCount
    : SelectionBuilder[OrganizationTeamsHovercardContext, Int] =
      Field("totalTeamCount", Scalar())
  }

  type OrganizationsHovercardContext

  object OrganizationsHovercardContext {

    /**
     * A string describing this context
     */
    def message: SelectionBuilder[OrganizationsHovercardContext, String] =
      Field("message", Scalar())

    /**
     * An octicon to accompany this context
     */
    def octicon: SelectionBuilder[OrganizationsHovercardContext, String] =
      Field("octicon", Scalar())

    /**
     * Organizations this user is a member of that are relevant
     */
    def relevantOrganizations[A](
                                  after: Option[String] = None,
                                  before: Option[String] = None,
                                  first: Option[Int] = None,
                                  last: Option[Int] = None
                                )(
                                  innerSelection: SelectionBuilder[OrganizationConnection, A]
                                ): SelectionBuilder[OrganizationsHovercardContext, A] =
      Field(
        "relevantOrganizations",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )

    /**
     * The total number of organizations this user is in
     */
    def totalOrganizationCount
    : SelectionBuilder[OrganizationsHovercardContext, Int] =
      Field("totalOrganizationCount", Scalar())
  }

  type Package

  object Package {
    def id: SelectionBuilder[Package, String] = Field("id", Scalar())

    /**
     * Find the latest version for the package.
     */
    def latestVersion[A](
                          innerSelection: SelectionBuilder[PackageVersion, A]
                        ): SelectionBuilder[Package, Option[A]] =
      Field("latestVersion", OptionOf(Obj(innerSelection)))

    /**
     * Identifies the name of the package.
     */
    def name: SelectionBuilder[Package, String] = Field("name", Scalar())

    /**
     * Identifies the type of the package.
     */
    def packageType: SelectionBuilder[Package, PackageType] =
      Field("packageType", Scalar())

    /**
     * The repository this package belongs to.
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[Package, Option[A]] =
      Field("repository", OptionOf(Obj(innerSelection)))

    /**
     * Statistics about package activity.
     */
    def statistics[A](
                       innerSelection: SelectionBuilder[PackageStatistics, A]
                     ): SelectionBuilder[Package, Option[A]] =
      Field("statistics", OptionOf(Obj(innerSelection)))

    /**
     * Find package version by version string.
     */
    def version[A](version: String)(
      innerSelection: SelectionBuilder[PackageVersion, A]
    ): SelectionBuilder[Package, Option[A]] =
      Field(
        "version",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("version", version))
      )

    /**
     * list of versions for this package
     */
    def versions[A](
                     after: Option[String] = None,
                     before: Option[String] = None,
                     first: Option[Int] = None,
                     last: Option[Int] = None,
                     orderBy: Option[PackageVersionOrder] = None
                   )(
                     innerSelection: SelectionBuilder[PackageVersionConnection, A]
                   ): SelectionBuilder[Package, A] =
      Field(
        "versions",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy)
        )
      )
  }

  type PackageConnection

  object PackageConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[PackageEdge, A]
                ): SelectionBuilder[PackageConnection, Option[List[Option[A]]]] =
      Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[Package, A]
                ): SelectionBuilder[PackageConnection, Option[List[Option[A]]]] =
      Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[PackageConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[PackageConnection, Int] =
      Field("totalCount", Scalar())
  }

  type PackageEdge

  object PackageEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[PackageEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[Package, A]
               ): SelectionBuilder[PackageEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type PackageFile

  object PackageFile {
    def id: SelectionBuilder[PackageFile, String] = Field("id", Scalar())

    /**
     * MD5 hash of the file.
     */
    def md5: SelectionBuilder[PackageFile, Option[String]] =
      Field("md5", OptionOf(Scalar()))

    /**
     * Name of the file.
     */
    def name: SelectionBuilder[PackageFile, String] = Field("name", Scalar())

    /**
     * The package version this file belongs to.
     */
    def packageVersion[A](
                           innerSelection: SelectionBuilder[PackageVersion, A]
                         ): SelectionBuilder[PackageFile, Option[A]] =
      Field("packageVersion", OptionOf(Obj(innerSelection)))

    /**
     * SHA1 hash of the file.
     */
    def sha1: SelectionBuilder[PackageFile, Option[String]] =
      Field("sha1", OptionOf(Scalar()))

    /**
     * SHA256 hash of the file.
     */
    def sha256: SelectionBuilder[PackageFile, Option[String]] =
      Field("sha256", OptionOf(Scalar()))

    /**
     * Size of the file in bytes.
     */
    def size: SelectionBuilder[PackageFile, Option[Int]] =
      Field("size", OptionOf(Scalar()))

    /**
     * Identifies the date and time when the object was last updated.
     */
    def updatedAt: SelectionBuilder[PackageFile, DateTime] =
      Field("updatedAt", Scalar())

    /**
     * URL to download the asset.
     */
    def url: SelectionBuilder[PackageFile, Option[URI]] =
      Field("url", OptionOf(Scalar()))
  }

  type PackageFileConnection

  object PackageFileConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[PackageFileEdge, A]
                ): SelectionBuilder[PackageFileConnection, Option[List[Option[A]]]] =
      Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[PackageFile, A]
                ): SelectionBuilder[PackageFileConnection, Option[List[Option[A]]]] =
      Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[PackageFileConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[PackageFileConnection, Int] =
      Field("totalCount", Scalar())
  }

  type PackageFileEdge

  object PackageFileEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[PackageFileEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[PackageFile, A]
               ): SelectionBuilder[PackageFileEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type PackageStatistics

  object PackageStatistics {

    /**
     * Number of times the package was downloaded since it was created.
     */
    def downloadsTotalCount: SelectionBuilder[PackageStatistics, Int] =
      Field("downloadsTotalCount", Scalar())
  }

  type PackageTag

  object PackageTag {
    def id: SelectionBuilder[PackageTag, String] = Field("id", Scalar())

    /**
     * Identifies the tag name of the version.
     */
    def name: SelectionBuilder[PackageTag, String] = Field("name", Scalar())

    /**
     * Version that the tag is associated with.
     */
    def version[A](
                    innerSelection: SelectionBuilder[PackageVersion, A]
                  ): SelectionBuilder[PackageTag, Option[A]] =
      Field("version", OptionOf(Obj(innerSelection)))
  }

  type PackageVersion

  object PackageVersion {

    /**
     * List of files associated with this package version
     */
    def files[A](
                  after: Option[String] = None,
                  before: Option[String] = None,
                  first: Option[Int] = None,
                  last: Option[Int] = None,
                  orderBy: Option[PackageFileOrder] = None
                )(
                  innerSelection: SelectionBuilder[PackageFileConnection, A]
                ): SelectionBuilder[PackageVersion, A] =
      Field(
        "files",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy)
        )
      )

    def id: SelectionBuilder[PackageVersion, String] = Field("id", Scalar())

    /**
     * The package associated with this version.
     */
    def `package`[A](
                      innerSelection: SelectionBuilder[Package, A]
                    ): SelectionBuilder[PackageVersion, Option[A]] =
      Field("package", OptionOf(Obj(innerSelection)))

    /**
     * The platform this version was built for.
     */
    def platform: SelectionBuilder[PackageVersion, Option[String]] =
      Field("platform", OptionOf(Scalar()))

    /**
     * Whether or not this version is a pre-release.
     */
    def preRelease: SelectionBuilder[PackageVersion, Boolean] =
      Field("preRelease", Scalar())

    /**
     * The README of this package version.
     */
    def readme: SelectionBuilder[PackageVersion, Option[String]] =
      Field("readme", OptionOf(Scalar()))

    /**
     * The release associated with this package version.
     */
    def release[A](
                    innerSelection: SelectionBuilder[Release, A]
                  ): SelectionBuilder[PackageVersion, Option[A]] =
      Field("release", OptionOf(Obj(innerSelection)))

    /**
     * Statistics about package activity.
     */
    def statistics[A](
                       innerSelection: SelectionBuilder[PackageVersionStatistics, A]
                     ): SelectionBuilder[PackageVersion, Option[A]] =
      Field("statistics", OptionOf(Obj(innerSelection)))

    /**
     * The package version summary.
     */
    def summary: SelectionBuilder[PackageVersion, Option[String]] =
      Field("summary", OptionOf(Scalar()))

    /**
     * The version string.
     */
    def version: SelectionBuilder[PackageVersion, String] =
      Field("version", Scalar())
  }

  type PackageVersionConnection

  object PackageVersionConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[PackageVersionEdge, A]
                ): SelectionBuilder[PackageVersionConnection, Option[List[Option[A]]]] =
      Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[PackageVersion, A]
                ): SelectionBuilder[PackageVersionConnection, Option[List[Option[A]]]] =
      Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[PackageVersionConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[PackageVersionConnection, Int] =
      Field("totalCount", Scalar())
  }

  type PackageVersionEdge

  object PackageVersionEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[PackageVersionEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[PackageVersion, A]
               ): SelectionBuilder[PackageVersionEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type PackageVersionStatistics

  object PackageVersionStatistics {

    /**
     * Number of times the package was downloaded since it was created.
     */
    def downloadsTotalCount: SelectionBuilder[PackageVersionStatistics, Int] =
      Field("downloadsTotalCount", Scalar())
  }

  type PageInfo

  object PageInfo {

    /**
     * When paginating forwards, the cursor to continue.
     */
    def endCursor: SelectionBuilder[PageInfo, Option[String]] =
      Field("endCursor", OptionOf(Scalar()))

    /**
     * When paginating forwards, are there more items?
     */
    def hasNextPage: SelectionBuilder[PageInfo, Boolean] =
      Field("hasNextPage", Scalar())

    /**
     * When paginating backwards, are there more items?
     */
    def hasPreviousPage: SelectionBuilder[PageInfo, Boolean] =
      Field("hasPreviousPage", Scalar())

    /**
     * When paginating backwards, the cursor to continue.
     */
    def startCursor: SelectionBuilder[PageInfo, Option[String]] =
      Field("startCursor", OptionOf(Scalar()))
  }

  type PermissionSource

  object PermissionSource {

    /**
     * The organization the repository belongs to.
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[PermissionSource, A] =
      Field("organization", Obj(innerSelection))

    /**
     * The level of access this source has granted to the user.
     */
    def permission
    : SelectionBuilder[PermissionSource, DefaultRepositoryPermissionField] =
      Field("permission", Scalar())

    /**
     * The source of this permission.
     */
    def source[A](
                   onOrganization: SelectionBuilder[Organization, A],
                   onRepository: SelectionBuilder[Repository, A],
                   onTeam: SelectionBuilder[Team, A]
                 ): SelectionBuilder[PermissionSource, A] =
      Field(
        "source",
        ChoiceOf(
          Map(
            "Organization" -> Obj(onOrganization),
            "Repository" -> Obj(onRepository),
            "Team" -> Obj(onTeam)
          )
        )
      )
  }

  type PinIssuePayload

  object PinIssuePayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId: SelectionBuilder[PinIssuePayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The issue that was pinned
     */
    def issue[A](
                  innerSelection: SelectionBuilder[Issue, A]
                ): SelectionBuilder[PinIssuePayload, Option[A]] =
      Field("issue", OptionOf(Obj(innerSelection)))
  }

  type PinnableItemConnection

  object PinnableItemConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[PinnableItemEdge, A]
                ): SelectionBuilder[PinnableItemConnection, Option[List[Option[A]]]] =
      Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  onGist: SelectionBuilder[Gist, A],
                  onRepository: SelectionBuilder[Repository, A]
                ): SelectionBuilder[PinnableItemConnection, Option[List[Option[A]]]] =
      Field(
        "nodes",
        OptionOf(
          ListOf(
            OptionOf(
              ChoiceOf(
                Map("Gist" -> Obj(onGist), "Repository" -> Obj(onRepository))
              )
            )
          )
        )
      )

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[PinnableItemConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[PinnableItemConnection, Int] =
      Field("totalCount", Scalar())
  }

  type PinnableItemEdge

  object PinnableItemEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[PinnableItemEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 onGist: SelectionBuilder[Gist, A],
                 onRepository: SelectionBuilder[Repository, A]
               ): SelectionBuilder[PinnableItemEdge, Option[A]] =
      Field(
        "node",
        OptionOf(
          ChoiceOf(
            Map("Gist" -> Obj(onGist), "Repository" -> Obj(onRepository))
          )
        )
      )
  }

  type PinnedEvent

  object PinnedEvent {

    /**
     * Identifies the actor who performed the event.
     */
    def actor[A](
                  onBot: Option[SelectionBuilder[Bot, A]] = None,
                  onEnterpriseUserAccount: Option[
                    SelectionBuilder[EnterpriseUserAccount, A]
                  ] = None,
                  onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                  onUser: Option[SelectionBuilder[User, A]] = None,
                  onOrganization: Option[SelectionBuilder[Organization, A]] = None
                ): SelectionBuilder[PinnedEvent, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[PinnedEvent, DateTime] =
      Field("createdAt", Scalar())

    def id: SelectionBuilder[PinnedEvent, String] = Field("id", Scalar())

    /**
     * Identifies the issue associated with the event.
     */
    def issue[A](
                  innerSelection: SelectionBuilder[Issue, A]
                ): SelectionBuilder[PinnedEvent, A] = Field("issue", Obj(innerSelection))
  }

  type PinnedIssue

  object PinnedIssue {

    /**
     * Identifies the primary key from the database.
     */
    def databaseId: SelectionBuilder[PinnedIssue, Option[Int]] =
      Field("databaseId", OptionOf(Scalar()))

    def id: SelectionBuilder[PinnedIssue, String] = Field("id", Scalar())

    /**
     * The issue that was pinned.
     */
    def issue[A](
                  innerSelection: SelectionBuilder[Issue, A]
                ): SelectionBuilder[PinnedIssue, A] = Field("issue", Obj(innerSelection))

    /**
     * The actor that pinned this issue.
     */
    def pinnedBy[A](
                     onBot: Option[SelectionBuilder[Bot, A]] = None,
                     onEnterpriseUserAccount: Option[
                       SelectionBuilder[EnterpriseUserAccount, A]
                     ] = None,
                     onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                     onUser: Option[SelectionBuilder[User, A]] = None,
                     onOrganization: Option[SelectionBuilder[Organization, A]] = None
                   ): SelectionBuilder[PinnedIssue, A] =
      Field(
        "pinnedBy",
        ChoiceOf(
          Map(
            "Bot" -> onBot,
            "EnterpriseUserAccount" -> onEnterpriseUserAccount,
            "Mannequin" -> onMannequin,
            "User" -> onUser,
            "Organization" -> onOrganization
          ).collect { case (k, Some(v)) => k -> Obj(v) }
        )
      )

    /**
     * The repository that this issue was pinned to.
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[PinnedIssue, A] =
      Field("repository", Obj(innerSelection))
  }

  type PinnedIssueConnection

  object PinnedIssueConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[PinnedIssueEdge, A]
                ): SelectionBuilder[PinnedIssueConnection, Option[List[Option[A]]]] =
      Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[PinnedIssue, A]
                ): SelectionBuilder[PinnedIssueConnection, Option[List[Option[A]]]] =
      Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[PinnedIssueConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[PinnedIssueConnection, Int] =
      Field("totalCount", Scalar())
  }

  type PinnedIssueEdge

  object PinnedIssueEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[PinnedIssueEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[PinnedIssue, A]
               ): SelectionBuilder[PinnedIssueEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type PrivateRepositoryForkingDisableAuditEntry

  object PrivateRepositoryForkingDisableAuditEntry {

    /**
     * The action name
     */
    def action
    : SelectionBuilder[PrivateRepositoryForkingDisableAuditEntry, String] =
      Field("action", Scalar())

    /**
     * The user who initiated the action
     */
    def actor[A](
                  onBot: SelectionBuilder[Bot, A],
                  onOrganization: SelectionBuilder[Organization, A],
                  onUser: SelectionBuilder[User, A]
                ): SelectionBuilder[PrivateRepositoryForkingDisableAuditEntry, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> Obj(onBot),
              "Organization" -> Obj(onOrganization),
              "User" -> Obj(onUser)
            )
          )
        )
      )

    /**
     * The IP address of the actor
     */
    def actorIp
    : SelectionBuilder[PrivateRepositoryForkingDisableAuditEntry, Option[
      String
    ]] = Field("actorIp", OptionOf(Scalar()))

    /**
     * A readable representation of the actor's location
     */
    def actorLocation[A](
                          innerSelection: SelectionBuilder[ActorLocation, A]
                        ): SelectionBuilder[PrivateRepositoryForkingDisableAuditEntry, Option[A]] =
      Field("actorLocation", OptionOf(Obj(innerSelection)))

    /**
     * The username of the user who initiated the action
     */
    def actorLogin
    : SelectionBuilder[PrivateRepositoryForkingDisableAuditEntry, Option[
      String
    ]] = Field("actorLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the actor.
     */
    def actorResourcePath
    : SelectionBuilder[PrivateRepositoryForkingDisableAuditEntry, Option[
      URI
    ]] = Field("actorResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the actor.
     */
    def actorUrl
    : SelectionBuilder[PrivateRepositoryForkingDisableAuditEntry, Option[
      URI
    ]] = Field("actorUrl", OptionOf(Scalar()))

    /**
     * The time the action was initiated
     */
    def createdAt: SelectionBuilder[
      PrivateRepositoryForkingDisableAuditEntry,
      PreciseDateTime
    ] = Field("createdAt", Scalar())

    /**
     * The HTTP path for this enterprise.
     */
    def enterpriseResourcePath
    : SelectionBuilder[PrivateRepositoryForkingDisableAuditEntry, Option[
      URI
    ]] = Field("enterpriseResourcePath", OptionOf(Scalar()))

    /**
     * The slug of the enterprise.
     */
    def enterpriseSlug
    : SelectionBuilder[PrivateRepositoryForkingDisableAuditEntry, Option[
      String
    ]] = Field("enterpriseSlug", OptionOf(Scalar()))

    /**
     * The HTTP URL for this enterprise.
     */
    def enterpriseUrl
    : SelectionBuilder[PrivateRepositoryForkingDisableAuditEntry, Option[
      URI
    ]] = Field("enterpriseUrl", OptionOf(Scalar()))

    def id
    : SelectionBuilder[PrivateRepositoryForkingDisableAuditEntry, String] =
      Field("id", Scalar())

    /**
     * The corresponding operation type for the action
     */
    def operationType
    : SelectionBuilder[PrivateRepositoryForkingDisableAuditEntry, Option[
      OperationType
    ]] = Field("operationType", OptionOf(Scalar()))

    /**
     * The Organization associated with the Audit Entry.
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[PrivateRepositoryForkingDisableAuditEntry, Option[A]] =
      Field("organization", OptionOf(Obj(innerSelection)))

    /**
     * The name of the Organization.
     */
    def organizationName
    : SelectionBuilder[PrivateRepositoryForkingDisableAuditEntry, Option[
      String
    ]] = Field("organizationName", OptionOf(Scalar()))

    /**
     * The HTTP path for the organization
     */
    def organizationResourcePath
    : SelectionBuilder[PrivateRepositoryForkingDisableAuditEntry, Option[
      URI
    ]] = Field("organizationResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the organization
     */
    def organizationUrl
    : SelectionBuilder[PrivateRepositoryForkingDisableAuditEntry, Option[
      URI
    ]] = Field("organizationUrl", OptionOf(Scalar()))

    /**
     * The repository associated with the action
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[PrivateRepositoryForkingDisableAuditEntry, Option[A]] =
      Field("repository", OptionOf(Obj(innerSelection)))

    /**
     * The name of the repository
     */
    def repositoryName
    : SelectionBuilder[PrivateRepositoryForkingDisableAuditEntry, Option[
      String
    ]] = Field("repositoryName", OptionOf(Scalar()))

    /**
     * The HTTP path for the repository
     */
    def repositoryResourcePath
    : SelectionBuilder[PrivateRepositoryForkingDisableAuditEntry, Option[
      URI
    ]] = Field("repositoryResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the repository
     */
    def repositoryUrl
    : SelectionBuilder[PrivateRepositoryForkingDisableAuditEntry, Option[
      URI
    ]] = Field("repositoryUrl", OptionOf(Scalar()))

    /**
     * The user affected by the action
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[PrivateRepositoryForkingDisableAuditEntry, Option[A]] =
      Field("user", OptionOf(Obj(innerSelection)))

    /**
     * For actions involving two users, the actor is the initiator and the user is the affected user.
     */
    def userLogin
    : SelectionBuilder[PrivateRepositoryForkingDisableAuditEntry, Option[
      String
    ]] = Field("userLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the user.
     */
    def userResourcePath
    : SelectionBuilder[PrivateRepositoryForkingDisableAuditEntry, Option[
      URI
    ]] = Field("userResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the user.
     */
    def userUrl
    : SelectionBuilder[PrivateRepositoryForkingDisableAuditEntry, Option[
      URI
    ]] = Field("userUrl", OptionOf(Scalar()))
  }

  type PrivateRepositoryForkingEnableAuditEntry

  object PrivateRepositoryForkingEnableAuditEntry {

    /**
     * The action name
     */
    def action
    : SelectionBuilder[PrivateRepositoryForkingEnableAuditEntry, String] =
      Field("action", Scalar())

    /**
     * The user who initiated the action
     */
    def actor[A](
                  onBot: SelectionBuilder[Bot, A],
                  onOrganization: SelectionBuilder[Organization, A],
                  onUser: SelectionBuilder[User, A]
                ): SelectionBuilder[PrivateRepositoryForkingEnableAuditEntry, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> Obj(onBot),
              "Organization" -> Obj(onOrganization),
              "User" -> Obj(onUser)
            )
          )
        )
      )

    /**
     * The IP address of the actor
     */
    def actorIp
    : SelectionBuilder[PrivateRepositoryForkingEnableAuditEntry, Option[
      String
    ]] = Field("actorIp", OptionOf(Scalar()))

    /**
     * A readable representation of the actor's location
     */
    def actorLocation[A](
                          innerSelection: SelectionBuilder[ActorLocation, A]
                        ): SelectionBuilder[PrivateRepositoryForkingEnableAuditEntry, Option[A]] =
      Field("actorLocation", OptionOf(Obj(innerSelection)))

    /**
     * The username of the user who initiated the action
     */
    def actorLogin
    : SelectionBuilder[PrivateRepositoryForkingEnableAuditEntry, Option[
      String
    ]] = Field("actorLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the actor.
     */
    def actorResourcePath
    : SelectionBuilder[PrivateRepositoryForkingEnableAuditEntry, Option[
      URI
    ]] = Field("actorResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the actor.
     */
    def actorUrl
    : SelectionBuilder[PrivateRepositoryForkingEnableAuditEntry, Option[
      URI
    ]] = Field("actorUrl", OptionOf(Scalar()))

    /**
     * The time the action was initiated
     */
    def createdAt: SelectionBuilder[
      PrivateRepositoryForkingEnableAuditEntry,
      PreciseDateTime
    ] = Field("createdAt", Scalar())

    /**
     * The HTTP path for this enterprise.
     */
    def enterpriseResourcePath
    : SelectionBuilder[PrivateRepositoryForkingEnableAuditEntry, Option[
      URI
    ]] = Field("enterpriseResourcePath", OptionOf(Scalar()))

    /**
     * The slug of the enterprise.
     */
    def enterpriseSlug
    : SelectionBuilder[PrivateRepositoryForkingEnableAuditEntry, Option[
      String
    ]] = Field("enterpriseSlug", OptionOf(Scalar()))

    /**
     * The HTTP URL for this enterprise.
     */
    def enterpriseUrl
    : SelectionBuilder[PrivateRepositoryForkingEnableAuditEntry, Option[
      URI
    ]] = Field("enterpriseUrl", OptionOf(Scalar()))

    def id: SelectionBuilder[PrivateRepositoryForkingEnableAuditEntry, String] =
      Field("id", Scalar())

    /**
     * The corresponding operation type for the action
     */
    def operationType
    : SelectionBuilder[PrivateRepositoryForkingEnableAuditEntry, Option[
      OperationType
    ]] = Field("operationType", OptionOf(Scalar()))

    /**
     * The Organization associated with the Audit Entry.
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[PrivateRepositoryForkingEnableAuditEntry, Option[A]] =
      Field("organization", OptionOf(Obj(innerSelection)))

    /**
     * The name of the Organization.
     */
    def organizationName
    : SelectionBuilder[PrivateRepositoryForkingEnableAuditEntry, Option[
      String
    ]] = Field("organizationName", OptionOf(Scalar()))

    /**
     * The HTTP path for the organization
     */
    def organizationResourcePath
    : SelectionBuilder[PrivateRepositoryForkingEnableAuditEntry, Option[
      URI
    ]] = Field("organizationResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the organization
     */
    def organizationUrl
    : SelectionBuilder[PrivateRepositoryForkingEnableAuditEntry, Option[
      URI
    ]] = Field("organizationUrl", OptionOf(Scalar()))

    /**
     * The repository associated with the action
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[PrivateRepositoryForkingEnableAuditEntry, Option[A]] =
      Field("repository", OptionOf(Obj(innerSelection)))

    /**
     * The name of the repository
     */
    def repositoryName
    : SelectionBuilder[PrivateRepositoryForkingEnableAuditEntry, Option[
      String
    ]] = Field("repositoryName", OptionOf(Scalar()))

    /**
     * The HTTP path for the repository
     */
    def repositoryResourcePath
    : SelectionBuilder[PrivateRepositoryForkingEnableAuditEntry, Option[
      URI
    ]] = Field("repositoryResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the repository
     */
    def repositoryUrl
    : SelectionBuilder[PrivateRepositoryForkingEnableAuditEntry, Option[
      URI
    ]] = Field("repositoryUrl", OptionOf(Scalar()))

    /**
     * The user affected by the action
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[PrivateRepositoryForkingEnableAuditEntry, Option[A]] =
      Field("user", OptionOf(Obj(innerSelection)))

    /**
     * For actions involving two users, the actor is the initiator and the user is the affected user.
     */
    def userLogin
    : SelectionBuilder[PrivateRepositoryForkingEnableAuditEntry, Option[
      String
    ]] = Field("userLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the user.
     */
    def userResourcePath
    : SelectionBuilder[PrivateRepositoryForkingEnableAuditEntry, Option[
      URI
    ]] = Field("userResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the user.
     */
    def userUrl
    : SelectionBuilder[PrivateRepositoryForkingEnableAuditEntry, Option[
      URI
    ]] = Field("userUrl", OptionOf(Scalar()))
  }

  type ProfileItemShowcase

  object ProfileItemShowcase {

    /**
     * Whether or not the owner has pinned any repositories or gists.
     */
    def hasPinnedItems: SelectionBuilder[ProfileItemShowcase, Boolean] =
      Field("hasPinnedItems", Scalar())

    /**
     * The repositories and gists in the showcase. If the profile owner has any
     * pinned items, those will be returned. Otherwise, the profile owner's popular
     * repositories will be returned.
     */
    def items[A](
                  after: Option[String] = None,
                  before: Option[String] = None,
                  first: Option[Int] = None,
                  last: Option[Int] = None
                )(
                  innerSelection: SelectionBuilder[PinnableItemConnection, A]
                ): SelectionBuilder[ProfileItemShowcase, A] =
      Field(
        "items",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )
  }

  type Project

  object Project {

    /**
     * The project's description body.
     */
    def body: SelectionBuilder[Project, Option[String]] =
      Field("body", OptionOf(Scalar()))

    /**
     * The projects description body rendered to HTML.
     */
    def bodyHTML: SelectionBuilder[Project, HTML] = Field("bodyHTML", Scalar())

    /**
     * `true` if the object is closed (definition of closed may depend on type)
     */
    def closed: SelectionBuilder[Project, Boolean] = Field("closed", Scalar())

    /**
     * Identifies the date and time when the object was closed.
     */
    def closedAt: SelectionBuilder[Project, Option[DateTime]] =
      Field("closedAt", OptionOf(Scalar()))

    /**
     * List of columns in the project
     */
    def columns[A](
                    after: Option[String] = None,
                    before: Option[String] = None,
                    first: Option[Int] = None,
                    last: Option[Int] = None
                  )(
                    innerSelection: SelectionBuilder[ProjectColumnConnection, A]
                  ): SelectionBuilder[Project, A] =
      Field(
        "columns",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[Project, DateTime] =
      Field("createdAt", Scalar())

    /**
     * The actor who originally created the project.
     */
    def creator[A](
                    onBot: Option[SelectionBuilder[Bot, A]] = None,
                    onEnterpriseUserAccount: Option[
                      SelectionBuilder[EnterpriseUserAccount, A]
                    ] = None,
                    onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                    onUser: Option[SelectionBuilder[User, A]] = None,
                    onOrganization: Option[SelectionBuilder[Organization, A]] = None
                  ): SelectionBuilder[Project, Option[A]] =
      Field(
        "creator",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * Identifies the primary key from the database.
     */
    def databaseId: SelectionBuilder[Project, Option[Int]] =
      Field("databaseId", OptionOf(Scalar()))

    def id: SelectionBuilder[Project, String] = Field("id", Scalar())

    /**
     * The project's name.
     */
    def name: SelectionBuilder[Project, String] = Field("name", Scalar())

    /**
     * The project's number.
     */
    def number: SelectionBuilder[Project, Int] = Field("number", Scalar())

    /**
     * The project's owner. Currently limited to repositories, organizations, and users.
     */
    def owner[A](
                  onRepository: Option[SelectionBuilder[Repository, A]] = None,
                  onUser: Option[SelectionBuilder[User, A]] = None,
                  onOrganization: Option[SelectionBuilder[Organization, A]] = None
                ): SelectionBuilder[Project, A] =
      Field(
        "owner",
        ChoiceOf(
          Map(
            "Repository" -> onRepository,
            "User" -> onUser,
            "Organization" -> onOrganization
          ).collect { case (k, Some(v)) => k -> Obj(v) }
        )
      )

    /**
     * List of pending cards in this project
     */
    def pendingCards[A](
                         after: Option[String] = None,
                         archivedStates: Option[List[Option[ProjectCardArchivedState]]] = None,
                         before: Option[String] = None,
                         first: Option[Int] = None,
                         last: Option[Int] = None
                       )(
                         innerSelection: SelectionBuilder[ProjectCardConnection, A]
                       ): SelectionBuilder[Project, A] =
      Field(
        "pendingCards",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("archivedStates", archivedStates),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )

    /**
     * The HTTP path for this project
     */
    def resourcePath: SelectionBuilder[Project, URI] =
      Field("resourcePath", Scalar())

    /**
     * Whether the project is open or closed.
     */
    def state: SelectionBuilder[Project, ProjectState] =
      Field("state", Scalar())

    /**
     * Identifies the date and time when the object was last updated.
     */
    def updatedAt: SelectionBuilder[Project, DateTime] =
      Field("updatedAt", Scalar())

    /**
     * The HTTP URL for this project
     */
    def url: SelectionBuilder[Project, URI] = Field("url", Scalar())

    /**
     * Check if the current viewer can update this object.
     */
    def viewerCanUpdate: SelectionBuilder[Project, Boolean] =
      Field("viewerCanUpdate", Scalar())
  }

  type ProjectCard

  object ProjectCard {

    /**
     * The project column this card is associated under. A card may only belong to one
     * project column at a time. The column field will be null if the card is created
     * in a pending state and has yet to be associated with a column. Once cards are
     * associated with a column, they will not become pending in the future.
     */
    def column[A](
                   innerSelection: SelectionBuilder[ProjectColumn, A]
                 ): SelectionBuilder[ProjectCard, Option[A]] =
      Field("column", OptionOf(Obj(innerSelection)))

    /**
     * The card content item
     */
    def content[A](
                    onIssue: SelectionBuilder[Issue, A],
                    onPullRequest: SelectionBuilder[PullRequest, A]
                  ): SelectionBuilder[ProjectCard, Option[A]] =
      Field(
        "content",
        OptionOf(
          ChoiceOf(
            Map("Issue" -> Obj(onIssue), "PullRequest" -> Obj(onPullRequest))
          )
        )
      )

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[ProjectCard, DateTime] =
      Field("createdAt", Scalar())

    /**
     * The actor who created this card
     */
    def creator[A](
                    onBot: Option[SelectionBuilder[Bot, A]] = None,
                    onEnterpriseUserAccount: Option[
                      SelectionBuilder[EnterpriseUserAccount, A]
                    ] = None,
                    onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                    onUser: Option[SelectionBuilder[User, A]] = None,
                    onOrganization: Option[SelectionBuilder[Organization, A]] = None
                  ): SelectionBuilder[ProjectCard, Option[A]] =
      Field(
        "creator",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * Identifies the primary key from the database.
     */
    def databaseId: SelectionBuilder[ProjectCard, Option[Int]] =
      Field("databaseId", OptionOf(Scalar()))

    def id: SelectionBuilder[ProjectCard, String] = Field("id", Scalar())

    /**
     * Whether the card is archived
     */
    def isArchived: SelectionBuilder[ProjectCard, Boolean] =
      Field("isArchived", Scalar())

    /**
     * The card note
     */
    def note: SelectionBuilder[ProjectCard, Option[String]] =
      Field("note", OptionOf(Scalar()))

    /**
     * The project that contains this card.
     */
    def project[A](
                    innerSelection: SelectionBuilder[Project, A]
                  ): SelectionBuilder[ProjectCard, A] = Field("project", Obj(innerSelection))

    /**
     * The HTTP path for this card
     */
    def resourcePath: SelectionBuilder[ProjectCard, URI] =
      Field("resourcePath", Scalar())

    /**
     * The state of ProjectCard
     */
    def state: SelectionBuilder[ProjectCard, Option[ProjectCardState]] =
      Field("state", OptionOf(Scalar()))

    /**
     * Identifies the date and time when the object was last updated.
     */
    def updatedAt: SelectionBuilder[ProjectCard, DateTime] =
      Field("updatedAt", Scalar())

    /**
     * The HTTP URL for this card
     */
    def url: SelectionBuilder[ProjectCard, URI] = Field("url", Scalar())
  }

  type ProjectCardConnection

  object ProjectCardConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[ProjectCardEdge, A]
                ): SelectionBuilder[ProjectCardConnection, Option[List[Option[A]]]] =
      Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[ProjectCard, A]
                ): SelectionBuilder[ProjectCardConnection, Option[List[Option[A]]]] =
      Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[ProjectCardConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[ProjectCardConnection, Int] =
      Field("totalCount", Scalar())
  }

  type ProjectCardEdge

  object ProjectCardEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[ProjectCardEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[ProjectCard, A]
               ): SelectionBuilder[ProjectCardEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type ProjectColumn

  object ProjectColumn {

    /**
     * List of cards in the column
     */
    def cards[A](
                  after: Option[String] = None,
                  archivedStates: Option[List[Option[ProjectCardArchivedState]]] = None,
                  before: Option[String] = None,
                  first: Option[Int] = None,
                  last: Option[Int] = None
                )(
                  innerSelection: SelectionBuilder[ProjectCardConnection, A]
                ): SelectionBuilder[ProjectColumn, A] =
      Field(
        "cards",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("archivedStates", archivedStates),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[ProjectColumn, DateTime] =
      Field("createdAt", Scalar())

    /**
     * Identifies the primary key from the database.
     */
    def databaseId: SelectionBuilder[ProjectColumn, Option[Int]] =
      Field("databaseId", OptionOf(Scalar()))

    def id: SelectionBuilder[ProjectColumn, String] = Field("id", Scalar())

    /**
     * The project column's name.
     */
    def name: SelectionBuilder[ProjectColumn, String] = Field("name", Scalar())

    /**
     * The project that contains this column.
     */
    def project[A](
                    innerSelection: SelectionBuilder[Project, A]
                  ): SelectionBuilder[ProjectColumn, A] =
      Field("project", Obj(innerSelection))

    /**
     * The semantic purpose of the column
     */
    def purpose: SelectionBuilder[ProjectColumn, Option[ProjectColumnPurpose]] =
      Field("purpose", OptionOf(Scalar()))

    /**
     * The HTTP path for this project column
     */
    def resourcePath: SelectionBuilder[ProjectColumn, URI] =
      Field("resourcePath", Scalar())

    /**
     * Identifies the date and time when the object was last updated.
     */
    def updatedAt: SelectionBuilder[ProjectColumn, DateTime] =
      Field("updatedAt", Scalar())

    /**
     * The HTTP URL for this project column
     */
    def url: SelectionBuilder[ProjectColumn, URI] = Field("url", Scalar())
  }

  type ProjectColumnConnection

  object ProjectColumnConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[ProjectColumnEdge, A]
                ): SelectionBuilder[ProjectColumnConnection, Option[List[Option[A]]]] =
      Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[ProjectColumn, A]
                ): SelectionBuilder[ProjectColumnConnection, Option[List[Option[A]]]] =
      Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[ProjectColumnConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[ProjectColumnConnection, Int] =
      Field("totalCount", Scalar())
  }

  type ProjectColumnEdge

  object ProjectColumnEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[ProjectColumnEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[ProjectColumn, A]
               ): SelectionBuilder[ProjectColumnEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type ProjectConnection

  object ProjectConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[ProjectEdge, A]
                ): SelectionBuilder[ProjectConnection, Option[List[Option[A]]]] =
      Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[Project, A]
                ): SelectionBuilder[ProjectConnection, Option[List[Option[A]]]] =
      Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[ProjectConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[ProjectConnection, Int] =
      Field("totalCount", Scalar())
  }

  type ProjectEdge

  object ProjectEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[ProjectEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[Project, A]
               ): SelectionBuilder[ProjectEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type PublicKey

  object PublicKey {

    /**
     * The last time this authorization was used to perform an action. Values will be null for keys not owned by the user.
     */
    def accessedAt: SelectionBuilder[PublicKey, Option[DateTime]] =
      Field("accessedAt", OptionOf(Scalar()))

    /**
     * Identifies the date and time when the key was created. Keys created before
     * March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.
     */
    def createdAt: SelectionBuilder[PublicKey, Option[DateTime]] =
      Field("createdAt", OptionOf(Scalar()))

    /**
     * The fingerprint for this PublicKey.
     */
    def fingerprint: SelectionBuilder[PublicKey, String] =
      Field("fingerprint", Scalar())

    def id: SelectionBuilder[PublicKey, String] = Field("id", Scalar())

    /**
     * Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user.
     */
    def isReadOnly: SelectionBuilder[PublicKey, Option[Boolean]] =
      Field("isReadOnly", OptionOf(Scalar()))

    /**
     * The public key string.
     */
    def key: SelectionBuilder[PublicKey, String] = Field("key", Scalar())

    /**
     * Identifies the date and time when the key was updated. Keys created before
     * March 5th, 2014 may have inaccurate values. Values will be null for keys not
     * owned by the user.
     */
    def updatedAt: SelectionBuilder[PublicKey, Option[DateTime]] =
      Field("updatedAt", OptionOf(Scalar()))
  }

  type PublicKeyConnection

  object PublicKeyConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[PublicKeyEdge, A]
                ): SelectionBuilder[PublicKeyConnection, Option[List[Option[A]]]] =
      Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[PublicKey, A]
                ): SelectionBuilder[PublicKeyConnection, Option[List[Option[A]]]] =
      Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[PublicKeyConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[PublicKeyConnection, Int] =
      Field("totalCount", Scalar())
  }

  type PublicKeyEdge

  object PublicKeyEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[PublicKeyEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[PublicKey, A]
               ): SelectionBuilder[PublicKeyEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type PullRequest

  object PullRequest {

    /**
     * Reason that the conversation was locked.
     */
    def activeLockReason: SelectionBuilder[PullRequest, Option[LockReason]] =
      Field("activeLockReason", OptionOf(Scalar()))

    /**
     * The number of additions in this pull request.
     */
    def additions: SelectionBuilder[PullRequest, Int] =
      Field("additions", Scalar())

    /**
     * A list of Users assigned to this object.
     */
    def assignees[A](
                      after: Option[String] = None,
                      before: Option[String] = None,
                      first: Option[Int] = None,
                      last: Option[Int] = None
                    )(
                      innerSelection: SelectionBuilder[UserConnection, A]
                    ): SelectionBuilder[PullRequest, A] =
      Field(
        "assignees",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )

    /**
     * The actor who authored the comment.
     */
    def author[A](
                   onBot: Option[SelectionBuilder[Bot, A]] = None,
                   onEnterpriseUserAccount: Option[
                     SelectionBuilder[EnterpriseUserAccount, A]
                   ] = None,
                   onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                   onUser: Option[SelectionBuilder[User, A]] = None,
                   onOrganization: Option[SelectionBuilder[Organization, A]] = None
                 ): SelectionBuilder[PullRequest, Option[A]] =
      Field(
        "author",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * Author's association with the subject of the comment.
     */
    def authorAssociation
    : SelectionBuilder[PullRequest, CommentAuthorAssociation] =
      Field("authorAssociation", Scalar())

    /**
     * Identifies the base Ref associated with the pull request.
     */
    def baseRef[A](
                    innerSelection: SelectionBuilder[Ref, A]
                  ): SelectionBuilder[PullRequest, Option[A]] =
      Field("baseRef", OptionOf(Obj(innerSelection)))

    /**
     * Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted.
     */
    def baseRefName: SelectionBuilder[PullRequest, String] =
      Field("baseRefName", Scalar())

    /**
     * Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted.
     */
    def baseRefOid: SelectionBuilder[PullRequest, GitObjectID] =
      Field("baseRefOid", Scalar())

    /**
     * The repository associated with this pull request's base Ref.
     */
    def baseRepository[A](
                           innerSelection: SelectionBuilder[Repository, A]
                         ): SelectionBuilder[PullRequest, Option[A]] =
      Field("baseRepository", OptionOf(Obj(innerSelection)))

    /**
     * The body as Markdown.
     */
    def body: SelectionBuilder[PullRequest, String] = Field("body", Scalar())

    /**
     * The body rendered to HTML.
     */
    def bodyHTML: SelectionBuilder[PullRequest, HTML] =
      Field("bodyHTML", Scalar())

    /**
     * The body rendered to text.
     */
    def bodyText: SelectionBuilder[PullRequest, String] =
      Field("bodyText", Scalar())

    /**
     * Whether or not the pull request is rebaseable.
     */
    def canBeRebased: SelectionBuilder[PullRequest, Boolean] =
      Field("canBeRebased", Scalar())

    /**
     * The number of changed files in this pull request.
     */
    def changedFiles: SelectionBuilder[PullRequest, Int] =
      Field("changedFiles", Scalar())

    /**
     * The HTTP path for the checks of this pull request.
     */
    def checksResourcePath: SelectionBuilder[PullRequest, URI] =
      Field("checksResourcePath", Scalar())

    /**
     * The HTTP URL for the checks of this pull request.
     */
    def checksUrl: SelectionBuilder[PullRequest, URI] =
      Field("checksUrl", Scalar())

    /**
     * `true` if the pull request is closed
     */
    def closed: SelectionBuilder[PullRequest, Boolean] =
      Field("closed", Scalar())

    /**
     * Identifies the date and time when the object was closed.
     */
    def closedAt: SelectionBuilder[PullRequest, Option[DateTime]] =
      Field("closedAt", OptionOf(Scalar()))

    /**
     * A list of comments associated with the pull request.
     */
    def comments[A](
                     after: Option[String] = None,
                     before: Option[String] = None,
                     first: Option[Int] = None,
                     last: Option[Int] = None
                   )(
                     innerSelection: SelectionBuilder[IssueCommentConnection, A]
                   ): SelectionBuilder[PullRequest, A] =
      Field(
        "comments",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )

    /**
     * A list of commits present in this pull request's head branch not present in the base branch.
     */
    def commits[A](
                    after: Option[String] = None,
                    before: Option[String] = None,
                    first: Option[Int] = None,
                    last: Option[Int] = None
                  )(
                    innerSelection: SelectionBuilder[PullRequestCommitConnection, A]
                  ): SelectionBuilder[PullRequest, A] =
      Field(
        "commits",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[PullRequest, DateTime] =
      Field("createdAt", Scalar())

    /**
     * Check if this comment was created via an email reply.
     */
    def createdViaEmail: SelectionBuilder[PullRequest, Boolean] =
      Field("createdViaEmail", Scalar())

    /**
     * Identifies the primary key from the database.
     */
    def databaseId: SelectionBuilder[PullRequest, Option[Int]] =
      Field("databaseId", OptionOf(Scalar()))

    /**
     * The number of deletions in this pull request.
     */
    def deletions: SelectionBuilder[PullRequest, Int] =
      Field("deletions", Scalar())

    /**
     * The actor who edited this pull request's body.
     */
    def editor[A](
                   onBot: Option[SelectionBuilder[Bot, A]] = None,
                   onEnterpriseUserAccount: Option[
                     SelectionBuilder[EnterpriseUserAccount, A]
                   ] = None,
                   onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                   onUser: Option[SelectionBuilder[User, A]] = None,
                   onOrganization: Option[SelectionBuilder[Organization, A]] = None
                 ): SelectionBuilder[PullRequest, Option[A]] =
      Field(
        "editor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * Lists the files changed within this pull request.
     */
    def files[A](
                  after: Option[String] = None,
                  before: Option[String] = None,
                  first: Option[Int] = None,
                  last: Option[Int] = None
                )(
                  innerSelection: SelectionBuilder[PullRequestChangedFileConnection, A]
                ): SelectionBuilder[PullRequest, Option[A]] =
      Field(
        "files",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )

    /**
     * Identifies the head Ref associated with the pull request.
     */
    def headRef[A](
                    innerSelection: SelectionBuilder[Ref, A]
                  ): SelectionBuilder[PullRequest, Option[A]] =
      Field("headRef", OptionOf(Obj(innerSelection)))

    /**
     * Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted.
     */
    def headRefName: SelectionBuilder[PullRequest, String] =
      Field("headRefName", Scalar())

    /**
     * Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted.
     */
    def headRefOid: SelectionBuilder[PullRequest, GitObjectID] =
      Field("headRefOid", Scalar())

    /**
     * The repository associated with this pull request's head Ref.
     */
    def headRepository[A](
                           innerSelection: SelectionBuilder[Repository, A]
                         ): SelectionBuilder[PullRequest, Option[A]] =
      Field("headRepository", OptionOf(Obj(innerSelection)))

    /**
     * The owner of the repository associated with this pull request's head Ref.
     */
    def headRepositoryOwner[A](
                                onUser: Option[SelectionBuilder[User, A]] = None,
                                onOrganization: Option[SelectionBuilder[Organization, A]] = None
                              ): SelectionBuilder[PullRequest, Option[A]] =
      Field(
        "headRepositoryOwner",
        OptionOf(
          ChoiceOf(
            Map("User" -> onUser, "Organization" -> onOrganization).collect {
              case (k, Some(v)) => k -> Obj(v)
            }
          )
        )
      )

    /**
     * The hovercard information for this issue
     */
    def hovercard[A](includeNotificationContexts: Option[Boolean] = None)(
      innerSelection: SelectionBuilder[Hovercard, A]
    ): SelectionBuilder[PullRequest, A] =
      Field(
        "hovercard",
        Obj(innerSelection),
        arguments = List(
          Argument("includeNotificationContexts", includeNotificationContexts)
        )
      )

    def id: SelectionBuilder[PullRequest, String] = Field("id", Scalar())

    /**
     * Check if this comment was edited and includes an edit with the creation data
     */
    def includesCreatedEdit: SelectionBuilder[PullRequest, Boolean] =
      Field("includesCreatedEdit", Scalar())

    /**
     * The head and base repositories are different.
     */
    def isCrossRepository: SelectionBuilder[PullRequest, Boolean] =
      Field("isCrossRepository", Scalar())

    /**
     * Identifies if the pull request is a draft.
     */
    def isDraft: SelectionBuilder[PullRequest, Boolean] =
      Field("isDraft", Scalar())

    /**
     * A list of labels associated with the object.
     */
    def labels[A](
                   after: Option[String] = None,
                   before: Option[String] = None,
                   first: Option[Int] = None,
                   last: Option[Int] = None,
                   orderBy: Option[LabelOrder] = None
                 )(
                   innerSelection: SelectionBuilder[LabelConnection, A]
                 ): SelectionBuilder[PullRequest, Option[A]] =
      Field(
        "labels",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy)
        )
      )

    /**
     * The moment the editor made the last edit
     */
    def lastEditedAt: SelectionBuilder[PullRequest, Option[DateTime]] =
      Field("lastEditedAt", OptionOf(Scalar()))

    /**
     * A list of latest reviews per user associated with the pull request.
     */
    def latestOpinionatedReviews[A](
                                     after: Option[String] = None,
                                     before: Option[String] = None,
                                     first: Option[Int] = None,
                                     last: Option[Int] = None,
                                     writersOnly: Option[Boolean] = None
                                   )(
                                     innerSelection: SelectionBuilder[PullRequestReviewConnection, A]
                                   ): SelectionBuilder[PullRequest, Option[A]] =
      Field(
        "latestOpinionatedReviews",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("writersOnly", writersOnly)
        )
      )

    /**
     * A list of latest reviews per user associated with the pull request that are not also pending review.
     */
    def latestReviews[A](
                          after: Option[String] = None,
                          before: Option[String] = None,
                          first: Option[Int] = None,
                          last: Option[Int] = None
                        )(
                          innerSelection: SelectionBuilder[PullRequestReviewConnection, A]
                        ): SelectionBuilder[PullRequest, Option[A]] =
      Field(
        "latestReviews",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )

    /**
     * `true` if the pull request is locked
     */
    def locked: SelectionBuilder[PullRequest, Boolean] =
      Field("locked", Scalar())

    /**
     * Indicates whether maintainers can modify the pull request.
     */
    def maintainerCanModify: SelectionBuilder[PullRequest, Boolean] =
      Field("maintainerCanModify", Scalar())

    /**
     * The commit that was created when this pull request was merged.
     */
    def mergeCommit[A](
                        innerSelection: SelectionBuilder[Commit, A]
                      ): SelectionBuilder[PullRequest, Option[A]] =
      Field("mergeCommit", OptionOf(Obj(innerSelection)))

    /**
     * Detailed information about the current pull request merge state status.
     */
    def mergeStateStatus: SelectionBuilder[PullRequest, MergeStateStatus] =
      Field("mergeStateStatus", Scalar())

    /**
     * Whether or not the pull request can be merged based on the existence of merge conflicts.
     */
    def mergeable: SelectionBuilder[PullRequest, MergeableState] =
      Field("mergeable", Scalar())

    /**
     * Whether or not the pull request was merged.
     */
    def merged: SelectionBuilder[PullRequest, Boolean] =
      Field("merged", Scalar())

    /**
     * The date and time that the pull request was merged.
     */
    def mergedAt: SelectionBuilder[PullRequest, Option[DateTime]] =
      Field("mergedAt", OptionOf(Scalar()))

    /**
     * The actor who merged the pull request.
     */
    def mergedBy[A](
                     onBot: Option[SelectionBuilder[Bot, A]] = None,
                     onEnterpriseUserAccount: Option[
                       SelectionBuilder[EnterpriseUserAccount, A]
                     ] = None,
                     onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                     onUser: Option[SelectionBuilder[User, A]] = None,
                     onOrganization: Option[SelectionBuilder[Organization, A]] = None
                   ): SelectionBuilder[PullRequest, Option[A]] =
      Field(
        "mergedBy",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * Identifies the milestone associated with the pull request.
     */
    def milestone[A](
                      innerSelection: SelectionBuilder[Milestone, A]
                    ): SelectionBuilder[PullRequest, Option[A]] =
      Field("milestone", OptionOf(Obj(innerSelection)))

    /**
     * Identifies the pull request number.
     */
    def number: SelectionBuilder[PullRequest, Int] = Field("number", Scalar())

    /**
     * A list of Users that are participating in the Pull Request conversation.
     */
    def participants[A](
                         after: Option[String] = None,
                         before: Option[String] = None,
                         first: Option[Int] = None,
                         last: Option[Int] = None
                       )(
                         innerSelection: SelectionBuilder[UserConnection, A]
                       ): SelectionBuilder[PullRequest, A] =
      Field(
        "participants",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )

    /**
     * The permalink to the pull request.
     */
    def permalink: SelectionBuilder[PullRequest, URI] =
      Field("permalink", Scalar())

    /**
     * The commit that GitHub automatically generated to test if this pull request
     * could be merged. This field will not return a value if the pull request is
     * merged, or if the test merge commit is still being generated. See the
     * `mergeable` field for more details on the mergeability of the pull request.
     */
    def potentialMergeCommit[A](
                                 innerSelection: SelectionBuilder[Commit, A]
                               ): SelectionBuilder[PullRequest, Option[A]] =
      Field("potentialMergeCommit", OptionOf(Obj(innerSelection)))

    /**
     * List of project cards associated with this pull request.
     */
    def projectCards[A](
                         after: Option[String] = None,
                         archivedStates: Option[List[Option[ProjectCardArchivedState]]] = None,
                         before: Option[String] = None,
                         first: Option[Int] = None,
                         last: Option[Int] = None
                       )(
                         innerSelection: SelectionBuilder[ProjectCardConnection, A]
                       ): SelectionBuilder[PullRequest, A] =
      Field(
        "projectCards",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("archivedStates", archivedStates),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )

    /**
     * Identifies when the comment was published at.
     */
    def publishedAt: SelectionBuilder[PullRequest, Option[DateTime]] =
      Field("publishedAt", OptionOf(Scalar()))

    /**
     * A list of reactions grouped by content left on the subject.
     */
    def reactionGroups[A](
                           innerSelection: SelectionBuilder[ReactionGroup, A]
                         ): SelectionBuilder[PullRequest, Option[List[A]]] =
      Field("reactionGroups", OptionOf(ListOf(Obj(innerSelection))))

    /**
     * A list of Reactions left on the Issue.
     */
    def reactions[A](
                      after: Option[String] = None,
                      before: Option[String] = None,
                      content: Option[ReactionContent] = None,
                      first: Option[Int] = None,
                      last: Option[Int] = None,
                      orderBy: Option[ReactionOrder] = None
                    )(
                      innerSelection: SelectionBuilder[ReactionConnection, A]
                    ): SelectionBuilder[PullRequest, A] =
      Field(
        "reactions",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("content", content),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy)
        )
      )

    /**
     * The repository associated with this node.
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[PullRequest, A] =
      Field("repository", Obj(innerSelection))

    /**
     * The HTTP path for this pull request.
     */
    def resourcePath: SelectionBuilder[PullRequest, URI] =
      Field("resourcePath", Scalar())

    /**
     * The HTTP path for reverting this pull request.
     */
    def revertResourcePath: SelectionBuilder[PullRequest, URI] =
      Field("revertResourcePath", Scalar())

    /**
     * The HTTP URL for reverting this pull request.
     */
    def revertUrl: SelectionBuilder[PullRequest, URI] =
      Field("revertUrl", Scalar())

    /**
     * The current status of this pull request with respect to code review.
     */
    def reviewDecision
    : SelectionBuilder[PullRequest, Option[PullRequestReviewDecision]] =
      Field("reviewDecision", OptionOf(Scalar()))

    /**
     * A list of review requests associated with the pull request.
     */
    def reviewRequests[A](
                           after: Option[String] = None,
                           before: Option[String] = None,
                           first: Option[Int] = None,
                           last: Option[Int] = None
                         )(
                           innerSelection: SelectionBuilder[ReviewRequestConnection, A]
                         ): SelectionBuilder[PullRequest, Option[A]] =
      Field(
        "reviewRequests",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )

    /**
     * The list of all review threads for this pull request.
     */
    def reviewThreads[A](
                          after: Option[String] = None,
                          before: Option[String] = None,
                          first: Option[Int] = None,
                          last: Option[Int] = None
                        )(
                          innerSelection: SelectionBuilder[PullRequestReviewThreadConnection, A]
                        ): SelectionBuilder[PullRequest, A] =
      Field(
        "reviewThreads",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )

    /**
     * A list of reviews associated with the pull request.
     */
    def reviews[A](
                    after: Option[String] = None,
                    author: Option[String] = None,
                    before: Option[String] = None,
                    first: Option[Int] = None,
                    last: Option[Int] = None,
                    states: Option[List[PullRequestReviewState]] = None
                  )(
                    innerSelection: SelectionBuilder[PullRequestReviewConnection, A]
                  ): SelectionBuilder[PullRequest, Option[A]] =
      Field(
        "reviews",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after),
          Argument("author", author),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("states", states)
        )
      )

    /**
     * Identifies the state of the pull request.
     */
    def state: SelectionBuilder[PullRequest, PullRequestState] =
      Field("state", Scalar())

    /**
     * A list of reviewer suggestions based on commit history and past review comments.
     */
    def suggestedReviewers[A](
                               innerSelection: SelectionBuilder[SuggestedReviewer, A]
                             ): SelectionBuilder[PullRequest, List[Option[A]]] =
      Field("suggestedReviewers", ListOf(OptionOf(Obj(innerSelection))))

    /**
     * A list of events, comments, commits, etc. associated with the pull request.
     */
    @deprecated(
      "`timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.",
      ""
    )
    def timeline[A](
                     after: Option[String] = None,
                     before: Option[String] = None,
                     first: Option[Int] = None,
                     last: Option[Int] = None,
                     since: Option[DateTime] = None
                   )(
                     innerSelection: SelectionBuilder[PullRequestTimelineConnection, A]
                   ): SelectionBuilder[PullRequest, A] =
      Field(
        "timeline",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("since", since)
        )
      )

    /**
     * A list of events, comments, commits, etc. associated with the pull request.
     */
    def timelineItems[A](
                          after: Option[String] = None,
                          before: Option[String] = None,
                          first: Option[Int] = None,
                          itemTypes: Option[List[PullRequestTimelineItemsItemType]] = None,
                          last: Option[Int] = None,
                          since: Option[DateTime] = None,
                          skip: Option[Int] = None
                        )(
                          innerSelection: SelectionBuilder[PullRequestTimelineItemsConnection, A]
                        ): SelectionBuilder[PullRequest, A] =
      Field(
        "timelineItems",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("itemTypes", itemTypes),
          Argument("last", last),
          Argument("since", since),
          Argument("skip", skip)
        )
      )

    /**
     * Identifies the pull request title.
     */
    def title: SelectionBuilder[PullRequest, String] = Field("title", Scalar())

    /**
     * Identifies the date and time when the object was last updated.
     */
    def updatedAt: SelectionBuilder[PullRequest, DateTime] =
      Field("updatedAt", Scalar())

    /**
     * The HTTP URL for this pull request.
     */
    def url: SelectionBuilder[PullRequest, URI] = Field("url", Scalar())

    /**
     * A list of edits to this content.
     */
    def userContentEdits[A](
                             after: Option[String] = None,
                             before: Option[String] = None,
                             first: Option[Int] = None,
                             last: Option[Int] = None
                           )(
                             innerSelection: SelectionBuilder[UserContentEditConnection, A]
                           ): SelectionBuilder[PullRequest, Option[A]] =
      Field(
        "userContentEdits",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )

    /**
     * Whether or not the viewer can apply suggestion.
     */
    def viewerCanApplySuggestion: SelectionBuilder[PullRequest, Boolean] =
      Field("viewerCanApplySuggestion", Scalar())

    /**
     * Check if the viewer can restore the deleted head ref.
     */
    def viewerCanDeleteHeadRef: SelectionBuilder[PullRequest, Boolean] =
      Field("viewerCanDeleteHeadRef", Scalar())

    /**
     * Can user react to this subject
     */
    def viewerCanReact: SelectionBuilder[PullRequest, Boolean] =
      Field("viewerCanReact", Scalar())

    /**
     * Check if the viewer is able to change their subscription status for the repository.
     */
    def viewerCanSubscribe: SelectionBuilder[PullRequest, Boolean] =
      Field("viewerCanSubscribe", Scalar())

    /**
     * Check if the current viewer can update this object.
     */
    def viewerCanUpdate: SelectionBuilder[PullRequest, Boolean] =
      Field("viewerCanUpdate", Scalar())

    /**
     * Reasons why the current viewer can not update this comment.
     */
    def viewerCannotUpdateReasons
    : SelectionBuilder[PullRequest, List[CommentCannotUpdateReason]] =
      Field("viewerCannotUpdateReasons", ListOf(Scalar()))

    /**
     * Did the viewer author this comment.
     */
    def viewerDidAuthor: SelectionBuilder[PullRequest, Boolean] =
      Field("viewerDidAuthor", Scalar())

    /**
     * The merge body text for the viewer and method.
     */
    def viewerMergeBodyText(
                             mergeType: Option[PullRequestMergeMethod] = None
                           ): SelectionBuilder[PullRequest, String] =
      Field(
        "viewerMergeBodyText",
        Scalar(),
        arguments = List(Argument("mergeType", mergeType))
      )

    /**
     * The merge headline text for the viewer and method.
     */
    def viewerMergeHeadlineText(
                                 mergeType: Option[PullRequestMergeMethod] = None
                               ): SelectionBuilder[PullRequest, String] =
      Field(
        "viewerMergeHeadlineText",
        Scalar(),
        arguments = List(Argument("mergeType", mergeType))
      )

    /**
     * Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
     */
    def viewerSubscription
    : SelectionBuilder[PullRequest, Option[SubscriptionState]] =
      Field("viewerSubscription", OptionOf(Scalar()))
  }

  type PullRequestChangedFile

  object PullRequestChangedFile {

    /**
     * The number of additions to the file.
     */
    def additions: SelectionBuilder[PullRequestChangedFile, Int] =
      Field("additions", Scalar())

    /**
     * The number of deletions to the file.
     */
    def deletions: SelectionBuilder[PullRequestChangedFile, Int] =
      Field("deletions", Scalar())

    /**
     * The path of the file.
     */
    def path: SelectionBuilder[PullRequestChangedFile, String] =
      Field("path", Scalar())
  }

  type PullRequestChangedFileConnection

  object PullRequestChangedFileConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[PullRequestChangedFileEdge, A]
                ): SelectionBuilder[PullRequestChangedFileConnection, Option[
      List[Option[A]]
    ]] = Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[PullRequestChangedFile, A]
                ): SelectionBuilder[PullRequestChangedFileConnection, Option[
      List[Option[A]]
    ]] = Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[PullRequestChangedFileConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[PullRequestChangedFileConnection, Int] =
      Field("totalCount", Scalar())
  }

  type PullRequestChangedFileEdge

  object PullRequestChangedFileEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[PullRequestChangedFileEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[PullRequestChangedFile, A]
               ): SelectionBuilder[PullRequestChangedFileEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type PullRequestCommit

  object PullRequestCommit {

    /**
     * The Git commit object
     */
    def commit[A](
                   innerSelection: SelectionBuilder[Commit, A]
                 ): SelectionBuilder[PullRequestCommit, A] =
      Field("commit", Obj(innerSelection))

    def id: SelectionBuilder[PullRequestCommit, String] = Field("id", Scalar())

    /**
     * The pull request this commit belongs to
     */
    def pullRequest[A](
                        innerSelection: SelectionBuilder[PullRequest, A]
                      ): SelectionBuilder[PullRequestCommit, A] =
      Field("pullRequest", Obj(innerSelection))

    /**
     * The HTTP path for this pull request commit
     */
    def resourcePath: SelectionBuilder[PullRequestCommit, URI] =
      Field("resourcePath", Scalar())

    /**
     * The HTTP URL for this pull request commit
     */
    def url: SelectionBuilder[PullRequestCommit, URI] = Field("url", Scalar())
  }

  type PullRequestCommitCommentThread

  object PullRequestCommitCommentThread {

    /**
     * The comments that exist in this thread.
     */
    def comments[A](
                     after: Option[String] = None,
                     before: Option[String] = None,
                     first: Option[Int] = None,
                     last: Option[Int] = None
                   )(
                     innerSelection: SelectionBuilder[CommitCommentConnection, A]
                   ): SelectionBuilder[PullRequestCommitCommentThread, A] =
      Field(
        "comments",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )

    /**
     * The commit the comments were made on.
     */
    def commit[A](
                   innerSelection: SelectionBuilder[Commit, A]
                 ): SelectionBuilder[PullRequestCommitCommentThread, A] =
      Field("commit", Obj(innerSelection))

    def id: SelectionBuilder[PullRequestCommitCommentThread, String] =
      Field("id", Scalar())

    /**
     * The file the comments were made on.
     */
    def path: SelectionBuilder[PullRequestCommitCommentThread, Option[String]] =
      Field("path", OptionOf(Scalar()))

    /**
     * The position in the diff for the commit that the comment was made on.
     */
    def position
    : SelectionBuilder[PullRequestCommitCommentThread, Option[Int]] =
      Field("position", OptionOf(Scalar()))

    /**
     * The pull request this commit comment thread belongs to
     */
    def pullRequest[A](
                        innerSelection: SelectionBuilder[PullRequest, A]
                      ): SelectionBuilder[PullRequestCommitCommentThread, A] =
      Field("pullRequest", Obj(innerSelection))

    /**
     * The repository associated with this node.
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[PullRequestCommitCommentThread, A] =
      Field("repository", Obj(innerSelection))
  }

  type PullRequestCommitConnection

  object PullRequestCommitConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[PullRequestCommitEdge, A]
                ): SelectionBuilder[PullRequestCommitConnection, Option[List[Option[A]]]] =
      Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[PullRequestCommit, A]
                ): SelectionBuilder[PullRequestCommitConnection, Option[List[Option[A]]]] =
      Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[PullRequestCommitConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[PullRequestCommitConnection, Int] =
      Field("totalCount", Scalar())
  }

  type PullRequestCommitEdge

  object PullRequestCommitEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[PullRequestCommitEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[PullRequestCommit, A]
               ): SelectionBuilder[PullRequestCommitEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type PullRequestConnection

  object PullRequestConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[PullRequestEdge, A]
                ): SelectionBuilder[PullRequestConnection, Option[List[Option[A]]]] =
      Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[PullRequest, A]
                ): SelectionBuilder[PullRequestConnection, Option[List[Option[A]]]] =
      Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[PullRequestConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[PullRequestConnection, Int] =
      Field("totalCount", Scalar())
  }

  type PullRequestContributionsByRepository

  object PullRequestContributionsByRepository {

    /**
     * The pull request contributions.
     */
    def contributions[A](
                          after: Option[String] = None,
                          before: Option[String] = None,
                          first: Option[Int] = None,
                          last: Option[Int] = None,
                          orderBy: Option[ContributionOrder] = None
                        )(
                          innerSelection: SelectionBuilder[
                            CreatedPullRequestContributionConnection,
                            A
                          ]
                        ): SelectionBuilder[PullRequestContributionsByRepository, A] =
      Field(
        "contributions",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy)
        )
      )

    /**
     * The repository in which the pull requests were opened.
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[PullRequestContributionsByRepository, A] =
      Field("repository", Obj(innerSelection))
  }

  type PullRequestEdge

  object PullRequestEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[PullRequestEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[PullRequest, A]
               ): SelectionBuilder[PullRequestEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type PullRequestReview

  object PullRequestReview {

    /**
     * The actor who authored the comment.
     */
    def author[A](
                   onBot: Option[SelectionBuilder[Bot, A]] = None,
                   onEnterpriseUserAccount: Option[
                     SelectionBuilder[EnterpriseUserAccount, A]
                   ] = None,
                   onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                   onUser: Option[SelectionBuilder[User, A]] = None,
                   onOrganization: Option[SelectionBuilder[Organization, A]] = None
                 ): SelectionBuilder[PullRequestReview, Option[A]] =
      Field(
        "author",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * Author's association with the subject of the comment.
     */
    def authorAssociation
    : SelectionBuilder[PullRequestReview, CommentAuthorAssociation] =
      Field("authorAssociation", Scalar())

    /**
     * Indicates whether the author of this review has push access to the repository.
     */
    def authorCanPushToRepository
    : SelectionBuilder[PullRequestReview, Boolean] =
      Field("authorCanPushToRepository", Scalar())

    /**
     * Identifies the pull request review body.
     */
    def body: SelectionBuilder[PullRequestReview, String] =
      Field("body", Scalar())

    /**
     * The body rendered to HTML.
     */
    def bodyHTML: SelectionBuilder[PullRequestReview, HTML] =
      Field("bodyHTML", Scalar())

    /**
     * The body of this review rendered as plain text.
     */
    def bodyText: SelectionBuilder[PullRequestReview, String] =
      Field("bodyText", Scalar())

    /**
     * A list of review comments for the current pull request review.
     */
    def comments[A](
                     after: Option[String] = None,
                     before: Option[String] = None,
                     first: Option[Int] = None,
                     last: Option[Int] = None
                   )(
                     innerSelection: SelectionBuilder[PullRequestReviewCommentConnection, A]
                   ): SelectionBuilder[PullRequestReview, A] =
      Field(
        "comments",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )

    /**
     * Identifies the commit associated with this pull request review.
     */
    def commit[A](
                   innerSelection: SelectionBuilder[Commit, A]
                 ): SelectionBuilder[PullRequestReview, Option[A]] =
      Field("commit", OptionOf(Obj(innerSelection)))

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[PullRequestReview, DateTime] =
      Field("createdAt", Scalar())

    /**
     * Check if this comment was created via an email reply.
     */
    def createdViaEmail: SelectionBuilder[PullRequestReview, Boolean] =
      Field("createdViaEmail", Scalar())

    /**
     * Identifies the primary key from the database.
     */
    def databaseId: SelectionBuilder[PullRequestReview, Option[Int]] =
      Field("databaseId", OptionOf(Scalar()))

    /**
     * The actor who edited the comment.
     */
    def editor[A](
                   onBot: Option[SelectionBuilder[Bot, A]] = None,
                   onEnterpriseUserAccount: Option[
                     SelectionBuilder[EnterpriseUserAccount, A]
                   ] = None,
                   onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                   onUser: Option[SelectionBuilder[User, A]] = None,
                   onOrganization: Option[SelectionBuilder[Organization, A]] = None
                 ): SelectionBuilder[PullRequestReview, Option[A]] =
      Field(
        "editor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    def id: SelectionBuilder[PullRequestReview, String] = Field("id", Scalar())

    /**
     * Check if this comment was edited and includes an edit with the creation data
     */
    def includesCreatedEdit: SelectionBuilder[PullRequestReview, Boolean] =
      Field("includesCreatedEdit", Scalar())

    /**
     * The moment the editor made the last edit
     */
    def lastEditedAt: SelectionBuilder[PullRequestReview, Option[DateTime]] =
      Field("lastEditedAt", OptionOf(Scalar()))

    /**
     * A list of teams that this review was made on behalf of.
     */
    def onBehalfOf[A](
                       after: Option[String] = None,
                       before: Option[String] = None,
                       first: Option[Int] = None,
                       last: Option[Int] = None
                     )(
                       innerSelection: SelectionBuilder[TeamConnection, A]
                     ): SelectionBuilder[PullRequestReview, A] =
      Field(
        "onBehalfOf",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )

    /**
     * Identifies when the comment was published at.
     */
    def publishedAt: SelectionBuilder[PullRequestReview, Option[DateTime]] =
      Field("publishedAt", OptionOf(Scalar()))

    /**
     * Identifies the pull request associated with this pull request review.
     */
    def pullRequest[A](
                        innerSelection: SelectionBuilder[PullRequest, A]
                      ): SelectionBuilder[PullRequestReview, A] =
      Field("pullRequest", Obj(innerSelection))

    /**
     * A list of reactions grouped by content left on the subject.
     */
    def reactionGroups[A](
                           innerSelection: SelectionBuilder[ReactionGroup, A]
                         ): SelectionBuilder[PullRequestReview, Option[List[A]]] =
      Field("reactionGroups", OptionOf(ListOf(Obj(innerSelection))))

    /**
     * A list of Reactions left on the Issue.
     */
    def reactions[A](
                      after: Option[String] = None,
                      before: Option[String] = None,
                      content: Option[ReactionContent] = None,
                      first: Option[Int] = None,
                      last: Option[Int] = None,
                      orderBy: Option[ReactionOrder] = None
                    )(
                      innerSelection: SelectionBuilder[ReactionConnection, A]
                    ): SelectionBuilder[PullRequestReview, A] =
      Field(
        "reactions",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("content", content),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy)
        )
      )

    /**
     * The repository associated with this node.
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[PullRequestReview, A] =
      Field("repository", Obj(innerSelection))

    /**
     * The HTTP path permalink for this PullRequestReview.
     */
    def resourcePath: SelectionBuilder[PullRequestReview, URI] =
      Field("resourcePath", Scalar())

    /**
     * Identifies the current state of the pull request review.
     */
    def state: SelectionBuilder[PullRequestReview, PullRequestReviewState] =
      Field("state", Scalar())

    /**
     * Identifies when the Pull Request Review was submitted
     */
    def submittedAt: SelectionBuilder[PullRequestReview, Option[DateTime]] =
      Field("submittedAt", OptionOf(Scalar()))

    /**
     * Identifies the date and time when the object was last updated.
     */
    def updatedAt: SelectionBuilder[PullRequestReview, DateTime] =
      Field("updatedAt", Scalar())

    /**
     * The HTTP URL permalink for this PullRequestReview.
     */
    def url: SelectionBuilder[PullRequestReview, URI] = Field("url", Scalar())

    /**
     * A list of edits to this content.
     */
    def userContentEdits[A](
                             after: Option[String] = None,
                             before: Option[String] = None,
                             first: Option[Int] = None,
                             last: Option[Int] = None
                           )(
                             innerSelection: SelectionBuilder[UserContentEditConnection, A]
                           ): SelectionBuilder[PullRequestReview, Option[A]] =
      Field(
        "userContentEdits",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )

    /**
     * Check if the current viewer can delete this object.
     */
    def viewerCanDelete: SelectionBuilder[PullRequestReview, Boolean] =
      Field("viewerCanDelete", Scalar())

    /**
     * Can user react to this subject
     */
    def viewerCanReact: SelectionBuilder[PullRequestReview, Boolean] =
      Field("viewerCanReact", Scalar())

    /**
     * Check if the current viewer can update this object.
     */
    def viewerCanUpdate: SelectionBuilder[PullRequestReview, Boolean] =
      Field("viewerCanUpdate", Scalar())

    /**
     * Reasons why the current viewer can not update this comment.
     */
    def viewerCannotUpdateReasons
    : SelectionBuilder[PullRequestReview, List[CommentCannotUpdateReason]] =
      Field("viewerCannotUpdateReasons", ListOf(Scalar()))

    /**
     * Did the viewer author this comment.
     */
    def viewerDidAuthor: SelectionBuilder[PullRequestReview, Boolean] =
      Field("viewerDidAuthor", Scalar())
  }

  type PullRequestReviewComment

  object PullRequestReviewComment {

    /**
     * The actor who authored the comment.
     */
    def author[A](
                   onBot: Option[SelectionBuilder[Bot, A]] = None,
                   onEnterpriseUserAccount: Option[
                     SelectionBuilder[EnterpriseUserAccount, A]
                   ] = None,
                   onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                   onUser: Option[SelectionBuilder[User, A]] = None,
                   onOrganization: Option[SelectionBuilder[Organization, A]] = None
                 ): SelectionBuilder[PullRequestReviewComment, Option[A]] =
      Field(
        "author",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * Author's association with the subject of the comment.
     */
    def authorAssociation
    : SelectionBuilder[PullRequestReviewComment, CommentAuthorAssociation] =
      Field("authorAssociation", Scalar())

    /**
     * The comment body of this review comment.
     */
    def body: SelectionBuilder[PullRequestReviewComment, String] =
      Field("body", Scalar())

    /**
     * The body rendered to HTML.
     */
    def bodyHTML: SelectionBuilder[PullRequestReviewComment, HTML] =
      Field("bodyHTML", Scalar())

    /**
     * The comment body of this review comment rendered as plain text.
     */
    def bodyText: SelectionBuilder[PullRequestReviewComment, String] =
      Field("bodyText", Scalar())

    /**
     * Identifies the commit associated with the comment.
     */
    def commit[A](
                   innerSelection: SelectionBuilder[Commit, A]
                 ): SelectionBuilder[PullRequestReviewComment, Option[A]] =
      Field("commit", OptionOf(Obj(innerSelection)))

    /**
     * Identifies when the comment was created.
     */
    def createdAt: SelectionBuilder[PullRequestReviewComment, DateTime] =
      Field("createdAt", Scalar())

    /**
     * Check if this comment was created via an email reply.
     */
    def createdViaEmail: SelectionBuilder[PullRequestReviewComment, Boolean] =
      Field("createdViaEmail", Scalar())

    /**
     * Identifies the primary key from the database.
     */
    def databaseId: SelectionBuilder[PullRequestReviewComment, Option[Int]] =
      Field("databaseId", OptionOf(Scalar()))

    /**
     * The diff hunk to which the comment applies.
     */
    def diffHunk: SelectionBuilder[PullRequestReviewComment, String] =
      Field("diffHunk", Scalar())

    /**
     * Identifies when the comment was created in a draft state.
     */
    def draftedAt: SelectionBuilder[PullRequestReviewComment, DateTime] =
      Field("draftedAt", Scalar())

    /**
     * The actor who edited the comment.
     */
    def editor[A](
                   onBot: Option[SelectionBuilder[Bot, A]] = None,
                   onEnterpriseUserAccount: Option[
                     SelectionBuilder[EnterpriseUserAccount, A]
                   ] = None,
                   onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                   onUser: Option[SelectionBuilder[User, A]] = None,
                   onOrganization: Option[SelectionBuilder[Organization, A]] = None
                 ): SelectionBuilder[PullRequestReviewComment, Option[A]] =
      Field(
        "editor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    def id: SelectionBuilder[PullRequestReviewComment, String] =
      Field("id", Scalar())

    /**
     * Check if this comment was edited and includes an edit with the creation data
     */
    def includesCreatedEdit
    : SelectionBuilder[PullRequestReviewComment, Boolean] =
      Field("includesCreatedEdit", Scalar())

    /**
     * Returns whether or not a comment has been minimized.
     */
    def isMinimized: SelectionBuilder[PullRequestReviewComment, Boolean] =
      Field("isMinimized", Scalar())

    /**
     * The moment the editor made the last edit
     */
    def lastEditedAt
    : SelectionBuilder[PullRequestReviewComment, Option[DateTime]] =
      Field("lastEditedAt", OptionOf(Scalar()))

    /**
     * Returns why the comment was minimized.
     */
    def minimizedReason
    : SelectionBuilder[PullRequestReviewComment, Option[String]] =
      Field("minimizedReason", OptionOf(Scalar()))

    /**
     * Identifies the original commit associated with the comment.
     */
    def originalCommit[A](
                           innerSelection: SelectionBuilder[Commit, A]
                         ): SelectionBuilder[PullRequestReviewComment, Option[A]] =
      Field("originalCommit", OptionOf(Obj(innerSelection)))

    /**
     * The original line index in the diff to which the comment applies.
     */
    def originalPosition: SelectionBuilder[PullRequestReviewComment, Int] =
      Field("originalPosition", Scalar())

    /**
     * Identifies when the comment body is outdated
     */
    def outdated: SelectionBuilder[PullRequestReviewComment, Boolean] =
      Field("outdated", Scalar())

    /**
     * The path to which the comment applies.
     */
    def path: SelectionBuilder[PullRequestReviewComment, String] =
      Field("path", Scalar())

    /**
     * The line index in the diff to which the comment applies.
     */
    def position: SelectionBuilder[PullRequestReviewComment, Option[Int]] =
      Field("position", OptionOf(Scalar()))

    /**
     * Identifies when the comment was published at.
     */
    def publishedAt
    : SelectionBuilder[PullRequestReviewComment, Option[DateTime]] =
      Field("publishedAt", OptionOf(Scalar()))

    /**
     * The pull request associated with this review comment.
     */
    def pullRequest[A](
                        innerSelection: SelectionBuilder[PullRequest, A]
                      ): SelectionBuilder[PullRequestReviewComment, A] =
      Field("pullRequest", Obj(innerSelection))

    /**
     * The pull request review associated with this review comment.
     */
    def pullRequestReview[A](
                              innerSelection: SelectionBuilder[PullRequestReview, A]
                            ): SelectionBuilder[PullRequestReviewComment, Option[A]] =
      Field("pullRequestReview", OptionOf(Obj(innerSelection)))

    /**
     * A list of reactions grouped by content left on the subject.
     */
    def reactionGroups[A](
                           innerSelection: SelectionBuilder[ReactionGroup, A]
                         ): SelectionBuilder[PullRequestReviewComment, Option[List[A]]] =
      Field("reactionGroups", OptionOf(ListOf(Obj(innerSelection))))

    /**
     * A list of Reactions left on the Issue.
     */
    def reactions[A](
                      after: Option[String] = None,
                      before: Option[String] = None,
                      content: Option[ReactionContent] = None,
                      first: Option[Int] = None,
                      last: Option[Int] = None,
                      orderBy: Option[ReactionOrder] = None
                    )(
                      innerSelection: SelectionBuilder[ReactionConnection, A]
                    ): SelectionBuilder[PullRequestReviewComment, A] =
      Field(
        "reactions",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("content", content),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy)
        )
      )

    /**
     * The comment this is a reply to.
     */
    def replyTo[A](
                    innerSelection: SelectionBuilder[PullRequestReviewComment, A]
                  ): SelectionBuilder[PullRequestReviewComment, Option[A]] =
      Field("replyTo", OptionOf(Obj(innerSelection)))

    /**
     * The repository associated with this node.
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[PullRequestReviewComment, A] =
      Field("repository", Obj(innerSelection))

    /**
     * The HTTP path permalink for this review comment.
     */
    def resourcePath: SelectionBuilder[PullRequestReviewComment, URI] =
      Field("resourcePath", Scalar())

    /**
     * Identifies the state of the comment.
     */
    def state: SelectionBuilder[
      PullRequestReviewComment,
      PullRequestReviewCommentState
    ] = Field("state", Scalar())

    /**
     * Identifies when the comment was last updated.
     */
    def updatedAt: SelectionBuilder[PullRequestReviewComment, DateTime] =
      Field("updatedAt", Scalar())

    /**
     * The HTTP URL permalink for this review comment.
     */
    def url: SelectionBuilder[PullRequestReviewComment, URI] =
      Field("url", Scalar())

    /**
     * A list of edits to this content.
     */
    def userContentEdits[A](
                             after: Option[String] = None,
                             before: Option[String] = None,
                             first: Option[Int] = None,
                             last: Option[Int] = None
                           )(
                             innerSelection: SelectionBuilder[UserContentEditConnection, A]
                           ): SelectionBuilder[PullRequestReviewComment, Option[A]] =
      Field(
        "userContentEdits",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )

    /**
     * Check if the current viewer can delete this object.
     */
    def viewerCanDelete: SelectionBuilder[PullRequestReviewComment, Boolean] =
      Field("viewerCanDelete", Scalar())

    /**
     * Check if the current viewer can minimize this object.
     */
    def viewerCanMinimize: SelectionBuilder[PullRequestReviewComment, Boolean] =
      Field("viewerCanMinimize", Scalar())

    /**
     * Can user react to this subject
     */
    def viewerCanReact: SelectionBuilder[PullRequestReviewComment, Boolean] =
      Field("viewerCanReact", Scalar())

    /**
     * Check if the current viewer can update this object.
     */
    def viewerCanUpdate: SelectionBuilder[PullRequestReviewComment, Boolean] =
      Field("viewerCanUpdate", Scalar())

    /**
     * Reasons why the current viewer can not update this comment.
     */
    def viewerCannotUpdateReasons
    : SelectionBuilder[PullRequestReviewComment, List[
      CommentCannotUpdateReason
    ]] = Field("viewerCannotUpdateReasons", ListOf(Scalar()))

    /**
     * Did the viewer author this comment.
     */
    def viewerDidAuthor: SelectionBuilder[PullRequestReviewComment, Boolean] =
      Field("viewerDidAuthor", Scalar())
  }

  type PullRequestReviewCommentConnection

  object PullRequestReviewCommentConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[PullRequestReviewCommentEdge, A]
                ): SelectionBuilder[PullRequestReviewCommentConnection, Option[
      List[Option[A]]
    ]] = Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[PullRequestReviewComment, A]
                ): SelectionBuilder[PullRequestReviewCommentConnection, Option[
      List[Option[A]]
    ]] = Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[PullRequestReviewCommentConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[PullRequestReviewCommentConnection, Int] =
      Field("totalCount", Scalar())
  }

  type PullRequestReviewCommentEdge

  object PullRequestReviewCommentEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[PullRequestReviewCommentEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[PullRequestReviewComment, A]
               ): SelectionBuilder[PullRequestReviewCommentEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type PullRequestReviewConnection

  object PullRequestReviewConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[PullRequestReviewEdge, A]
                ): SelectionBuilder[PullRequestReviewConnection, Option[List[Option[A]]]] =
      Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[PullRequestReview, A]
                ): SelectionBuilder[PullRequestReviewConnection, Option[List[Option[A]]]] =
      Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[PullRequestReviewConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[PullRequestReviewConnection, Int] =
      Field("totalCount", Scalar())
  }

  type PullRequestReviewContributionsByRepository

  object PullRequestReviewContributionsByRepository {

    /**
     * The pull request review contributions.
     */
    def contributions[A](
                          after: Option[String] = None,
                          before: Option[String] = None,
                          first: Option[Int] = None,
                          last: Option[Int] = None,
                          orderBy: Option[ContributionOrder] = None
                        )(
                          innerSelection: SelectionBuilder[
                            CreatedPullRequestReviewContributionConnection,
                            A
                          ]
                        ): SelectionBuilder[PullRequestReviewContributionsByRepository, A] =
      Field(
        "contributions",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy)
        )
      )

    /**
     * The repository in which the pull request reviews were made.
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[PullRequestReviewContributionsByRepository, A] =
      Field("repository", Obj(innerSelection))
  }

  type PullRequestReviewEdge

  object PullRequestReviewEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[PullRequestReviewEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[PullRequestReview, A]
               ): SelectionBuilder[PullRequestReviewEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type PullRequestReviewThread

  object PullRequestReviewThread {

    /**
     * A list of pull request comments associated with the thread.
     */
    def comments[A](
                     after: Option[String] = None,
                     before: Option[String] = None,
                     first: Option[Int] = None,
                     last: Option[Int] = None,
                     skip: Option[Int] = None
                   )(
                     innerSelection: SelectionBuilder[PullRequestReviewCommentConnection, A]
                   ): SelectionBuilder[PullRequestReviewThread, A] =
      Field(
        "comments",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("skip", skip)
        )
      )

    /**
     * The side of the diff on which this thread was placed.
     */
    def diffSide: SelectionBuilder[PullRequestReviewThread, DiffSide] =
      Field("diffSide", Scalar())

    def id: SelectionBuilder[PullRequestReviewThread, String] =
      Field("id", Scalar())

    /**
     * Whether or not the thread has been collapsed (outdated or resolved)
     */
    def isCollapsed: SelectionBuilder[PullRequestReviewThread, Boolean] =
      Field("isCollapsed", Scalar())

    /**
     * Indicates whether this thread was outdated by newer changes.
     */
    def isOutdated: SelectionBuilder[PullRequestReviewThread, Boolean] =
      Field("isOutdated", Scalar())

    /**
     * Whether this thread has been resolved
     */
    def isResolved: SelectionBuilder[PullRequestReviewThread, Boolean] =
      Field("isResolved", Scalar())

    /**
     * The line in the file to which this thread refers
     */
    def line: SelectionBuilder[PullRequestReviewThread, Option[Int]] =
      Field("line", OptionOf(Scalar()))

    /**
     * The original line in the file to which this thread refers.
     */
    def originalLine: SelectionBuilder[PullRequestReviewThread, Option[Int]] =
      Field("originalLine", OptionOf(Scalar()))

    /**
     * The original start line in the file to which this thread refers (multi-line only).
     */
    def originalStartLine
    : SelectionBuilder[PullRequestReviewThread, Option[Int]] =
      Field("originalStartLine", OptionOf(Scalar()))

    /**
     * Identifies the file path of this thread.
     */
    def path: SelectionBuilder[PullRequestReviewThread, String] =
      Field("path", Scalar())

    /**
     * Identifies the pull request associated with this thread.
     */
    def pullRequest[A](
                        innerSelection: SelectionBuilder[PullRequest, A]
                      ): SelectionBuilder[PullRequestReviewThread, A] =
      Field("pullRequest", Obj(innerSelection))

    /**
     * Identifies the repository associated with this thread.
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[PullRequestReviewThread, A] =
      Field("repository", Obj(innerSelection))

    /**
     * The user who resolved this thread
     */
    def resolvedBy[A](
                       innerSelection: SelectionBuilder[User, A]
                     ): SelectionBuilder[PullRequestReviewThread, Option[A]] =
      Field("resolvedBy", OptionOf(Obj(innerSelection)))

    /**
     * The side of the diff that the first line of the thread starts on (multi-line only)
     */
    def startDiffSide
    : SelectionBuilder[PullRequestReviewThread, Option[DiffSide]] =
      Field("startDiffSide", OptionOf(Scalar()))

    /**
     * The start line in the file to which this thread refers (multi-line only)
     */
    def startLine: SelectionBuilder[PullRequestReviewThread, Option[Int]] =
      Field("startLine", OptionOf(Scalar()))

    /**
     * Indicates whether the current viewer can reply to this thread.
     */
    def viewerCanReply: SelectionBuilder[PullRequestReviewThread, Boolean] =
      Field("viewerCanReply", Scalar())

    /**
     * Whether or not the viewer can resolve this thread
     */
    def viewerCanResolve: SelectionBuilder[PullRequestReviewThread, Boolean] =
      Field("viewerCanResolve", Scalar())

    /**
     * Whether or not the viewer can unresolve this thread
     */
    def viewerCanUnresolve: SelectionBuilder[PullRequestReviewThread, Boolean] =
      Field("viewerCanUnresolve", Scalar())
  }

  type PullRequestReviewThreadConnection

  object PullRequestReviewThreadConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[PullRequestReviewThreadEdge, A]
                ): SelectionBuilder[PullRequestReviewThreadConnection, Option[
      List[Option[A]]
    ]] = Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[PullRequestReviewThread, A]
                ): SelectionBuilder[PullRequestReviewThreadConnection, Option[
      List[Option[A]]
    ]] = Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[PullRequestReviewThreadConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[PullRequestReviewThreadConnection, Int] =
      Field("totalCount", Scalar())
  }

  type PullRequestReviewThreadEdge

  object PullRequestReviewThreadEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[PullRequestReviewThreadEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[PullRequestReviewThread, A]
               ): SelectionBuilder[PullRequestReviewThreadEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type PullRequestRevisionMarker

  object PullRequestRevisionMarker {

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[PullRequestRevisionMarker, DateTime] =
      Field("createdAt", Scalar())

    /**
     * The last commit the viewer has seen.
     */
    def lastSeenCommit[A](
                           innerSelection: SelectionBuilder[Commit, A]
                         ): SelectionBuilder[PullRequestRevisionMarker, A] =
      Field("lastSeenCommit", Obj(innerSelection))

    /**
     * The pull request to which the marker belongs.
     */
    def pullRequest[A](
                        innerSelection: SelectionBuilder[PullRequest, A]
                      ): SelectionBuilder[PullRequestRevisionMarker, A] =
      Field("pullRequest", Obj(innerSelection))
  }

  type PullRequestTimelineConnection

  object PullRequestTimelineConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[PullRequestTimelineItemEdge, A]
                ): SelectionBuilder[PullRequestTimelineConnection, Option[
      List[Option[A]]
    ]] = Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  onAssignedEvent: SelectionBuilder[AssignedEvent, A],
                  onBaseRefDeletedEvent: SelectionBuilder[BaseRefDeletedEvent, A],
                  onBaseRefForcePushedEvent: SelectionBuilder[BaseRefForcePushedEvent, A],
                  onClosedEvent: SelectionBuilder[ClosedEvent, A],
                  onCommit: SelectionBuilder[Commit, A],
                  onCommitCommentThread: SelectionBuilder[CommitCommentThread, A],
                  onCrossReferencedEvent: SelectionBuilder[CrossReferencedEvent, A],
                  onDemilestonedEvent: SelectionBuilder[DemilestonedEvent, A],
                  onDeployedEvent: SelectionBuilder[DeployedEvent, A],
                  onDeploymentEnvironmentChangedEvent: SelectionBuilder[
                    DeploymentEnvironmentChangedEvent,
                    A
                  ],
                  onHeadRefDeletedEvent: SelectionBuilder[HeadRefDeletedEvent, A],
                  onHeadRefForcePushedEvent: SelectionBuilder[HeadRefForcePushedEvent, A],
                  onHeadRefRestoredEvent: SelectionBuilder[HeadRefRestoredEvent, A],
                  onIssueComment: SelectionBuilder[IssueComment, A],
                  onLabeledEvent: SelectionBuilder[LabeledEvent, A],
                  onLockedEvent: SelectionBuilder[LockedEvent, A],
                  onMergedEvent: SelectionBuilder[MergedEvent, A],
                  onMilestonedEvent: SelectionBuilder[MilestonedEvent, A],
                  onPullRequestReview: SelectionBuilder[PullRequestReview, A],
                  onPullRequestReviewComment: SelectionBuilder[
                    PullRequestReviewComment,
                    A
                  ],
                  onPullRequestReviewThread: SelectionBuilder[PullRequestReviewThread, A],
                  onReferencedEvent: SelectionBuilder[ReferencedEvent, A],
                  onRenamedTitleEvent: SelectionBuilder[RenamedTitleEvent, A],
                  onReopenedEvent: SelectionBuilder[ReopenedEvent, A],
                  onReviewDismissedEvent: SelectionBuilder[ReviewDismissedEvent, A],
                  onReviewRequestRemovedEvent: SelectionBuilder[
                    ReviewRequestRemovedEvent,
                    A
                  ],
                  onReviewRequestedEvent: SelectionBuilder[ReviewRequestedEvent, A],
                  onSubscribedEvent: SelectionBuilder[SubscribedEvent, A],
                  onUnassignedEvent: SelectionBuilder[UnassignedEvent, A],
                  onUnlabeledEvent: SelectionBuilder[UnlabeledEvent, A],
                  onUnlockedEvent: SelectionBuilder[UnlockedEvent, A],
                  onUnsubscribedEvent: SelectionBuilder[UnsubscribedEvent, A],
                  onUserBlockedEvent: SelectionBuilder[UserBlockedEvent, A]
                ): SelectionBuilder[PullRequestTimelineConnection, Option[
      List[Option[A]]
    ]] =
      Field(
        "nodes",
        OptionOf(
          ListOf(
            OptionOf(
              ChoiceOf(
                Map(
                  "AssignedEvent" -> Obj(onAssignedEvent),
                  "BaseRefDeletedEvent" -> Obj(onBaseRefDeletedEvent),
                  "BaseRefForcePushedEvent" -> Obj(onBaseRefForcePushedEvent),
                  "ClosedEvent" -> Obj(onClosedEvent),
                  "Commit" -> Obj(onCommit),
                  "CommitCommentThread" -> Obj(onCommitCommentThread),
                  "CrossReferencedEvent" -> Obj(onCrossReferencedEvent),
                  "DemilestonedEvent" -> Obj(onDemilestonedEvent),
                  "DeployedEvent" -> Obj(onDeployedEvent),
                  "DeploymentEnvironmentChangedEvent" -> Obj(
                    onDeploymentEnvironmentChangedEvent
                  ),
                  "HeadRefDeletedEvent" -> Obj(onHeadRefDeletedEvent),
                  "HeadRefForcePushedEvent" -> Obj(onHeadRefForcePushedEvent),
                  "HeadRefRestoredEvent" -> Obj(onHeadRefRestoredEvent),
                  "IssueComment" -> Obj(onIssueComment),
                  "LabeledEvent" -> Obj(onLabeledEvent),
                  "LockedEvent" -> Obj(onLockedEvent),
                  "MergedEvent" -> Obj(onMergedEvent),
                  "MilestonedEvent" -> Obj(onMilestonedEvent),
                  "PullRequestReview" -> Obj(onPullRequestReview),
                  "PullRequestReviewComment" -> Obj(onPullRequestReviewComment),
                  "PullRequestReviewThread" -> Obj(onPullRequestReviewThread),
                  "ReferencedEvent" -> Obj(onReferencedEvent),
                  "RenamedTitleEvent" -> Obj(onRenamedTitleEvent),
                  "ReopenedEvent" -> Obj(onReopenedEvent),
                  "ReviewDismissedEvent" -> Obj(onReviewDismissedEvent),
                  "ReviewRequestRemovedEvent" -> Obj(
                    onReviewRequestRemovedEvent
                  ),
                  "ReviewRequestedEvent" -> Obj(onReviewRequestedEvent),
                  "SubscribedEvent" -> Obj(onSubscribedEvent),
                  "UnassignedEvent" -> Obj(onUnassignedEvent),
                  "UnlabeledEvent" -> Obj(onUnlabeledEvent),
                  "UnlockedEvent" -> Obj(onUnlockedEvent),
                  "UnsubscribedEvent" -> Obj(onUnsubscribedEvent),
                  "UserBlockedEvent" -> Obj(onUserBlockedEvent)
                )
              )
            )
          )
        )
      )

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[PullRequestTimelineConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[PullRequestTimelineConnection, Int] =
      Field("totalCount", Scalar())
  }

  type PullRequestTimelineItemEdge

  object PullRequestTimelineItemEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[PullRequestTimelineItemEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 onAssignedEvent: SelectionBuilder[AssignedEvent, A],
                 onBaseRefDeletedEvent: SelectionBuilder[BaseRefDeletedEvent, A],
                 onBaseRefForcePushedEvent: SelectionBuilder[BaseRefForcePushedEvent, A],
                 onClosedEvent: SelectionBuilder[ClosedEvent, A],
                 onCommit: SelectionBuilder[Commit, A],
                 onCommitCommentThread: SelectionBuilder[CommitCommentThread, A],
                 onCrossReferencedEvent: SelectionBuilder[CrossReferencedEvent, A],
                 onDemilestonedEvent: SelectionBuilder[DemilestonedEvent, A],
                 onDeployedEvent: SelectionBuilder[DeployedEvent, A],
                 onDeploymentEnvironmentChangedEvent: SelectionBuilder[
                   DeploymentEnvironmentChangedEvent,
                   A
                 ],
                 onHeadRefDeletedEvent: SelectionBuilder[HeadRefDeletedEvent, A],
                 onHeadRefForcePushedEvent: SelectionBuilder[HeadRefForcePushedEvent, A],
                 onHeadRefRestoredEvent: SelectionBuilder[HeadRefRestoredEvent, A],
                 onIssueComment: SelectionBuilder[IssueComment, A],
                 onLabeledEvent: SelectionBuilder[LabeledEvent, A],
                 onLockedEvent: SelectionBuilder[LockedEvent, A],
                 onMergedEvent: SelectionBuilder[MergedEvent, A],
                 onMilestonedEvent: SelectionBuilder[MilestonedEvent, A],
                 onPullRequestReview: SelectionBuilder[PullRequestReview, A],
                 onPullRequestReviewComment: SelectionBuilder[
                   PullRequestReviewComment,
                   A
                 ],
                 onPullRequestReviewThread: SelectionBuilder[PullRequestReviewThread, A],
                 onReferencedEvent: SelectionBuilder[ReferencedEvent, A],
                 onRenamedTitleEvent: SelectionBuilder[RenamedTitleEvent, A],
                 onReopenedEvent: SelectionBuilder[ReopenedEvent, A],
                 onReviewDismissedEvent: SelectionBuilder[ReviewDismissedEvent, A],
                 onReviewRequestRemovedEvent: SelectionBuilder[
                   ReviewRequestRemovedEvent,
                   A
                 ],
                 onReviewRequestedEvent: SelectionBuilder[ReviewRequestedEvent, A],
                 onSubscribedEvent: SelectionBuilder[SubscribedEvent, A],
                 onUnassignedEvent: SelectionBuilder[UnassignedEvent, A],
                 onUnlabeledEvent: SelectionBuilder[UnlabeledEvent, A],
                 onUnlockedEvent: SelectionBuilder[UnlockedEvent, A],
                 onUnsubscribedEvent: SelectionBuilder[UnsubscribedEvent, A],
                 onUserBlockedEvent: SelectionBuilder[UserBlockedEvent, A]
               ): SelectionBuilder[PullRequestTimelineItemEdge, Option[A]] =
      Field(
        "node",
        OptionOf(
          ChoiceOf(
            Map(
              "AssignedEvent" -> Obj(onAssignedEvent),
              "BaseRefDeletedEvent" -> Obj(onBaseRefDeletedEvent),
              "BaseRefForcePushedEvent" -> Obj(onBaseRefForcePushedEvent),
              "ClosedEvent" -> Obj(onClosedEvent),
              "Commit" -> Obj(onCommit),
              "CommitCommentThread" -> Obj(onCommitCommentThread),
              "CrossReferencedEvent" -> Obj(onCrossReferencedEvent),
              "DemilestonedEvent" -> Obj(onDemilestonedEvent),
              "DeployedEvent" -> Obj(onDeployedEvent),
              "DeploymentEnvironmentChangedEvent" -> Obj(
                onDeploymentEnvironmentChangedEvent
              ),
              "HeadRefDeletedEvent" -> Obj(onHeadRefDeletedEvent),
              "HeadRefForcePushedEvent" -> Obj(onHeadRefForcePushedEvent),
              "HeadRefRestoredEvent" -> Obj(onHeadRefRestoredEvent),
              "IssueComment" -> Obj(onIssueComment),
              "LabeledEvent" -> Obj(onLabeledEvent),
              "LockedEvent" -> Obj(onLockedEvent),
              "MergedEvent" -> Obj(onMergedEvent),
              "MilestonedEvent" -> Obj(onMilestonedEvent),
              "PullRequestReview" -> Obj(onPullRequestReview),
              "PullRequestReviewComment" -> Obj(onPullRequestReviewComment),
              "PullRequestReviewThread" -> Obj(onPullRequestReviewThread),
              "ReferencedEvent" -> Obj(onReferencedEvent),
              "RenamedTitleEvent" -> Obj(onRenamedTitleEvent),
              "ReopenedEvent" -> Obj(onReopenedEvent),
              "ReviewDismissedEvent" -> Obj(onReviewDismissedEvent),
              "ReviewRequestRemovedEvent" -> Obj(onReviewRequestRemovedEvent),
              "ReviewRequestedEvent" -> Obj(onReviewRequestedEvent),
              "SubscribedEvent" -> Obj(onSubscribedEvent),
              "UnassignedEvent" -> Obj(onUnassignedEvent),
              "UnlabeledEvent" -> Obj(onUnlabeledEvent),
              "UnlockedEvent" -> Obj(onUnlockedEvent),
              "UnsubscribedEvent" -> Obj(onUnsubscribedEvent),
              "UserBlockedEvent" -> Obj(onUserBlockedEvent)
            )
          )
        )
      )
  }

  type PullRequestTimelineItemsConnection

  object PullRequestTimelineItemsConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[PullRequestTimelineItemsEdge, A]
                ): SelectionBuilder[PullRequestTimelineItemsConnection, Option[
      List[Option[A]]
    ]] = Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Identifies the count of items after applying `before` and `after` filters.
     */
    def filteredCount
    : SelectionBuilder[PullRequestTimelineItemsConnection, Int] =
      Field("filteredCount", Scalar())

    /**
     * A list of nodes.
     */
    def nodes[A](
                  onAddedToProjectEvent: SelectionBuilder[AddedToProjectEvent, A],
                  onAssignedEvent: SelectionBuilder[AssignedEvent, A],
                  onAutomaticBaseChangeFailedEvent: SelectionBuilder[
                    AutomaticBaseChangeFailedEvent,
                    A
                  ],
                  onAutomaticBaseChangeSucceededEvent: SelectionBuilder[
                    AutomaticBaseChangeSucceededEvent,
                    A
                  ],
                  onBaseRefChangedEvent: SelectionBuilder[BaseRefChangedEvent, A],
                  onBaseRefDeletedEvent: SelectionBuilder[BaseRefDeletedEvent, A],
                  onBaseRefForcePushedEvent: SelectionBuilder[BaseRefForcePushedEvent, A],
                  onClosedEvent: SelectionBuilder[ClosedEvent, A],
                  onCommentDeletedEvent: SelectionBuilder[CommentDeletedEvent, A],
                  onConnectedEvent: SelectionBuilder[ConnectedEvent, A],
                  onConvertToDraftEvent: SelectionBuilder[ConvertToDraftEvent, A],
                  onConvertedNoteToIssueEvent: SelectionBuilder[
                    ConvertedNoteToIssueEvent,
                    A
                  ],
                  onCrossReferencedEvent: SelectionBuilder[CrossReferencedEvent, A],
                  onDemilestonedEvent: SelectionBuilder[DemilestonedEvent, A],
                  onDeployedEvent: SelectionBuilder[DeployedEvent, A],
                  onDeploymentEnvironmentChangedEvent: SelectionBuilder[
                    DeploymentEnvironmentChangedEvent,
                    A
                  ],
                  onDisconnectedEvent: SelectionBuilder[DisconnectedEvent, A],
                  onHeadRefDeletedEvent: SelectionBuilder[HeadRefDeletedEvent, A],
                  onHeadRefForcePushedEvent: SelectionBuilder[HeadRefForcePushedEvent, A],
                  onHeadRefRestoredEvent: SelectionBuilder[HeadRefRestoredEvent, A],
                  onIssueComment: SelectionBuilder[IssueComment, A],
                  onLabeledEvent: SelectionBuilder[LabeledEvent, A],
                  onLockedEvent: SelectionBuilder[LockedEvent, A],
                  onMarkedAsDuplicateEvent: SelectionBuilder[MarkedAsDuplicateEvent, A],
                  onMentionedEvent: SelectionBuilder[MentionedEvent, A],
                  onMergedEvent: SelectionBuilder[MergedEvent, A],
                  onMilestonedEvent: SelectionBuilder[MilestonedEvent, A],
                  onMovedColumnsInProjectEvent: SelectionBuilder[
                    MovedColumnsInProjectEvent,
                    A
                  ],
                  onPinnedEvent: SelectionBuilder[PinnedEvent, A],
                  onPullRequestCommit: SelectionBuilder[PullRequestCommit, A],
                  onPullRequestCommitCommentThread: SelectionBuilder[
                    PullRequestCommitCommentThread,
                    A
                  ],
                  onPullRequestReview: SelectionBuilder[PullRequestReview, A],
                  onPullRequestReviewThread: SelectionBuilder[PullRequestReviewThread, A],
                  onPullRequestRevisionMarker: SelectionBuilder[
                    PullRequestRevisionMarker,
                    A
                  ],
                  onReadyForReviewEvent: SelectionBuilder[ReadyForReviewEvent, A],
                  onReferencedEvent: SelectionBuilder[ReferencedEvent, A],
                  onRemovedFromProjectEvent: SelectionBuilder[RemovedFromProjectEvent, A],
                  onRenamedTitleEvent: SelectionBuilder[RenamedTitleEvent, A],
                  onReopenedEvent: SelectionBuilder[ReopenedEvent, A],
                  onReviewDismissedEvent: SelectionBuilder[ReviewDismissedEvent, A],
                  onReviewRequestRemovedEvent: SelectionBuilder[
                    ReviewRequestRemovedEvent,
                    A
                  ],
                  onReviewRequestedEvent: SelectionBuilder[ReviewRequestedEvent, A],
                  onSubscribedEvent: SelectionBuilder[SubscribedEvent, A],
                  onTransferredEvent: SelectionBuilder[TransferredEvent, A],
                  onUnassignedEvent: SelectionBuilder[UnassignedEvent, A],
                  onUnlabeledEvent: SelectionBuilder[UnlabeledEvent, A],
                  onUnlockedEvent: SelectionBuilder[UnlockedEvent, A],
                  onUnmarkedAsDuplicateEvent: SelectionBuilder[
                    UnmarkedAsDuplicateEvent,
                    A
                  ],
                  onUnpinnedEvent: SelectionBuilder[UnpinnedEvent, A],
                  onUnsubscribedEvent: SelectionBuilder[UnsubscribedEvent, A],
                  onUserBlockedEvent: SelectionBuilder[UserBlockedEvent, A]
                ): SelectionBuilder[PullRequestTimelineItemsConnection, Option[
      List[Option[A]]
    ]] =
      Field(
        "nodes",
        OptionOf(
          ListOf(
            OptionOf(
              ChoiceOf(
                Map(
                  "AddedToProjectEvent" -> Obj(onAddedToProjectEvent),
                  "AssignedEvent" -> Obj(onAssignedEvent),
                  "AutomaticBaseChangeFailedEvent" -> Obj(
                    onAutomaticBaseChangeFailedEvent
                  ),
                  "AutomaticBaseChangeSucceededEvent" -> Obj(
                    onAutomaticBaseChangeSucceededEvent
                  ),
                  "BaseRefChangedEvent" -> Obj(onBaseRefChangedEvent),
                  "BaseRefDeletedEvent" -> Obj(onBaseRefDeletedEvent),
                  "BaseRefForcePushedEvent" -> Obj(onBaseRefForcePushedEvent),
                  "ClosedEvent" -> Obj(onClosedEvent),
                  "CommentDeletedEvent" -> Obj(onCommentDeletedEvent),
                  "ConnectedEvent" -> Obj(onConnectedEvent),
                  "ConvertToDraftEvent" -> Obj(onConvertToDraftEvent),
                  "ConvertedNoteToIssueEvent" -> Obj(
                    onConvertedNoteToIssueEvent
                  ),
                  "CrossReferencedEvent" -> Obj(onCrossReferencedEvent),
                  "DemilestonedEvent" -> Obj(onDemilestonedEvent),
                  "DeployedEvent" -> Obj(onDeployedEvent),
                  "DeploymentEnvironmentChangedEvent" -> Obj(
                    onDeploymentEnvironmentChangedEvent
                  ),
                  "DisconnectedEvent" -> Obj(onDisconnectedEvent),
                  "HeadRefDeletedEvent" -> Obj(onHeadRefDeletedEvent),
                  "HeadRefForcePushedEvent" -> Obj(onHeadRefForcePushedEvent),
                  "HeadRefRestoredEvent" -> Obj(onHeadRefRestoredEvent),
                  "IssueComment" -> Obj(onIssueComment),
                  "LabeledEvent" -> Obj(onLabeledEvent),
                  "LockedEvent" -> Obj(onLockedEvent),
                  "MarkedAsDuplicateEvent" -> Obj(onMarkedAsDuplicateEvent),
                  "MentionedEvent" -> Obj(onMentionedEvent),
                  "MergedEvent" -> Obj(onMergedEvent),
                  "MilestonedEvent" -> Obj(onMilestonedEvent),
                  "MovedColumnsInProjectEvent" -> Obj(
                    onMovedColumnsInProjectEvent
                  ),
                  "PinnedEvent" -> Obj(onPinnedEvent),
                  "PullRequestCommit" -> Obj(onPullRequestCommit),
                  "PullRequestCommitCommentThread" -> Obj(
                    onPullRequestCommitCommentThread
                  ),
                  "PullRequestReview" -> Obj(onPullRequestReview),
                  "PullRequestReviewThread" -> Obj(onPullRequestReviewThread),
                  "PullRequestRevisionMarker" -> Obj(
                    onPullRequestRevisionMarker
                  ),
                  "ReadyForReviewEvent" -> Obj(onReadyForReviewEvent),
                  "ReferencedEvent" -> Obj(onReferencedEvent),
                  "RemovedFromProjectEvent" -> Obj(onRemovedFromProjectEvent),
                  "RenamedTitleEvent" -> Obj(onRenamedTitleEvent),
                  "ReopenedEvent" -> Obj(onReopenedEvent),
                  "ReviewDismissedEvent" -> Obj(onReviewDismissedEvent),
                  "ReviewRequestRemovedEvent" -> Obj(
                    onReviewRequestRemovedEvent
                  ),
                  "ReviewRequestedEvent" -> Obj(onReviewRequestedEvent),
                  "SubscribedEvent" -> Obj(onSubscribedEvent),
                  "TransferredEvent" -> Obj(onTransferredEvent),
                  "UnassignedEvent" -> Obj(onUnassignedEvent),
                  "UnlabeledEvent" -> Obj(onUnlabeledEvent),
                  "UnlockedEvent" -> Obj(onUnlockedEvent),
                  "UnmarkedAsDuplicateEvent" -> Obj(onUnmarkedAsDuplicateEvent),
                  "UnpinnedEvent" -> Obj(onUnpinnedEvent),
                  "UnsubscribedEvent" -> Obj(onUnsubscribedEvent),
                  "UserBlockedEvent" -> Obj(onUserBlockedEvent)
                )
              )
            )
          )
        )
      )

    /**
     * Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing.
     */
    def pageCount: SelectionBuilder[PullRequestTimelineItemsConnection, Int] =
      Field("pageCount", Scalar())

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[PullRequestTimelineItemsConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[PullRequestTimelineItemsConnection, Int] =
      Field("totalCount", Scalar())

    /**
     * Identifies the date and time when the timeline was last updated.
     */
    def updatedAt
    : SelectionBuilder[PullRequestTimelineItemsConnection, DateTime] =
      Field("updatedAt", Scalar())
  }

  type PullRequestTimelineItemsEdge

  object PullRequestTimelineItemsEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[PullRequestTimelineItemsEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 onAddedToProjectEvent: SelectionBuilder[AddedToProjectEvent, A],
                 onAssignedEvent: SelectionBuilder[AssignedEvent, A],
                 onAutomaticBaseChangeFailedEvent: SelectionBuilder[
                   AutomaticBaseChangeFailedEvent,
                   A
                 ],
                 onAutomaticBaseChangeSucceededEvent: SelectionBuilder[
                   AutomaticBaseChangeSucceededEvent,
                   A
                 ],
                 onBaseRefChangedEvent: SelectionBuilder[BaseRefChangedEvent, A],
                 onBaseRefDeletedEvent: SelectionBuilder[BaseRefDeletedEvent, A],
                 onBaseRefForcePushedEvent: SelectionBuilder[BaseRefForcePushedEvent, A],
                 onClosedEvent: SelectionBuilder[ClosedEvent, A],
                 onCommentDeletedEvent: SelectionBuilder[CommentDeletedEvent, A],
                 onConnectedEvent: SelectionBuilder[ConnectedEvent, A],
                 onConvertToDraftEvent: SelectionBuilder[ConvertToDraftEvent, A],
                 onConvertedNoteToIssueEvent: SelectionBuilder[
                   ConvertedNoteToIssueEvent,
                   A
                 ],
                 onCrossReferencedEvent: SelectionBuilder[CrossReferencedEvent, A],
                 onDemilestonedEvent: SelectionBuilder[DemilestonedEvent, A],
                 onDeployedEvent: SelectionBuilder[DeployedEvent, A],
                 onDeploymentEnvironmentChangedEvent: SelectionBuilder[
                   DeploymentEnvironmentChangedEvent,
                   A
                 ],
                 onDisconnectedEvent: SelectionBuilder[DisconnectedEvent, A],
                 onHeadRefDeletedEvent: SelectionBuilder[HeadRefDeletedEvent, A],
                 onHeadRefForcePushedEvent: SelectionBuilder[HeadRefForcePushedEvent, A],
                 onHeadRefRestoredEvent: SelectionBuilder[HeadRefRestoredEvent, A],
                 onIssueComment: SelectionBuilder[IssueComment, A],
                 onLabeledEvent: SelectionBuilder[LabeledEvent, A],
                 onLockedEvent: SelectionBuilder[LockedEvent, A],
                 onMarkedAsDuplicateEvent: SelectionBuilder[MarkedAsDuplicateEvent, A],
                 onMentionedEvent: SelectionBuilder[MentionedEvent, A],
                 onMergedEvent: SelectionBuilder[MergedEvent, A],
                 onMilestonedEvent: SelectionBuilder[MilestonedEvent, A],
                 onMovedColumnsInProjectEvent: SelectionBuilder[
                   MovedColumnsInProjectEvent,
                   A
                 ],
                 onPinnedEvent: SelectionBuilder[PinnedEvent, A],
                 onPullRequestCommit: SelectionBuilder[PullRequestCommit, A],
                 onPullRequestCommitCommentThread: SelectionBuilder[
                   PullRequestCommitCommentThread,
                   A
                 ],
                 onPullRequestReview: SelectionBuilder[PullRequestReview, A],
                 onPullRequestReviewThread: SelectionBuilder[PullRequestReviewThread, A],
                 onPullRequestRevisionMarker: SelectionBuilder[
                   PullRequestRevisionMarker,
                   A
                 ],
                 onReadyForReviewEvent: SelectionBuilder[ReadyForReviewEvent, A],
                 onReferencedEvent: SelectionBuilder[ReferencedEvent, A],
                 onRemovedFromProjectEvent: SelectionBuilder[RemovedFromProjectEvent, A],
                 onRenamedTitleEvent: SelectionBuilder[RenamedTitleEvent, A],
                 onReopenedEvent: SelectionBuilder[ReopenedEvent, A],
                 onReviewDismissedEvent: SelectionBuilder[ReviewDismissedEvent, A],
                 onReviewRequestRemovedEvent: SelectionBuilder[
                   ReviewRequestRemovedEvent,
                   A
                 ],
                 onReviewRequestedEvent: SelectionBuilder[ReviewRequestedEvent, A],
                 onSubscribedEvent: SelectionBuilder[SubscribedEvent, A],
                 onTransferredEvent: SelectionBuilder[TransferredEvent, A],
                 onUnassignedEvent: SelectionBuilder[UnassignedEvent, A],
                 onUnlabeledEvent: SelectionBuilder[UnlabeledEvent, A],
                 onUnlockedEvent: SelectionBuilder[UnlockedEvent, A],
                 onUnmarkedAsDuplicateEvent: SelectionBuilder[
                   UnmarkedAsDuplicateEvent,
                   A
                 ],
                 onUnpinnedEvent: SelectionBuilder[UnpinnedEvent, A],
                 onUnsubscribedEvent: SelectionBuilder[UnsubscribedEvent, A],
                 onUserBlockedEvent: SelectionBuilder[UserBlockedEvent, A]
               ): SelectionBuilder[PullRequestTimelineItemsEdge, Option[A]] =
      Field(
        "node",
        OptionOf(
          ChoiceOf(
            Map(
              "AddedToProjectEvent" -> Obj(onAddedToProjectEvent),
              "AssignedEvent" -> Obj(onAssignedEvent),
              "AutomaticBaseChangeFailedEvent" -> Obj(
                onAutomaticBaseChangeFailedEvent
              ),
              "AutomaticBaseChangeSucceededEvent" -> Obj(
                onAutomaticBaseChangeSucceededEvent
              ),
              "BaseRefChangedEvent" -> Obj(onBaseRefChangedEvent),
              "BaseRefDeletedEvent" -> Obj(onBaseRefDeletedEvent),
              "BaseRefForcePushedEvent" -> Obj(onBaseRefForcePushedEvent),
              "ClosedEvent" -> Obj(onClosedEvent),
              "CommentDeletedEvent" -> Obj(onCommentDeletedEvent),
              "ConnectedEvent" -> Obj(onConnectedEvent),
              "ConvertToDraftEvent" -> Obj(onConvertToDraftEvent),
              "ConvertedNoteToIssueEvent" -> Obj(onConvertedNoteToIssueEvent),
              "CrossReferencedEvent" -> Obj(onCrossReferencedEvent),
              "DemilestonedEvent" -> Obj(onDemilestonedEvent),
              "DeployedEvent" -> Obj(onDeployedEvent),
              "DeploymentEnvironmentChangedEvent" -> Obj(
                onDeploymentEnvironmentChangedEvent
              ),
              "DisconnectedEvent" -> Obj(onDisconnectedEvent),
              "HeadRefDeletedEvent" -> Obj(onHeadRefDeletedEvent),
              "HeadRefForcePushedEvent" -> Obj(onHeadRefForcePushedEvent),
              "HeadRefRestoredEvent" -> Obj(onHeadRefRestoredEvent),
              "IssueComment" -> Obj(onIssueComment),
              "LabeledEvent" -> Obj(onLabeledEvent),
              "LockedEvent" -> Obj(onLockedEvent),
              "MarkedAsDuplicateEvent" -> Obj(onMarkedAsDuplicateEvent),
              "MentionedEvent" -> Obj(onMentionedEvent),
              "MergedEvent" -> Obj(onMergedEvent),
              "MilestonedEvent" -> Obj(onMilestonedEvent),
              "MovedColumnsInProjectEvent" -> Obj(onMovedColumnsInProjectEvent),
              "PinnedEvent" -> Obj(onPinnedEvent),
              "PullRequestCommit" -> Obj(onPullRequestCommit),
              "PullRequestCommitCommentThread" -> Obj(
                onPullRequestCommitCommentThread
              ),
              "PullRequestReview" -> Obj(onPullRequestReview),
              "PullRequestReviewThread" -> Obj(onPullRequestReviewThread),
              "PullRequestRevisionMarker" -> Obj(onPullRequestRevisionMarker),
              "ReadyForReviewEvent" -> Obj(onReadyForReviewEvent),
              "ReferencedEvent" -> Obj(onReferencedEvent),
              "RemovedFromProjectEvent" -> Obj(onRemovedFromProjectEvent),
              "RenamedTitleEvent" -> Obj(onRenamedTitleEvent),
              "ReopenedEvent" -> Obj(onReopenedEvent),
              "ReviewDismissedEvent" -> Obj(onReviewDismissedEvent),
              "ReviewRequestRemovedEvent" -> Obj(onReviewRequestRemovedEvent),
              "ReviewRequestedEvent" -> Obj(onReviewRequestedEvent),
              "SubscribedEvent" -> Obj(onSubscribedEvent),
              "TransferredEvent" -> Obj(onTransferredEvent),
              "UnassignedEvent" -> Obj(onUnassignedEvent),
              "UnlabeledEvent" -> Obj(onUnlabeledEvent),
              "UnlockedEvent" -> Obj(onUnlockedEvent),
              "UnmarkedAsDuplicateEvent" -> Obj(onUnmarkedAsDuplicateEvent),
              "UnpinnedEvent" -> Obj(onUnpinnedEvent),
              "UnsubscribedEvent" -> Obj(onUnsubscribedEvent),
              "UserBlockedEvent" -> Obj(onUserBlockedEvent)
            )
          )
        )
      )
  }

  type Push

  object Push {
    def id: SelectionBuilder[Push, String] = Field("id", Scalar())

    /**
     * The SHA after the push
     */
    def nextSha: SelectionBuilder[Push, Option[GitObjectID]] =
      Field("nextSha", OptionOf(Scalar()))

    /**
     * The permalink for this push.
     */
    def permalink: SelectionBuilder[Push, URI] = Field("permalink", Scalar())

    /**
     * The SHA before the push
     */
    def previousSha: SelectionBuilder[Push, Option[GitObjectID]] =
      Field("previousSha", OptionOf(Scalar()))

    /**
     * The user who pushed
     */
    def pusher[A](
                   innerSelection: SelectionBuilder[User, A]
                 ): SelectionBuilder[Push, A] = Field("pusher", Obj(innerSelection))

    /**
     * The repository that was pushed to
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[Push, A] = Field("repository", Obj(innerSelection))
  }

  type PushAllowance

  object PushAllowance {

    /**
     * The actor that can push.
     */
    def actor[A](
                  onApp: SelectionBuilder[App, A],
                  onTeam: SelectionBuilder[Team, A],
                  onUser: SelectionBuilder[User, A]
                ): SelectionBuilder[PushAllowance, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "App" -> Obj(onApp),
              "Team" -> Obj(onTeam),
              "User" -> Obj(onUser)
            )
          )
        )
      )

    /**
     * Identifies the branch protection rule associated with the allowed user or team.
     */
    def branchProtectionRule[A](
                                 innerSelection: SelectionBuilder[BranchProtectionRule, A]
                               ): SelectionBuilder[PushAllowance, Option[A]] =
      Field("branchProtectionRule", OptionOf(Obj(innerSelection)))

    def id: SelectionBuilder[PushAllowance, String] = Field("id", Scalar())
  }

  type PushAllowanceConnection

  object PushAllowanceConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[PushAllowanceEdge, A]
                ): SelectionBuilder[PushAllowanceConnection, Option[List[Option[A]]]] =
      Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[PushAllowance, A]
                ): SelectionBuilder[PushAllowanceConnection, Option[List[Option[A]]]] =
      Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[PushAllowanceConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[PushAllowanceConnection, Int] =
      Field("totalCount", Scalar())
  }

  type PushAllowanceEdge

  object PushAllowanceEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[PushAllowanceEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[PushAllowance, A]
               ): SelectionBuilder[PushAllowanceEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type RateLimit

  object RateLimit {

    /**
     * The point cost for the current query counting against the rate limit.
     */
    def cost: SelectionBuilder[RateLimit, Int] = Field("cost", Scalar())

    /**
     * The maximum number of points the client is permitted to consume in a 60 minute window.
     */
    def limit: SelectionBuilder[RateLimit, Int] = Field("limit", Scalar())

    /**
     * The maximum number of nodes this query may return
     */
    def nodeCount: SelectionBuilder[RateLimit, Int] =
      Field("nodeCount", Scalar())

    /**
     * The number of points remaining in the current rate limit window.
     */
    def remaining: SelectionBuilder[RateLimit, Int] =
      Field("remaining", Scalar())

    /**
     * The time at which the current rate limit window resets in UTC epoch seconds.
     */
    def resetAt: SelectionBuilder[RateLimit, DateTime] =
      Field("resetAt", Scalar())

    /**
     * The number of points used in the current rate limit window.
     */
    def used: SelectionBuilder[RateLimit, Int] = Field("used", Scalar())
  }

  type ReactingUserConnection

  object ReactingUserConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[ReactingUserEdge, A]
                ): SelectionBuilder[ReactingUserConnection, Option[List[Option[A]]]] =
      Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[User, A]
                ): SelectionBuilder[ReactingUserConnection, Option[List[Option[A]]]] =
      Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[ReactingUserConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[ReactingUserConnection, Int] =
      Field("totalCount", Scalar())
  }

  type ReactingUserEdge

  object ReactingUserEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[ReactingUserEdge, String] =
      Field("cursor", Scalar())

    def node[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[ReactingUserEdge, A] =
      Field("node", Obj(innerSelection))

    /**
     * The moment when the user made the reaction.
     */
    def reactedAt: SelectionBuilder[ReactingUserEdge, DateTime] =
      Field("reactedAt", Scalar())
  }

  type Reaction

  object Reaction {

    /**
     * Identifies the emoji reaction.
     */
    def content: SelectionBuilder[Reaction, ReactionContent] =
      Field("content", Scalar())

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[Reaction, DateTime] =
      Field("createdAt", Scalar())

    /**
     * Identifies the primary key from the database.
     */
    def databaseId: SelectionBuilder[Reaction, Option[Int]] =
      Field("databaseId", OptionOf(Scalar()))

    def id: SelectionBuilder[Reaction, String] = Field("id", Scalar())

    /**
     * The reactable piece of content
     */
    def reactable[A](
                      onIssueComment: Option[SelectionBuilder[IssueComment, A]] = None,
                      onTeamDiscussionComment: Option[
                        SelectionBuilder[TeamDiscussionComment, A]
                      ] = None,
                      onPullRequestReviewComment: Option[
                        SelectionBuilder[PullRequestReviewComment, A]
                      ] = None,
                      onPullRequestReview: Option[SelectionBuilder[PullRequestReview, A]] =
                      None,
                      onCommitComment: Option[SelectionBuilder[CommitComment, A]] = None,
                      onTeamDiscussion: Option[SelectionBuilder[TeamDiscussion, A]] = None,
                      onIssue: Option[SelectionBuilder[Issue, A]] = None,
                      onPullRequest: Option[SelectionBuilder[PullRequest, A]] = None
                    ): SelectionBuilder[Reaction, A] =
      Field(
        "reactable",
        ChoiceOf(
          Map(
            "IssueComment" -> onIssueComment,
            "TeamDiscussionComment" -> onTeamDiscussionComment,
            "PullRequestReviewComment" -> onPullRequestReviewComment,
            "PullRequestReview" -> onPullRequestReview,
            "CommitComment" -> onCommitComment,
            "TeamDiscussion" -> onTeamDiscussion,
            "Issue" -> onIssue,
            "PullRequest" -> onPullRequest
          ).collect { case (k, Some(v)) => k -> Obj(v) }
        )
      )

    /**
     * Identifies the user who created this reaction.
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[Reaction, Option[A]] =
      Field("user", OptionOf(Obj(innerSelection)))
  }

  type ReactionConnection

  object ReactionConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[ReactionEdge, A]
                ): SelectionBuilder[ReactionConnection, Option[List[Option[A]]]] =
      Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[Reaction, A]
                ): SelectionBuilder[ReactionConnection, Option[List[Option[A]]]] =
      Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[ReactionConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[ReactionConnection, Int] =
      Field("totalCount", Scalar())

    /**
     * Whether or not the authenticated user has left a reaction on the subject.
     */
    def viewerHasReacted: SelectionBuilder[ReactionConnection, Boolean] =
      Field("viewerHasReacted", Scalar())
  }

  type ReactionEdge

  object ReactionEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[ReactionEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[Reaction, A]
               ): SelectionBuilder[ReactionEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type ReactionGroup

  object ReactionGroup {

    /**
     * Identifies the emoji reaction.
     */
    def content: SelectionBuilder[ReactionGroup, ReactionContent] =
      Field("content", Scalar())

    /**
     * Identifies when the reaction was created.
     */
    def createdAt: SelectionBuilder[ReactionGroup, Option[DateTime]] =
      Field("createdAt", OptionOf(Scalar()))

    /**
     * The subject that was reacted to.
     */
    def subject[A](
                    onIssueComment: Option[SelectionBuilder[IssueComment, A]] = None,
                    onTeamDiscussionComment: Option[
                      SelectionBuilder[TeamDiscussionComment, A]
                    ] = None,
                    onPullRequestReviewComment: Option[
                      SelectionBuilder[PullRequestReviewComment, A]
                    ] = None,
                    onPullRequestReview: Option[SelectionBuilder[PullRequestReview, A]] =
                    None,
                    onCommitComment: Option[SelectionBuilder[CommitComment, A]] = None,
                    onTeamDiscussion: Option[SelectionBuilder[TeamDiscussion, A]] = None,
                    onIssue: Option[SelectionBuilder[Issue, A]] = None,
                    onPullRequest: Option[SelectionBuilder[PullRequest, A]] = None
                  ): SelectionBuilder[ReactionGroup, A] =
      Field(
        "subject",
        ChoiceOf(
          Map(
            "IssueComment" -> onIssueComment,
            "TeamDiscussionComment" -> onTeamDiscussionComment,
            "PullRequestReviewComment" -> onPullRequestReviewComment,
            "PullRequestReview" -> onPullRequestReview,
            "CommitComment" -> onCommitComment,
            "TeamDiscussion" -> onTeamDiscussion,
            "Issue" -> onIssue,
            "PullRequest" -> onPullRequest
          ).collect { case (k, Some(v)) => k -> Obj(v) }
        )
      )

    /**
     * Users who have reacted to the reaction subject with the emotion represented by this reaction group
     */
    def users[A](
                  after: Option[String] = None,
                  before: Option[String] = None,
                  first: Option[Int] = None,
                  last: Option[Int] = None
                )(
                  innerSelection: SelectionBuilder[ReactingUserConnection, A]
                ): SelectionBuilder[ReactionGroup, A] =
      Field(
        "users",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )

    /**
     * Whether or not the authenticated user has left a reaction on the subject.
     */
    def viewerHasReacted: SelectionBuilder[ReactionGroup, Boolean] =
      Field("viewerHasReacted", Scalar())
  }

  type ReadyForReviewEvent

  object ReadyForReviewEvent {

    /**
     * Identifies the actor who performed the event.
     */
    def actor[A](
                  onBot: Option[SelectionBuilder[Bot, A]] = None,
                  onEnterpriseUserAccount: Option[
                    SelectionBuilder[EnterpriseUserAccount, A]
                  ] = None,
                  onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                  onUser: Option[SelectionBuilder[User, A]] = None,
                  onOrganization: Option[SelectionBuilder[Organization, A]] = None
                ): SelectionBuilder[ReadyForReviewEvent, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[ReadyForReviewEvent, DateTime] =
      Field("createdAt", Scalar())

    def id: SelectionBuilder[ReadyForReviewEvent, String] =
      Field("id", Scalar())

    /**
     * PullRequest referenced by event.
     */
    def pullRequest[A](
                        innerSelection: SelectionBuilder[PullRequest, A]
                      ): SelectionBuilder[ReadyForReviewEvent, A] =
      Field("pullRequest", Obj(innerSelection))

    /**
     * The HTTP path for this ready for review event.
     */
    def resourcePath: SelectionBuilder[ReadyForReviewEvent, URI] =
      Field("resourcePath", Scalar())

    /**
     * The HTTP URL for this ready for review event.
     */
    def url: SelectionBuilder[ReadyForReviewEvent, URI] = Field("url", Scalar())
  }

  type Ref

  object Ref {

    /**
     * A list of pull requests with this ref as the head ref.
     */
    def associatedPullRequests[A](
                                   after: Option[String] = None,
                                   baseRefName: Option[String] = None,
                                   before: Option[String] = None,
                                   first: Option[Int] = None,
                                   headRefName: Option[String] = None,
                                   labels: Option[List[String]] = None,
                                   last: Option[Int] = None,
                                   orderBy: Option[IssueOrder] = None,
                                   states: Option[List[PullRequestState]] = None
                                 )(
                                   innerSelection: SelectionBuilder[PullRequestConnection, A]
                                 ): SelectionBuilder[Ref, A] =
      Field(
        "associatedPullRequests",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("baseRefName", baseRefName),
          Argument("before", before),
          Argument("first", first),
          Argument("headRefName", headRefName),
          Argument("labels", labels),
          Argument("last", last),
          Argument("orderBy", orderBy),
          Argument("states", states)
        )
      )

    def id: SelectionBuilder[Ref, String] = Field("id", Scalar())

    /**
     * The ref name.
     */
    def name: SelectionBuilder[Ref, String] = Field("name", Scalar())

    /**
     * The ref's prefix, such as `refs/heads/` or `refs/tags/`.
     */
    def prefix: SelectionBuilder[Ref, String] = Field("prefix", Scalar())

    /**
     * The repository the ref belongs to.
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[Ref, A] = Field("repository", Obj(innerSelection))

    /**
     * The object the ref points to. Returns null when object does not exist.
     */
    def target[A](
                   onCommit: Option[SelectionBuilder[Commit, A]] = None,
                   onTree: Option[SelectionBuilder[Tree, A]] = None,
                   onBlob: Option[SelectionBuilder[Blob, A]] = None,
                   onTag: Option[SelectionBuilder[Tag, A]] = None
                 ): SelectionBuilder[Ref, Option[A]] =
      Field(
        "target",
        OptionOf(
          ChoiceOf(
            Map(
              "Commit" -> onCommit,
              "Tree" -> onTree,
              "Blob" -> onBlob,
              "Tag" -> onTag
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )
  }

  type RefConnection

  object RefConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[RefEdge, A]
                ): SelectionBuilder[RefConnection, Option[List[Option[A]]]] =
      Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[Ref, A]
                ): SelectionBuilder[RefConnection, Option[List[Option[A]]]] =
      Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[RefConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[RefConnection, Int] =
      Field("totalCount", Scalar())
  }

  type RefEdge

  object RefEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[RefEdge, String] = Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[Ref, A]
               ): SelectionBuilder[RefEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type ReferencedEvent

  object ReferencedEvent {

    /**
     * Identifies the actor who performed the event.
     */
    def actor[A](
                  onBot: Option[SelectionBuilder[Bot, A]] = None,
                  onEnterpriseUserAccount: Option[
                    SelectionBuilder[EnterpriseUserAccount, A]
                  ] = None,
                  onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                  onUser: Option[SelectionBuilder[User, A]] = None,
                  onOrganization: Option[SelectionBuilder[Organization, A]] = None
                ): SelectionBuilder[ReferencedEvent, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * Identifies the commit associated with the 'referenced' event.
     */
    def commit[A](
                   innerSelection: SelectionBuilder[Commit, A]
                 ): SelectionBuilder[ReferencedEvent, Option[A]] =
      Field("commit", OptionOf(Obj(innerSelection)))

    /**
     * Identifies the repository associated with the 'referenced' event.
     */
    def commitRepository[A](
                             innerSelection: SelectionBuilder[Repository, A]
                           ): SelectionBuilder[ReferencedEvent, A] =
      Field("commitRepository", Obj(innerSelection))

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[ReferencedEvent, DateTime] =
      Field("createdAt", Scalar())

    def id: SelectionBuilder[ReferencedEvent, String] = Field("id", Scalar())

    /**
     * Reference originated in a different repository.
     */
    def isCrossRepository: SelectionBuilder[ReferencedEvent, Boolean] =
      Field("isCrossRepository", Scalar())

    /**
     * Checks if the commit message itself references the subject. Can be false in the case of a commit comment reference.
     */
    def isDirectReference: SelectionBuilder[ReferencedEvent, Boolean] =
      Field("isDirectReference", Scalar())

    /**
     * Object referenced by event.
     */
    def subject[A](
                    onIssue: SelectionBuilder[Issue, A],
                    onPullRequest: SelectionBuilder[PullRequest, A]
                  ): SelectionBuilder[ReferencedEvent, A] =
      Field(
        "subject",
        ChoiceOf(
          Map("Issue" -> Obj(onIssue), "PullRequest" -> Obj(onPullRequest))
        )
      )
  }

  type RegenerateEnterpriseIdentityProviderRecoveryCodesPayload

  object RegenerateEnterpriseIdentityProviderRecoveryCodesPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId: SelectionBuilder[
      RegenerateEnterpriseIdentityProviderRecoveryCodesPayload,
      Option[String]
    ] = Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The identity provider for the enterprise.
     */
    def identityProvider[A](
                             innerSelection: SelectionBuilder[EnterpriseIdentityProvider, A]
                           ): SelectionBuilder[
      RegenerateEnterpriseIdentityProviderRecoveryCodesPayload,
      Option[A]
    ] = Field("identityProvider", OptionOf(Obj(innerSelection)))
  }

  type Release

  object Release {

    /**
     * The author of the release
     */
    def author[A](
                   innerSelection: SelectionBuilder[User, A]
                 ): SelectionBuilder[Release, Option[A]] =
      Field("author", OptionOf(Obj(innerSelection)))

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[Release, DateTime] =
      Field("createdAt", Scalar())

    /**
     * The description of the release.
     */
    def description: SelectionBuilder[Release, Option[String]] =
      Field("description", OptionOf(Scalar()))

    /**
     * The description of this release rendered to HTML.
     */
    def descriptionHTML: SelectionBuilder[Release, Option[HTML]] =
      Field("descriptionHTML", OptionOf(Scalar()))

    def id: SelectionBuilder[Release, String] = Field("id", Scalar())

    /**
     * Whether or not the release is a draft
     */
    def isDraft: SelectionBuilder[Release, Boolean] = Field("isDraft", Scalar())

    /**
     * Whether or not the release is a prerelease
     */
    def isPrerelease: SelectionBuilder[Release, Boolean] =
      Field("isPrerelease", Scalar())

    /**
     * The title of the release.
     */
    def name: SelectionBuilder[Release, Option[String]] =
      Field("name", OptionOf(Scalar()))

    /**
     * Identifies the date and time when the release was created.
     */
    def publishedAt: SelectionBuilder[Release, Option[DateTime]] =
      Field("publishedAt", OptionOf(Scalar()))

    /**
     * List of releases assets which are dependent on this release.
     */
    def releaseAssets[A](
                          after: Option[String] = None,
                          before: Option[String] = None,
                          first: Option[Int] = None,
                          last: Option[Int] = None,
                          name: Option[String] = None
                        )(
                          innerSelection: SelectionBuilder[ReleaseAssetConnection, A]
                        ): SelectionBuilder[Release, A] =
      Field(
        "releaseAssets",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("name", name)
        )
      )

    /**
     * The HTTP path for this issue
     */
    def resourcePath: SelectionBuilder[Release, URI] =
      Field("resourcePath", Scalar())

    /**
     * A description of the release, rendered to HTML without any links in it.
     */
    def shortDescriptionHTML(
                              limit: Option[Int] = None
                            ): SelectionBuilder[Release, Option[HTML]] =
      Field(
        "shortDescriptionHTML",
        OptionOf(Scalar()),
        arguments = List(Argument("limit", limit))
      )

    /**
     * The Git tag the release points to
     */
    def tag[A](
                innerSelection: SelectionBuilder[Ref, A]
              ): SelectionBuilder[Release, Option[A]] =
      Field("tag", OptionOf(Obj(innerSelection)))

    /**
     * The name of the release's Git tag
     */
    def tagName: SelectionBuilder[Release, String] = Field("tagName", Scalar())

    /**
     * Identifies the date and time when the object was last updated.
     */
    def updatedAt: SelectionBuilder[Release, DateTime] =
      Field("updatedAt", Scalar())

    /**
     * The HTTP URL for this issue
     */
    def url: SelectionBuilder[Release, URI] = Field("url", Scalar())
  }

  type ReleaseAsset

  object ReleaseAsset {

    /**
     * The asset's content-type
     */
    def contentType: SelectionBuilder[ReleaseAsset, String] =
      Field("contentType", Scalar())

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[ReleaseAsset, DateTime] =
      Field("createdAt", Scalar())

    /**
     * The number of times this asset was downloaded
     */
    def downloadCount: SelectionBuilder[ReleaseAsset, Int] =
      Field("downloadCount", Scalar())

    /**
     * Identifies the URL where you can download the release asset via the browser.
     */
    def downloadUrl: SelectionBuilder[ReleaseAsset, URI] =
      Field("downloadUrl", Scalar())

    def id: SelectionBuilder[ReleaseAsset, String] = Field("id", Scalar())

    /**
     * Identifies the title of the release asset.
     */
    def name: SelectionBuilder[ReleaseAsset, String] = Field("name", Scalar())

    /**
     * Release that the asset is associated with
     */
    def release[A](
                    innerSelection: SelectionBuilder[Release, A]
                  ): SelectionBuilder[ReleaseAsset, Option[A]] =
      Field("release", OptionOf(Obj(innerSelection)))

    /**
     * The size (in bytes) of the asset
     */
    def size: SelectionBuilder[ReleaseAsset, Int] = Field("size", Scalar())

    /**
     * Identifies the date and time when the object was last updated.
     */
    def updatedAt: SelectionBuilder[ReleaseAsset, DateTime] =
      Field("updatedAt", Scalar())

    /**
     * The user that performed the upload
     */
    def uploadedBy[A](
                       innerSelection: SelectionBuilder[User, A]
                     ): SelectionBuilder[ReleaseAsset, A] =
      Field("uploadedBy", Obj(innerSelection))

    /**
     * Identifies the URL of the release asset.
     */
    def url: SelectionBuilder[ReleaseAsset, URI] = Field("url", Scalar())
  }

  type ReleaseAssetConnection

  object ReleaseAssetConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[ReleaseAssetEdge, A]
                ): SelectionBuilder[ReleaseAssetConnection, Option[List[Option[A]]]] =
      Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[ReleaseAsset, A]
                ): SelectionBuilder[ReleaseAssetConnection, Option[List[Option[A]]]] =
      Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[ReleaseAssetConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[ReleaseAssetConnection, Int] =
      Field("totalCount", Scalar())
  }

  type ReleaseAssetEdge

  object ReleaseAssetEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[ReleaseAssetEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[ReleaseAsset, A]
               ): SelectionBuilder[ReleaseAssetEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type ReleaseConnection

  object ReleaseConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[ReleaseEdge, A]
                ): SelectionBuilder[ReleaseConnection, Option[List[Option[A]]]] =
      Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[Release, A]
                ): SelectionBuilder[ReleaseConnection, Option[List[Option[A]]]] =
      Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[ReleaseConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[ReleaseConnection, Int] =
      Field("totalCount", Scalar())
  }

  type ReleaseEdge

  object ReleaseEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[ReleaseEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[Release, A]
               ): SelectionBuilder[ReleaseEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type RemoveAssigneesFromAssignablePayload

  object RemoveAssigneesFromAssignablePayload {

    /**
     * The item that was unassigned.
     */
    def assignable[A](
                       onIssue: Option[SelectionBuilder[Issue, A]] = None,
                       onPullRequest: Option[SelectionBuilder[PullRequest, A]] = None
                     ): SelectionBuilder[RemoveAssigneesFromAssignablePayload, Option[A]] =
      Field(
        "assignable",
        OptionOf(
          ChoiceOf(
            Map("Issue" -> onIssue, "PullRequest" -> onPullRequest).collect {
              case (k, Some(v)) => k -> Obj(v)
            }
          )
        )
      )

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[RemoveAssigneesFromAssignablePayload, Option[
      String
    ]] = Field("clientMutationId", OptionOf(Scalar()))
  }

  type RemoveEnterpriseAdminPayload

  object RemoveEnterpriseAdminPayload {

    /**
     * The user who was removed as an administrator.
     */
    def admin[A](
                  innerSelection: SelectionBuilder[User, A]
                ): SelectionBuilder[RemoveEnterpriseAdminPayload, Option[A]] =
      Field("admin", OptionOf(Obj(innerSelection)))

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[RemoveEnterpriseAdminPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The updated enterprise.
     */
    def enterprise[A](
                       innerSelection: SelectionBuilder[Enterprise, A]
                     ): SelectionBuilder[RemoveEnterpriseAdminPayload, Option[A]] =
      Field("enterprise", OptionOf(Obj(innerSelection)))

    /**
     * A message confirming the result of removing an administrator.
     */
    def message
    : SelectionBuilder[RemoveEnterpriseAdminPayload, Option[String]] =
      Field("message", OptionOf(Scalar()))

    /**
     * The viewer performing the mutation.
     */
    def viewer[A](
                   innerSelection: SelectionBuilder[User, A]
                 ): SelectionBuilder[RemoveEnterpriseAdminPayload, Option[A]] =
      Field("viewer", OptionOf(Obj(innerSelection)))
  }

  type RemoveEnterpriseIdentityProviderPayload

  object RemoveEnterpriseIdentityProviderPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[RemoveEnterpriseIdentityProviderPayload, Option[
      String
    ]] = Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The identity provider that was removed from the enterprise.
     */
    def identityProvider[A](
                             innerSelection: SelectionBuilder[EnterpriseIdentityProvider, A]
                           ): SelectionBuilder[RemoveEnterpriseIdentityProviderPayload, Option[A]] =
      Field("identityProvider", OptionOf(Obj(innerSelection)))
  }

  type RemoveEnterpriseOrganizationPayload

  object RemoveEnterpriseOrganizationPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[RemoveEnterpriseOrganizationPayload, Option[
      String
    ]] = Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The updated enterprise.
     */
    def enterprise[A](
                       innerSelection: SelectionBuilder[Enterprise, A]
                     ): SelectionBuilder[RemoveEnterpriseOrganizationPayload, Option[A]] =
      Field("enterprise", OptionOf(Obj(innerSelection)))

    /**
     * The organization that was removed from the enterprise.
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[RemoveEnterpriseOrganizationPayload, Option[A]] =
      Field("organization", OptionOf(Obj(innerSelection)))

    /**
     * The viewer performing the mutation.
     */
    def viewer[A](
                   innerSelection: SelectionBuilder[User, A]
                 ): SelectionBuilder[RemoveEnterpriseOrganizationPayload, Option[A]] =
      Field("viewer", OptionOf(Obj(innerSelection)))
  }

  type RemoveLabelsFromLabelablePayload

  object RemoveLabelsFromLabelablePayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[RemoveLabelsFromLabelablePayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The Labelable the labels were removed from.
     */
    def labelable[A](
                      onIssue: Option[SelectionBuilder[Issue, A]] = None,
                      onPullRequest: Option[SelectionBuilder[PullRequest, A]] = None
                    ): SelectionBuilder[RemoveLabelsFromLabelablePayload, Option[A]] =
      Field(
        "labelable",
        OptionOf(
          ChoiceOf(
            Map("Issue" -> onIssue, "PullRequest" -> onPullRequest).collect {
              case (k, Some(v)) => k -> Obj(v)
            }
          )
        )
      )
  }

  type RemoveOutsideCollaboratorPayload

  object RemoveOutsideCollaboratorPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[RemoveOutsideCollaboratorPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The user that was removed as an outside collaborator.
     */
    def removedUser[A](
                        innerSelection: SelectionBuilder[User, A]
                      ): SelectionBuilder[RemoveOutsideCollaboratorPayload, Option[A]] =
      Field("removedUser", OptionOf(Obj(innerSelection)))
  }

  type RemoveReactionPayload

  object RemoveReactionPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[RemoveReactionPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The reaction object.
     */
    def reaction[A](
                     innerSelection: SelectionBuilder[Reaction, A]
                   ): SelectionBuilder[RemoveReactionPayload, Option[A]] =
      Field("reaction", OptionOf(Obj(innerSelection)))

    /**
     * The reactable subject.
     */
    def subject[A](
                    onIssueComment: Option[SelectionBuilder[IssueComment, A]] = None,
                    onTeamDiscussionComment: Option[
                      SelectionBuilder[TeamDiscussionComment, A]
                    ] = None,
                    onPullRequestReviewComment: Option[
                      SelectionBuilder[PullRequestReviewComment, A]
                    ] = None,
                    onPullRequestReview: Option[SelectionBuilder[PullRequestReview, A]] =
                    None,
                    onCommitComment: Option[SelectionBuilder[CommitComment, A]] = None,
                    onTeamDiscussion: Option[SelectionBuilder[TeamDiscussion, A]] = None,
                    onIssue: Option[SelectionBuilder[Issue, A]] = None,
                    onPullRequest: Option[SelectionBuilder[PullRequest, A]] = None
                  ): SelectionBuilder[RemoveReactionPayload, Option[A]] =
      Field(
        "subject",
        OptionOf(
          ChoiceOf(
            Map(
              "IssueComment" -> onIssueComment,
              "TeamDiscussionComment" -> onTeamDiscussionComment,
              "PullRequestReviewComment" -> onPullRequestReviewComment,
              "PullRequestReview" -> onPullRequestReview,
              "CommitComment" -> onCommitComment,
              "TeamDiscussion" -> onTeamDiscussion,
              "Issue" -> onIssue,
              "PullRequest" -> onPullRequest
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )
  }

  type RemoveStarPayload

  object RemoveStarPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId: SelectionBuilder[RemoveStarPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The starrable.
     */
    def starrable[A](
                      onTopic: Option[SelectionBuilder[Topic, A]] = None,
                      onGist: Option[SelectionBuilder[Gist, A]] = None,
                      onRepository: Option[SelectionBuilder[Repository, A]] = None
                    ): SelectionBuilder[RemoveStarPayload, Option[A]] =
      Field(
        "starrable",
        OptionOf(
          ChoiceOf(
            Map(
              "Topic" -> onTopic,
              "Gist" -> onGist,
              "Repository" -> onRepository
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )
  }

  type RemovedFromProjectEvent

  object RemovedFromProjectEvent {

    /**
     * Identifies the actor who performed the event.
     */
    def actor[A](
                  onBot: Option[SelectionBuilder[Bot, A]] = None,
                  onEnterpriseUserAccount: Option[
                    SelectionBuilder[EnterpriseUserAccount, A]
                  ] = None,
                  onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                  onUser: Option[SelectionBuilder[User, A]] = None,
                  onOrganization: Option[SelectionBuilder[Organization, A]] = None
                ): SelectionBuilder[RemovedFromProjectEvent, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[RemovedFromProjectEvent, DateTime] =
      Field("createdAt", Scalar())

    /**
     * Identifies the primary key from the database.
     */
    def databaseId: SelectionBuilder[RemovedFromProjectEvent, Option[Int]] =
      Field("databaseId", OptionOf(Scalar()))

    def id: SelectionBuilder[RemovedFromProjectEvent, String] =
      Field("id", Scalar())

    /**
     * Project referenced by event.
     */
    def project[A](
                    innerSelection: SelectionBuilder[Project, A]
                  ): SelectionBuilder[RemovedFromProjectEvent, Option[A]] =
      Field("project", OptionOf(Obj(innerSelection)))

    /**
     * Column name referenced by this project event.
     */
    def projectColumnName: SelectionBuilder[RemovedFromProjectEvent, String] =
      Field("projectColumnName", Scalar())
  }

  type RenamedTitleEvent

  object RenamedTitleEvent {

    /**
     * Identifies the actor who performed the event.
     */
    def actor[A](
                  onBot: Option[SelectionBuilder[Bot, A]] = None,
                  onEnterpriseUserAccount: Option[
                    SelectionBuilder[EnterpriseUserAccount, A]
                  ] = None,
                  onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                  onUser: Option[SelectionBuilder[User, A]] = None,
                  onOrganization: Option[SelectionBuilder[Organization, A]] = None
                ): SelectionBuilder[RenamedTitleEvent, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[RenamedTitleEvent, DateTime] =
      Field("createdAt", Scalar())

    /**
     * Identifies the current title of the issue or pull request.
     */
    def currentTitle: SelectionBuilder[RenamedTitleEvent, String] =
      Field("currentTitle", Scalar())

    def id: SelectionBuilder[RenamedTitleEvent, String] = Field("id", Scalar())

    /**
     * Identifies the previous title of the issue or pull request.
     */
    def previousTitle: SelectionBuilder[RenamedTitleEvent, String] =
      Field("previousTitle", Scalar())

    /**
     * Subject that was renamed.
     */
    def subject[A](
                    onIssue: SelectionBuilder[Issue, A],
                    onPullRequest: SelectionBuilder[PullRequest, A]
                  ): SelectionBuilder[RenamedTitleEvent, A] =
      Field(
        "subject",
        ChoiceOf(
          Map("Issue" -> Obj(onIssue), "PullRequest" -> Obj(onPullRequest))
        )
      )
  }

  type ReopenIssuePayload

  object ReopenIssuePayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId: SelectionBuilder[ReopenIssuePayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The issue that was opened.
     */
    def issue[A](
                  innerSelection: SelectionBuilder[Issue, A]
                ): SelectionBuilder[ReopenIssuePayload, Option[A]] =
      Field("issue", OptionOf(Obj(innerSelection)))
  }

  type ReopenPullRequestPayload

  object ReopenPullRequestPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[ReopenPullRequestPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The pull request that was reopened.
     */
    def pullRequest[A](
                        innerSelection: SelectionBuilder[PullRequest, A]
                      ): SelectionBuilder[ReopenPullRequestPayload, Option[A]] =
      Field("pullRequest", OptionOf(Obj(innerSelection)))
  }

  type ReopenedEvent

  object ReopenedEvent {

    /**
     * Identifies the actor who performed the event.
     */
    def actor[A](
                  onBot: Option[SelectionBuilder[Bot, A]] = None,
                  onEnterpriseUserAccount: Option[
                    SelectionBuilder[EnterpriseUserAccount, A]
                  ] = None,
                  onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                  onUser: Option[SelectionBuilder[User, A]] = None,
                  onOrganization: Option[SelectionBuilder[Organization, A]] = None
                ): SelectionBuilder[ReopenedEvent, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * Object that was reopened.
     */
    def closable[A](
                     onProject: Option[SelectionBuilder[Project, A]] = None,
                     onIssue: Option[SelectionBuilder[Issue, A]] = None,
                     onMilestone: Option[SelectionBuilder[Milestone, A]] = None,
                     onPullRequest: Option[SelectionBuilder[PullRequest, A]] = None
                   ): SelectionBuilder[ReopenedEvent, A] =
      Field(
        "closable",
        ChoiceOf(
          Map(
            "Project" -> onProject,
            "Issue" -> onIssue,
            "Milestone" -> onMilestone,
            "PullRequest" -> onPullRequest
          ).collect { case (k, Some(v)) => k -> Obj(v) }
        )
      )

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[ReopenedEvent, DateTime] =
      Field("createdAt", Scalar())

    def id: SelectionBuilder[ReopenedEvent, String] = Field("id", Scalar())
  }

  type RepoAccessAuditEntry

  object RepoAccessAuditEntry {

    /**
     * The action name
     */
    def action: SelectionBuilder[RepoAccessAuditEntry, String] =
      Field("action", Scalar())

    /**
     * The user who initiated the action
     */
    def actor[A](
                  onBot: SelectionBuilder[Bot, A],
                  onOrganization: SelectionBuilder[Organization, A],
                  onUser: SelectionBuilder[User, A]
                ): SelectionBuilder[RepoAccessAuditEntry, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> Obj(onBot),
              "Organization" -> Obj(onOrganization),
              "User" -> Obj(onUser)
            )
          )
        )
      )

    /**
     * The IP address of the actor
     */
    def actorIp: SelectionBuilder[RepoAccessAuditEntry, Option[String]] =
      Field("actorIp", OptionOf(Scalar()))

    /**
     * A readable representation of the actor's location
     */
    def actorLocation[A](
                          innerSelection: SelectionBuilder[ActorLocation, A]
                        ): SelectionBuilder[RepoAccessAuditEntry, Option[A]] =
      Field("actorLocation", OptionOf(Obj(innerSelection)))

    /**
     * The username of the user who initiated the action
     */
    def actorLogin: SelectionBuilder[RepoAccessAuditEntry, Option[String]] =
      Field("actorLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the actor.
     */
    def actorResourcePath: SelectionBuilder[RepoAccessAuditEntry, Option[URI]] =
      Field("actorResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the actor.
     */
    def actorUrl: SelectionBuilder[RepoAccessAuditEntry, Option[URI]] =
      Field("actorUrl", OptionOf(Scalar()))

    /**
     * The time the action was initiated
     */
    def createdAt: SelectionBuilder[RepoAccessAuditEntry, PreciseDateTime] =
      Field("createdAt", Scalar())

    def id: SelectionBuilder[RepoAccessAuditEntry, String] =
      Field("id", Scalar())

    /**
     * The corresponding operation type for the action
     */
    def operationType
    : SelectionBuilder[RepoAccessAuditEntry, Option[OperationType]] =
      Field("operationType", OptionOf(Scalar()))

    /**
     * The Organization associated with the Audit Entry.
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[RepoAccessAuditEntry, Option[A]] =
      Field("organization", OptionOf(Obj(innerSelection)))

    /**
     * The name of the Organization.
     */
    def organizationName
    : SelectionBuilder[RepoAccessAuditEntry, Option[String]] =
      Field("organizationName", OptionOf(Scalar()))

    /**
     * The HTTP path for the organization
     */
    def organizationResourcePath
    : SelectionBuilder[RepoAccessAuditEntry, Option[URI]] =
      Field("organizationResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the organization
     */
    def organizationUrl: SelectionBuilder[RepoAccessAuditEntry, Option[URI]] =
      Field("organizationUrl", OptionOf(Scalar()))

    /**
     * The repository associated with the action
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[RepoAccessAuditEntry, Option[A]] =
      Field("repository", OptionOf(Obj(innerSelection)))

    /**
     * The name of the repository
     */
    def repositoryName: SelectionBuilder[RepoAccessAuditEntry, Option[String]] =
      Field("repositoryName", OptionOf(Scalar()))

    /**
     * The HTTP path for the repository
     */
    def repositoryResourcePath
    : SelectionBuilder[RepoAccessAuditEntry, Option[URI]] =
      Field("repositoryResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the repository
     */
    def repositoryUrl: SelectionBuilder[RepoAccessAuditEntry, Option[URI]] =
      Field("repositoryUrl", OptionOf(Scalar()))

    /**
     * The user affected by the action
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[RepoAccessAuditEntry, Option[A]] =
      Field("user", OptionOf(Obj(innerSelection)))

    /**
     * For actions involving two users, the actor is the initiator and the user is the affected user.
     */
    def userLogin: SelectionBuilder[RepoAccessAuditEntry, Option[String]] =
      Field("userLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the user.
     */
    def userResourcePath: SelectionBuilder[RepoAccessAuditEntry, Option[URI]] =
      Field("userResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the user.
     */
    def userUrl: SelectionBuilder[RepoAccessAuditEntry, Option[URI]] =
      Field("userUrl", OptionOf(Scalar()))

    /**
     * The visibility of the repository
     */
    def visibility: SelectionBuilder[RepoAccessAuditEntry, Option[
      RepoAccessAuditEntryVisibility
    ]] = Field("visibility", OptionOf(Scalar()))
  }

  type RepoAddMemberAuditEntry

  object RepoAddMemberAuditEntry {

    /**
     * The action name
     */
    def action: SelectionBuilder[RepoAddMemberAuditEntry, String] =
      Field("action", Scalar())

    /**
     * The user who initiated the action
     */
    def actor[A](
                  onBot: SelectionBuilder[Bot, A],
                  onOrganization: SelectionBuilder[Organization, A],
                  onUser: SelectionBuilder[User, A]
                ): SelectionBuilder[RepoAddMemberAuditEntry, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> Obj(onBot),
              "Organization" -> Obj(onOrganization),
              "User" -> Obj(onUser)
            )
          )
        )
      )

    /**
     * The IP address of the actor
     */
    def actorIp: SelectionBuilder[RepoAddMemberAuditEntry, Option[String]] =
      Field("actorIp", OptionOf(Scalar()))

    /**
     * A readable representation of the actor's location
     */
    def actorLocation[A](
                          innerSelection: SelectionBuilder[ActorLocation, A]
                        ): SelectionBuilder[RepoAddMemberAuditEntry, Option[A]] =
      Field("actorLocation", OptionOf(Obj(innerSelection)))

    /**
     * The username of the user who initiated the action
     */
    def actorLogin: SelectionBuilder[RepoAddMemberAuditEntry, Option[String]] =
      Field("actorLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the actor.
     */
    def actorResourcePath
    : SelectionBuilder[RepoAddMemberAuditEntry, Option[URI]] =
      Field("actorResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the actor.
     */
    def actorUrl: SelectionBuilder[RepoAddMemberAuditEntry, Option[URI]] =
      Field("actorUrl", OptionOf(Scalar()))

    /**
     * The time the action was initiated
     */
    def createdAt: SelectionBuilder[RepoAddMemberAuditEntry, PreciseDateTime] =
      Field("createdAt", Scalar())

    def id: SelectionBuilder[RepoAddMemberAuditEntry, String] =
      Field("id", Scalar())

    /**
     * The corresponding operation type for the action
     */
    def operationType
    : SelectionBuilder[RepoAddMemberAuditEntry, Option[OperationType]] =
      Field("operationType", OptionOf(Scalar()))

    /**
     * The Organization associated with the Audit Entry.
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[RepoAddMemberAuditEntry, Option[A]] =
      Field("organization", OptionOf(Obj(innerSelection)))

    /**
     * The name of the Organization.
     */
    def organizationName
    : SelectionBuilder[RepoAddMemberAuditEntry, Option[String]] =
      Field("organizationName", OptionOf(Scalar()))

    /**
     * The HTTP path for the organization
     */
    def organizationResourcePath
    : SelectionBuilder[RepoAddMemberAuditEntry, Option[URI]] =
      Field("organizationResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the organization
     */
    def organizationUrl
    : SelectionBuilder[RepoAddMemberAuditEntry, Option[URI]] =
      Field("organizationUrl", OptionOf(Scalar()))

    /**
     * The repository associated with the action
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[RepoAddMemberAuditEntry, Option[A]] =
      Field("repository", OptionOf(Obj(innerSelection)))

    /**
     * The name of the repository
     */
    def repositoryName
    : SelectionBuilder[RepoAddMemberAuditEntry, Option[String]] =
      Field("repositoryName", OptionOf(Scalar()))

    /**
     * The HTTP path for the repository
     */
    def repositoryResourcePath
    : SelectionBuilder[RepoAddMemberAuditEntry, Option[URI]] =
      Field("repositoryResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the repository
     */
    def repositoryUrl: SelectionBuilder[RepoAddMemberAuditEntry, Option[URI]] =
      Field("repositoryUrl", OptionOf(Scalar()))

    /**
     * The user affected by the action
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[RepoAddMemberAuditEntry, Option[A]] =
      Field("user", OptionOf(Obj(innerSelection)))

    /**
     * For actions involving two users, the actor is the initiator and the user is the affected user.
     */
    def userLogin: SelectionBuilder[RepoAddMemberAuditEntry, Option[String]] =
      Field("userLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the user.
     */
    def userResourcePath
    : SelectionBuilder[RepoAddMemberAuditEntry, Option[URI]] =
      Field("userResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the user.
     */
    def userUrl: SelectionBuilder[RepoAddMemberAuditEntry, Option[URI]] =
      Field("userUrl", OptionOf(Scalar()))

    /**
     * The visibility of the repository
     */
    def visibility: SelectionBuilder[RepoAddMemberAuditEntry, Option[
      RepoAddMemberAuditEntryVisibility
    ]] = Field("visibility", OptionOf(Scalar()))
  }

  type RepoAddTopicAuditEntry

  object RepoAddTopicAuditEntry {

    /**
     * The action name
     */
    def action: SelectionBuilder[RepoAddTopicAuditEntry, String] =
      Field("action", Scalar())

    /**
     * The user who initiated the action
     */
    def actor[A](
                  onBot: SelectionBuilder[Bot, A],
                  onOrganization: SelectionBuilder[Organization, A],
                  onUser: SelectionBuilder[User, A]
                ): SelectionBuilder[RepoAddTopicAuditEntry, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> Obj(onBot),
              "Organization" -> Obj(onOrganization),
              "User" -> Obj(onUser)
            )
          )
        )
      )

    /**
     * The IP address of the actor
     */
    def actorIp: SelectionBuilder[RepoAddTopicAuditEntry, Option[String]] =
      Field("actorIp", OptionOf(Scalar()))

    /**
     * A readable representation of the actor's location
     */
    def actorLocation[A](
                          innerSelection: SelectionBuilder[ActorLocation, A]
                        ): SelectionBuilder[RepoAddTopicAuditEntry, Option[A]] =
      Field("actorLocation", OptionOf(Obj(innerSelection)))

    /**
     * The username of the user who initiated the action
     */
    def actorLogin: SelectionBuilder[RepoAddTopicAuditEntry, Option[String]] =
      Field("actorLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the actor.
     */
    def actorResourcePath
    : SelectionBuilder[RepoAddTopicAuditEntry, Option[URI]] =
      Field("actorResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the actor.
     */
    def actorUrl: SelectionBuilder[RepoAddTopicAuditEntry, Option[URI]] =
      Field("actorUrl", OptionOf(Scalar()))

    /**
     * The time the action was initiated
     */
    def createdAt: SelectionBuilder[RepoAddTopicAuditEntry, PreciseDateTime] =
      Field("createdAt", Scalar())

    def id: SelectionBuilder[RepoAddTopicAuditEntry, String] =
      Field("id", Scalar())

    /**
     * The corresponding operation type for the action
     */
    def operationType
    : SelectionBuilder[RepoAddTopicAuditEntry, Option[OperationType]] =
      Field("operationType", OptionOf(Scalar()))

    /**
     * The Organization associated with the Audit Entry.
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[RepoAddTopicAuditEntry, Option[A]] =
      Field("organization", OptionOf(Obj(innerSelection)))

    /**
     * The name of the Organization.
     */
    def organizationName
    : SelectionBuilder[RepoAddTopicAuditEntry, Option[String]] =
      Field("organizationName", OptionOf(Scalar()))

    /**
     * The HTTP path for the organization
     */
    def organizationResourcePath
    : SelectionBuilder[RepoAddTopicAuditEntry, Option[URI]] =
      Field("organizationResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the organization
     */
    def organizationUrl: SelectionBuilder[RepoAddTopicAuditEntry, Option[URI]] =
      Field("organizationUrl", OptionOf(Scalar()))

    /**
     * The repository associated with the action
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[RepoAddTopicAuditEntry, Option[A]] =
      Field("repository", OptionOf(Obj(innerSelection)))

    /**
     * The name of the repository
     */
    def repositoryName
    : SelectionBuilder[RepoAddTopicAuditEntry, Option[String]] =
      Field("repositoryName", OptionOf(Scalar()))

    /**
     * The HTTP path for the repository
     */
    def repositoryResourcePath
    : SelectionBuilder[RepoAddTopicAuditEntry, Option[URI]] =
      Field("repositoryResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the repository
     */
    def repositoryUrl: SelectionBuilder[RepoAddTopicAuditEntry, Option[URI]] =
      Field("repositoryUrl", OptionOf(Scalar()))

    /**
     * The name of the topic added to the repository
     */
    def topic[A](
                  innerSelection: SelectionBuilder[Topic, A]
                ): SelectionBuilder[RepoAddTopicAuditEntry, Option[A]] =
      Field("topic", OptionOf(Obj(innerSelection)))

    /**
     * The name of the topic added to the repository
     */
    def topicName: SelectionBuilder[RepoAddTopicAuditEntry, Option[String]] =
      Field("topicName", OptionOf(Scalar()))

    /**
     * The user affected by the action
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[RepoAddTopicAuditEntry, Option[A]] =
      Field("user", OptionOf(Obj(innerSelection)))

    /**
     * For actions involving two users, the actor is the initiator and the user is the affected user.
     */
    def userLogin: SelectionBuilder[RepoAddTopicAuditEntry, Option[String]] =
      Field("userLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the user.
     */
    def userResourcePath
    : SelectionBuilder[RepoAddTopicAuditEntry, Option[URI]] =
      Field("userResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the user.
     */
    def userUrl: SelectionBuilder[RepoAddTopicAuditEntry, Option[URI]] =
      Field("userUrl", OptionOf(Scalar()))
  }

  type RepoArchivedAuditEntry

  object RepoArchivedAuditEntry {

    /**
     * The action name
     */
    def action: SelectionBuilder[RepoArchivedAuditEntry, String] =
      Field("action", Scalar())

    /**
     * The user who initiated the action
     */
    def actor[A](
                  onBot: SelectionBuilder[Bot, A],
                  onOrganization: SelectionBuilder[Organization, A],
                  onUser: SelectionBuilder[User, A]
                ): SelectionBuilder[RepoArchivedAuditEntry, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> Obj(onBot),
              "Organization" -> Obj(onOrganization),
              "User" -> Obj(onUser)
            )
          )
        )
      )

    /**
     * The IP address of the actor
     */
    def actorIp: SelectionBuilder[RepoArchivedAuditEntry, Option[String]] =
      Field("actorIp", OptionOf(Scalar()))

    /**
     * A readable representation of the actor's location
     */
    def actorLocation[A](
                          innerSelection: SelectionBuilder[ActorLocation, A]
                        ): SelectionBuilder[RepoArchivedAuditEntry, Option[A]] =
      Field("actorLocation", OptionOf(Obj(innerSelection)))

    /**
     * The username of the user who initiated the action
     */
    def actorLogin: SelectionBuilder[RepoArchivedAuditEntry, Option[String]] =
      Field("actorLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the actor.
     */
    def actorResourcePath
    : SelectionBuilder[RepoArchivedAuditEntry, Option[URI]] =
      Field("actorResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the actor.
     */
    def actorUrl: SelectionBuilder[RepoArchivedAuditEntry, Option[URI]] =
      Field("actorUrl", OptionOf(Scalar()))

    /**
     * The time the action was initiated
     */
    def createdAt: SelectionBuilder[RepoArchivedAuditEntry, PreciseDateTime] =
      Field("createdAt", Scalar())

    def id: SelectionBuilder[RepoArchivedAuditEntry, String] =
      Field("id", Scalar())

    /**
     * The corresponding operation type for the action
     */
    def operationType
    : SelectionBuilder[RepoArchivedAuditEntry, Option[OperationType]] =
      Field("operationType", OptionOf(Scalar()))

    /**
     * The Organization associated with the Audit Entry.
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[RepoArchivedAuditEntry, Option[A]] =
      Field("organization", OptionOf(Obj(innerSelection)))

    /**
     * The name of the Organization.
     */
    def organizationName
    : SelectionBuilder[RepoArchivedAuditEntry, Option[String]] =
      Field("organizationName", OptionOf(Scalar()))

    /**
     * The HTTP path for the organization
     */
    def organizationResourcePath
    : SelectionBuilder[RepoArchivedAuditEntry, Option[URI]] =
      Field("organizationResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the organization
     */
    def organizationUrl: SelectionBuilder[RepoArchivedAuditEntry, Option[URI]] =
      Field("organizationUrl", OptionOf(Scalar()))

    /**
     * The repository associated with the action
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[RepoArchivedAuditEntry, Option[A]] =
      Field("repository", OptionOf(Obj(innerSelection)))

    /**
     * The name of the repository
     */
    def repositoryName
    : SelectionBuilder[RepoArchivedAuditEntry, Option[String]] =
      Field("repositoryName", OptionOf(Scalar()))

    /**
     * The HTTP path for the repository
     */
    def repositoryResourcePath
    : SelectionBuilder[RepoArchivedAuditEntry, Option[URI]] =
      Field("repositoryResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the repository
     */
    def repositoryUrl: SelectionBuilder[RepoArchivedAuditEntry, Option[URI]] =
      Field("repositoryUrl", OptionOf(Scalar()))

    /**
     * The user affected by the action
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[RepoArchivedAuditEntry, Option[A]] =
      Field("user", OptionOf(Obj(innerSelection)))

    /**
     * For actions involving two users, the actor is the initiator and the user is the affected user.
     */
    def userLogin: SelectionBuilder[RepoArchivedAuditEntry, Option[String]] =
      Field("userLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the user.
     */
    def userResourcePath
    : SelectionBuilder[RepoArchivedAuditEntry, Option[URI]] =
      Field("userResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the user.
     */
    def userUrl: SelectionBuilder[RepoArchivedAuditEntry, Option[URI]] =
      Field("userUrl", OptionOf(Scalar()))

    /**
     * The visibility of the repository
     */
    def visibility: SelectionBuilder[RepoArchivedAuditEntry, Option[
      RepoArchivedAuditEntryVisibility
    ]] = Field("visibility", OptionOf(Scalar()))
  }

  type RepoChangeMergeSettingAuditEntry

  object RepoChangeMergeSettingAuditEntry {

    /**
     * The action name
     */
    def action: SelectionBuilder[RepoChangeMergeSettingAuditEntry, String] =
      Field("action", Scalar())

    /**
     * The user who initiated the action
     */
    def actor[A](
                  onBot: SelectionBuilder[Bot, A],
                  onOrganization: SelectionBuilder[Organization, A],
                  onUser: SelectionBuilder[User, A]
                ): SelectionBuilder[RepoChangeMergeSettingAuditEntry, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> Obj(onBot),
              "Organization" -> Obj(onOrganization),
              "User" -> Obj(onUser)
            )
          )
        )
      )

    /**
     * The IP address of the actor
     */
    def actorIp
    : SelectionBuilder[RepoChangeMergeSettingAuditEntry, Option[String]] =
      Field("actorIp", OptionOf(Scalar()))

    /**
     * A readable representation of the actor's location
     */
    def actorLocation[A](
                          innerSelection: SelectionBuilder[ActorLocation, A]
                        ): SelectionBuilder[RepoChangeMergeSettingAuditEntry, Option[A]] =
      Field("actorLocation", OptionOf(Obj(innerSelection)))

    /**
     * The username of the user who initiated the action
     */
    def actorLogin
    : SelectionBuilder[RepoChangeMergeSettingAuditEntry, Option[String]] =
      Field("actorLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the actor.
     */
    def actorResourcePath
    : SelectionBuilder[RepoChangeMergeSettingAuditEntry, Option[URI]] =
      Field("actorResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the actor.
     */
    def actorUrl
    : SelectionBuilder[RepoChangeMergeSettingAuditEntry, Option[URI]] =
      Field("actorUrl", OptionOf(Scalar()))

    /**
     * The time the action was initiated
     */
    def createdAt
    : SelectionBuilder[RepoChangeMergeSettingAuditEntry, PreciseDateTime] =
      Field("createdAt", Scalar())

    def id: SelectionBuilder[RepoChangeMergeSettingAuditEntry, String] =
      Field("id", Scalar())

    /**
     * Whether the change was to enable (true) or disable (false) the merge type
     */
    def isEnabled
    : SelectionBuilder[RepoChangeMergeSettingAuditEntry, Option[Boolean]] =
      Field("isEnabled", OptionOf(Scalar()))

    /**
     * The merge method affected by the change
     */
    def mergeType: SelectionBuilder[RepoChangeMergeSettingAuditEntry, Option[
      RepoChangeMergeSettingAuditEntryMergeType
    ]] = Field("mergeType", OptionOf(Scalar()))

    /**
     * The corresponding operation type for the action
     */
    def operationType
    : SelectionBuilder[RepoChangeMergeSettingAuditEntry, Option[
      OperationType
    ]] = Field("operationType", OptionOf(Scalar()))

    /**
     * The Organization associated with the Audit Entry.
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[RepoChangeMergeSettingAuditEntry, Option[A]] =
      Field("organization", OptionOf(Obj(innerSelection)))

    /**
     * The name of the Organization.
     */
    def organizationName
    : SelectionBuilder[RepoChangeMergeSettingAuditEntry, Option[String]] =
      Field("organizationName", OptionOf(Scalar()))

    /**
     * The HTTP path for the organization
     */
    def organizationResourcePath
    : SelectionBuilder[RepoChangeMergeSettingAuditEntry, Option[URI]] =
      Field("organizationResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the organization
     */
    def organizationUrl
    : SelectionBuilder[RepoChangeMergeSettingAuditEntry, Option[URI]] =
      Field("organizationUrl", OptionOf(Scalar()))

    /**
     * The repository associated with the action
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[RepoChangeMergeSettingAuditEntry, Option[A]] =
      Field("repository", OptionOf(Obj(innerSelection)))

    /**
     * The name of the repository
     */
    def repositoryName
    : SelectionBuilder[RepoChangeMergeSettingAuditEntry, Option[String]] =
      Field("repositoryName", OptionOf(Scalar()))

    /**
     * The HTTP path for the repository
     */
    def repositoryResourcePath
    : SelectionBuilder[RepoChangeMergeSettingAuditEntry, Option[URI]] =
      Field("repositoryResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the repository
     */
    def repositoryUrl
    : SelectionBuilder[RepoChangeMergeSettingAuditEntry, Option[URI]] =
      Field("repositoryUrl", OptionOf(Scalar()))

    /**
     * The user affected by the action
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[RepoChangeMergeSettingAuditEntry, Option[A]] =
      Field("user", OptionOf(Obj(innerSelection)))

    /**
     * For actions involving two users, the actor is the initiator and the user is the affected user.
     */
    def userLogin
    : SelectionBuilder[RepoChangeMergeSettingAuditEntry, Option[String]] =
      Field("userLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the user.
     */
    def userResourcePath
    : SelectionBuilder[RepoChangeMergeSettingAuditEntry, Option[URI]] =
      Field("userResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the user.
     */
    def userUrl
    : SelectionBuilder[RepoChangeMergeSettingAuditEntry, Option[URI]] =
      Field("userUrl", OptionOf(Scalar()))
  }

  type RepoConfigDisableAnonymousGitAccessAuditEntry

  object RepoConfigDisableAnonymousGitAccessAuditEntry {

    /**
     * The action name
     */
    def action: SelectionBuilder[
      RepoConfigDisableAnonymousGitAccessAuditEntry,
      String
    ] = Field("action", Scalar())

    /**
     * The user who initiated the action
     */
    def actor[A](
                  onBot: SelectionBuilder[Bot, A],
                  onOrganization: SelectionBuilder[Organization, A],
                  onUser: SelectionBuilder[User, A]
                ): SelectionBuilder[RepoConfigDisableAnonymousGitAccessAuditEntry, Option[
      A
    ]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> Obj(onBot),
              "Organization" -> Obj(onOrganization),
              "User" -> Obj(onUser)
            )
          )
        )
      )

    /**
     * The IP address of the actor
     */
    def actorIp: SelectionBuilder[
      RepoConfigDisableAnonymousGitAccessAuditEntry,
      Option[String]
    ] = Field("actorIp", OptionOf(Scalar()))

    /**
     * A readable representation of the actor's location
     */
    def actorLocation[A](
                          innerSelection: SelectionBuilder[ActorLocation, A]
                        ): SelectionBuilder[RepoConfigDisableAnonymousGitAccessAuditEntry, Option[
      A
    ]] = Field("actorLocation", OptionOf(Obj(innerSelection)))

    /**
     * The username of the user who initiated the action
     */
    def actorLogin: SelectionBuilder[
      RepoConfigDisableAnonymousGitAccessAuditEntry,
      Option[String]
    ] = Field("actorLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the actor.
     */
    def actorResourcePath: SelectionBuilder[
      RepoConfigDisableAnonymousGitAccessAuditEntry,
      Option[URI]
    ] = Field("actorResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the actor.
     */
    def actorUrl: SelectionBuilder[
      RepoConfigDisableAnonymousGitAccessAuditEntry,
      Option[URI]
    ] = Field("actorUrl", OptionOf(Scalar()))

    /**
     * The time the action was initiated
     */
    def createdAt: SelectionBuilder[
      RepoConfigDisableAnonymousGitAccessAuditEntry,
      PreciseDateTime
    ] = Field("createdAt", Scalar())

    def id: SelectionBuilder[
      RepoConfigDisableAnonymousGitAccessAuditEntry,
      String
    ] = Field("id", Scalar())

    /**
     * The corresponding operation type for the action
     */
    def operationType: SelectionBuilder[
      RepoConfigDisableAnonymousGitAccessAuditEntry,
      Option[OperationType]
    ] = Field("operationType", OptionOf(Scalar()))

    /**
     * The Organization associated with the Audit Entry.
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[RepoConfigDisableAnonymousGitAccessAuditEntry, Option[
      A
    ]] = Field("organization", OptionOf(Obj(innerSelection)))

    /**
     * The name of the Organization.
     */
    def organizationName: SelectionBuilder[
      RepoConfigDisableAnonymousGitAccessAuditEntry,
      Option[String]
    ] = Field("organizationName", OptionOf(Scalar()))

    /**
     * The HTTP path for the organization
     */
    def organizationResourcePath: SelectionBuilder[
      RepoConfigDisableAnonymousGitAccessAuditEntry,
      Option[URI]
    ] = Field("organizationResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the organization
     */
    def organizationUrl: SelectionBuilder[
      RepoConfigDisableAnonymousGitAccessAuditEntry,
      Option[URI]
    ] = Field("organizationUrl", OptionOf(Scalar()))

    /**
     * The repository associated with the action
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[RepoConfigDisableAnonymousGitAccessAuditEntry, Option[
      A
    ]] = Field("repository", OptionOf(Obj(innerSelection)))

    /**
     * The name of the repository
     */
    def repositoryName: SelectionBuilder[
      RepoConfigDisableAnonymousGitAccessAuditEntry,
      Option[String]
    ] = Field("repositoryName", OptionOf(Scalar()))

    /**
     * The HTTP path for the repository
     */
    def repositoryResourcePath: SelectionBuilder[
      RepoConfigDisableAnonymousGitAccessAuditEntry,
      Option[URI]
    ] = Field("repositoryResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the repository
     */
    def repositoryUrl: SelectionBuilder[
      RepoConfigDisableAnonymousGitAccessAuditEntry,
      Option[URI]
    ] = Field("repositoryUrl", OptionOf(Scalar()))

    /**
     * The user affected by the action
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[RepoConfigDisableAnonymousGitAccessAuditEntry, Option[
      A
    ]] = Field("user", OptionOf(Obj(innerSelection)))

    /**
     * For actions involving two users, the actor is the initiator and the user is the affected user.
     */
    def userLogin: SelectionBuilder[
      RepoConfigDisableAnonymousGitAccessAuditEntry,
      Option[String]
    ] = Field("userLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the user.
     */
    def userResourcePath: SelectionBuilder[
      RepoConfigDisableAnonymousGitAccessAuditEntry,
      Option[URI]
    ] = Field("userResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the user.
     */
    def userUrl: SelectionBuilder[
      RepoConfigDisableAnonymousGitAccessAuditEntry,
      Option[URI]
    ] = Field("userUrl", OptionOf(Scalar()))
  }

  type RepoConfigDisableCollaboratorsOnlyAuditEntry

  object RepoConfigDisableCollaboratorsOnlyAuditEntry {

    /**
     * The action name
     */
    def action: SelectionBuilder[
      RepoConfigDisableCollaboratorsOnlyAuditEntry,
      String
    ] = Field("action", Scalar())

    /**
     * The user who initiated the action
     */
    def actor[A](
                  onBot: SelectionBuilder[Bot, A],
                  onOrganization: SelectionBuilder[Organization, A],
                  onUser: SelectionBuilder[User, A]
                ): SelectionBuilder[RepoConfigDisableCollaboratorsOnlyAuditEntry, Option[
      A
    ]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> Obj(onBot),
              "Organization" -> Obj(onOrganization),
              "User" -> Obj(onUser)
            )
          )
        )
      )

    /**
     * The IP address of the actor
     */
    def actorIp
    : SelectionBuilder[RepoConfigDisableCollaboratorsOnlyAuditEntry, Option[
      String
    ]] = Field("actorIp", OptionOf(Scalar()))

    /**
     * A readable representation of the actor's location
     */
    def actorLocation[A](
                          innerSelection: SelectionBuilder[ActorLocation, A]
                        ): SelectionBuilder[RepoConfigDisableCollaboratorsOnlyAuditEntry, Option[
      A
    ]] = Field("actorLocation", OptionOf(Obj(innerSelection)))

    /**
     * The username of the user who initiated the action
     */
    def actorLogin
    : SelectionBuilder[RepoConfigDisableCollaboratorsOnlyAuditEntry, Option[
      String
    ]] = Field("actorLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the actor.
     */
    def actorResourcePath
    : SelectionBuilder[RepoConfigDisableCollaboratorsOnlyAuditEntry, Option[
      URI
    ]] = Field("actorResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the actor.
     */
    def actorUrl
    : SelectionBuilder[RepoConfigDisableCollaboratorsOnlyAuditEntry, Option[
      URI
    ]] = Field("actorUrl", OptionOf(Scalar()))

    /**
     * The time the action was initiated
     */
    def createdAt: SelectionBuilder[
      RepoConfigDisableCollaboratorsOnlyAuditEntry,
      PreciseDateTime
    ] = Field("createdAt", Scalar())

    def id: SelectionBuilder[
      RepoConfigDisableCollaboratorsOnlyAuditEntry,
      String
    ] = Field("id", Scalar())

    /**
     * The corresponding operation type for the action
     */
    def operationType
    : SelectionBuilder[RepoConfigDisableCollaboratorsOnlyAuditEntry, Option[
      OperationType
    ]] = Field("operationType", OptionOf(Scalar()))

    /**
     * The Organization associated with the Audit Entry.
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[RepoConfigDisableCollaboratorsOnlyAuditEntry, Option[
      A
    ]] = Field("organization", OptionOf(Obj(innerSelection)))

    /**
     * The name of the Organization.
     */
    def organizationName
    : SelectionBuilder[RepoConfigDisableCollaboratorsOnlyAuditEntry, Option[
      String
    ]] = Field("organizationName", OptionOf(Scalar()))

    /**
     * The HTTP path for the organization
     */
    def organizationResourcePath
    : SelectionBuilder[RepoConfigDisableCollaboratorsOnlyAuditEntry, Option[
      URI
    ]] = Field("organizationResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the organization
     */
    def organizationUrl
    : SelectionBuilder[RepoConfigDisableCollaboratorsOnlyAuditEntry, Option[
      URI
    ]] = Field("organizationUrl", OptionOf(Scalar()))

    /**
     * The repository associated with the action
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[RepoConfigDisableCollaboratorsOnlyAuditEntry, Option[
      A
    ]] = Field("repository", OptionOf(Obj(innerSelection)))

    /**
     * The name of the repository
     */
    def repositoryName
    : SelectionBuilder[RepoConfigDisableCollaboratorsOnlyAuditEntry, Option[
      String
    ]] = Field("repositoryName", OptionOf(Scalar()))

    /**
     * The HTTP path for the repository
     */
    def repositoryResourcePath
    : SelectionBuilder[RepoConfigDisableCollaboratorsOnlyAuditEntry, Option[
      URI
    ]] = Field("repositoryResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the repository
     */
    def repositoryUrl
    : SelectionBuilder[RepoConfigDisableCollaboratorsOnlyAuditEntry, Option[
      URI
    ]] = Field("repositoryUrl", OptionOf(Scalar()))

    /**
     * The user affected by the action
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[RepoConfigDisableCollaboratorsOnlyAuditEntry, Option[
      A
    ]] = Field("user", OptionOf(Obj(innerSelection)))

    /**
     * For actions involving two users, the actor is the initiator and the user is the affected user.
     */
    def userLogin
    : SelectionBuilder[RepoConfigDisableCollaboratorsOnlyAuditEntry, Option[
      String
    ]] = Field("userLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the user.
     */
    def userResourcePath
    : SelectionBuilder[RepoConfigDisableCollaboratorsOnlyAuditEntry, Option[
      URI
    ]] = Field("userResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the user.
     */
    def userUrl
    : SelectionBuilder[RepoConfigDisableCollaboratorsOnlyAuditEntry, Option[
      URI
    ]] = Field("userUrl", OptionOf(Scalar()))
  }

  type RepoConfigDisableContributorsOnlyAuditEntry

  object RepoConfigDisableContributorsOnlyAuditEntry {

    /**
     * The action name
     */
    def action: SelectionBuilder[
      RepoConfigDisableContributorsOnlyAuditEntry,
      String
    ] = Field("action", Scalar())

    /**
     * The user who initiated the action
     */
    def actor[A](
                  onBot: SelectionBuilder[Bot, A],
                  onOrganization: SelectionBuilder[Organization, A],
                  onUser: SelectionBuilder[User, A]
                ): SelectionBuilder[RepoConfigDisableContributorsOnlyAuditEntry, Option[
      A
    ]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> Obj(onBot),
              "Organization" -> Obj(onOrganization),
              "User" -> Obj(onUser)
            )
          )
        )
      )

    /**
     * The IP address of the actor
     */
    def actorIp
    : SelectionBuilder[RepoConfigDisableContributorsOnlyAuditEntry, Option[
      String
    ]] = Field("actorIp", OptionOf(Scalar()))

    /**
     * A readable representation of the actor's location
     */
    def actorLocation[A](
                          innerSelection: SelectionBuilder[ActorLocation, A]
                        ): SelectionBuilder[RepoConfigDisableContributorsOnlyAuditEntry, Option[
      A
    ]] = Field("actorLocation", OptionOf(Obj(innerSelection)))

    /**
     * The username of the user who initiated the action
     */
    def actorLogin
    : SelectionBuilder[RepoConfigDisableContributorsOnlyAuditEntry, Option[
      String
    ]] = Field("actorLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the actor.
     */
    def actorResourcePath
    : SelectionBuilder[RepoConfigDisableContributorsOnlyAuditEntry, Option[
      URI
    ]] = Field("actorResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the actor.
     */
    def actorUrl
    : SelectionBuilder[RepoConfigDisableContributorsOnlyAuditEntry, Option[
      URI
    ]] = Field("actorUrl", OptionOf(Scalar()))

    /**
     * The time the action was initiated
     */
    def createdAt: SelectionBuilder[
      RepoConfigDisableContributorsOnlyAuditEntry,
      PreciseDateTime
    ] = Field("createdAt", Scalar())

    def id: SelectionBuilder[
      RepoConfigDisableContributorsOnlyAuditEntry,
      String
    ] = Field("id", Scalar())

    /**
     * The corresponding operation type for the action
     */
    def operationType
    : SelectionBuilder[RepoConfigDisableContributorsOnlyAuditEntry, Option[
      OperationType
    ]] = Field("operationType", OptionOf(Scalar()))

    /**
     * The Organization associated with the Audit Entry.
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[RepoConfigDisableContributorsOnlyAuditEntry, Option[
      A
    ]] = Field("organization", OptionOf(Obj(innerSelection)))

    /**
     * The name of the Organization.
     */
    def organizationName
    : SelectionBuilder[RepoConfigDisableContributorsOnlyAuditEntry, Option[
      String
    ]] = Field("organizationName", OptionOf(Scalar()))

    /**
     * The HTTP path for the organization
     */
    def organizationResourcePath
    : SelectionBuilder[RepoConfigDisableContributorsOnlyAuditEntry, Option[
      URI
    ]] = Field("organizationResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the organization
     */
    def organizationUrl
    : SelectionBuilder[RepoConfigDisableContributorsOnlyAuditEntry, Option[
      URI
    ]] = Field("organizationUrl", OptionOf(Scalar()))

    /**
     * The repository associated with the action
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[RepoConfigDisableContributorsOnlyAuditEntry, Option[
      A
    ]] = Field("repository", OptionOf(Obj(innerSelection)))

    /**
     * The name of the repository
     */
    def repositoryName
    : SelectionBuilder[RepoConfigDisableContributorsOnlyAuditEntry, Option[
      String
    ]] = Field("repositoryName", OptionOf(Scalar()))

    /**
     * The HTTP path for the repository
     */
    def repositoryResourcePath
    : SelectionBuilder[RepoConfigDisableContributorsOnlyAuditEntry, Option[
      URI
    ]] = Field("repositoryResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the repository
     */
    def repositoryUrl
    : SelectionBuilder[RepoConfigDisableContributorsOnlyAuditEntry, Option[
      URI
    ]] = Field("repositoryUrl", OptionOf(Scalar()))

    /**
     * The user affected by the action
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[RepoConfigDisableContributorsOnlyAuditEntry, Option[
      A
    ]] = Field("user", OptionOf(Obj(innerSelection)))

    /**
     * For actions involving two users, the actor is the initiator and the user is the affected user.
     */
    def userLogin
    : SelectionBuilder[RepoConfigDisableContributorsOnlyAuditEntry, Option[
      String
    ]] = Field("userLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the user.
     */
    def userResourcePath
    : SelectionBuilder[RepoConfigDisableContributorsOnlyAuditEntry, Option[
      URI
    ]] = Field("userResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the user.
     */
    def userUrl
    : SelectionBuilder[RepoConfigDisableContributorsOnlyAuditEntry, Option[
      URI
    ]] = Field("userUrl", OptionOf(Scalar()))
  }

  type RepoConfigDisableSockpuppetDisallowedAuditEntry

  object RepoConfigDisableSockpuppetDisallowedAuditEntry {

    /**
     * The action name
     */
    def action: SelectionBuilder[
      RepoConfigDisableSockpuppetDisallowedAuditEntry,
      String
    ] = Field("action", Scalar())

    /**
     * The user who initiated the action
     */
    def actor[A](
                  onBot: SelectionBuilder[Bot, A],
                  onOrganization: SelectionBuilder[Organization, A],
                  onUser: SelectionBuilder[User, A]
                ): SelectionBuilder[RepoConfigDisableSockpuppetDisallowedAuditEntry, Option[
      A
    ]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> Obj(onBot),
              "Organization" -> Obj(onOrganization),
              "User" -> Obj(onUser)
            )
          )
        )
      )

    /**
     * The IP address of the actor
     */
    def actorIp: SelectionBuilder[
      RepoConfigDisableSockpuppetDisallowedAuditEntry,
      Option[String]
    ] = Field("actorIp", OptionOf(Scalar()))

    /**
     * A readable representation of the actor's location
     */
    def actorLocation[A](
                          innerSelection: SelectionBuilder[ActorLocation, A]
                        ): SelectionBuilder[RepoConfigDisableSockpuppetDisallowedAuditEntry, Option[
      A
    ]] = Field("actorLocation", OptionOf(Obj(innerSelection)))

    /**
     * The username of the user who initiated the action
     */
    def actorLogin: SelectionBuilder[
      RepoConfigDisableSockpuppetDisallowedAuditEntry,
      Option[String]
    ] = Field("actorLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the actor.
     */
    def actorResourcePath: SelectionBuilder[
      RepoConfigDisableSockpuppetDisallowedAuditEntry,
      Option[URI]
    ] = Field("actorResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the actor.
     */
    def actorUrl: SelectionBuilder[
      RepoConfigDisableSockpuppetDisallowedAuditEntry,
      Option[URI]
    ] = Field("actorUrl", OptionOf(Scalar()))

    /**
     * The time the action was initiated
     */
    def createdAt: SelectionBuilder[
      RepoConfigDisableSockpuppetDisallowedAuditEntry,
      PreciseDateTime
    ] = Field("createdAt", Scalar())

    def id: SelectionBuilder[
      RepoConfigDisableSockpuppetDisallowedAuditEntry,
      String
    ] = Field("id", Scalar())

    /**
     * The corresponding operation type for the action
     */
    def operationType: SelectionBuilder[
      RepoConfigDisableSockpuppetDisallowedAuditEntry,
      Option[OperationType]
    ] = Field("operationType", OptionOf(Scalar()))

    /**
     * The Organization associated with the Audit Entry.
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[RepoConfigDisableSockpuppetDisallowedAuditEntry, Option[
      A
    ]] = Field("organization", OptionOf(Obj(innerSelection)))

    /**
     * The name of the Organization.
     */
    def organizationName: SelectionBuilder[
      RepoConfigDisableSockpuppetDisallowedAuditEntry,
      Option[String]
    ] = Field("organizationName", OptionOf(Scalar()))

    /**
     * The HTTP path for the organization
     */
    def organizationResourcePath: SelectionBuilder[
      RepoConfigDisableSockpuppetDisallowedAuditEntry,
      Option[URI]
    ] = Field("organizationResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the organization
     */
    def organizationUrl: SelectionBuilder[
      RepoConfigDisableSockpuppetDisallowedAuditEntry,
      Option[URI]
    ] = Field("organizationUrl", OptionOf(Scalar()))

    /**
     * The repository associated with the action
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[RepoConfigDisableSockpuppetDisallowedAuditEntry, Option[
      A
    ]] = Field("repository", OptionOf(Obj(innerSelection)))

    /**
     * The name of the repository
     */
    def repositoryName: SelectionBuilder[
      RepoConfigDisableSockpuppetDisallowedAuditEntry,
      Option[String]
    ] = Field("repositoryName", OptionOf(Scalar()))

    /**
     * The HTTP path for the repository
     */
    def repositoryResourcePath: SelectionBuilder[
      RepoConfigDisableSockpuppetDisallowedAuditEntry,
      Option[URI]
    ] = Field("repositoryResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the repository
     */
    def repositoryUrl: SelectionBuilder[
      RepoConfigDisableSockpuppetDisallowedAuditEntry,
      Option[URI]
    ] = Field("repositoryUrl", OptionOf(Scalar()))

    /**
     * The user affected by the action
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[RepoConfigDisableSockpuppetDisallowedAuditEntry, Option[
      A
    ]] = Field("user", OptionOf(Obj(innerSelection)))

    /**
     * For actions involving two users, the actor is the initiator and the user is the affected user.
     */
    def userLogin: SelectionBuilder[
      RepoConfigDisableSockpuppetDisallowedAuditEntry,
      Option[String]
    ] = Field("userLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the user.
     */
    def userResourcePath: SelectionBuilder[
      RepoConfigDisableSockpuppetDisallowedAuditEntry,
      Option[URI]
    ] = Field("userResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the user.
     */
    def userUrl: SelectionBuilder[
      RepoConfigDisableSockpuppetDisallowedAuditEntry,
      Option[URI]
    ] = Field("userUrl", OptionOf(Scalar()))
  }

  type RepoConfigEnableAnonymousGitAccessAuditEntry

  object RepoConfigEnableAnonymousGitAccessAuditEntry {

    /**
     * The action name
     */
    def action: SelectionBuilder[
      RepoConfigEnableAnonymousGitAccessAuditEntry,
      String
    ] = Field("action", Scalar())

    /**
     * The user who initiated the action
     */
    def actor[A](
                  onBot: SelectionBuilder[Bot, A],
                  onOrganization: SelectionBuilder[Organization, A],
                  onUser: SelectionBuilder[User, A]
                ): SelectionBuilder[RepoConfigEnableAnonymousGitAccessAuditEntry, Option[
      A
    ]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> Obj(onBot),
              "Organization" -> Obj(onOrganization),
              "User" -> Obj(onUser)
            )
          )
        )
      )

    /**
     * The IP address of the actor
     */
    def actorIp
    : SelectionBuilder[RepoConfigEnableAnonymousGitAccessAuditEntry, Option[
      String
    ]] = Field("actorIp", OptionOf(Scalar()))

    /**
     * A readable representation of the actor's location
     */
    def actorLocation[A](
                          innerSelection: SelectionBuilder[ActorLocation, A]
                        ): SelectionBuilder[RepoConfigEnableAnonymousGitAccessAuditEntry, Option[
      A
    ]] = Field("actorLocation", OptionOf(Obj(innerSelection)))

    /**
     * The username of the user who initiated the action
     */
    def actorLogin
    : SelectionBuilder[RepoConfigEnableAnonymousGitAccessAuditEntry, Option[
      String
    ]] = Field("actorLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the actor.
     */
    def actorResourcePath
    : SelectionBuilder[RepoConfigEnableAnonymousGitAccessAuditEntry, Option[
      URI
    ]] = Field("actorResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the actor.
     */
    def actorUrl
    : SelectionBuilder[RepoConfigEnableAnonymousGitAccessAuditEntry, Option[
      URI
    ]] = Field("actorUrl", OptionOf(Scalar()))

    /**
     * The time the action was initiated
     */
    def createdAt: SelectionBuilder[
      RepoConfigEnableAnonymousGitAccessAuditEntry,
      PreciseDateTime
    ] = Field("createdAt", Scalar())

    def id: SelectionBuilder[
      RepoConfigEnableAnonymousGitAccessAuditEntry,
      String
    ] = Field("id", Scalar())

    /**
     * The corresponding operation type for the action
     */
    def operationType
    : SelectionBuilder[RepoConfigEnableAnonymousGitAccessAuditEntry, Option[
      OperationType
    ]] = Field("operationType", OptionOf(Scalar()))

    /**
     * The Organization associated with the Audit Entry.
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[RepoConfigEnableAnonymousGitAccessAuditEntry, Option[
      A
    ]] = Field("organization", OptionOf(Obj(innerSelection)))

    /**
     * The name of the Organization.
     */
    def organizationName
    : SelectionBuilder[RepoConfigEnableAnonymousGitAccessAuditEntry, Option[
      String
    ]] = Field("organizationName", OptionOf(Scalar()))

    /**
     * The HTTP path for the organization
     */
    def organizationResourcePath
    : SelectionBuilder[RepoConfigEnableAnonymousGitAccessAuditEntry, Option[
      URI
    ]] = Field("organizationResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the organization
     */
    def organizationUrl
    : SelectionBuilder[RepoConfigEnableAnonymousGitAccessAuditEntry, Option[
      URI
    ]] = Field("organizationUrl", OptionOf(Scalar()))

    /**
     * The repository associated with the action
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[RepoConfigEnableAnonymousGitAccessAuditEntry, Option[
      A
    ]] = Field("repository", OptionOf(Obj(innerSelection)))

    /**
     * The name of the repository
     */
    def repositoryName
    : SelectionBuilder[RepoConfigEnableAnonymousGitAccessAuditEntry, Option[
      String
    ]] = Field("repositoryName", OptionOf(Scalar()))

    /**
     * The HTTP path for the repository
     */
    def repositoryResourcePath
    : SelectionBuilder[RepoConfigEnableAnonymousGitAccessAuditEntry, Option[
      URI
    ]] = Field("repositoryResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the repository
     */
    def repositoryUrl
    : SelectionBuilder[RepoConfigEnableAnonymousGitAccessAuditEntry, Option[
      URI
    ]] = Field("repositoryUrl", OptionOf(Scalar()))

    /**
     * The user affected by the action
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[RepoConfigEnableAnonymousGitAccessAuditEntry, Option[
      A
    ]] = Field("user", OptionOf(Obj(innerSelection)))

    /**
     * For actions involving two users, the actor is the initiator and the user is the affected user.
     */
    def userLogin
    : SelectionBuilder[RepoConfigEnableAnonymousGitAccessAuditEntry, Option[
      String
    ]] = Field("userLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the user.
     */
    def userResourcePath
    : SelectionBuilder[RepoConfigEnableAnonymousGitAccessAuditEntry, Option[
      URI
    ]] = Field("userResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the user.
     */
    def userUrl
    : SelectionBuilder[RepoConfigEnableAnonymousGitAccessAuditEntry, Option[
      URI
    ]] = Field("userUrl", OptionOf(Scalar()))
  }

  type RepoConfigEnableCollaboratorsOnlyAuditEntry

  object RepoConfigEnableCollaboratorsOnlyAuditEntry {

    /**
     * The action name
     */
    def action: SelectionBuilder[
      RepoConfigEnableCollaboratorsOnlyAuditEntry,
      String
    ] = Field("action", Scalar())

    /**
     * The user who initiated the action
     */
    def actor[A](
                  onBot: SelectionBuilder[Bot, A],
                  onOrganization: SelectionBuilder[Organization, A],
                  onUser: SelectionBuilder[User, A]
                ): SelectionBuilder[RepoConfigEnableCollaboratorsOnlyAuditEntry, Option[
      A
    ]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> Obj(onBot),
              "Organization" -> Obj(onOrganization),
              "User" -> Obj(onUser)
            )
          )
        )
      )

    /**
     * The IP address of the actor
     */
    def actorIp
    : SelectionBuilder[RepoConfigEnableCollaboratorsOnlyAuditEntry, Option[
      String
    ]] = Field("actorIp", OptionOf(Scalar()))

    /**
     * A readable representation of the actor's location
     */
    def actorLocation[A](
                          innerSelection: SelectionBuilder[ActorLocation, A]
                        ): SelectionBuilder[RepoConfigEnableCollaboratorsOnlyAuditEntry, Option[
      A
    ]] = Field("actorLocation", OptionOf(Obj(innerSelection)))

    /**
     * The username of the user who initiated the action
     */
    def actorLogin
    : SelectionBuilder[RepoConfigEnableCollaboratorsOnlyAuditEntry, Option[
      String
    ]] = Field("actorLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the actor.
     */
    def actorResourcePath
    : SelectionBuilder[RepoConfigEnableCollaboratorsOnlyAuditEntry, Option[
      URI
    ]] = Field("actorResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the actor.
     */
    def actorUrl
    : SelectionBuilder[RepoConfigEnableCollaboratorsOnlyAuditEntry, Option[
      URI
    ]] = Field("actorUrl", OptionOf(Scalar()))

    /**
     * The time the action was initiated
     */
    def createdAt: SelectionBuilder[
      RepoConfigEnableCollaboratorsOnlyAuditEntry,
      PreciseDateTime
    ] = Field("createdAt", Scalar())

    def id: SelectionBuilder[
      RepoConfigEnableCollaboratorsOnlyAuditEntry,
      String
    ] = Field("id", Scalar())

    /**
     * The corresponding operation type for the action
     */
    def operationType
    : SelectionBuilder[RepoConfigEnableCollaboratorsOnlyAuditEntry, Option[
      OperationType
    ]] = Field("operationType", OptionOf(Scalar()))

    /**
     * The Organization associated with the Audit Entry.
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[RepoConfigEnableCollaboratorsOnlyAuditEntry, Option[
      A
    ]] = Field("organization", OptionOf(Obj(innerSelection)))

    /**
     * The name of the Organization.
     */
    def organizationName
    : SelectionBuilder[RepoConfigEnableCollaboratorsOnlyAuditEntry, Option[
      String
    ]] = Field("organizationName", OptionOf(Scalar()))

    /**
     * The HTTP path for the organization
     */
    def organizationResourcePath
    : SelectionBuilder[RepoConfigEnableCollaboratorsOnlyAuditEntry, Option[
      URI
    ]] = Field("organizationResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the organization
     */
    def organizationUrl
    : SelectionBuilder[RepoConfigEnableCollaboratorsOnlyAuditEntry, Option[
      URI
    ]] = Field("organizationUrl", OptionOf(Scalar()))

    /**
     * The repository associated with the action
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[RepoConfigEnableCollaboratorsOnlyAuditEntry, Option[
      A
    ]] = Field("repository", OptionOf(Obj(innerSelection)))

    /**
     * The name of the repository
     */
    def repositoryName
    : SelectionBuilder[RepoConfigEnableCollaboratorsOnlyAuditEntry, Option[
      String
    ]] = Field("repositoryName", OptionOf(Scalar()))

    /**
     * The HTTP path for the repository
     */
    def repositoryResourcePath
    : SelectionBuilder[RepoConfigEnableCollaboratorsOnlyAuditEntry, Option[
      URI
    ]] = Field("repositoryResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the repository
     */
    def repositoryUrl
    : SelectionBuilder[RepoConfigEnableCollaboratorsOnlyAuditEntry, Option[
      URI
    ]] = Field("repositoryUrl", OptionOf(Scalar()))

    /**
     * The user affected by the action
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[RepoConfigEnableCollaboratorsOnlyAuditEntry, Option[
      A
    ]] = Field("user", OptionOf(Obj(innerSelection)))

    /**
     * For actions involving two users, the actor is the initiator and the user is the affected user.
     */
    def userLogin
    : SelectionBuilder[RepoConfigEnableCollaboratorsOnlyAuditEntry, Option[
      String
    ]] = Field("userLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the user.
     */
    def userResourcePath
    : SelectionBuilder[RepoConfigEnableCollaboratorsOnlyAuditEntry, Option[
      URI
    ]] = Field("userResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the user.
     */
    def userUrl
    : SelectionBuilder[RepoConfigEnableCollaboratorsOnlyAuditEntry, Option[
      URI
    ]] = Field("userUrl", OptionOf(Scalar()))
  }

  type RepoConfigEnableContributorsOnlyAuditEntry

  object RepoConfigEnableContributorsOnlyAuditEntry {

    /**
     * The action name
     */
    def action
    : SelectionBuilder[RepoConfigEnableContributorsOnlyAuditEntry, String] =
      Field("action", Scalar())

    /**
     * The user who initiated the action
     */
    def actor[A](
                  onBot: SelectionBuilder[Bot, A],
                  onOrganization: SelectionBuilder[Organization, A],
                  onUser: SelectionBuilder[User, A]
                ): SelectionBuilder[RepoConfigEnableContributorsOnlyAuditEntry, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> Obj(onBot),
              "Organization" -> Obj(onOrganization),
              "User" -> Obj(onUser)
            )
          )
        )
      )

    /**
     * The IP address of the actor
     */
    def actorIp
    : SelectionBuilder[RepoConfigEnableContributorsOnlyAuditEntry, Option[
      String
    ]] = Field("actorIp", OptionOf(Scalar()))

    /**
     * A readable representation of the actor's location
     */
    def actorLocation[A](
                          innerSelection: SelectionBuilder[ActorLocation, A]
                        ): SelectionBuilder[RepoConfigEnableContributorsOnlyAuditEntry, Option[A]] =
      Field("actorLocation", OptionOf(Obj(innerSelection)))

    /**
     * The username of the user who initiated the action
     */
    def actorLogin
    : SelectionBuilder[RepoConfigEnableContributorsOnlyAuditEntry, Option[
      String
    ]] = Field("actorLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the actor.
     */
    def actorResourcePath
    : SelectionBuilder[RepoConfigEnableContributorsOnlyAuditEntry, Option[
      URI
    ]] = Field("actorResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the actor.
     */
    def actorUrl
    : SelectionBuilder[RepoConfigEnableContributorsOnlyAuditEntry, Option[
      URI
    ]] = Field("actorUrl", OptionOf(Scalar()))

    /**
     * The time the action was initiated
     */
    def createdAt: SelectionBuilder[
      RepoConfigEnableContributorsOnlyAuditEntry,
      PreciseDateTime
    ] = Field("createdAt", Scalar())

    def id
    : SelectionBuilder[RepoConfigEnableContributorsOnlyAuditEntry, String] =
      Field("id", Scalar())

    /**
     * The corresponding operation type for the action
     */
    def operationType
    : SelectionBuilder[RepoConfigEnableContributorsOnlyAuditEntry, Option[
      OperationType
    ]] = Field("operationType", OptionOf(Scalar()))

    /**
     * The Organization associated with the Audit Entry.
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[RepoConfigEnableContributorsOnlyAuditEntry, Option[A]] =
      Field("organization", OptionOf(Obj(innerSelection)))

    /**
     * The name of the Organization.
     */
    def organizationName
    : SelectionBuilder[RepoConfigEnableContributorsOnlyAuditEntry, Option[
      String
    ]] = Field("organizationName", OptionOf(Scalar()))

    /**
     * The HTTP path for the organization
     */
    def organizationResourcePath
    : SelectionBuilder[RepoConfigEnableContributorsOnlyAuditEntry, Option[
      URI
    ]] = Field("organizationResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the organization
     */
    def organizationUrl
    : SelectionBuilder[RepoConfigEnableContributorsOnlyAuditEntry, Option[
      URI
    ]] = Field("organizationUrl", OptionOf(Scalar()))

    /**
     * The repository associated with the action
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[RepoConfigEnableContributorsOnlyAuditEntry, Option[A]] =
      Field("repository", OptionOf(Obj(innerSelection)))

    /**
     * The name of the repository
     */
    def repositoryName
    : SelectionBuilder[RepoConfigEnableContributorsOnlyAuditEntry, Option[
      String
    ]] = Field("repositoryName", OptionOf(Scalar()))

    /**
     * The HTTP path for the repository
     */
    def repositoryResourcePath
    : SelectionBuilder[RepoConfigEnableContributorsOnlyAuditEntry, Option[
      URI
    ]] = Field("repositoryResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the repository
     */
    def repositoryUrl
    : SelectionBuilder[RepoConfigEnableContributorsOnlyAuditEntry, Option[
      URI
    ]] = Field("repositoryUrl", OptionOf(Scalar()))

    /**
     * The user affected by the action
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[RepoConfigEnableContributorsOnlyAuditEntry, Option[A]] =
      Field("user", OptionOf(Obj(innerSelection)))

    /**
     * For actions involving two users, the actor is the initiator and the user is the affected user.
     */
    def userLogin
    : SelectionBuilder[RepoConfigEnableContributorsOnlyAuditEntry, Option[
      String
    ]] = Field("userLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the user.
     */
    def userResourcePath
    : SelectionBuilder[RepoConfigEnableContributorsOnlyAuditEntry, Option[
      URI
    ]] = Field("userResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the user.
     */
    def userUrl
    : SelectionBuilder[RepoConfigEnableContributorsOnlyAuditEntry, Option[
      URI
    ]] = Field("userUrl", OptionOf(Scalar()))
  }

  type RepoConfigEnableSockpuppetDisallowedAuditEntry

  object RepoConfigEnableSockpuppetDisallowedAuditEntry {

    /**
     * The action name
     */
    def action: SelectionBuilder[
      RepoConfigEnableSockpuppetDisallowedAuditEntry,
      String
    ] = Field("action", Scalar())

    /**
     * The user who initiated the action
     */
    def actor[A](
                  onBot: SelectionBuilder[Bot, A],
                  onOrganization: SelectionBuilder[Organization, A],
                  onUser: SelectionBuilder[User, A]
                ): SelectionBuilder[RepoConfigEnableSockpuppetDisallowedAuditEntry, Option[
      A
    ]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> Obj(onBot),
              "Organization" -> Obj(onOrganization),
              "User" -> Obj(onUser)
            )
          )
        )
      )

    /**
     * The IP address of the actor
     */
    def actorIp: SelectionBuilder[
      RepoConfigEnableSockpuppetDisallowedAuditEntry,
      Option[String]
    ] = Field("actorIp", OptionOf(Scalar()))

    /**
     * A readable representation of the actor's location
     */
    def actorLocation[A](
                          innerSelection: SelectionBuilder[ActorLocation, A]
                        ): SelectionBuilder[RepoConfigEnableSockpuppetDisallowedAuditEntry, Option[
      A
    ]] = Field("actorLocation", OptionOf(Obj(innerSelection)))

    /**
     * The username of the user who initiated the action
     */
    def actorLogin: SelectionBuilder[
      RepoConfigEnableSockpuppetDisallowedAuditEntry,
      Option[String]
    ] = Field("actorLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the actor.
     */
    def actorResourcePath: SelectionBuilder[
      RepoConfigEnableSockpuppetDisallowedAuditEntry,
      Option[URI]
    ] = Field("actorResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the actor.
     */
    def actorUrl: SelectionBuilder[
      RepoConfigEnableSockpuppetDisallowedAuditEntry,
      Option[URI]
    ] = Field("actorUrl", OptionOf(Scalar()))

    /**
     * The time the action was initiated
     */
    def createdAt: SelectionBuilder[
      RepoConfigEnableSockpuppetDisallowedAuditEntry,
      PreciseDateTime
    ] = Field("createdAt", Scalar())

    def id: SelectionBuilder[
      RepoConfigEnableSockpuppetDisallowedAuditEntry,
      String
    ] = Field("id", Scalar())

    /**
     * The corresponding operation type for the action
     */
    def operationType: SelectionBuilder[
      RepoConfigEnableSockpuppetDisallowedAuditEntry,
      Option[OperationType]
    ] = Field("operationType", OptionOf(Scalar()))

    /**
     * The Organization associated with the Audit Entry.
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[RepoConfigEnableSockpuppetDisallowedAuditEntry, Option[
      A
    ]] = Field("organization", OptionOf(Obj(innerSelection)))

    /**
     * The name of the Organization.
     */
    def organizationName: SelectionBuilder[
      RepoConfigEnableSockpuppetDisallowedAuditEntry,
      Option[String]
    ] = Field("organizationName", OptionOf(Scalar()))

    /**
     * The HTTP path for the organization
     */
    def organizationResourcePath: SelectionBuilder[
      RepoConfigEnableSockpuppetDisallowedAuditEntry,
      Option[URI]
    ] = Field("organizationResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the organization
     */
    def organizationUrl: SelectionBuilder[
      RepoConfigEnableSockpuppetDisallowedAuditEntry,
      Option[URI]
    ] = Field("organizationUrl", OptionOf(Scalar()))

    /**
     * The repository associated with the action
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[RepoConfigEnableSockpuppetDisallowedAuditEntry, Option[
      A
    ]] = Field("repository", OptionOf(Obj(innerSelection)))

    /**
     * The name of the repository
     */
    def repositoryName: SelectionBuilder[
      RepoConfigEnableSockpuppetDisallowedAuditEntry,
      Option[String]
    ] = Field("repositoryName", OptionOf(Scalar()))

    /**
     * The HTTP path for the repository
     */
    def repositoryResourcePath: SelectionBuilder[
      RepoConfigEnableSockpuppetDisallowedAuditEntry,
      Option[URI]
    ] = Field("repositoryResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the repository
     */
    def repositoryUrl: SelectionBuilder[
      RepoConfigEnableSockpuppetDisallowedAuditEntry,
      Option[URI]
    ] = Field("repositoryUrl", OptionOf(Scalar()))

    /**
     * The user affected by the action
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[RepoConfigEnableSockpuppetDisallowedAuditEntry, Option[
      A
    ]] = Field("user", OptionOf(Obj(innerSelection)))

    /**
     * For actions involving two users, the actor is the initiator and the user is the affected user.
     */
    def userLogin: SelectionBuilder[
      RepoConfigEnableSockpuppetDisallowedAuditEntry,
      Option[String]
    ] = Field("userLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the user.
     */
    def userResourcePath: SelectionBuilder[
      RepoConfigEnableSockpuppetDisallowedAuditEntry,
      Option[URI]
    ] = Field("userResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the user.
     */
    def userUrl: SelectionBuilder[
      RepoConfigEnableSockpuppetDisallowedAuditEntry,
      Option[URI]
    ] = Field("userUrl", OptionOf(Scalar()))
  }

  type RepoConfigLockAnonymousGitAccessAuditEntry

  object RepoConfigLockAnonymousGitAccessAuditEntry {

    /**
     * The action name
     */
    def action
    : SelectionBuilder[RepoConfigLockAnonymousGitAccessAuditEntry, String] =
      Field("action", Scalar())

    /**
     * The user who initiated the action
     */
    def actor[A](
                  onBot: SelectionBuilder[Bot, A],
                  onOrganization: SelectionBuilder[Organization, A],
                  onUser: SelectionBuilder[User, A]
                ): SelectionBuilder[RepoConfigLockAnonymousGitAccessAuditEntry, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> Obj(onBot),
              "Organization" -> Obj(onOrganization),
              "User" -> Obj(onUser)
            )
          )
        )
      )

    /**
     * The IP address of the actor
     */
    def actorIp
    : SelectionBuilder[RepoConfigLockAnonymousGitAccessAuditEntry, Option[
      String
    ]] = Field("actorIp", OptionOf(Scalar()))

    /**
     * A readable representation of the actor's location
     */
    def actorLocation[A](
                          innerSelection: SelectionBuilder[ActorLocation, A]
                        ): SelectionBuilder[RepoConfigLockAnonymousGitAccessAuditEntry, Option[A]] =
      Field("actorLocation", OptionOf(Obj(innerSelection)))

    /**
     * The username of the user who initiated the action
     */
    def actorLogin
    : SelectionBuilder[RepoConfigLockAnonymousGitAccessAuditEntry, Option[
      String
    ]] = Field("actorLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the actor.
     */
    def actorResourcePath
    : SelectionBuilder[RepoConfigLockAnonymousGitAccessAuditEntry, Option[
      URI
    ]] = Field("actorResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the actor.
     */
    def actorUrl
    : SelectionBuilder[RepoConfigLockAnonymousGitAccessAuditEntry, Option[
      URI
    ]] = Field("actorUrl", OptionOf(Scalar()))

    /**
     * The time the action was initiated
     */
    def createdAt: SelectionBuilder[
      RepoConfigLockAnonymousGitAccessAuditEntry,
      PreciseDateTime
    ] = Field("createdAt", Scalar())

    def id
    : SelectionBuilder[RepoConfigLockAnonymousGitAccessAuditEntry, String] =
      Field("id", Scalar())

    /**
     * The corresponding operation type for the action
     */
    def operationType
    : SelectionBuilder[RepoConfigLockAnonymousGitAccessAuditEntry, Option[
      OperationType
    ]] = Field("operationType", OptionOf(Scalar()))

    /**
     * The Organization associated with the Audit Entry.
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[RepoConfigLockAnonymousGitAccessAuditEntry, Option[A]] =
      Field("organization", OptionOf(Obj(innerSelection)))

    /**
     * The name of the Organization.
     */
    def organizationName
    : SelectionBuilder[RepoConfigLockAnonymousGitAccessAuditEntry, Option[
      String
    ]] = Field("organizationName", OptionOf(Scalar()))

    /**
     * The HTTP path for the organization
     */
    def organizationResourcePath
    : SelectionBuilder[RepoConfigLockAnonymousGitAccessAuditEntry, Option[
      URI
    ]] = Field("organizationResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the organization
     */
    def organizationUrl
    : SelectionBuilder[RepoConfigLockAnonymousGitAccessAuditEntry, Option[
      URI
    ]] = Field("organizationUrl", OptionOf(Scalar()))

    /**
     * The repository associated with the action
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[RepoConfigLockAnonymousGitAccessAuditEntry, Option[A]] =
      Field("repository", OptionOf(Obj(innerSelection)))

    /**
     * The name of the repository
     */
    def repositoryName
    : SelectionBuilder[RepoConfigLockAnonymousGitAccessAuditEntry, Option[
      String
    ]] = Field("repositoryName", OptionOf(Scalar()))

    /**
     * The HTTP path for the repository
     */
    def repositoryResourcePath
    : SelectionBuilder[RepoConfigLockAnonymousGitAccessAuditEntry, Option[
      URI
    ]] = Field("repositoryResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the repository
     */
    def repositoryUrl
    : SelectionBuilder[RepoConfigLockAnonymousGitAccessAuditEntry, Option[
      URI
    ]] = Field("repositoryUrl", OptionOf(Scalar()))

    /**
     * The user affected by the action
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[RepoConfigLockAnonymousGitAccessAuditEntry, Option[A]] =
      Field("user", OptionOf(Obj(innerSelection)))

    /**
     * For actions involving two users, the actor is the initiator and the user is the affected user.
     */
    def userLogin
    : SelectionBuilder[RepoConfigLockAnonymousGitAccessAuditEntry, Option[
      String
    ]] = Field("userLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the user.
     */
    def userResourcePath
    : SelectionBuilder[RepoConfigLockAnonymousGitAccessAuditEntry, Option[
      URI
    ]] = Field("userResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the user.
     */
    def userUrl
    : SelectionBuilder[RepoConfigLockAnonymousGitAccessAuditEntry, Option[
      URI
    ]] = Field("userUrl", OptionOf(Scalar()))
  }

  type RepoConfigUnlockAnonymousGitAccessAuditEntry

  object RepoConfigUnlockAnonymousGitAccessAuditEntry {

    /**
     * The action name
     */
    def action: SelectionBuilder[
      RepoConfigUnlockAnonymousGitAccessAuditEntry,
      String
    ] = Field("action", Scalar())

    /**
     * The user who initiated the action
     */
    def actor[A](
                  onBot: SelectionBuilder[Bot, A],
                  onOrganization: SelectionBuilder[Organization, A],
                  onUser: SelectionBuilder[User, A]
                ): SelectionBuilder[RepoConfigUnlockAnonymousGitAccessAuditEntry, Option[
      A
    ]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> Obj(onBot),
              "Organization" -> Obj(onOrganization),
              "User" -> Obj(onUser)
            )
          )
        )
      )

    /**
     * The IP address of the actor
     */
    def actorIp
    : SelectionBuilder[RepoConfigUnlockAnonymousGitAccessAuditEntry, Option[
      String
    ]] = Field("actorIp", OptionOf(Scalar()))

    /**
     * A readable representation of the actor's location
     */
    def actorLocation[A](
                          innerSelection: SelectionBuilder[ActorLocation, A]
                        ): SelectionBuilder[RepoConfigUnlockAnonymousGitAccessAuditEntry, Option[
      A
    ]] = Field("actorLocation", OptionOf(Obj(innerSelection)))

    /**
     * The username of the user who initiated the action
     */
    def actorLogin
    : SelectionBuilder[RepoConfigUnlockAnonymousGitAccessAuditEntry, Option[
      String
    ]] = Field("actorLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the actor.
     */
    def actorResourcePath
    : SelectionBuilder[RepoConfigUnlockAnonymousGitAccessAuditEntry, Option[
      URI
    ]] = Field("actorResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the actor.
     */
    def actorUrl
    : SelectionBuilder[RepoConfigUnlockAnonymousGitAccessAuditEntry, Option[
      URI
    ]] = Field("actorUrl", OptionOf(Scalar()))

    /**
     * The time the action was initiated
     */
    def createdAt: SelectionBuilder[
      RepoConfigUnlockAnonymousGitAccessAuditEntry,
      PreciseDateTime
    ] = Field("createdAt", Scalar())

    def id: SelectionBuilder[
      RepoConfigUnlockAnonymousGitAccessAuditEntry,
      String
    ] = Field("id", Scalar())

    /**
     * The corresponding operation type for the action
     */
    def operationType
    : SelectionBuilder[RepoConfigUnlockAnonymousGitAccessAuditEntry, Option[
      OperationType
    ]] = Field("operationType", OptionOf(Scalar()))

    /**
     * The Organization associated with the Audit Entry.
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[RepoConfigUnlockAnonymousGitAccessAuditEntry, Option[
      A
    ]] = Field("organization", OptionOf(Obj(innerSelection)))

    /**
     * The name of the Organization.
     */
    def organizationName
    : SelectionBuilder[RepoConfigUnlockAnonymousGitAccessAuditEntry, Option[
      String
    ]] = Field("organizationName", OptionOf(Scalar()))

    /**
     * The HTTP path for the organization
     */
    def organizationResourcePath
    : SelectionBuilder[RepoConfigUnlockAnonymousGitAccessAuditEntry, Option[
      URI
    ]] = Field("organizationResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the organization
     */
    def organizationUrl
    : SelectionBuilder[RepoConfigUnlockAnonymousGitAccessAuditEntry, Option[
      URI
    ]] = Field("organizationUrl", OptionOf(Scalar()))

    /**
     * The repository associated with the action
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[RepoConfigUnlockAnonymousGitAccessAuditEntry, Option[
      A
    ]] = Field("repository", OptionOf(Obj(innerSelection)))

    /**
     * The name of the repository
     */
    def repositoryName
    : SelectionBuilder[RepoConfigUnlockAnonymousGitAccessAuditEntry, Option[
      String
    ]] = Field("repositoryName", OptionOf(Scalar()))

    /**
     * The HTTP path for the repository
     */
    def repositoryResourcePath
    : SelectionBuilder[RepoConfigUnlockAnonymousGitAccessAuditEntry, Option[
      URI
    ]] = Field("repositoryResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the repository
     */
    def repositoryUrl
    : SelectionBuilder[RepoConfigUnlockAnonymousGitAccessAuditEntry, Option[
      URI
    ]] = Field("repositoryUrl", OptionOf(Scalar()))

    /**
     * The user affected by the action
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[RepoConfigUnlockAnonymousGitAccessAuditEntry, Option[
      A
    ]] = Field("user", OptionOf(Obj(innerSelection)))

    /**
     * For actions involving two users, the actor is the initiator and the user is the affected user.
     */
    def userLogin
    : SelectionBuilder[RepoConfigUnlockAnonymousGitAccessAuditEntry, Option[
      String
    ]] = Field("userLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the user.
     */
    def userResourcePath
    : SelectionBuilder[RepoConfigUnlockAnonymousGitAccessAuditEntry, Option[
      URI
    ]] = Field("userResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the user.
     */
    def userUrl
    : SelectionBuilder[RepoConfigUnlockAnonymousGitAccessAuditEntry, Option[
      URI
    ]] = Field("userUrl", OptionOf(Scalar()))
  }

  type RepoCreateAuditEntry

  object RepoCreateAuditEntry {

    /**
     * The action name
     */
    def action: SelectionBuilder[RepoCreateAuditEntry, String] =
      Field("action", Scalar())

    /**
     * The user who initiated the action
     */
    def actor[A](
                  onBot: SelectionBuilder[Bot, A],
                  onOrganization: SelectionBuilder[Organization, A],
                  onUser: SelectionBuilder[User, A]
                ): SelectionBuilder[RepoCreateAuditEntry, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> Obj(onBot),
              "Organization" -> Obj(onOrganization),
              "User" -> Obj(onUser)
            )
          )
        )
      )

    /**
     * The IP address of the actor
     */
    def actorIp: SelectionBuilder[RepoCreateAuditEntry, Option[String]] =
      Field("actorIp", OptionOf(Scalar()))

    /**
     * A readable representation of the actor's location
     */
    def actorLocation[A](
                          innerSelection: SelectionBuilder[ActorLocation, A]
                        ): SelectionBuilder[RepoCreateAuditEntry, Option[A]] =
      Field("actorLocation", OptionOf(Obj(innerSelection)))

    /**
     * The username of the user who initiated the action
     */
    def actorLogin: SelectionBuilder[RepoCreateAuditEntry, Option[String]] =
      Field("actorLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the actor.
     */
    def actorResourcePath: SelectionBuilder[RepoCreateAuditEntry, Option[URI]] =
      Field("actorResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the actor.
     */
    def actorUrl: SelectionBuilder[RepoCreateAuditEntry, Option[URI]] =
      Field("actorUrl", OptionOf(Scalar()))

    /**
     * The time the action was initiated
     */
    def createdAt: SelectionBuilder[RepoCreateAuditEntry, PreciseDateTime] =
      Field("createdAt", Scalar())

    /**
     * The name of the parent repository for this forked repository.
     */
    def forkParentName: SelectionBuilder[RepoCreateAuditEntry, Option[String]] =
      Field("forkParentName", OptionOf(Scalar()))

    /**
     * The name of the root repository for this netork.
     */
    def forkSourceName: SelectionBuilder[RepoCreateAuditEntry, Option[String]] =
      Field("forkSourceName", OptionOf(Scalar()))

    def id: SelectionBuilder[RepoCreateAuditEntry, String] =
      Field("id", Scalar())

    /**
     * The corresponding operation type for the action
     */
    def operationType
    : SelectionBuilder[RepoCreateAuditEntry, Option[OperationType]] =
      Field("operationType", OptionOf(Scalar()))

    /**
     * The Organization associated with the Audit Entry.
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[RepoCreateAuditEntry, Option[A]] =
      Field("organization", OptionOf(Obj(innerSelection)))

    /**
     * The name of the Organization.
     */
    def organizationName
    : SelectionBuilder[RepoCreateAuditEntry, Option[String]] =
      Field("organizationName", OptionOf(Scalar()))

    /**
     * The HTTP path for the organization
     */
    def organizationResourcePath
    : SelectionBuilder[RepoCreateAuditEntry, Option[URI]] =
      Field("organizationResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the organization
     */
    def organizationUrl: SelectionBuilder[RepoCreateAuditEntry, Option[URI]] =
      Field("organizationUrl", OptionOf(Scalar()))

    /**
     * The repository associated with the action
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[RepoCreateAuditEntry, Option[A]] =
      Field("repository", OptionOf(Obj(innerSelection)))

    /**
     * The name of the repository
     */
    def repositoryName: SelectionBuilder[RepoCreateAuditEntry, Option[String]] =
      Field("repositoryName", OptionOf(Scalar()))

    /**
     * The HTTP path for the repository
     */
    def repositoryResourcePath
    : SelectionBuilder[RepoCreateAuditEntry, Option[URI]] =
      Field("repositoryResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the repository
     */
    def repositoryUrl: SelectionBuilder[RepoCreateAuditEntry, Option[URI]] =
      Field("repositoryUrl", OptionOf(Scalar()))

    /**
     * The user affected by the action
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[RepoCreateAuditEntry, Option[A]] =
      Field("user", OptionOf(Obj(innerSelection)))

    /**
     * For actions involving two users, the actor is the initiator and the user is the affected user.
     */
    def userLogin: SelectionBuilder[RepoCreateAuditEntry, Option[String]] =
      Field("userLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the user.
     */
    def userResourcePath: SelectionBuilder[RepoCreateAuditEntry, Option[URI]] =
      Field("userResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the user.
     */
    def userUrl: SelectionBuilder[RepoCreateAuditEntry, Option[URI]] =
      Field("userUrl", OptionOf(Scalar()))

    /**
     * The visibility of the repository
     */
    def visibility: SelectionBuilder[RepoCreateAuditEntry, Option[
      RepoCreateAuditEntryVisibility
    ]] = Field("visibility", OptionOf(Scalar()))
  }

  type RepoDestroyAuditEntry

  object RepoDestroyAuditEntry {

    /**
     * The action name
     */
    def action: SelectionBuilder[RepoDestroyAuditEntry, String] =
      Field("action", Scalar())

    /**
     * The user who initiated the action
     */
    def actor[A](
                  onBot: SelectionBuilder[Bot, A],
                  onOrganization: SelectionBuilder[Organization, A],
                  onUser: SelectionBuilder[User, A]
                ): SelectionBuilder[RepoDestroyAuditEntry, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> Obj(onBot),
              "Organization" -> Obj(onOrganization),
              "User" -> Obj(onUser)
            )
          )
        )
      )

    /**
     * The IP address of the actor
     */
    def actorIp: SelectionBuilder[RepoDestroyAuditEntry, Option[String]] =
      Field("actorIp", OptionOf(Scalar()))

    /**
     * A readable representation of the actor's location
     */
    def actorLocation[A](
                          innerSelection: SelectionBuilder[ActorLocation, A]
                        ): SelectionBuilder[RepoDestroyAuditEntry, Option[A]] =
      Field("actorLocation", OptionOf(Obj(innerSelection)))

    /**
     * The username of the user who initiated the action
     */
    def actorLogin: SelectionBuilder[RepoDestroyAuditEntry, Option[String]] =
      Field("actorLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the actor.
     */
    def actorResourcePath
    : SelectionBuilder[RepoDestroyAuditEntry, Option[URI]] =
      Field("actorResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the actor.
     */
    def actorUrl: SelectionBuilder[RepoDestroyAuditEntry, Option[URI]] =
      Field("actorUrl", OptionOf(Scalar()))

    /**
     * The time the action was initiated
     */
    def createdAt: SelectionBuilder[RepoDestroyAuditEntry, PreciseDateTime] =
      Field("createdAt", Scalar())

    def id: SelectionBuilder[RepoDestroyAuditEntry, String] =
      Field("id", Scalar())

    /**
     * The corresponding operation type for the action
     */
    def operationType
    : SelectionBuilder[RepoDestroyAuditEntry, Option[OperationType]] =
      Field("operationType", OptionOf(Scalar()))

    /**
     * The Organization associated with the Audit Entry.
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[RepoDestroyAuditEntry, Option[A]] =
      Field("organization", OptionOf(Obj(innerSelection)))

    /**
     * The name of the Organization.
     */
    def organizationName
    : SelectionBuilder[RepoDestroyAuditEntry, Option[String]] =
      Field("organizationName", OptionOf(Scalar()))

    /**
     * The HTTP path for the organization
     */
    def organizationResourcePath
    : SelectionBuilder[RepoDestroyAuditEntry, Option[URI]] =
      Field("organizationResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the organization
     */
    def organizationUrl: SelectionBuilder[RepoDestroyAuditEntry, Option[URI]] =
      Field("organizationUrl", OptionOf(Scalar()))

    /**
     * The repository associated with the action
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[RepoDestroyAuditEntry, Option[A]] =
      Field("repository", OptionOf(Obj(innerSelection)))

    /**
     * The name of the repository
     */
    def repositoryName
    : SelectionBuilder[RepoDestroyAuditEntry, Option[String]] =
      Field("repositoryName", OptionOf(Scalar()))

    /**
     * The HTTP path for the repository
     */
    def repositoryResourcePath
    : SelectionBuilder[RepoDestroyAuditEntry, Option[URI]] =
      Field("repositoryResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the repository
     */
    def repositoryUrl: SelectionBuilder[RepoDestroyAuditEntry, Option[URI]] =
      Field("repositoryUrl", OptionOf(Scalar()))

    /**
     * The user affected by the action
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[RepoDestroyAuditEntry, Option[A]] =
      Field("user", OptionOf(Obj(innerSelection)))

    /**
     * For actions involving two users, the actor is the initiator and the user is the affected user.
     */
    def userLogin: SelectionBuilder[RepoDestroyAuditEntry, Option[String]] =
      Field("userLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the user.
     */
    def userResourcePath: SelectionBuilder[RepoDestroyAuditEntry, Option[URI]] =
      Field("userResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the user.
     */
    def userUrl: SelectionBuilder[RepoDestroyAuditEntry, Option[URI]] =
      Field("userUrl", OptionOf(Scalar()))

    /**
     * The visibility of the repository
     */
    def visibility: SelectionBuilder[RepoDestroyAuditEntry, Option[
      RepoDestroyAuditEntryVisibility
    ]] = Field("visibility", OptionOf(Scalar()))
  }

  type RepoRemoveMemberAuditEntry

  object RepoRemoveMemberAuditEntry {

    /**
     * The action name
     */
    def action: SelectionBuilder[RepoRemoveMemberAuditEntry, String] =
      Field("action", Scalar())

    /**
     * The user who initiated the action
     */
    def actor[A](
                  onBot: SelectionBuilder[Bot, A],
                  onOrganization: SelectionBuilder[Organization, A],
                  onUser: SelectionBuilder[User, A]
                ): SelectionBuilder[RepoRemoveMemberAuditEntry, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> Obj(onBot),
              "Organization" -> Obj(onOrganization),
              "User" -> Obj(onUser)
            )
          )
        )
      )

    /**
     * The IP address of the actor
     */
    def actorIp: SelectionBuilder[RepoRemoveMemberAuditEntry, Option[String]] =
      Field("actorIp", OptionOf(Scalar()))

    /**
     * A readable representation of the actor's location
     */
    def actorLocation[A](
                          innerSelection: SelectionBuilder[ActorLocation, A]
                        ): SelectionBuilder[RepoRemoveMemberAuditEntry, Option[A]] =
      Field("actorLocation", OptionOf(Obj(innerSelection)))

    /**
     * The username of the user who initiated the action
     */
    def actorLogin
    : SelectionBuilder[RepoRemoveMemberAuditEntry, Option[String]] =
      Field("actorLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the actor.
     */
    def actorResourcePath
    : SelectionBuilder[RepoRemoveMemberAuditEntry, Option[URI]] =
      Field("actorResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the actor.
     */
    def actorUrl: SelectionBuilder[RepoRemoveMemberAuditEntry, Option[URI]] =
      Field("actorUrl", OptionOf(Scalar()))

    /**
     * The time the action was initiated
     */
    def createdAt
    : SelectionBuilder[RepoRemoveMemberAuditEntry, PreciseDateTime] =
      Field("createdAt", Scalar())

    def id: SelectionBuilder[RepoRemoveMemberAuditEntry, String] =
      Field("id", Scalar())

    /**
     * The corresponding operation type for the action
     */
    def operationType
    : SelectionBuilder[RepoRemoveMemberAuditEntry, Option[OperationType]] =
      Field("operationType", OptionOf(Scalar()))

    /**
     * The Organization associated with the Audit Entry.
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[RepoRemoveMemberAuditEntry, Option[A]] =
      Field("organization", OptionOf(Obj(innerSelection)))

    /**
     * The name of the Organization.
     */
    def organizationName
    : SelectionBuilder[RepoRemoveMemberAuditEntry, Option[String]] =
      Field("organizationName", OptionOf(Scalar()))

    /**
     * The HTTP path for the organization
     */
    def organizationResourcePath
    : SelectionBuilder[RepoRemoveMemberAuditEntry, Option[URI]] =
      Field("organizationResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the organization
     */
    def organizationUrl
    : SelectionBuilder[RepoRemoveMemberAuditEntry, Option[URI]] =
      Field("organizationUrl", OptionOf(Scalar()))

    /**
     * The repository associated with the action
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[RepoRemoveMemberAuditEntry, Option[A]] =
      Field("repository", OptionOf(Obj(innerSelection)))

    /**
     * The name of the repository
     */
    def repositoryName
    : SelectionBuilder[RepoRemoveMemberAuditEntry, Option[String]] =
      Field("repositoryName", OptionOf(Scalar()))

    /**
     * The HTTP path for the repository
     */
    def repositoryResourcePath
    : SelectionBuilder[RepoRemoveMemberAuditEntry, Option[URI]] =
      Field("repositoryResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the repository
     */
    def repositoryUrl
    : SelectionBuilder[RepoRemoveMemberAuditEntry, Option[URI]] =
      Field("repositoryUrl", OptionOf(Scalar()))

    /**
     * The user affected by the action
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[RepoRemoveMemberAuditEntry, Option[A]] =
      Field("user", OptionOf(Obj(innerSelection)))

    /**
     * For actions involving two users, the actor is the initiator and the user is the affected user.
     */
    def userLogin
    : SelectionBuilder[RepoRemoveMemberAuditEntry, Option[String]] =
      Field("userLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the user.
     */
    def userResourcePath
    : SelectionBuilder[RepoRemoveMemberAuditEntry, Option[URI]] =
      Field("userResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the user.
     */
    def userUrl: SelectionBuilder[RepoRemoveMemberAuditEntry, Option[URI]] =
      Field("userUrl", OptionOf(Scalar()))

    /**
     * The visibility of the repository
     */
    def visibility: SelectionBuilder[RepoRemoveMemberAuditEntry, Option[
      RepoRemoveMemberAuditEntryVisibility
    ]] = Field("visibility", OptionOf(Scalar()))
  }

  type RepoRemoveTopicAuditEntry

  object RepoRemoveTopicAuditEntry {

    /**
     * The action name
     */
    def action: SelectionBuilder[RepoRemoveTopicAuditEntry, String] =
      Field("action", Scalar())

    /**
     * The user who initiated the action
     */
    def actor[A](
                  onBot: SelectionBuilder[Bot, A],
                  onOrganization: SelectionBuilder[Organization, A],
                  onUser: SelectionBuilder[User, A]
                ): SelectionBuilder[RepoRemoveTopicAuditEntry, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> Obj(onBot),
              "Organization" -> Obj(onOrganization),
              "User" -> Obj(onUser)
            )
          )
        )
      )

    /**
     * The IP address of the actor
     */
    def actorIp: SelectionBuilder[RepoRemoveTopicAuditEntry, Option[String]] =
      Field("actorIp", OptionOf(Scalar()))

    /**
     * A readable representation of the actor's location
     */
    def actorLocation[A](
                          innerSelection: SelectionBuilder[ActorLocation, A]
                        ): SelectionBuilder[RepoRemoveTopicAuditEntry, Option[A]] =
      Field("actorLocation", OptionOf(Obj(innerSelection)))

    /**
     * The username of the user who initiated the action
     */
    def actorLogin
    : SelectionBuilder[RepoRemoveTopicAuditEntry, Option[String]] =
      Field("actorLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the actor.
     */
    def actorResourcePath
    : SelectionBuilder[RepoRemoveTopicAuditEntry, Option[URI]] =
      Field("actorResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the actor.
     */
    def actorUrl: SelectionBuilder[RepoRemoveTopicAuditEntry, Option[URI]] =
      Field("actorUrl", OptionOf(Scalar()))

    /**
     * The time the action was initiated
     */
    def createdAt
    : SelectionBuilder[RepoRemoveTopicAuditEntry, PreciseDateTime] =
      Field("createdAt", Scalar())

    def id: SelectionBuilder[RepoRemoveTopicAuditEntry, String] =
      Field("id", Scalar())

    /**
     * The corresponding operation type for the action
     */
    def operationType
    : SelectionBuilder[RepoRemoveTopicAuditEntry, Option[OperationType]] =
      Field("operationType", OptionOf(Scalar()))

    /**
     * The Organization associated with the Audit Entry.
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[RepoRemoveTopicAuditEntry, Option[A]] =
      Field("organization", OptionOf(Obj(innerSelection)))

    /**
     * The name of the Organization.
     */
    def organizationName
    : SelectionBuilder[RepoRemoveTopicAuditEntry, Option[String]] =
      Field("organizationName", OptionOf(Scalar()))

    /**
     * The HTTP path for the organization
     */
    def organizationResourcePath
    : SelectionBuilder[RepoRemoveTopicAuditEntry, Option[URI]] =
      Field("organizationResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the organization
     */
    def organizationUrl
    : SelectionBuilder[RepoRemoveTopicAuditEntry, Option[URI]] =
      Field("organizationUrl", OptionOf(Scalar()))

    /**
     * The repository associated with the action
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[RepoRemoveTopicAuditEntry, Option[A]] =
      Field("repository", OptionOf(Obj(innerSelection)))

    /**
     * The name of the repository
     */
    def repositoryName
    : SelectionBuilder[RepoRemoveTopicAuditEntry, Option[String]] =
      Field("repositoryName", OptionOf(Scalar()))

    /**
     * The HTTP path for the repository
     */
    def repositoryResourcePath
    : SelectionBuilder[RepoRemoveTopicAuditEntry, Option[URI]] =
      Field("repositoryResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the repository
     */
    def repositoryUrl
    : SelectionBuilder[RepoRemoveTopicAuditEntry, Option[URI]] =
      Field("repositoryUrl", OptionOf(Scalar()))

    /**
     * The name of the topic added to the repository
     */
    def topic[A](
                  innerSelection: SelectionBuilder[Topic, A]
                ): SelectionBuilder[RepoRemoveTopicAuditEntry, Option[A]] =
      Field("topic", OptionOf(Obj(innerSelection)))

    /**
     * The name of the topic added to the repository
     */
    def topicName: SelectionBuilder[RepoRemoveTopicAuditEntry, Option[String]] =
      Field("topicName", OptionOf(Scalar()))

    /**
     * The user affected by the action
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[RepoRemoveTopicAuditEntry, Option[A]] =
      Field("user", OptionOf(Obj(innerSelection)))

    /**
     * For actions involving two users, the actor is the initiator and the user is the affected user.
     */
    def userLogin: SelectionBuilder[RepoRemoveTopicAuditEntry, Option[String]] =
      Field("userLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the user.
     */
    def userResourcePath
    : SelectionBuilder[RepoRemoveTopicAuditEntry, Option[URI]] =
      Field("userResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the user.
     */
    def userUrl: SelectionBuilder[RepoRemoveTopicAuditEntry, Option[URI]] =
      Field("userUrl", OptionOf(Scalar()))
  }

  type Repository

  object Repository {

    /**
     * A list of users that can be assigned to issues in this repository.
     */
    def assignableUsers[A](
                            after: Option[String] = None,
                            before: Option[String] = None,
                            first: Option[Int] = None,
                            last: Option[Int] = None,
                            query: Option[String] = None
                          )(
                            innerSelection: SelectionBuilder[UserConnection, A]
                          ): SelectionBuilder[Repository, A] =
      Field(
        "assignableUsers",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("query", query)
        )
      )

    /**
     * A list of branch protection rules for this repository.
     */
    def branchProtectionRules[A](
                                  after: Option[String] = None,
                                  before: Option[String] = None,
                                  first: Option[Int] = None,
                                  last: Option[Int] = None
                                )(
                                  innerSelection: SelectionBuilder[BranchProtectionRuleConnection, A]
                                ): SelectionBuilder[Repository, A] =
      Field(
        "branchProtectionRules",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )

    /**
     * Returns the code of conduct for this repository
     */
    def codeOfConduct[A](
                          innerSelection: SelectionBuilder[CodeOfConduct, A]
                        ): SelectionBuilder[Repository, Option[A]] =
      Field("codeOfConduct", OptionOf(Obj(innerSelection)))

    /**
     * A list of collaborators associated with the repository.
     */
    def collaborators[A](
                          affiliation: Option[CollaboratorAffiliation] = None,
                          after: Option[String] = None,
                          before: Option[String] = None,
                          first: Option[Int] = None,
                          last: Option[Int] = None,
                          query: Option[String] = None
                        )(
                          innerSelection: SelectionBuilder[RepositoryCollaboratorConnection, A]
                        ): SelectionBuilder[Repository, Option[A]] =
      Field(
        "collaborators",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("affiliation", affiliation),
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("query", query)
        )
      )

    /**
     * A list of commit comments associated with the repository.
     */
    def commitComments[A](
                           after: Option[String] = None,
                           before: Option[String] = None,
                           first: Option[Int] = None,
                           last: Option[Int] = None
                         )(
                           innerSelection: SelectionBuilder[CommitCommentConnection, A]
                         ): SelectionBuilder[Repository, A] =
      Field(
        "commitComments",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )

    /**
     * Returns a list of contact links associated to the repository
     */
    def contactLinks[A](
                         innerSelection: SelectionBuilder[RepositoryContactLink, A]
                       ): SelectionBuilder[Repository, Option[List[A]]] =
      Field("contactLinks", OptionOf(ListOf(Obj(innerSelection))))

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[Repository, DateTime] =
      Field("createdAt", Scalar())

    /**
     * Identifies the primary key from the database.
     */
    def databaseId: SelectionBuilder[Repository, Option[Int]] =
      Field("databaseId", OptionOf(Scalar()))

    /**
     * The Ref associated with the repository's default branch.
     */
    def defaultBranchRef[A](
                             innerSelection: SelectionBuilder[Ref, A]
                           ): SelectionBuilder[Repository, Option[A]] =
      Field("defaultBranchRef", OptionOf(Obj(innerSelection)))

    /**
     * Whether or not branches are automatically deleted when merged in this repository.
     */
    def deleteBranchOnMerge: SelectionBuilder[Repository, Boolean] =
      Field("deleteBranchOnMerge", Scalar())

    /**
     * A list of dependency manifests contained in the repository
     */
    def dependencyGraphManifests[A](
                                     after: Option[String] = None,
                                     before: Option[String] = None,
                                     dependenciesAfter: Option[String] = None,
                                     dependenciesFirst: Option[Int] = None,
                                     first: Option[Int] = None,
                                     last: Option[Int] = None,
                                     withDependencies: Option[Boolean] = None
                                   )(
                                     innerSelection: SelectionBuilder[DependencyGraphManifestConnection, A]
                                   ): SelectionBuilder[Repository, Option[A]] =
      Field(
        "dependencyGraphManifests",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("dependenciesAfter", dependenciesAfter),
          Argument("dependenciesFirst", dependenciesFirst),
          Argument("first", first),
          Argument("last", last),
          Argument("withDependencies", withDependencies)
        )
      )

    /**
     * A list of deploy keys that are on this repository.
     */
    def deployKeys[A](
                       after: Option[String] = None,
                       before: Option[String] = None,
                       first: Option[Int] = None,
                       last: Option[Int] = None
                     )(
                       innerSelection: SelectionBuilder[DeployKeyConnection, A]
                     ): SelectionBuilder[Repository, A] =
      Field(
        "deployKeys",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )

    /**
     * Deployments associated with the repository
     */
    def deployments[A](
                        after: Option[String] = None,
                        before: Option[String] = None,
                        environments: Option[List[String]] = None,
                        first: Option[Int] = None,
                        last: Option[Int] = None,
                        orderBy: Option[DeploymentOrder] = None
                      )(
                        innerSelection: SelectionBuilder[DeploymentConnection, A]
                      ): SelectionBuilder[Repository, A] =
      Field(
        "deployments",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("environments", environments),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy)
        )
      )

    /**
     * The description of the repository.
     */
    def description: SelectionBuilder[Repository, Option[String]] =
      Field("description", OptionOf(Scalar()))

    /**
     * The description of the repository rendered to HTML.
     */
    def descriptionHTML: SelectionBuilder[Repository, HTML] =
      Field("descriptionHTML", Scalar())

    /**
     * The number of kilobytes this repository occupies on disk.
     */
    def diskUsage: SelectionBuilder[Repository, Option[Int]] =
      Field("diskUsage", OptionOf(Scalar()))

    /**
     * Returns how many forks there are of this repository in the whole network.
     */
    def forkCount: SelectionBuilder[Repository, Int] =
      Field("forkCount", Scalar())

    /**
     * A list of direct forked repositories.
     */
    def forks[A](
                  affiliations: Option[List[Option[RepositoryAffiliation]]] = None,
                  after: Option[String] = None,
                  before: Option[String] = None,
                  first: Option[Int] = None,
                  isLocked: Option[Boolean] = None,
                  last: Option[Int] = None,
                  orderBy: Option[RepositoryOrder] = None,
                  ownerAffiliations: Option[List[Option[RepositoryAffiliation]]] = None,
                  privacy: Option[RepositoryPrivacy] = None
                )(
                  innerSelection: SelectionBuilder[RepositoryConnection, A]
                ): SelectionBuilder[Repository, A] =
      Field(
        "forks",
        Obj(innerSelection),
        arguments = List(
          Argument("affiliations", affiliations),
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("isLocked", isLocked),
          Argument("last", last),
          Argument("orderBy", orderBy),
          Argument("ownerAffiliations", ownerAffiliations),
          Argument("privacy", privacy)
        )
      )

    /**
     * The funding links for this repository
     */
    def fundingLinks[A](
                         innerSelection: SelectionBuilder[FundingLink, A]
                       ): SelectionBuilder[Repository, List[A]] =
      Field("fundingLinks", ListOf(Obj(innerSelection)))

    /**
     * Indicates if the repository has issues feature enabled.
     */
    def hasIssuesEnabled: SelectionBuilder[Repository, Boolean] =
      Field("hasIssuesEnabled", Scalar())

    /**
     * Indicates if the repository has the Projects feature enabled.
     */
    def hasProjectsEnabled: SelectionBuilder[Repository, Boolean] =
      Field("hasProjectsEnabled", Scalar())

    /**
     * Indicates if the repository has wiki feature enabled.
     */
    def hasWikiEnabled: SelectionBuilder[Repository, Boolean] =
      Field("hasWikiEnabled", Scalar())

    /**
     * The repository's URL.
     */
    def homepageUrl: SelectionBuilder[Repository, Option[URI]] =
      Field("homepageUrl", OptionOf(Scalar()))

    def id: SelectionBuilder[Repository, String] = Field("id", Scalar())

    /**
     * Indicates if the repository is unmaintained.
     */
    def isArchived: SelectionBuilder[Repository, Boolean] =
      Field("isArchived", Scalar())

    /**
     * Returns true if blank issue creation is allowed
     */
    def isBlankIssuesEnabled: SelectionBuilder[Repository, Boolean] =
      Field("isBlankIssuesEnabled", Scalar())

    /**
     * Returns whether or not this repository disabled.
     */
    def isDisabled: SelectionBuilder[Repository, Boolean] =
      Field("isDisabled", Scalar())

    /**
     * Returns whether or not this repository is empty.
     */
    def isEmpty: SelectionBuilder[Repository, Boolean] =
      Field("isEmpty", Scalar())

    /**
     * Identifies if the repository is a fork.
     */
    def isFork: SelectionBuilder[Repository, Boolean] =
      Field("isFork", Scalar())

    /**
     * Indicates if the repository has been locked or not.
     */
    def isLocked: SelectionBuilder[Repository, Boolean] =
      Field("isLocked", Scalar())

    /**
     * Identifies if the repository is a mirror.
     */
    def isMirror: SelectionBuilder[Repository, Boolean] =
      Field("isMirror", Scalar())

    /**
     * Identifies if the repository is private.
     */
    def isPrivate: SelectionBuilder[Repository, Boolean] =
      Field("isPrivate", Scalar())

    /**
     * Returns true if this repository has a security policy
     */
    def isSecurityPolicyEnabled: SelectionBuilder[Repository, Option[Boolean]] =
      Field("isSecurityPolicyEnabled", OptionOf(Scalar()))

    /**
     * Identifies if the repository is a template that can be used to generate new repositories.
     */
    def isTemplate: SelectionBuilder[Repository, Boolean] =
      Field("isTemplate", Scalar())

    /**
     * Returns a single issue from the current repository by number.
     */
    def issue[A](number: Int)(
      innerSelection: SelectionBuilder[Issue, A]
    ): SelectionBuilder[Repository, Option[A]] =
      Field(
        "issue",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("number", number))
      )

    /**
     * Returns a single issue-like object from the current repository by number.
     */
    def issueOrPullRequest[A](number: Int)(
      onIssue: SelectionBuilder[Issue, A],
      onPullRequest: SelectionBuilder[PullRequest, A]
    ): SelectionBuilder[Repository, Option[A]] =
      Field(
        "issueOrPullRequest",
        OptionOf(
          ChoiceOf(
            Map("Issue" -> Obj(onIssue), "PullRequest" -> Obj(onPullRequest))
          )
        ),
        arguments = List(Argument("number", number))
      )

    /**
     * Returns a list of issue templates associated to the repository
     */
    def issueTemplates[A](
                           innerSelection: SelectionBuilder[IssueTemplate, A]
                         ): SelectionBuilder[Repository, Option[List[A]]] =
      Field("issueTemplates", OptionOf(ListOf(Obj(innerSelection))))

    /**
     * A list of issues that have been opened in the repository.
     */
    def issues[A](
                   after: Option[String] = None,
                   before: Option[String] = None,
                   filterBy: Option[IssueFilters] = None,
                   first: Option[Int] = None,
                   labels: Option[List[String]] = None,
                   last: Option[Int] = None,
                   orderBy: Option[IssueOrder] = None,
                   states: Option[List[IssueState]] = None
                 )(
                   innerSelection: SelectionBuilder[IssueConnection, A]
                 ): SelectionBuilder[Repository, A] =
      Field(
        "issues",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("filterBy", filterBy),
          Argument("first", first),
          Argument("labels", labels),
          Argument("last", last),
          Argument("orderBy", orderBy),
          Argument("states", states)
        )
      )

    /**
     * Returns a single label by name
     */
    def label[A](name: String)(
      innerSelection: SelectionBuilder[Label, A]
    ): SelectionBuilder[Repository, Option[A]] =
      Field(
        "label",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("name", name))
      )

    /**
     * A list of labels associated with the repository.
     */
    def labels[A](
                   after: Option[String] = None,
                   before: Option[String] = None,
                   first: Option[Int] = None,
                   last: Option[Int] = None,
                   orderBy: Option[LabelOrder] = None,
                   query: Option[String] = None
                 )(
                   innerSelection: SelectionBuilder[LabelConnection, A]
                 ): SelectionBuilder[Repository, Option[A]] =
      Field(
        "labels",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy),
          Argument("query", query)
        )
      )

    /**
     * A list containing a breakdown of the language composition of the repository.
     */
    def languages[A](
                      after: Option[String] = None,
                      before: Option[String] = None,
                      first: Option[Int] = None,
                      last: Option[Int] = None,
                      orderBy: Option[LanguageOrder] = None
                    )(
                      innerSelection: SelectionBuilder[LanguageConnection, A]
                    ): SelectionBuilder[Repository, Option[A]] =
      Field(
        "languages",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy)
        )
      )

    /**
     * The license associated with the repository
     */
    def licenseInfo[A](
                        innerSelection: SelectionBuilder[License, A]
                      ): SelectionBuilder[Repository, Option[A]] =
      Field("licenseInfo", OptionOf(Obj(innerSelection)))

    /**
     * The reason the repository has been locked.
     */
    def lockReason: SelectionBuilder[Repository, Option[RepositoryLockReason]] =
      Field("lockReason", OptionOf(Scalar()))

    /**
     * A list of Users that can be mentioned in the context of the repository.
     */
    def mentionableUsers[A](
                             after: Option[String] = None,
                             before: Option[String] = None,
                             first: Option[Int] = None,
                             last: Option[Int] = None,
                             query: Option[String] = None
                           )(
                             innerSelection: SelectionBuilder[UserConnection, A]
                           ): SelectionBuilder[Repository, A] =
      Field(
        "mentionableUsers",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("query", query)
        )
      )

    /**
     * Whether or not PRs are merged with a merge commit on this repository.
     */
    def mergeCommitAllowed: SelectionBuilder[Repository, Boolean] =
      Field("mergeCommitAllowed", Scalar())

    /**
     * Returns a single milestone from the current repository by number.
     */
    def milestone[A](number: Int)(
      innerSelection: SelectionBuilder[Milestone, A]
    ): SelectionBuilder[Repository, Option[A]] =
      Field(
        "milestone",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("number", number))
      )

    /**
     * A list of milestones associated with the repository.
     */
    def milestones[A](
                       after: Option[String] = None,
                       before: Option[String] = None,
                       first: Option[Int] = None,
                       last: Option[Int] = None,
                       orderBy: Option[MilestoneOrder] = None,
                       query: Option[String] = None,
                       states: Option[List[MilestoneState]] = None
                     )(
                       innerSelection: SelectionBuilder[MilestoneConnection, A]
                     ): SelectionBuilder[Repository, Option[A]] =
      Field(
        "milestones",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy),
          Argument("query", query),
          Argument("states", states)
        )
      )

    /**
     * The repository's original mirror URL.
     */
    def mirrorUrl: SelectionBuilder[Repository, Option[URI]] =
      Field("mirrorUrl", OptionOf(Scalar()))

    /**
     * The name of the repository.
     */
    def name: SelectionBuilder[Repository, String] = Field("name", Scalar())

    /**
     * The repository's name with owner.
     */
    def nameWithOwner: SelectionBuilder[Repository, String] =
      Field("nameWithOwner", Scalar())

    /**
     * A Git object in the repository
     */
    def `object`[A](
                     expression: Option[String] = None,
                     oid: Option[GitObjectID] = None
                   )(
                     onCommit: Option[SelectionBuilder[Commit, A]] = None,
                     onTree: Option[SelectionBuilder[Tree, A]] = None,
                     onBlob: Option[SelectionBuilder[Blob, A]] = None,
                     onTag: Option[SelectionBuilder[Tag, A]] = None
                   ): SelectionBuilder[Repository, Option[A]] =
      Field(
        "object",
        OptionOf(
          ChoiceOf(
            Map(
              "Commit" -> onCommit,
              "Tree" -> onTree,
              "Blob" -> onBlob,
              "Tag" -> onTag
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        ),
        arguments =
          List(Argument("expression", expression), Argument("oid", oid))
      )

    /**
     * The image used to represent this repository in Open Graph data.
     */
    def openGraphImageUrl: SelectionBuilder[Repository, URI] =
      Field("openGraphImageUrl", Scalar())

    /**
     * The User owner of the repository.
     */
    def owner[A](
                  onUser: Option[SelectionBuilder[User, A]] = None,
                  onOrganization: Option[SelectionBuilder[Organization, A]] = None
                ): SelectionBuilder[Repository, A] =
      Field(
        "owner",
        ChoiceOf(
          Map("User" -> onUser, "Organization" -> onOrganization).collect {
            case (k, Some(v)) => k -> Obj(v)
          }
        )
      )

    /**
     * A list of packages under the owner.
     */
    def packages[A](
                     after: Option[String] = None,
                     before: Option[String] = None,
                     first: Option[Int] = None,
                     last: Option[Int] = None,
                     names: Option[List[Option[String]]] = None,
                     orderBy: Option[PackageOrder] = None,
                     packageType: Option[PackageType] = None,
                     repositoryId: Option[String] = None
                   )(
                     innerSelection: SelectionBuilder[PackageConnection, A]
                   ): SelectionBuilder[Repository, A] =
      Field(
        "packages",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("names", names),
          Argument("orderBy", orderBy),
          Argument("packageType", packageType),
          Argument("repositoryId", repositoryId)
        )
      )

    /**
     * The repository parent, if this is a fork.
     */
    def parent[A](
                   innerSelection: SelectionBuilder[Repository, A]
                 ): SelectionBuilder[Repository, Option[A]] =
      Field("parent", OptionOf(Obj(innerSelection)))

    /**
     * A list of pinned issues for this repository.
     */
    def pinnedIssues[A](
                         after: Option[String] = None,
                         before: Option[String] = None,
                         first: Option[Int] = None,
                         last: Option[Int] = None
                       )(
                         innerSelection: SelectionBuilder[PinnedIssueConnection, A]
                       ): SelectionBuilder[Repository, Option[A]] =
      Field(
        "pinnedIssues",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )

    /**
     * The primary language of the repository's code.
     */
    def primaryLanguage[A](
                            innerSelection: SelectionBuilder[Language, A]
                          ): SelectionBuilder[Repository, Option[A]] =
      Field("primaryLanguage", OptionOf(Obj(innerSelection)))

    /**
     * Find project by number.
     */
    def project[A](number: Int)(
      innerSelection: SelectionBuilder[Project, A]
    ): SelectionBuilder[Repository, Option[A]] =
      Field(
        "project",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("number", number))
      )

    /**
     * A list of projects under the owner.
     */
    def projects[A](
                     after: Option[String] = None,
                     before: Option[String] = None,
                     first: Option[Int] = None,
                     last: Option[Int] = None,
                     orderBy: Option[ProjectOrder] = None,
                     search: Option[String] = None,
                     states: Option[List[ProjectState]] = None
                   )(
                     innerSelection: SelectionBuilder[ProjectConnection, A]
                   ): SelectionBuilder[Repository, A] =
      Field(
        "projects",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy),
          Argument("search", search),
          Argument("states", states)
        )
      )

    /**
     * The HTTP path listing the repository's projects
     */
    def projectsResourcePath: SelectionBuilder[Repository, URI] =
      Field("projectsResourcePath", Scalar())

    /**
     * The HTTP URL listing the repository's projects
     */
    def projectsUrl: SelectionBuilder[Repository, URI] =
      Field("projectsUrl", Scalar())

    /**
     * Returns a single pull request from the current repository by number.
     */
    def pullRequest[A](number: Int)(
      innerSelection: SelectionBuilder[PullRequest, A]
    ): SelectionBuilder[Repository, Option[A]] =
      Field(
        "pullRequest",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("number", number))
      )

    /**
     * A list of pull requests that have been opened in the repository.
     */
    def pullRequests[A](
                         after: Option[String] = None,
                         baseRefName: Option[String] = None,
                         before: Option[String] = None,
                         first: Option[Int] = None,
                         headRefName: Option[String] = None,
                         labels: Option[List[String]] = None,
                         last: Option[Int] = None,
                         orderBy: Option[IssueOrder] = None,
                         states: Option[List[PullRequestState]] = None
                       )(
                         innerSelection: SelectionBuilder[PullRequestConnection, A]
                       ): SelectionBuilder[Repository, A] =
      Field(
        "pullRequests",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("baseRefName", baseRefName),
          Argument("before", before),
          Argument("first", first),
          Argument("headRefName", headRefName),
          Argument("labels", labels),
          Argument("last", last),
          Argument("orderBy", orderBy),
          Argument("states", states)
        )
      )

    /**
     * Identifies when the repository was last pushed to.
     */
    def pushedAt: SelectionBuilder[Repository, Option[DateTime]] =
      Field("pushedAt", OptionOf(Scalar()))

    /**
     * Whether or not rebase-merging is enabled on this repository.
     */
    def rebaseMergeAllowed: SelectionBuilder[Repository, Boolean] =
      Field("rebaseMergeAllowed", Scalar())

    /**
     * Fetch a given ref from the repository
     */
    def ref[A](qualifiedName: String)(
      innerSelection: SelectionBuilder[Ref, A]
    ): SelectionBuilder[Repository, Option[A]] =
      Field(
        "ref",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("qualifiedName", qualifiedName))
      )

    /**
     * Fetch a list of refs from the repository
     */
    def refs[A](
                 after: Option[String] = None,
                 before: Option[String] = None,
                 direction: Option[OrderDirection] = None,
                 first: Option[Int] = None,
                 last: Option[Int] = None,
                 orderBy: Option[RefOrder] = None,
                 query: Option[String] = None,
                 refPrefix: String
               )(
                 innerSelection: SelectionBuilder[RefConnection, A]
               ): SelectionBuilder[Repository, Option[A]] =
      Field(
        "refs",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("direction", direction),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy),
          Argument("query", query),
          Argument("refPrefix", refPrefix)
        )
      )

    /**
     * Lookup a single release given various criteria.
     */
    def release[A](tagName: String)(
      innerSelection: SelectionBuilder[Release, A]
    ): SelectionBuilder[Repository, Option[A]] =
      Field(
        "release",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("tagName", tagName))
      )

    /**
     * List of releases which are dependent on this repository.
     */
    def releases[A](
                     after: Option[String] = None,
                     before: Option[String] = None,
                     first: Option[Int] = None,
                     last: Option[Int] = None,
                     orderBy: Option[ReleaseOrder] = None
                   )(
                     innerSelection: SelectionBuilder[ReleaseConnection, A]
                   ): SelectionBuilder[Repository, A] =
      Field(
        "releases",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy)
        )
      )

    /**
     * A list of applied repository-topic associations for this repository.
     */
    def repositoryTopics[A](
                             after: Option[String] = None,
                             before: Option[String] = None,
                             first: Option[Int] = None,
                             last: Option[Int] = None
                           )(
                             innerSelection: SelectionBuilder[RepositoryTopicConnection, A]
                           ): SelectionBuilder[Repository, A] =
      Field(
        "repositoryTopics",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )

    /**
     * The HTTP path for this repository
     */
    def resourcePath: SelectionBuilder[Repository, URI] =
      Field("resourcePath", Scalar())

    /**
     * The security policy URL.
     */
    def securityPolicyUrl: SelectionBuilder[Repository, Option[URI]] =
      Field("securityPolicyUrl", OptionOf(Scalar()))

    /**
     * A description of the repository, rendered to HTML without any links in it.
     */
    def shortDescriptionHTML(
                              limit: Option[Int] = None
                            ): SelectionBuilder[Repository, HTML] =
      Field(
        "shortDescriptionHTML",
        Scalar(),
        arguments = List(Argument("limit", limit))
      )

    /**
     * Whether or not squash-merging is enabled on this repository.
     */
    def squashMergeAllowed: SelectionBuilder[Repository, Boolean] =
      Field("squashMergeAllowed", Scalar())

    /**
     * The SSH URL to clone this repository
     */
    def sshUrl: SelectionBuilder[Repository, GitSSHRemote] =
      Field("sshUrl", Scalar())

    /**
     * A list of users who have starred this starrable.
     */
    def stargazers[A](
                       after: Option[String] = None,
                       before: Option[String] = None,
                       first: Option[Int] = None,
                       last: Option[Int] = None,
                       orderBy: Option[StarOrder] = None
                     )(
                       innerSelection: SelectionBuilder[StargazerConnection, A]
                     ): SelectionBuilder[Repository, A] =
      Field(
        "stargazers",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy)
        )
      )

    /**
     * Returns a list of all submodules in this repository parsed from the
     * .gitmodules file as of the default branch's HEAD commit.
     */
    def submodules[A](
                       after: Option[String] = None,
                       before: Option[String] = None,
                       first: Option[Int] = None,
                       last: Option[Int] = None
                     )(
                       innerSelection: SelectionBuilder[SubmoduleConnection, A]
                     ): SelectionBuilder[Repository, A] =
      Field(
        "submodules",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )

    /**
     * Temporary authentication token for cloning this repository.
     */
    def tempCloneToken: SelectionBuilder[Repository, Option[String]] =
      Field("tempCloneToken", OptionOf(Scalar()))

    /**
     * The repository from which this repository was generated, if any.
     */
    def templateRepository[A](
                               innerSelection: SelectionBuilder[Repository, A]
                             ): SelectionBuilder[Repository, Option[A]] =
      Field("templateRepository", OptionOf(Obj(innerSelection)))

    /**
     * Identifies the date and time when the object was last updated.
     */
    def updatedAt: SelectionBuilder[Repository, DateTime] =
      Field("updatedAt", Scalar())

    /**
     * The HTTP URL for this repository
     */
    def url: SelectionBuilder[Repository, URI] = Field("url", Scalar())

    /**
     * Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar.
     */
    def usesCustomOpenGraphImage: SelectionBuilder[Repository, Boolean] =
      Field("usesCustomOpenGraphImage", Scalar())

    /**
     * Indicates whether the viewer has admin permissions on this repository.
     */
    def viewerCanAdminister: SelectionBuilder[Repository, Boolean] =
      Field("viewerCanAdminister", Scalar())

    /**
     * Can the current viewer create new projects on this owner.
     */
    def viewerCanCreateProjects: SelectionBuilder[Repository, Boolean] =
      Field("viewerCanCreateProjects", Scalar())

    /**
     * Check if the viewer is able to change their subscription status for the repository.
     */
    def viewerCanSubscribe: SelectionBuilder[Repository, Boolean] =
      Field("viewerCanSubscribe", Scalar())

    /**
     * Indicates whether the viewer can update the topics of this repository.
     */
    def viewerCanUpdateTopics: SelectionBuilder[Repository, Boolean] =
      Field("viewerCanUpdateTopics", Scalar())

    /**
     * The last commit email for the viewer.
     */
    def viewerDefaultCommitEmail: SelectionBuilder[Repository, Option[String]] =
      Field("viewerDefaultCommitEmail", OptionOf(Scalar()))

    /**
     * The last used merge method by the viewer or the default for the repository.
     */
    def viewerDefaultMergeMethod
    : SelectionBuilder[Repository, PullRequestMergeMethod] =
      Field("viewerDefaultMergeMethod", Scalar())

    /**
     * Returns a boolean indicating whether the viewing user has starred this starrable.
     */
    def viewerHasStarred: SelectionBuilder[Repository, Boolean] =
      Field("viewerHasStarred", Scalar())

    /**
     * The users permission level on the repository. Will return null if authenticated as an GitHub App.
     */
    def viewerPermission
    : SelectionBuilder[Repository, Option[RepositoryPermission]] =
      Field("viewerPermission", OptionOf(Scalar()))

    /**
     * A list of emails this viewer can commit with.
     */
    def viewerPossibleCommitEmails
    : SelectionBuilder[Repository, Option[List[String]]] =
      Field("viewerPossibleCommitEmails", OptionOf(ListOf(Scalar())))

    /**
     * Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
     */
    def viewerSubscription
    : SelectionBuilder[Repository, Option[SubscriptionState]] =
      Field("viewerSubscription", OptionOf(Scalar()))

    /**
     * A list of vulnerability alerts that are on this repository.
     */
    def vulnerabilityAlerts[A](
                                after: Option[String] = None,
                                before: Option[String] = None,
                                first: Option[Int] = None,
                                last: Option[Int] = None
                              )(
                                innerSelection: SelectionBuilder[
                                  RepositoryVulnerabilityAlertConnection,
                                  A
                                ]
                              ): SelectionBuilder[Repository, Option[A]] =
      Field(
        "vulnerabilityAlerts",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )

    /**
     * A list of users watching the repository.
     */
    def watchers[A](
                     after: Option[String] = None,
                     before: Option[String] = None,
                     first: Option[Int] = None,
                     last: Option[Int] = None
                   )(
                     innerSelection: SelectionBuilder[UserConnection, A]
                   ): SelectionBuilder[Repository, A] =
      Field(
        "watchers",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )
  }

  type RepositoryCollaboratorConnection

  object RepositoryCollaboratorConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[RepositoryCollaboratorEdge, A]
                ): SelectionBuilder[RepositoryCollaboratorConnection, Option[
      List[Option[A]]
    ]] = Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[User, A]
                ): SelectionBuilder[RepositoryCollaboratorConnection, Option[
      List[Option[A]]
    ]] = Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[RepositoryCollaboratorConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[RepositoryCollaboratorConnection, Int] =
      Field("totalCount", Scalar())
  }

  type RepositoryCollaboratorEdge

  object RepositoryCollaboratorEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[RepositoryCollaboratorEdge, String] =
      Field("cursor", Scalar())

    def node[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[RepositoryCollaboratorEdge, A] =
      Field("node", Obj(innerSelection))

    /**
     * The permission the user has on the repository.
     *
     * *Upcoming Change on 2020-10-01 UTC**
     * *Description:** Type for `permission` will change from `RepositoryPermission!` to `String`.
     * *Reason:** This field may return additional values
     */
    def permission
    : SelectionBuilder[RepositoryCollaboratorEdge, RepositoryPermission] =
      Field("permission", Scalar())

    /**
     * A list of sources for the user's access to the repository.
     */
    def permissionSources[A](
                              innerSelection: SelectionBuilder[PermissionSource, A]
                            ): SelectionBuilder[RepositoryCollaboratorEdge, Option[List[A]]] =
      Field("permissionSources", OptionOf(ListOf(Obj(innerSelection))))
  }

  type RepositoryConnection

  object RepositoryConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[RepositoryEdge, A]
                ): SelectionBuilder[RepositoryConnection, Option[List[Option[A]]]] =
      Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[Repository, A]
                ): SelectionBuilder[RepositoryConnection, Option[List[Option[A]]]] =
      Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[RepositoryConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[RepositoryConnection, Int] =
      Field("totalCount", Scalar())

    /**
     * The total size in kilobytes of all repositories in the connection.
     */
    def totalDiskUsage: SelectionBuilder[RepositoryConnection, Int] =
      Field("totalDiskUsage", Scalar())
  }

  type RepositoryContactLink

  object RepositoryContactLink {

    /**
     * The contact link purpose.
     */
    def about: SelectionBuilder[RepositoryContactLink, String] =
      Field("about", Scalar())

    /**
     * The contact link name.
     */
    def name: SelectionBuilder[RepositoryContactLink, String] =
      Field("name", Scalar())

    /**
     * The contact link URL.
     */
    def url: SelectionBuilder[RepositoryContactLink, URI] =
      Field("url", Scalar())
  }

  type RepositoryEdge

  object RepositoryEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[RepositoryEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[Repository, A]
               ): SelectionBuilder[RepositoryEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type RepositoryInvitation

  object RepositoryInvitation {

    /**
     * The email address that received the invitation.
     */
    def email: SelectionBuilder[RepositoryInvitation, Option[String]] =
      Field("email", OptionOf(Scalar()))

    def id: SelectionBuilder[RepositoryInvitation, String] =
      Field("id", Scalar())

    /**
     * The user who received the invitation.
     */
    def invitee[A](
                    innerSelection: SelectionBuilder[User, A]
                  ): SelectionBuilder[RepositoryInvitation, Option[A]] =
      Field("invitee", OptionOf(Obj(innerSelection)))

    /**
     * The user who created the invitation.
     */
    def inviter[A](
                    innerSelection: SelectionBuilder[User, A]
                  ): SelectionBuilder[RepositoryInvitation, A] =
      Field("inviter", Obj(innerSelection))

    /**
     * The permission granted on this repository by this invitation.
     *
     * *Upcoming Change on 2020-10-01 UTC**
     * *Description:** Type for `permission` will change from `RepositoryPermission!` to `String`.
     * *Reason:** This field may return additional values
     */
    def permission
    : SelectionBuilder[RepositoryInvitation, RepositoryPermission] =
      Field("permission", Scalar())

    /**
     * The Repository the user is invited to.
     */
    def repository[A](
                       onRepository: Option[SelectionBuilder[Repository, A]] = None
                     ): SelectionBuilder[RepositoryInvitation, Option[A]] =
      Field(
        "repository",
        OptionOf(ChoiceOf(Map("Repository" -> onRepository).collect {
          case (k, Some(v)) => k -> Obj(v)
        }))
      )
  }

  type RepositoryInvitationConnection

  object RepositoryInvitationConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[RepositoryInvitationEdge, A]
                ): SelectionBuilder[RepositoryInvitationConnection, Option[
      List[Option[A]]
    ]] = Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[RepositoryInvitation, A]
                ): SelectionBuilder[RepositoryInvitationConnection, Option[
      List[Option[A]]
    ]] = Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[RepositoryInvitationConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[RepositoryInvitationConnection, Int] =
      Field("totalCount", Scalar())
  }

  type RepositoryInvitationEdge

  object RepositoryInvitationEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[RepositoryInvitationEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[RepositoryInvitation, A]
               ): SelectionBuilder[RepositoryInvitationEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type RepositoryTopic

  object RepositoryTopic {
    def id: SelectionBuilder[RepositoryTopic, String] = Field("id", Scalar())

    /**
     * The HTTP path for this repository-topic.
     */
    def resourcePath: SelectionBuilder[RepositoryTopic, URI] =
      Field("resourcePath", Scalar())

    /**
     * The topic.
     */
    def topic[A](
                  innerSelection: SelectionBuilder[Topic, A]
                ): SelectionBuilder[RepositoryTopic, A] =
      Field("topic", Obj(innerSelection))

    /**
     * The HTTP URL for this repository-topic.
     */
    def url: SelectionBuilder[RepositoryTopic, URI] = Field("url", Scalar())
  }

  type RepositoryTopicConnection

  object RepositoryTopicConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[RepositoryTopicEdge, A]
                ): SelectionBuilder[RepositoryTopicConnection, Option[List[Option[A]]]] =
      Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[RepositoryTopic, A]
                ): SelectionBuilder[RepositoryTopicConnection, Option[List[Option[A]]]] =
      Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[RepositoryTopicConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[RepositoryTopicConnection, Int] =
      Field("totalCount", Scalar())
  }

  type RepositoryTopicEdge

  object RepositoryTopicEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[RepositoryTopicEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[RepositoryTopic, A]
               ): SelectionBuilder[RepositoryTopicEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type RepositoryVisibilityChangeDisableAuditEntry

  object RepositoryVisibilityChangeDisableAuditEntry {

    /**
     * The action name
     */
    def action: SelectionBuilder[
      RepositoryVisibilityChangeDisableAuditEntry,
      String
    ] = Field("action", Scalar())

    /**
     * The user who initiated the action
     */
    def actor[A](
                  onBot: SelectionBuilder[Bot, A],
                  onOrganization: SelectionBuilder[Organization, A],
                  onUser: SelectionBuilder[User, A]
                ): SelectionBuilder[RepositoryVisibilityChangeDisableAuditEntry, Option[
      A
    ]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> Obj(onBot),
              "Organization" -> Obj(onOrganization),
              "User" -> Obj(onUser)
            )
          )
        )
      )

    /**
     * The IP address of the actor
     */
    def actorIp
    : SelectionBuilder[RepositoryVisibilityChangeDisableAuditEntry, Option[
      String
    ]] = Field("actorIp", OptionOf(Scalar()))

    /**
     * A readable representation of the actor's location
     */
    def actorLocation[A](
                          innerSelection: SelectionBuilder[ActorLocation, A]
                        ): SelectionBuilder[RepositoryVisibilityChangeDisableAuditEntry, Option[
      A
    ]] = Field("actorLocation", OptionOf(Obj(innerSelection)))

    /**
     * The username of the user who initiated the action
     */
    def actorLogin
    : SelectionBuilder[RepositoryVisibilityChangeDisableAuditEntry, Option[
      String
    ]] = Field("actorLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the actor.
     */
    def actorResourcePath
    : SelectionBuilder[RepositoryVisibilityChangeDisableAuditEntry, Option[
      URI
    ]] = Field("actorResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the actor.
     */
    def actorUrl
    : SelectionBuilder[RepositoryVisibilityChangeDisableAuditEntry, Option[
      URI
    ]] = Field("actorUrl", OptionOf(Scalar()))

    /**
     * The time the action was initiated
     */
    def createdAt: SelectionBuilder[
      RepositoryVisibilityChangeDisableAuditEntry,
      PreciseDateTime
    ] = Field("createdAt", Scalar())

    /**
     * The HTTP path for this enterprise.
     */
    def enterpriseResourcePath
    : SelectionBuilder[RepositoryVisibilityChangeDisableAuditEntry, Option[
      URI
    ]] = Field("enterpriseResourcePath", OptionOf(Scalar()))

    /**
     * The slug of the enterprise.
     */
    def enterpriseSlug
    : SelectionBuilder[RepositoryVisibilityChangeDisableAuditEntry, Option[
      String
    ]] = Field("enterpriseSlug", OptionOf(Scalar()))

    /**
     * The HTTP URL for this enterprise.
     */
    def enterpriseUrl
    : SelectionBuilder[RepositoryVisibilityChangeDisableAuditEntry, Option[
      URI
    ]] = Field("enterpriseUrl", OptionOf(Scalar()))

    def id: SelectionBuilder[
      RepositoryVisibilityChangeDisableAuditEntry,
      String
    ] = Field("id", Scalar())

    /**
     * The corresponding operation type for the action
     */
    def operationType
    : SelectionBuilder[RepositoryVisibilityChangeDisableAuditEntry, Option[
      OperationType
    ]] = Field("operationType", OptionOf(Scalar()))

    /**
     * The Organization associated with the Audit Entry.
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[RepositoryVisibilityChangeDisableAuditEntry, Option[
      A
    ]] = Field("organization", OptionOf(Obj(innerSelection)))

    /**
     * The name of the Organization.
     */
    def organizationName
    : SelectionBuilder[RepositoryVisibilityChangeDisableAuditEntry, Option[
      String
    ]] = Field("organizationName", OptionOf(Scalar()))

    /**
     * The HTTP path for the organization
     */
    def organizationResourcePath
    : SelectionBuilder[RepositoryVisibilityChangeDisableAuditEntry, Option[
      URI
    ]] = Field("organizationResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the organization
     */
    def organizationUrl
    : SelectionBuilder[RepositoryVisibilityChangeDisableAuditEntry, Option[
      URI
    ]] = Field("organizationUrl", OptionOf(Scalar()))

    /**
     * The user affected by the action
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[RepositoryVisibilityChangeDisableAuditEntry, Option[
      A
    ]] = Field("user", OptionOf(Obj(innerSelection)))

    /**
     * For actions involving two users, the actor is the initiator and the user is the affected user.
     */
    def userLogin
    : SelectionBuilder[RepositoryVisibilityChangeDisableAuditEntry, Option[
      String
    ]] = Field("userLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the user.
     */
    def userResourcePath
    : SelectionBuilder[RepositoryVisibilityChangeDisableAuditEntry, Option[
      URI
    ]] = Field("userResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the user.
     */
    def userUrl
    : SelectionBuilder[RepositoryVisibilityChangeDisableAuditEntry, Option[
      URI
    ]] = Field("userUrl", OptionOf(Scalar()))
  }

  type RepositoryVisibilityChangeEnableAuditEntry

  object RepositoryVisibilityChangeEnableAuditEntry {

    /**
     * The action name
     */
    def action
    : SelectionBuilder[RepositoryVisibilityChangeEnableAuditEntry, String] =
      Field("action", Scalar())

    /**
     * The user who initiated the action
     */
    def actor[A](
                  onBot: SelectionBuilder[Bot, A],
                  onOrganization: SelectionBuilder[Organization, A],
                  onUser: SelectionBuilder[User, A]
                ): SelectionBuilder[RepositoryVisibilityChangeEnableAuditEntry, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> Obj(onBot),
              "Organization" -> Obj(onOrganization),
              "User" -> Obj(onUser)
            )
          )
        )
      )

    /**
     * The IP address of the actor
     */
    def actorIp
    : SelectionBuilder[RepositoryVisibilityChangeEnableAuditEntry, Option[
      String
    ]] = Field("actorIp", OptionOf(Scalar()))

    /**
     * A readable representation of the actor's location
     */
    def actorLocation[A](
                          innerSelection: SelectionBuilder[ActorLocation, A]
                        ): SelectionBuilder[RepositoryVisibilityChangeEnableAuditEntry, Option[A]] =
      Field("actorLocation", OptionOf(Obj(innerSelection)))

    /**
     * The username of the user who initiated the action
     */
    def actorLogin
    : SelectionBuilder[RepositoryVisibilityChangeEnableAuditEntry, Option[
      String
    ]] = Field("actorLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the actor.
     */
    def actorResourcePath
    : SelectionBuilder[RepositoryVisibilityChangeEnableAuditEntry, Option[
      URI
    ]] = Field("actorResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the actor.
     */
    def actorUrl
    : SelectionBuilder[RepositoryVisibilityChangeEnableAuditEntry, Option[
      URI
    ]] = Field("actorUrl", OptionOf(Scalar()))

    /**
     * The time the action was initiated
     */
    def createdAt: SelectionBuilder[
      RepositoryVisibilityChangeEnableAuditEntry,
      PreciseDateTime
    ] = Field("createdAt", Scalar())

    /**
     * The HTTP path for this enterprise.
     */
    def enterpriseResourcePath
    : SelectionBuilder[RepositoryVisibilityChangeEnableAuditEntry, Option[
      URI
    ]] = Field("enterpriseResourcePath", OptionOf(Scalar()))

    /**
     * The slug of the enterprise.
     */
    def enterpriseSlug
    : SelectionBuilder[RepositoryVisibilityChangeEnableAuditEntry, Option[
      String
    ]] = Field("enterpriseSlug", OptionOf(Scalar()))

    /**
     * The HTTP URL for this enterprise.
     */
    def enterpriseUrl
    : SelectionBuilder[RepositoryVisibilityChangeEnableAuditEntry, Option[
      URI
    ]] = Field("enterpriseUrl", OptionOf(Scalar()))

    def id
    : SelectionBuilder[RepositoryVisibilityChangeEnableAuditEntry, String] =
      Field("id", Scalar())

    /**
     * The corresponding operation type for the action
     */
    def operationType
    : SelectionBuilder[RepositoryVisibilityChangeEnableAuditEntry, Option[
      OperationType
    ]] = Field("operationType", OptionOf(Scalar()))

    /**
     * The Organization associated with the Audit Entry.
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[RepositoryVisibilityChangeEnableAuditEntry, Option[A]] =
      Field("organization", OptionOf(Obj(innerSelection)))

    /**
     * The name of the Organization.
     */
    def organizationName
    : SelectionBuilder[RepositoryVisibilityChangeEnableAuditEntry, Option[
      String
    ]] = Field("organizationName", OptionOf(Scalar()))

    /**
     * The HTTP path for the organization
     */
    def organizationResourcePath
    : SelectionBuilder[RepositoryVisibilityChangeEnableAuditEntry, Option[
      URI
    ]] = Field("organizationResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the organization
     */
    def organizationUrl
    : SelectionBuilder[RepositoryVisibilityChangeEnableAuditEntry, Option[
      URI
    ]] = Field("organizationUrl", OptionOf(Scalar()))

    /**
     * The user affected by the action
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[RepositoryVisibilityChangeEnableAuditEntry, Option[A]] =
      Field("user", OptionOf(Obj(innerSelection)))

    /**
     * For actions involving two users, the actor is the initiator and the user is the affected user.
     */
    def userLogin
    : SelectionBuilder[RepositoryVisibilityChangeEnableAuditEntry, Option[
      String
    ]] = Field("userLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the user.
     */
    def userResourcePath
    : SelectionBuilder[RepositoryVisibilityChangeEnableAuditEntry, Option[
      URI
    ]] = Field("userResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the user.
     */
    def userUrl
    : SelectionBuilder[RepositoryVisibilityChangeEnableAuditEntry, Option[
      URI
    ]] = Field("userUrl", OptionOf(Scalar()))
  }

  type RepositoryVulnerabilityAlert

  object RepositoryVulnerabilityAlert {

    /**
     * When was the alert created?
     */
    def createdAt: SelectionBuilder[RepositoryVulnerabilityAlert, DateTime] =
      Field("createdAt", Scalar())

    /**
     * The reason the alert was dismissed
     */
    def dismissReason
    : SelectionBuilder[RepositoryVulnerabilityAlert, Option[String]] =
      Field("dismissReason", OptionOf(Scalar()))

    /**
     * When was the alert dimissed?
     */
    def dismissedAt
    : SelectionBuilder[RepositoryVulnerabilityAlert, Option[DateTime]] =
      Field("dismissedAt", OptionOf(Scalar()))

    /**
     * The user who dismissed the alert
     */
    def dismisser[A](
                      innerSelection: SelectionBuilder[User, A]
                    ): SelectionBuilder[RepositoryVulnerabilityAlert, Option[A]] =
      Field("dismisser", OptionOf(Obj(innerSelection)))

    def id: SelectionBuilder[RepositoryVulnerabilityAlert, String] =
      Field("id", Scalar())

    /**
     * The associated repository
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[RepositoryVulnerabilityAlert, A] =
      Field("repository", Obj(innerSelection))

    /**
     * The associated security advisory
     */
    def securityAdvisory[A](
                             innerSelection: SelectionBuilder[SecurityAdvisory, A]
                           ): SelectionBuilder[RepositoryVulnerabilityAlert, Option[A]] =
      Field("securityAdvisory", OptionOf(Obj(innerSelection)))

    /**
     * The associated security vulnerablity
     */
    def securityVulnerability[A](
                                  innerSelection: SelectionBuilder[SecurityVulnerability, A]
                                ): SelectionBuilder[RepositoryVulnerabilityAlert, Option[A]] =
      Field("securityVulnerability", OptionOf(Obj(innerSelection)))

    /**
     * The vulnerable manifest filename
     */
    def vulnerableManifestFilename
    : SelectionBuilder[RepositoryVulnerabilityAlert, String] =
      Field("vulnerableManifestFilename", Scalar())

    /**
     * The vulnerable manifest path
     */
    def vulnerableManifestPath
    : SelectionBuilder[RepositoryVulnerabilityAlert, String] =
      Field("vulnerableManifestPath", Scalar())

    /**
     * The vulnerable requirements
     */
    def vulnerableRequirements
    : SelectionBuilder[RepositoryVulnerabilityAlert, Option[String]] =
      Field("vulnerableRequirements", OptionOf(Scalar()))
  }

  type RepositoryVulnerabilityAlertConnection

  object RepositoryVulnerabilityAlertConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[RepositoryVulnerabilityAlertEdge, A]
                ): SelectionBuilder[RepositoryVulnerabilityAlertConnection, Option[
      List[Option[A]]
    ]] = Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[RepositoryVulnerabilityAlert, A]
                ): SelectionBuilder[RepositoryVulnerabilityAlertConnection, Option[
      List[Option[A]]
    ]] = Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[RepositoryVulnerabilityAlertConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount
    : SelectionBuilder[RepositoryVulnerabilityAlertConnection, Int] =
      Field("totalCount", Scalar())
  }

  type RepositoryVulnerabilityAlertEdge

  object RepositoryVulnerabilityAlertEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[RepositoryVulnerabilityAlertEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[RepositoryVulnerabilityAlert, A]
               ): SelectionBuilder[RepositoryVulnerabilityAlertEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type RequestReviewsPayload

  object RequestReviewsPayload {

    /**
     * Identifies the actor who performed the event.
     */
    def actor[A](
                  onBot: Option[SelectionBuilder[Bot, A]] = None,
                  onEnterpriseUserAccount: Option[
                    SelectionBuilder[EnterpriseUserAccount, A]
                  ] = None,
                  onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                  onUser: Option[SelectionBuilder[User, A]] = None,
                  onOrganization: Option[SelectionBuilder[Organization, A]] = None
                ): SelectionBuilder[RequestReviewsPayload, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[RequestReviewsPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The pull request that is getting requests.
     */
    def pullRequest[A](
                        innerSelection: SelectionBuilder[PullRequest, A]
                      ): SelectionBuilder[RequestReviewsPayload, Option[A]] =
      Field("pullRequest", OptionOf(Obj(innerSelection)))

    /**
     * The edge from the pull request to the requested reviewers.
     */
    def requestedReviewersEdge[A](
                                   innerSelection: SelectionBuilder[UserEdge, A]
                                 ): SelectionBuilder[RequestReviewsPayload, Option[A]] =
      Field("requestedReviewersEdge", OptionOf(Obj(innerSelection)))
  }

  type RerequestCheckSuitePayload

  object RerequestCheckSuitePayload {

    /**
     * The requested check suite.
     */
    def checkSuite[A](
                       innerSelection: SelectionBuilder[CheckSuite, A]
                     ): SelectionBuilder[RerequestCheckSuitePayload, Option[A]] =
      Field("checkSuite", OptionOf(Obj(innerSelection)))

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[RerequestCheckSuitePayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))
  }

  type ResolveReviewThreadPayload

  object ResolveReviewThreadPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[ResolveReviewThreadPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The thread to resolve.
     */
    def thread[A](
                   innerSelection: SelectionBuilder[PullRequestReviewThread, A]
                 ): SelectionBuilder[ResolveReviewThreadPayload, Option[A]] =
      Field("thread", OptionOf(Obj(innerSelection)))
  }

  type RestrictedContribution

  object RestrictedContribution {

    /**
     * Whether this contribution is associated with a record you do not have access to. For
     * example, your own 'first issue' contribution may have been made on a repository you can no
     * longer access.
     */
    def isRestricted: SelectionBuilder[RestrictedContribution, Boolean] =
      Field("isRestricted", Scalar())

    /**
     * When this contribution was made.
     */
    def occurredAt: SelectionBuilder[RestrictedContribution, DateTime] =
      Field("occurredAt", Scalar())

    /**
     * The HTTP path for this contribution.
     */
    def resourcePath: SelectionBuilder[RestrictedContribution, URI] =
      Field("resourcePath", Scalar())

    /**
     * The HTTP URL for this contribution.
     */
    def url: SelectionBuilder[RestrictedContribution, URI] =
      Field("url", Scalar())

    /**
     * The user who made this contribution.
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[RestrictedContribution, A] =
      Field("user", Obj(innerSelection))
  }

  type ReviewDismissalAllowance

  object ReviewDismissalAllowance {

    /**
     * The actor that can dismiss.
     */
    def actor[A](
                  onTeam: SelectionBuilder[Team, A],
                  onUser: SelectionBuilder[User, A]
                ): SelectionBuilder[ReviewDismissalAllowance, Option[A]] =
      Field(
        "actor",
        OptionOf(ChoiceOf(Map("Team" -> Obj(onTeam), "User" -> Obj(onUser))))
      )

    /**
     * Identifies the branch protection rule associated with the allowed user or team.
     */
    def branchProtectionRule[A](
                                 innerSelection: SelectionBuilder[BranchProtectionRule, A]
                               ): SelectionBuilder[ReviewDismissalAllowance, Option[A]] =
      Field("branchProtectionRule", OptionOf(Obj(innerSelection)))

    def id: SelectionBuilder[ReviewDismissalAllowance, String] =
      Field("id", Scalar())
  }

  type ReviewDismissalAllowanceConnection

  object ReviewDismissalAllowanceConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[ReviewDismissalAllowanceEdge, A]
                ): SelectionBuilder[ReviewDismissalAllowanceConnection, Option[
      List[Option[A]]
    ]] = Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[ReviewDismissalAllowance, A]
                ): SelectionBuilder[ReviewDismissalAllowanceConnection, Option[
      List[Option[A]]
    ]] = Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[ReviewDismissalAllowanceConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[ReviewDismissalAllowanceConnection, Int] =
      Field("totalCount", Scalar())
  }

  type ReviewDismissalAllowanceEdge

  object ReviewDismissalAllowanceEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[ReviewDismissalAllowanceEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[ReviewDismissalAllowance, A]
               ): SelectionBuilder[ReviewDismissalAllowanceEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type ReviewDismissedEvent

  object ReviewDismissedEvent {

    /**
     * Identifies the actor who performed the event.
     */
    def actor[A](
                  onBot: Option[SelectionBuilder[Bot, A]] = None,
                  onEnterpriseUserAccount: Option[
                    SelectionBuilder[EnterpriseUserAccount, A]
                  ] = None,
                  onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                  onUser: Option[SelectionBuilder[User, A]] = None,
                  onOrganization: Option[SelectionBuilder[Organization, A]] = None
                ): SelectionBuilder[ReviewDismissedEvent, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[ReviewDismissedEvent, DateTime] =
      Field("createdAt", Scalar())

    /**
     * Identifies the primary key from the database.
     */
    def databaseId: SelectionBuilder[ReviewDismissedEvent, Option[Int]] =
      Field("databaseId", OptionOf(Scalar()))

    /**
     * Identifies the optional message associated with the 'review_dismissed' event.
     */
    def dismissalMessage
    : SelectionBuilder[ReviewDismissedEvent, Option[String]] =
      Field("dismissalMessage", OptionOf(Scalar()))

    /**
     * Identifies the optional message associated with the event, rendered to HTML.
     */
    def dismissalMessageHTML
    : SelectionBuilder[ReviewDismissedEvent, Option[String]] =
      Field("dismissalMessageHTML", OptionOf(Scalar()))

    def id: SelectionBuilder[ReviewDismissedEvent, String] =
      Field("id", Scalar())

    /**
     * Identifies the previous state of the review with the 'review_dismissed' event.
     */
    def previousReviewState
    : SelectionBuilder[ReviewDismissedEvent, PullRequestReviewState] =
      Field("previousReviewState", Scalar())

    /**
     * PullRequest referenced by event.
     */
    def pullRequest[A](
                        innerSelection: SelectionBuilder[PullRequest, A]
                      ): SelectionBuilder[ReviewDismissedEvent, A] =
      Field("pullRequest", Obj(innerSelection))

    /**
     * Identifies the commit which caused the review to become stale.
     */
    def pullRequestCommit[A](
                              innerSelection: SelectionBuilder[PullRequestCommit, A]
                            ): SelectionBuilder[ReviewDismissedEvent, Option[A]] =
      Field("pullRequestCommit", OptionOf(Obj(innerSelection)))

    /**
     * The HTTP path for this review dismissed event.
     */
    def resourcePath: SelectionBuilder[ReviewDismissedEvent, URI] =
      Field("resourcePath", Scalar())

    /**
     * Identifies the review associated with the 'review_dismissed' event.
     */
    def review[A](
                   innerSelection: SelectionBuilder[PullRequestReview, A]
                 ): SelectionBuilder[ReviewDismissedEvent, Option[A]] =
      Field("review", OptionOf(Obj(innerSelection)))

    /**
     * The HTTP URL for this review dismissed event.
     */
    def url: SelectionBuilder[ReviewDismissedEvent, URI] =
      Field("url", Scalar())
  }

  type ReviewRequest

  object ReviewRequest {

    /**
     * Identifies the primary key from the database.
     */
    def databaseId: SelectionBuilder[ReviewRequest, Option[Int]] =
      Field("databaseId", OptionOf(Scalar()))

    def id: SelectionBuilder[ReviewRequest, String] = Field("id", Scalar())

    /**
     * Identifies the pull request associated with this review request.
     */
    def pullRequest[A](
                        innerSelection: SelectionBuilder[PullRequest, A]
                      ): SelectionBuilder[ReviewRequest, A] =
      Field("pullRequest", Obj(innerSelection))

    /**
     * The reviewer that is requested.
     */
    def requestedReviewer[A](
                              onMannequin: SelectionBuilder[Mannequin, A],
                              onTeam: SelectionBuilder[Team, A],
                              onUser: SelectionBuilder[User, A]
                            ): SelectionBuilder[ReviewRequest, Option[A]] =
      Field(
        "requestedReviewer",
        OptionOf(
          ChoiceOf(
            Map(
              "Mannequin" -> Obj(onMannequin),
              "Team" -> Obj(onTeam),
              "User" -> Obj(onUser)
            )
          )
        )
      )
  }

  type ReviewRequestConnection

  object ReviewRequestConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[ReviewRequestEdge, A]
                ): SelectionBuilder[ReviewRequestConnection, Option[List[Option[A]]]] =
      Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[ReviewRequest, A]
                ): SelectionBuilder[ReviewRequestConnection, Option[List[Option[A]]]] =
      Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[ReviewRequestConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[ReviewRequestConnection, Int] =
      Field("totalCount", Scalar())
  }

  type ReviewRequestEdge

  object ReviewRequestEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[ReviewRequestEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[ReviewRequest, A]
               ): SelectionBuilder[ReviewRequestEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type ReviewRequestRemovedEvent

  object ReviewRequestRemovedEvent {

    /**
     * Identifies the actor who performed the event.
     */
    def actor[A](
                  onBot: Option[SelectionBuilder[Bot, A]] = None,
                  onEnterpriseUserAccount: Option[
                    SelectionBuilder[EnterpriseUserAccount, A]
                  ] = None,
                  onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                  onUser: Option[SelectionBuilder[User, A]] = None,
                  onOrganization: Option[SelectionBuilder[Organization, A]] = None
                ): SelectionBuilder[ReviewRequestRemovedEvent, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[ReviewRequestRemovedEvent, DateTime] =
      Field("createdAt", Scalar())

    def id: SelectionBuilder[ReviewRequestRemovedEvent, String] =
      Field("id", Scalar())

    /**
     * PullRequest referenced by event.
     */
    def pullRequest[A](
                        innerSelection: SelectionBuilder[PullRequest, A]
                      ): SelectionBuilder[ReviewRequestRemovedEvent, A] =
      Field("pullRequest", Obj(innerSelection))

    /**
     * Identifies the reviewer whose review request was removed.
     */
    def requestedReviewer[A](
                              onMannequin: SelectionBuilder[Mannequin, A],
                              onTeam: SelectionBuilder[Team, A],
                              onUser: SelectionBuilder[User, A]
                            ): SelectionBuilder[ReviewRequestRemovedEvent, Option[A]] =
      Field(
        "requestedReviewer",
        OptionOf(
          ChoiceOf(
            Map(
              "Mannequin" -> Obj(onMannequin),
              "Team" -> Obj(onTeam),
              "User" -> Obj(onUser)
            )
          )
        )
      )
  }

  type ReviewRequestedEvent

  object ReviewRequestedEvent {

    /**
     * Identifies the actor who performed the event.
     */
    def actor[A](
                  onBot: Option[SelectionBuilder[Bot, A]] = None,
                  onEnterpriseUserAccount: Option[
                    SelectionBuilder[EnterpriseUserAccount, A]
                  ] = None,
                  onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                  onUser: Option[SelectionBuilder[User, A]] = None,
                  onOrganization: Option[SelectionBuilder[Organization, A]] = None
                ): SelectionBuilder[ReviewRequestedEvent, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[ReviewRequestedEvent, DateTime] =
      Field("createdAt", Scalar())

    def id: SelectionBuilder[ReviewRequestedEvent, String] =
      Field("id", Scalar())

    /**
     * PullRequest referenced by event.
     */
    def pullRequest[A](
                        innerSelection: SelectionBuilder[PullRequest, A]
                      ): SelectionBuilder[ReviewRequestedEvent, A] =
      Field("pullRequest", Obj(innerSelection))

    /**
     * Identifies the reviewer whose review was requested.
     */
    def requestedReviewer[A](
                              onMannequin: SelectionBuilder[Mannequin, A],
                              onTeam: SelectionBuilder[Team, A],
                              onUser: SelectionBuilder[User, A]
                            ): SelectionBuilder[ReviewRequestedEvent, Option[A]] =
      Field(
        "requestedReviewer",
        OptionOf(
          ChoiceOf(
            Map(
              "Mannequin" -> Obj(onMannequin),
              "Team" -> Obj(onTeam),
              "User" -> Obj(onUser)
            )
          )
        )
      )
  }

  type ReviewStatusHovercardContext

  object ReviewStatusHovercardContext {

    /**
     * A string describing this context
     */
    def message: SelectionBuilder[ReviewStatusHovercardContext, String] =
      Field("message", Scalar())

    /**
     * An octicon to accompany this context
     */
    def octicon: SelectionBuilder[ReviewStatusHovercardContext, String] =
      Field("octicon", Scalar())

    /**
     * The current status of the pull request with respect to code review.
     */
    def reviewDecision: SelectionBuilder[ReviewStatusHovercardContext, Option[
      PullRequestReviewDecision
    ]] = Field("reviewDecision", OptionOf(Scalar()))
  }

  type SavedReply

  object SavedReply {

    /**
     * The body of the saved reply.
     */
    def body: SelectionBuilder[SavedReply, String] = Field("body", Scalar())

    /**
     * The saved reply body rendered to HTML.
     */
    def bodyHTML: SelectionBuilder[SavedReply, HTML] =
      Field("bodyHTML", Scalar())

    /**
     * Identifies the primary key from the database.
     */
    def databaseId: SelectionBuilder[SavedReply, Option[Int]] =
      Field("databaseId", OptionOf(Scalar()))

    def id: SelectionBuilder[SavedReply, String] = Field("id", Scalar())

    /**
     * The title of the saved reply.
     */
    def title: SelectionBuilder[SavedReply, String] = Field("title", Scalar())

    /**
     * The user that saved this reply.
     */
    def user[A](
                 onBot: Option[SelectionBuilder[Bot, A]] = None,
                 onEnterpriseUserAccount: Option[
                   SelectionBuilder[EnterpriseUserAccount, A]
                 ] = None,
                 onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                 onUser: Option[SelectionBuilder[User, A]] = None,
                 onOrganization: Option[SelectionBuilder[Organization, A]] = None
               ): SelectionBuilder[SavedReply, Option[A]] =
      Field(
        "user",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )
  }

  type SavedReplyConnection

  object SavedReplyConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[SavedReplyEdge, A]
                ): SelectionBuilder[SavedReplyConnection, Option[List[Option[A]]]] =
      Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[SavedReply, A]
                ): SelectionBuilder[SavedReplyConnection, Option[List[Option[A]]]] =
      Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[SavedReplyConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[SavedReplyConnection, Int] =
      Field("totalCount", Scalar())
  }

  type SavedReplyEdge

  object SavedReplyEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[SavedReplyEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[SavedReply, A]
               ): SelectionBuilder[SavedReplyEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type SearchResultItemConnection

  object SearchResultItemConnection {

    /**
     * The number of pieces of code that matched the search query.
     */
    def codeCount: SelectionBuilder[SearchResultItemConnection, Int] =
      Field("codeCount", Scalar())

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[SearchResultItemEdge, A]
                ): SelectionBuilder[SearchResultItemConnection, Option[List[Option[A]]]] =
      Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * The number of issues that matched the search query.
     */
    def issueCount: SelectionBuilder[SearchResultItemConnection, Int] =
      Field("issueCount", Scalar())

    /**
     * A list of nodes.
     */
    def nodes[A](
                  onApp: SelectionBuilder[App, A],
                  onIssue: SelectionBuilder[Issue, A],
                  onMarketplaceListing: SelectionBuilder[MarketplaceListing, A],
                  onOrganization: SelectionBuilder[Organization, A],
                  onPullRequest: SelectionBuilder[PullRequest, A],
                  onRepository: SelectionBuilder[Repository, A],
                  onUser: SelectionBuilder[User, A]
                ): SelectionBuilder[SearchResultItemConnection, Option[List[Option[A]]]] =
      Field(
        "nodes",
        OptionOf(
          ListOf(
            OptionOf(
              ChoiceOf(
                Map(
                  "App" -> Obj(onApp),
                  "Issue" -> Obj(onIssue),
                  "MarketplaceListing" -> Obj(onMarketplaceListing),
                  "Organization" -> Obj(onOrganization),
                  "PullRequest" -> Obj(onPullRequest),
                  "Repository" -> Obj(onRepository),
                  "User" -> Obj(onUser)
                )
              )
            )
          )
        )
      )

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[SearchResultItemConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * The number of repositories that matched the search query.
     */
    def repositoryCount: SelectionBuilder[SearchResultItemConnection, Int] =
      Field("repositoryCount", Scalar())

    /**
     * The number of users that matched the search query.
     */
    def userCount: SelectionBuilder[SearchResultItemConnection, Int] =
      Field("userCount", Scalar())

    /**
     * The number of wiki pages that matched the search query.
     */
    def wikiCount: SelectionBuilder[SearchResultItemConnection, Int] =
      Field("wikiCount", Scalar())
  }

  type SearchResultItemEdge

  object SearchResultItemEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[SearchResultItemEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 onApp: SelectionBuilder[App, A],
                 onIssue: SelectionBuilder[Issue, A],
                 onMarketplaceListing: SelectionBuilder[MarketplaceListing, A],
                 onOrganization: SelectionBuilder[Organization, A],
                 onPullRequest: SelectionBuilder[PullRequest, A],
                 onRepository: SelectionBuilder[Repository, A],
                 onUser: SelectionBuilder[User, A]
               ): SelectionBuilder[SearchResultItemEdge, Option[A]] =
      Field(
        "node",
        OptionOf(
          ChoiceOf(
            Map(
              "App" -> Obj(onApp),
              "Issue" -> Obj(onIssue),
              "MarketplaceListing" -> Obj(onMarketplaceListing),
              "Organization" -> Obj(onOrganization),
              "PullRequest" -> Obj(onPullRequest),
              "Repository" -> Obj(onRepository),
              "User" -> Obj(onUser)
            )
          )
        )
      )

    /**
     * Text matches on the result found.
     */
    def textMatches[A](
                        innerSelection: SelectionBuilder[TextMatch, A]
                      ): SelectionBuilder[SearchResultItemEdge, Option[List[Option[A]]]] =
      Field("textMatches", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))
  }

  type SecurityAdvisory

  object SecurityAdvisory {

    /**
     * Identifies the primary key from the database.
     */
    def databaseId: SelectionBuilder[SecurityAdvisory, Option[Int]] =
      Field("databaseId", OptionOf(Scalar()))

    /**
     * This is a long plaintext description of the advisory
     */
    def description: SelectionBuilder[SecurityAdvisory, String] =
      Field("description", Scalar())

    /**
     * The GitHub Security Advisory ID
     */
    def ghsaId: SelectionBuilder[SecurityAdvisory, String] =
      Field("ghsaId", Scalar())

    def id: SelectionBuilder[SecurityAdvisory, String] = Field("id", Scalar())

    /**
     * A list of identifiers for this advisory
     */
    def identifiers[A](
                        innerSelection: SelectionBuilder[SecurityAdvisoryIdentifier, A]
                      ): SelectionBuilder[SecurityAdvisory, List[A]] =
      Field("identifiers", ListOf(Obj(innerSelection)))

    /**
     * The organization that originated the advisory
     */
    def origin: SelectionBuilder[SecurityAdvisory, String] =
      Field("origin", Scalar())

    /**
     * The permalink for the advisory
     */
    def permalink: SelectionBuilder[SecurityAdvisory, Option[URI]] =
      Field("permalink", OptionOf(Scalar()))

    /**
     * When the advisory was published
     */
    def publishedAt: SelectionBuilder[SecurityAdvisory, DateTime] =
      Field("publishedAt", Scalar())

    /**
     * A list of references for this advisory
     */
    def references[A](
                       innerSelection: SelectionBuilder[SecurityAdvisoryReference, A]
                     ): SelectionBuilder[SecurityAdvisory, List[A]] =
      Field("references", ListOf(Obj(innerSelection)))

    /**
     * The severity of the advisory
     */
    def severity: SelectionBuilder[SecurityAdvisory, SecurityAdvisorySeverity] =
      Field("severity", Scalar())

    /**
     * A short plaintext summary of the advisory
     */
    def summary: SelectionBuilder[SecurityAdvisory, String] =
      Field("summary", Scalar())

    /**
     * When the advisory was last updated
     */
    def updatedAt: SelectionBuilder[SecurityAdvisory, DateTime] =
      Field("updatedAt", Scalar())

    /**
     * Vulnerabilities associated with this Advisory
     */
    def vulnerabilities[A](
                            after: Option[String] = None,
                            before: Option[String] = None,
                            ecosystem: Option[SecurityAdvisoryEcosystem] = None,
                            first: Option[Int] = None,
                            last: Option[Int] = None,
                            orderBy: Option[SecurityVulnerabilityOrder] = None,
                            `package`: Option[String] = None,
                            severities: Option[List[SecurityAdvisorySeverity]] = None
                          )(
                            innerSelection: SelectionBuilder[SecurityVulnerabilityConnection, A]
                          ): SelectionBuilder[SecurityAdvisory, A] =
      Field(
        "vulnerabilities",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("ecosystem", ecosystem),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy),
          Argument("package", `package`),
          Argument("severities", severities)
        )
      )

    /**
     * When the advisory was withdrawn, if it has been withdrawn
     */
    def withdrawnAt: SelectionBuilder[SecurityAdvisory, Option[DateTime]] =
      Field("withdrawnAt", OptionOf(Scalar()))
  }

  type SecurityAdvisoryConnection

  object SecurityAdvisoryConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[SecurityAdvisoryEdge, A]
                ): SelectionBuilder[SecurityAdvisoryConnection, Option[List[Option[A]]]] =
      Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[SecurityAdvisory, A]
                ): SelectionBuilder[SecurityAdvisoryConnection, Option[List[Option[A]]]] =
      Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[SecurityAdvisoryConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[SecurityAdvisoryConnection, Int] =
      Field("totalCount", Scalar())
  }

  type SecurityAdvisoryEdge

  object SecurityAdvisoryEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[SecurityAdvisoryEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[SecurityAdvisory, A]
               ): SelectionBuilder[SecurityAdvisoryEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type SecurityAdvisoryIdentifier

  object SecurityAdvisoryIdentifier {

    /**
     * The identifier type, e.g. GHSA, CVE
     */
    def `type`: SelectionBuilder[SecurityAdvisoryIdentifier, String] =
      Field("type", Scalar())

    /**
     * The identifier
     */
    def value: SelectionBuilder[SecurityAdvisoryIdentifier, String] =
      Field("value", Scalar())
  }

  type SecurityAdvisoryPackage

  object SecurityAdvisoryPackage {

    /**
     * The ecosystem the package belongs to, e.g. RUBYGEMS, NPM
     */
    def ecosystem
    : SelectionBuilder[SecurityAdvisoryPackage, SecurityAdvisoryEcosystem] =
      Field("ecosystem", Scalar())

    /**
     * The package name
     */
    def name: SelectionBuilder[SecurityAdvisoryPackage, String] =
      Field("name", Scalar())
  }

  type SecurityAdvisoryPackageVersion

  object SecurityAdvisoryPackageVersion {

    /**
     * The package name or version
     */
    def identifier: SelectionBuilder[SecurityAdvisoryPackageVersion, String] =
      Field("identifier", Scalar())
  }

  type SecurityAdvisoryReference

  object SecurityAdvisoryReference {

    /**
     * A publicly accessible reference
     */
    def url: SelectionBuilder[SecurityAdvisoryReference, URI] =
      Field("url", Scalar())
  }

  type SecurityVulnerability

  object SecurityVulnerability {

    /**
     * The Advisory associated with this Vulnerability
     */
    def advisory[A](
                     innerSelection: SelectionBuilder[SecurityAdvisory, A]
                   ): SelectionBuilder[SecurityVulnerability, A] =
      Field("advisory", Obj(innerSelection))

    /**
     * The first version containing a fix for the vulnerability
     */
    def firstPatchedVersion[A](
                                innerSelection: SelectionBuilder[SecurityAdvisoryPackageVersion, A]
                              ): SelectionBuilder[SecurityVulnerability, Option[A]] =
      Field("firstPatchedVersion", OptionOf(Obj(innerSelection)))

    /**
     * A description of the vulnerable package
     */
    def `package`[A](
                      innerSelection: SelectionBuilder[SecurityAdvisoryPackage, A]
                    ): SelectionBuilder[SecurityVulnerability, A] =
      Field("package", Obj(innerSelection))

    /**
     * The severity of the vulnerability within this package
     */
    def severity
    : SelectionBuilder[SecurityVulnerability, SecurityAdvisorySeverity] =
      Field("severity", Scalar())

    /**
     * When the vulnerability was last updated
     */
    def updatedAt: SelectionBuilder[SecurityVulnerability, DateTime] =
      Field("updatedAt", Scalar())

    /**
     * A string that describes the vulnerable package versions.
     * This string follows a basic syntax with a few forms.
     * + `= 0.2.0` denotes a single vulnerable version.
     * + `<= 1.0.8` denotes a version range up to and including the specified version
     * + `< 0.1.11` denotes a version range up to, but excluding, the specified version
     * + `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.
     * + `>= 0.0.1` denotes a version range with a known minimum, but no known maximum
     */
    def vulnerableVersionRange
    : SelectionBuilder[SecurityVulnerability, String] =
      Field("vulnerableVersionRange", Scalar())
  }

  type SecurityVulnerabilityConnection

  object SecurityVulnerabilityConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[SecurityVulnerabilityEdge, A]
                ): SelectionBuilder[SecurityVulnerabilityConnection, Option[
      List[Option[A]]
    ]] = Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[SecurityVulnerability, A]
                ): SelectionBuilder[SecurityVulnerabilityConnection, Option[
      List[Option[A]]
    ]] = Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[SecurityVulnerabilityConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[SecurityVulnerabilityConnection, Int] =
      Field("totalCount", Scalar())
  }

  type SecurityVulnerabilityEdge

  object SecurityVulnerabilityEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[SecurityVulnerabilityEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[SecurityVulnerability, A]
               ): SelectionBuilder[SecurityVulnerabilityEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type SetEnterpriseIdentityProviderPayload

  object SetEnterpriseIdentityProviderPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[SetEnterpriseIdentityProviderPayload, Option[
      String
    ]] = Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The identity provider for the enterprise.
     */
    def identityProvider[A](
                             innerSelection: SelectionBuilder[EnterpriseIdentityProvider, A]
                           ): SelectionBuilder[SetEnterpriseIdentityProviderPayload, Option[A]] =
      Field("identityProvider", OptionOf(Obj(innerSelection)))
  }

  type SmimeSignature

  object SmimeSignature {

    /**
     * Email used to sign this object.
     */
    def email: SelectionBuilder[SmimeSignature, String] =
      Field("email", Scalar())

    /**
     * True if the signature is valid and verified by GitHub.
     */
    def isValid: SelectionBuilder[SmimeSignature, Boolean] =
      Field("isValid", Scalar())

    /**
     * Payload for GPG signing object. Raw ODB object without the signature header.
     */
    def payload: SelectionBuilder[SmimeSignature, String] =
      Field("payload", Scalar())

    /**
     * ASCII-armored signature header from object.
     */
    def signature: SelectionBuilder[SmimeSignature, String] =
      Field("signature", Scalar())

    /**
     * GitHub user corresponding to the email signing this commit.
     */
    def signer[A](
                   innerSelection: SelectionBuilder[User, A]
                 ): SelectionBuilder[SmimeSignature, Option[A]] =
      Field("signer", OptionOf(Obj(innerSelection)))

    /**
     * The state of this signature. `VALID` if signature is valid and verified by
     * GitHub, otherwise represents reason why signature is considered invalid.
     */
    def state: SelectionBuilder[SmimeSignature, GitSignatureState] =
      Field("state", Scalar())

    /**
     * True if the signature was made with GitHub's signing key.
     */
    def wasSignedByGitHub: SelectionBuilder[SmimeSignature, Boolean] =
      Field("wasSignedByGitHub", Scalar())
  }

  type SponsorsListing

  object SponsorsListing {

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[SponsorsListing, DateTime] =
      Field("createdAt", Scalar())

    /**
     * The full description of the listing.
     */
    def fullDescription: SelectionBuilder[SponsorsListing, String] =
      Field("fullDescription", Scalar())

    /**
     * The full description of the listing rendered to HTML.
     */
    def fullDescriptionHTML: SelectionBuilder[SponsorsListing, HTML] =
      Field("fullDescriptionHTML", Scalar())

    def id: SelectionBuilder[SponsorsListing, String] = Field("id", Scalar())

    /**
     * The listing's full name.
     */
    def name: SelectionBuilder[SponsorsListing, String] =
      Field("name", Scalar())

    /**
     * The short description of the listing.
     */
    def shortDescription: SelectionBuilder[SponsorsListing, String] =
      Field("shortDescription", Scalar())

    /**
     * The short name of the listing.
     */
    def slug: SelectionBuilder[SponsorsListing, String] =
      Field("slug", Scalar())

    /**
     * The published tiers for this GitHub Sponsors listing.
     */
    def tiers[A](
                  after: Option[String] = None,
                  before: Option[String] = None,
                  first: Option[Int] = None,
                  last: Option[Int] = None,
                  orderBy: Option[SponsorsTierOrder] = None
                )(
                  innerSelection: SelectionBuilder[SponsorsTierConnection, A]
                ): SelectionBuilder[SponsorsListing, Option[A]] =
      Field(
        "tiers",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy)
        )
      )
  }

  type SponsorsTier

  object SponsorsTier {

    /**
     * SponsorsTier information only visible to users that can administer the associated Sponsors listing.
     */
    def adminInfo[A](
                      innerSelection: SelectionBuilder[SponsorsTierAdminInfo, A]
                    ): SelectionBuilder[SponsorsTier, Option[A]] =
      Field("adminInfo", OptionOf(Obj(innerSelection)))

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[SponsorsTier, DateTime] =
      Field("createdAt", Scalar())

    /**
     * The description of the tier.
     */
    def description: SelectionBuilder[SponsorsTier, String] =
      Field("description", Scalar())

    /**
     * The tier description rendered to HTML
     */
    def descriptionHTML: SelectionBuilder[SponsorsTier, HTML] =
      Field("descriptionHTML", Scalar())

    def id: SelectionBuilder[SponsorsTier, String] = Field("id", Scalar())

    /**
     * How much this tier costs per month in cents.
     */
    def monthlyPriceInCents: SelectionBuilder[SponsorsTier, Int] =
      Field("monthlyPriceInCents", Scalar())

    /**
     * How much this tier costs per month in dollars.
     */
    def monthlyPriceInDollars: SelectionBuilder[SponsorsTier, Int] =
      Field("monthlyPriceInDollars", Scalar())

    /**
     * The name of the tier.
     */
    def name: SelectionBuilder[SponsorsTier, String] = Field("name", Scalar())

    /**
     * The sponsors listing that this tier belongs to.
     */
    def sponsorsListing[A](
                            innerSelection: SelectionBuilder[SponsorsListing, A]
                          ): SelectionBuilder[SponsorsTier, A] =
      Field("sponsorsListing", Obj(innerSelection))

    /**
     * Identifies the date and time when the object was last updated.
     */
    def updatedAt: SelectionBuilder[SponsorsTier, DateTime] =
      Field("updatedAt", Scalar())
  }

  type SponsorsTierAdminInfo

  object SponsorsTierAdminInfo {

    /**
     * The sponsorships associated with this tier.
     */
    def sponsorships[A](
                         after: Option[String] = None,
                         before: Option[String] = None,
                         first: Option[Int] = None,
                         includePrivate: Option[Boolean] = None,
                         last: Option[Int] = None,
                         orderBy: Option[SponsorshipOrder] = None
                       )(
                         innerSelection: SelectionBuilder[SponsorshipConnection, A]
                       ): SelectionBuilder[SponsorsTierAdminInfo, A] =
      Field(
        "sponsorships",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("includePrivate", includePrivate),
          Argument("last", last),
          Argument("orderBy", orderBy)
        )
      )
  }

  type SponsorsTierConnection

  object SponsorsTierConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[SponsorsTierEdge, A]
                ): SelectionBuilder[SponsorsTierConnection, Option[List[Option[A]]]] =
      Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[SponsorsTier, A]
                ): SelectionBuilder[SponsorsTierConnection, Option[List[Option[A]]]] =
      Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[SponsorsTierConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[SponsorsTierConnection, Int] =
      Field("totalCount", Scalar())
  }

  type SponsorsTierEdge

  object SponsorsTierEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[SponsorsTierEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[SponsorsTier, A]
               ): SelectionBuilder[SponsorsTierEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type Sponsorship

  object Sponsorship {

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[Sponsorship, DateTime] =
      Field("createdAt", Scalar())

    def id: SelectionBuilder[Sponsorship, String] = Field("id", Scalar())

    /**
     * The entity that is being sponsored
     */
    @deprecated(
      "`Sponsorship.maintainer` will be removed. Use `Sponsorship.sponsorable` instead. Removal on 2020-04-01 UTC.",
      ""
    )
    def maintainer[A](
                       innerSelection: SelectionBuilder[User, A]
                     ): SelectionBuilder[Sponsorship, A] =
      Field("maintainer", Obj(innerSelection))

    /**
     * The privacy level for this sponsorship.
     */
    def privacyLevel: SelectionBuilder[Sponsorship, SponsorshipPrivacy] =
      Field("privacyLevel", Scalar())

    /**
     * The user that is sponsoring. Returns null if the sponsorship is private or if sponsor is not a user.
     */
    @deprecated(
      "`Sponsorship.sponsor` will be removed. Use `Sponsorship.sponsorEntity` instead. Removal on 2020-10-01 UTC.",
      ""
    )
    def sponsor[A](
                    innerSelection: SelectionBuilder[User, A]
                  ): SelectionBuilder[Sponsorship, Option[A]] =
      Field("sponsor", OptionOf(Obj(innerSelection)))

    /**
     * The user or organization that is sponsoring. Returns null if the sponsorship is private.
     */
    def sponsorEntity[A](
                          onOrganization: SelectionBuilder[Organization, A],
                          onUser: SelectionBuilder[User, A]
                        ): SelectionBuilder[Sponsorship, Option[A]] =
      Field(
        "sponsorEntity",
        OptionOf(
          ChoiceOf(
            Map("Organization" -> Obj(onOrganization), "User" -> Obj(onUser))
          )
        )
      )

    /**
     * The entity that is being sponsored
     */
    def sponsorable[A](
                        onUser: Option[SelectionBuilder[User, A]] = None,
                        onOrganization: Option[SelectionBuilder[Organization, A]] = None
                      ): SelectionBuilder[Sponsorship, A] =
      Field(
        "sponsorable",
        ChoiceOf(
          Map("User" -> onUser, "Organization" -> onOrganization).collect {
            case (k, Some(v)) => k -> Obj(v)
          }
        )
      )

    /**
     * The associated sponsorship tier
     */
    def tier[A](
                 innerSelection: SelectionBuilder[SponsorsTier, A]
               ): SelectionBuilder[Sponsorship, Option[A]] =
      Field("tier", OptionOf(Obj(innerSelection)))
  }

  type SponsorshipConnection

  object SponsorshipConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[SponsorshipEdge, A]
                ): SelectionBuilder[SponsorshipConnection, Option[List[Option[A]]]] =
      Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[Sponsorship, A]
                ): SelectionBuilder[SponsorshipConnection, Option[List[Option[A]]]] =
      Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[SponsorshipConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[SponsorshipConnection, Int] =
      Field("totalCount", Scalar())
  }

  type SponsorshipEdge

  object SponsorshipEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[SponsorshipEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[Sponsorship, A]
               ): SelectionBuilder[SponsorshipEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type StargazerConnection

  object StargazerConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[StargazerEdge, A]
                ): SelectionBuilder[StargazerConnection, Option[List[Option[A]]]] =
      Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[User, A]
                ): SelectionBuilder[StargazerConnection, Option[List[Option[A]]]] =
      Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[StargazerConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[StargazerConnection, Int] =
      Field("totalCount", Scalar())
  }

  type StargazerEdge

  object StargazerEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[StargazerEdge, String] =
      Field("cursor", Scalar())

    def node[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[StargazerEdge, A] = Field("node", Obj(innerSelection))

    /**
     * Identifies when the item was starred.
     */
    def starredAt: SelectionBuilder[StargazerEdge, DateTime] =
      Field("starredAt", Scalar())
  }

  type StarredRepositoryConnection

  object StarredRepositoryConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[StarredRepositoryEdge, A]
                ): SelectionBuilder[StarredRepositoryConnection, Option[List[Option[A]]]] =
      Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Is the list of stars for this user truncated? This is true for users that have many stars.
     */
    def isOverLimit: SelectionBuilder[StarredRepositoryConnection, Boolean] =
      Field("isOverLimit", Scalar())

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[Repository, A]
                ): SelectionBuilder[StarredRepositoryConnection, Option[List[Option[A]]]] =
      Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[StarredRepositoryConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[StarredRepositoryConnection, Int] =
      Field("totalCount", Scalar())
  }

  type StarredRepositoryEdge

  object StarredRepositoryEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[StarredRepositoryEdge, String] =
      Field("cursor", Scalar())

    def node[A](
                 innerSelection: SelectionBuilder[Repository, A]
               ): SelectionBuilder[StarredRepositoryEdge, A] =
      Field("node", Obj(innerSelection))

    /**
     * Identifies when the item was starred.
     */
    def starredAt: SelectionBuilder[StarredRepositoryEdge, DateTime] =
      Field("starredAt", Scalar())
  }

  type Status

  object Status {

    /**
     * The commit this status is attached to.
     */
    def commit[A](
                   innerSelection: SelectionBuilder[Commit, A]
                 ): SelectionBuilder[Status, Option[A]] =
      Field("commit", OptionOf(Obj(innerSelection)))

    /**
     * Looks up an individual status context by context name.
     */
    def context[A](name: String)(
      innerSelection: SelectionBuilder[StatusContext, A]
    ): SelectionBuilder[Status, Option[A]] =
      Field(
        "context",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("name", name))
      )

    /**
     * The individual status contexts for this commit.
     */
    def contexts[A](
                     innerSelection: SelectionBuilder[StatusContext, A]
                   ): SelectionBuilder[Status, List[A]] =
      Field("contexts", ListOf(Obj(innerSelection)))

    def id: SelectionBuilder[Status, String] = Field("id", Scalar())

    /**
     * The combined commit status.
     */
    def state: SelectionBuilder[Status, StatusState] = Field("state", Scalar())
  }

  type StatusCheckRollup

  object StatusCheckRollup {

    /**
     * The commit the status and check runs are attached to.
     */
    def commit[A](
                   innerSelection: SelectionBuilder[Commit, A]
                 ): SelectionBuilder[StatusCheckRollup, Option[A]] =
      Field("commit", OptionOf(Obj(innerSelection)))

    /**
     * A list of status contexts and check runs for this commit.
     */
    def contexts[A](
                     after: Option[String] = None,
                     before: Option[String] = None,
                     first: Option[Int] = None,
                     last: Option[Int] = None
                   )(
                     innerSelection: SelectionBuilder[StatusCheckRollupContextConnection, A]
                   ): SelectionBuilder[StatusCheckRollup, A] =
      Field(
        "contexts",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )

    def id: SelectionBuilder[StatusCheckRollup, String] = Field("id", Scalar())

    /**
     * The combined status for the commit.
     */
    def state: SelectionBuilder[StatusCheckRollup, StatusState] =
      Field("state", Scalar())
  }

  type StatusCheckRollupContextConnection

  object StatusCheckRollupContextConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[StatusCheckRollupContextEdge, A]
                ): SelectionBuilder[StatusCheckRollupContextConnection, Option[
      List[Option[A]]
    ]] = Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  onCheckRun: SelectionBuilder[CheckRun, A],
                  onStatusContext: SelectionBuilder[StatusContext, A]
                ): SelectionBuilder[StatusCheckRollupContextConnection, Option[
      List[Option[A]]
    ]] =
      Field(
        "nodes",
        OptionOf(
          ListOf(
            OptionOf(
              ChoiceOf(
                Map(
                  "CheckRun" -> Obj(onCheckRun),
                  "StatusContext" -> Obj(onStatusContext)
                )
              )
            )
          )
        )
      )

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[StatusCheckRollupContextConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[StatusCheckRollupContextConnection, Int] =
      Field("totalCount", Scalar())
  }

  type StatusCheckRollupContextEdge

  object StatusCheckRollupContextEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[StatusCheckRollupContextEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 onCheckRun: SelectionBuilder[CheckRun, A],
                 onStatusContext: SelectionBuilder[StatusContext, A]
               ): SelectionBuilder[StatusCheckRollupContextEdge, Option[A]] =
      Field(
        "node",
        OptionOf(
          ChoiceOf(
            Map(
              "CheckRun" -> Obj(onCheckRun),
              "StatusContext" -> Obj(onStatusContext)
            )
          )
        )
      )
  }

  type StatusContext

  object StatusContext {

    /**
     * The avatar of the OAuth application or the user that created the status
     */
    def avatarUrl(
                   size: Option[Int] = None
                 ): SelectionBuilder[StatusContext, Option[URI]] =
      Field(
        "avatarUrl",
        OptionOf(Scalar()),
        arguments = List(Argument("size", size))
      )

    /**
     * This commit this status context is attached to.
     */
    def commit[A](
                   innerSelection: SelectionBuilder[Commit, A]
                 ): SelectionBuilder[StatusContext, Option[A]] =
      Field("commit", OptionOf(Obj(innerSelection)))

    /**
     * The name of this status context.
     */
    def context: SelectionBuilder[StatusContext, String] =
      Field("context", Scalar())

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[StatusContext, DateTime] =
      Field("createdAt", Scalar())

    /**
     * The actor who created this status context.
     */
    def creator[A](
                    onBot: Option[SelectionBuilder[Bot, A]] = None,
                    onEnterpriseUserAccount: Option[
                      SelectionBuilder[EnterpriseUserAccount, A]
                    ] = None,
                    onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                    onUser: Option[SelectionBuilder[User, A]] = None,
                    onOrganization: Option[SelectionBuilder[Organization, A]] = None
                  ): SelectionBuilder[StatusContext, Option[A]] =
      Field(
        "creator",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * The description for this status context.
     */
    def description: SelectionBuilder[StatusContext, Option[String]] =
      Field("description", OptionOf(Scalar()))

    def id: SelectionBuilder[StatusContext, String] = Field("id", Scalar())

    /**
     * The state of this status context.
     */
    def state: SelectionBuilder[StatusContext, StatusState] =
      Field("state", Scalar())

    /**
     * The URL for this status context.
     */
    def targetUrl: SelectionBuilder[StatusContext, Option[URI]] =
      Field("targetUrl", OptionOf(Scalar()))
  }

  type SubmitPullRequestReviewPayload

  object SubmitPullRequestReviewPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[SubmitPullRequestReviewPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The submitted pull request review.
     */
    def pullRequestReview[A](
                              innerSelection: SelectionBuilder[PullRequestReview, A]
                            ): SelectionBuilder[SubmitPullRequestReviewPayload, Option[A]] =
      Field("pullRequestReview", OptionOf(Obj(innerSelection)))
  }

  type Submodule

  object Submodule {

    /**
     * The branch of the upstream submodule for tracking updates
     */
    def branch: SelectionBuilder[Submodule, Option[String]] =
      Field("branch", OptionOf(Scalar()))

    /**
     * The git URL of the submodule repository
     */
    def gitUrl: SelectionBuilder[Submodule, URI] = Field("gitUrl", Scalar())

    /**
     * The name of the submodule in .gitmodules
     */
    def name: SelectionBuilder[Submodule, String] = Field("name", Scalar())

    /**
     * The path in the superproject that this submodule is located in
     */
    def path: SelectionBuilder[Submodule, String] = Field("path", Scalar())

    /**
     * The commit revision of the subproject repository being tracked by the submodule
     */
    def subprojectCommitOid: SelectionBuilder[Submodule, Option[GitObjectID]] =
      Field("subprojectCommitOid", OptionOf(Scalar()))
  }

  type SubmoduleConnection

  object SubmoduleConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[SubmoduleEdge, A]
                ): SelectionBuilder[SubmoduleConnection, Option[List[Option[A]]]] =
      Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[Submodule, A]
                ): SelectionBuilder[SubmoduleConnection, Option[List[Option[A]]]] =
      Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[SubmoduleConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[SubmoduleConnection, Int] =
      Field("totalCount", Scalar())
  }

  type SubmoduleEdge

  object SubmoduleEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[SubmoduleEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[Submodule, A]
               ): SelectionBuilder[SubmoduleEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type SubscribedEvent

  object SubscribedEvent {

    /**
     * Identifies the actor who performed the event.
     */
    def actor[A](
                  onBot: Option[SelectionBuilder[Bot, A]] = None,
                  onEnterpriseUserAccount: Option[
                    SelectionBuilder[EnterpriseUserAccount, A]
                  ] = None,
                  onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                  onUser: Option[SelectionBuilder[User, A]] = None,
                  onOrganization: Option[SelectionBuilder[Organization, A]] = None
                ): SelectionBuilder[SubscribedEvent, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[SubscribedEvent, DateTime] =
      Field("createdAt", Scalar())

    def id: SelectionBuilder[SubscribedEvent, String] = Field("id", Scalar())

    /**
     * Object referenced by event.
     */
    def subscribable[A](
                         onCommit: Option[SelectionBuilder[Commit, A]] = None,
                         onTeam: Option[SelectionBuilder[Team, A]] = None,
                         onRepository: Option[SelectionBuilder[Repository, A]] = None,
                         onTeamDiscussion: Option[SelectionBuilder[TeamDiscussion, A]] = None,
                         onIssue: Option[SelectionBuilder[Issue, A]] = None,
                         onPullRequest: Option[SelectionBuilder[PullRequest, A]] = None
                       ): SelectionBuilder[SubscribedEvent, A] =
      Field(
        "subscribable",
        ChoiceOf(
          Map(
            "Commit" -> onCommit,
            "Team" -> onTeam,
            "Repository" -> onRepository,
            "TeamDiscussion" -> onTeamDiscussion,
            "Issue" -> onIssue,
            "PullRequest" -> onPullRequest
          ).collect { case (k, Some(v)) => k -> Obj(v) }
        )
      )
  }

  type SuggestedReviewer

  object SuggestedReviewer {

    /**
     * Is this suggestion based on past commits?
     */
    def isAuthor: SelectionBuilder[SuggestedReviewer, Boolean] =
      Field("isAuthor", Scalar())

    /**
     * Is this suggestion based on past review comments?
     */
    def isCommenter: SelectionBuilder[SuggestedReviewer, Boolean] =
      Field("isCommenter", Scalar())

    /**
     * Identifies the user suggested to review the pull request.
     */
    def reviewer[A](
                     innerSelection: SelectionBuilder[User, A]
                   ): SelectionBuilder[SuggestedReviewer, A] =
      Field("reviewer", Obj(innerSelection))
  }

  type Tag

  object Tag {

    /**
     * An abbreviated version of the Git object ID
     */
    def abbreviatedOid: SelectionBuilder[Tag, String] =
      Field("abbreviatedOid", Scalar())

    /**
     * The HTTP path for this Git object
     */
    def commitResourcePath: SelectionBuilder[Tag, URI] =
      Field("commitResourcePath", Scalar())

    /**
     * The HTTP URL for this Git object
     */
    def commitUrl: SelectionBuilder[Tag, URI] = Field("commitUrl", Scalar())

    def id: SelectionBuilder[Tag, String] = Field("id", Scalar())

    /**
     * The Git tag message.
     */
    def message: SelectionBuilder[Tag, Option[String]] =
      Field("message", OptionOf(Scalar()))

    /**
     * The Git tag name.
     */
    def name: SelectionBuilder[Tag, String] = Field("name", Scalar())

    /**
     * The Git object ID
     */
    def oid: SelectionBuilder[Tag, GitObjectID] = Field("oid", Scalar())

    /**
     * The Repository the Git object belongs to
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[Tag, A] = Field("repository", Obj(innerSelection))

    /**
     * Details about the tag author.
     */
    def tagger[A](
                   innerSelection: SelectionBuilder[GitActor, A]
                 ): SelectionBuilder[Tag, Option[A]] =
      Field("tagger", OptionOf(Obj(innerSelection)))

    /**
     * The Git object the tag points to.
     */
    def target[A](
                   onCommit: Option[SelectionBuilder[Commit, A]] = None,
                   onTree: Option[SelectionBuilder[Tree, A]] = None,
                   onBlob: Option[SelectionBuilder[Blob, A]] = None,
                   onTag: Option[SelectionBuilder[Tag, A]] = None
                 ): SelectionBuilder[Tag, A] =
      Field(
        "target",
        ChoiceOf(
          Map(
            "Commit" -> onCommit,
            "Tree" -> onTree,
            "Blob" -> onBlob,
            "Tag" -> onTag
          ).collect { case (k, Some(v)) => k -> Obj(v) }
        )
      )
  }

  type Team

  object Team {

    /**
     * A list of teams that are ancestors of this team.
     */
    def ancestors[A](
                      after: Option[String] = None,
                      before: Option[String] = None,
                      first: Option[Int] = None,
                      last: Option[Int] = None
                    )(
                      innerSelection: SelectionBuilder[TeamConnection, A]
                    ): SelectionBuilder[Team, A] =
      Field(
        "ancestors",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )

    /**
     * A URL pointing to the team's avatar.
     */
    def avatarUrl(
                   size: Option[Int] = None
                 ): SelectionBuilder[Team, Option[URI]] =
      Field(
        "avatarUrl",
        OptionOf(Scalar()),
        arguments = List(Argument("size", size))
      )

    /**
     * List of child teams belonging to this team
     */
    def childTeams[A](
                       after: Option[String] = None,
                       before: Option[String] = None,
                       first: Option[Int] = None,
                       immediateOnly: Option[Boolean] = None,
                       last: Option[Int] = None,
                       orderBy: Option[TeamOrder] = None,
                       userLogins: Option[List[String]] = None
                     )(
                       innerSelection: SelectionBuilder[TeamConnection, A]
                     ): SelectionBuilder[Team, A] =
      Field(
        "childTeams",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("immediateOnly", immediateOnly),
          Argument("last", last),
          Argument("orderBy", orderBy),
          Argument("userLogins", userLogins)
        )
      )

    /**
     * The slug corresponding to the organization and team.
     */
    def combinedSlug: SelectionBuilder[Team, String] =
      Field("combinedSlug", Scalar())

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[Team, DateTime] =
      Field("createdAt", Scalar())

    /**
     * Identifies the primary key from the database.
     */
    def databaseId: SelectionBuilder[Team, Option[Int]] =
      Field("databaseId", OptionOf(Scalar()))

    /**
     * The description of the team.
     */
    def description: SelectionBuilder[Team, Option[String]] =
      Field("description", OptionOf(Scalar()))

    /**
     * Find a team discussion by its number.
     */
    def discussion[A](number: Int)(
      innerSelection: SelectionBuilder[TeamDiscussion, A]
    ): SelectionBuilder[Team, Option[A]] =
      Field(
        "discussion",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("number", number))
      )

    /**
     * A list of team discussions.
     */
    def discussions[A](
                        after: Option[String] = None,
                        before: Option[String] = None,
                        first: Option[Int] = None,
                        isPinned: Option[Boolean] = None,
                        last: Option[Int] = None,
                        orderBy: Option[TeamDiscussionOrder] = None
                      )(
                        innerSelection: SelectionBuilder[TeamDiscussionConnection, A]
                      ): SelectionBuilder[Team, A] =
      Field(
        "discussions",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("isPinned", isPinned),
          Argument("last", last),
          Argument("orderBy", orderBy)
        )
      )

    /**
     * The HTTP path for team discussions
     */
    def discussionsResourcePath: SelectionBuilder[Team, URI] =
      Field("discussionsResourcePath", Scalar())

    /**
     * The HTTP URL for team discussions
     */
    def discussionsUrl: SelectionBuilder[Team, URI] =
      Field("discussionsUrl", Scalar())

    /**
     * The HTTP path for editing this team
     */
    def editTeamResourcePath: SelectionBuilder[Team, URI] =
      Field("editTeamResourcePath", Scalar())

    /**
     * The HTTP URL for editing this team
     */
    def editTeamUrl: SelectionBuilder[Team, URI] =
      Field("editTeamUrl", Scalar())

    def id: SelectionBuilder[Team, String] = Field("id", Scalar())

    /**
     * A list of pending invitations for users to this team
     */
    def invitations[A](
                        after: Option[String] = None,
                        before: Option[String] = None,
                        first: Option[Int] = None,
                        last: Option[Int] = None
                      )(
                        innerSelection: SelectionBuilder[OrganizationInvitationConnection, A]
                      ): SelectionBuilder[Team, Option[A]] =
      Field(
        "invitations",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )

    /**
     * Get the status messages members of this entity have set that are either public or visible only to the organization.
     */
    def memberStatuses[A](
                           after: Option[String] = None,
                           before: Option[String] = None,
                           first: Option[Int] = None,
                           last: Option[Int] = None,
                           orderBy: Option[UserStatusOrder] = None
                         )(
                           innerSelection: SelectionBuilder[UserStatusConnection, A]
                         ): SelectionBuilder[Team, A] =
      Field(
        "memberStatuses",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy)
        )
      )

    /**
     * A list of users who are members of this team.
     */
    def members[A](
                    after: Option[String] = None,
                    before: Option[String] = None,
                    first: Option[Int] = None,
                    last: Option[Int] = None,
                    membership: Option[TeamMembershipType] = None,
                    orderBy: Option[TeamMemberOrder] = None,
                    query: Option[String] = None,
                    role: Option[TeamMemberRole] = None
                  )(
                    innerSelection: SelectionBuilder[TeamMemberConnection, A]
                  ): SelectionBuilder[Team, A] =
      Field(
        "members",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("membership", membership),
          Argument("orderBy", orderBy),
          Argument("query", query),
          Argument("role", role)
        )
      )

    /**
     * The HTTP path for the team' members
     */
    def membersResourcePath: SelectionBuilder[Team, URI] =
      Field("membersResourcePath", Scalar())

    /**
     * The HTTP URL for the team' members
     */
    def membersUrl: SelectionBuilder[Team, URI] = Field("membersUrl", Scalar())

    /**
     * The name of the team.
     */
    def name: SelectionBuilder[Team, String] = Field("name", Scalar())

    /**
     * The HTTP path creating a new team
     */
    def newTeamResourcePath: SelectionBuilder[Team, URI] =
      Field("newTeamResourcePath", Scalar())

    /**
     * The HTTP URL creating a new team
     */
    def newTeamUrl: SelectionBuilder[Team, URI] = Field("newTeamUrl", Scalar())

    /**
     * The organization that owns this team.
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[Team, A] = Field("organization", Obj(innerSelection))

    /**
     * The parent team of the team.
     */
    def parentTeam[A](
                       innerSelection: SelectionBuilder[Team, A]
                     ): SelectionBuilder[Team, Option[A]] =
      Field("parentTeam", OptionOf(Obj(innerSelection)))

    /**
     * The level of privacy the team has.
     */
    def privacy: SelectionBuilder[Team, TeamPrivacy] =
      Field("privacy", Scalar())

    /**
     * A list of repositories this team has access to.
     */
    def repositories[A](
                         after: Option[String] = None,
                         before: Option[String] = None,
                         first: Option[Int] = None,
                         last: Option[Int] = None,
                         orderBy: Option[TeamRepositoryOrder] = None,
                         query: Option[String] = None
                       )(
                         innerSelection: SelectionBuilder[TeamRepositoryConnection, A]
                       ): SelectionBuilder[Team, A] =
      Field(
        "repositories",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy),
          Argument("query", query)
        )
      )

    /**
     * The HTTP path for this team's repositories
     */
    def repositoriesResourcePath: SelectionBuilder[Team, URI] =
      Field("repositoriesResourcePath", Scalar())

    /**
     * The HTTP URL for this team's repositories
     */
    def repositoriesUrl: SelectionBuilder[Team, URI] =
      Field("repositoriesUrl", Scalar())

    /**
     * The HTTP path for this team
     */
    def resourcePath: SelectionBuilder[Team, URI] =
      Field("resourcePath", Scalar())

    /**
     * What algorithm is used for review assignment for this team
     */
    def reviewRequestDelegationAlgorithm
    : SelectionBuilder[Team, Option[TeamReviewAssignmentAlgorithm]] =
      Field("reviewRequestDelegationAlgorithm", OptionOf(Scalar()))

    /**
     * True if review assignment is enabled for this team
     */
    def reviewRequestDelegationEnabled: SelectionBuilder[Team, Boolean] =
      Field("reviewRequestDelegationEnabled", Scalar())

    /**
     * How many team members are required for review assignment for this team
     */
    def reviewRequestDelegationMemberCount
    : SelectionBuilder[Team, Option[Int]] =
      Field("reviewRequestDelegationMemberCount", OptionOf(Scalar()))

    /**
     * When assigning team members via delegation, whether the entire team should be notified as well.
     */
    def reviewRequestDelegationNotifyTeam: SelectionBuilder[Team, Boolean] =
      Field("reviewRequestDelegationNotifyTeam", Scalar())

    /**
     * The slug corresponding to the team.
     */
    def slug: SelectionBuilder[Team, String] = Field("slug", Scalar())

    /**
     * The HTTP path for this team's teams
     */
    def teamsResourcePath: SelectionBuilder[Team, URI] =
      Field("teamsResourcePath", Scalar())

    /**
     * The HTTP URL for this team's teams
     */
    def teamsUrl: SelectionBuilder[Team, URI] = Field("teamsUrl", Scalar())

    /**
     * Identifies the date and time when the object was last updated.
     */
    def updatedAt: SelectionBuilder[Team, DateTime] =
      Field("updatedAt", Scalar())

    /**
     * The HTTP URL for this team
     */
    def url: SelectionBuilder[Team, URI] = Field("url", Scalar())

    /**
     * Team is adminable by the viewer.
     */
    def viewerCanAdminister: SelectionBuilder[Team, Boolean] =
      Field("viewerCanAdminister", Scalar())

    /**
     * Check if the viewer is able to change their subscription status for the repository.
     */
    def viewerCanSubscribe: SelectionBuilder[Team, Boolean] =
      Field("viewerCanSubscribe", Scalar())

    /**
     * Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
     */
    def viewerSubscription: SelectionBuilder[Team, Option[SubscriptionState]] =
      Field("viewerSubscription", OptionOf(Scalar()))
  }

  type TeamAddMemberAuditEntry

  object TeamAddMemberAuditEntry {

    /**
     * The action name
     */
    def action: SelectionBuilder[TeamAddMemberAuditEntry, String] =
      Field("action", Scalar())

    /**
     * The user who initiated the action
     */
    def actor[A](
                  onBot: SelectionBuilder[Bot, A],
                  onOrganization: SelectionBuilder[Organization, A],
                  onUser: SelectionBuilder[User, A]
                ): SelectionBuilder[TeamAddMemberAuditEntry, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> Obj(onBot),
              "Organization" -> Obj(onOrganization),
              "User" -> Obj(onUser)
            )
          )
        )
      )

    /**
     * The IP address of the actor
     */
    def actorIp: SelectionBuilder[TeamAddMemberAuditEntry, Option[String]] =
      Field("actorIp", OptionOf(Scalar()))

    /**
     * A readable representation of the actor's location
     */
    def actorLocation[A](
                          innerSelection: SelectionBuilder[ActorLocation, A]
                        ): SelectionBuilder[TeamAddMemberAuditEntry, Option[A]] =
      Field("actorLocation", OptionOf(Obj(innerSelection)))

    /**
     * The username of the user who initiated the action
     */
    def actorLogin: SelectionBuilder[TeamAddMemberAuditEntry, Option[String]] =
      Field("actorLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the actor.
     */
    def actorResourcePath
    : SelectionBuilder[TeamAddMemberAuditEntry, Option[URI]] =
      Field("actorResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the actor.
     */
    def actorUrl: SelectionBuilder[TeamAddMemberAuditEntry, Option[URI]] =
      Field("actorUrl", OptionOf(Scalar()))

    /**
     * The time the action was initiated
     */
    def createdAt: SelectionBuilder[TeamAddMemberAuditEntry, PreciseDateTime] =
      Field("createdAt", Scalar())

    def id: SelectionBuilder[TeamAddMemberAuditEntry, String] =
      Field("id", Scalar())

    /**
     * Whether the team was mapped to an LDAP Group.
     */
    def isLdapMapped
    : SelectionBuilder[TeamAddMemberAuditEntry, Option[Boolean]] =
      Field("isLdapMapped", OptionOf(Scalar()))

    /**
     * The corresponding operation type for the action
     */
    def operationType
    : SelectionBuilder[TeamAddMemberAuditEntry, Option[OperationType]] =
      Field("operationType", OptionOf(Scalar()))

    /**
     * The Organization associated with the Audit Entry.
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[TeamAddMemberAuditEntry, Option[A]] =
      Field("organization", OptionOf(Obj(innerSelection)))

    /**
     * The name of the Organization.
     */
    def organizationName
    : SelectionBuilder[TeamAddMemberAuditEntry, Option[String]] =
      Field("organizationName", OptionOf(Scalar()))

    /**
     * The HTTP path for the organization
     */
    def organizationResourcePath
    : SelectionBuilder[TeamAddMemberAuditEntry, Option[URI]] =
      Field("organizationResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the organization
     */
    def organizationUrl
    : SelectionBuilder[TeamAddMemberAuditEntry, Option[URI]] =
      Field("organizationUrl", OptionOf(Scalar()))

    /**
     * The team associated with the action
     */
    def team[A](
                 innerSelection: SelectionBuilder[Team, A]
               ): SelectionBuilder[TeamAddMemberAuditEntry, Option[A]] =
      Field("team", OptionOf(Obj(innerSelection)))

    /**
     * The name of the team
     */
    def teamName: SelectionBuilder[TeamAddMemberAuditEntry, Option[String]] =
      Field("teamName", OptionOf(Scalar()))

    /**
     * The HTTP path for this team
     */
    def teamResourcePath
    : SelectionBuilder[TeamAddMemberAuditEntry, Option[URI]] =
      Field("teamResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for this team
     */
    def teamUrl: SelectionBuilder[TeamAddMemberAuditEntry, Option[URI]] =
      Field("teamUrl", OptionOf(Scalar()))

    /**
     * The user affected by the action
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[TeamAddMemberAuditEntry, Option[A]] =
      Field("user", OptionOf(Obj(innerSelection)))

    /**
     * For actions involving two users, the actor is the initiator and the user is the affected user.
     */
    def userLogin: SelectionBuilder[TeamAddMemberAuditEntry, Option[String]] =
      Field("userLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the user.
     */
    def userResourcePath
    : SelectionBuilder[TeamAddMemberAuditEntry, Option[URI]] =
      Field("userResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the user.
     */
    def userUrl: SelectionBuilder[TeamAddMemberAuditEntry, Option[URI]] =
      Field("userUrl", OptionOf(Scalar()))
  }

  type TeamAddRepositoryAuditEntry

  object TeamAddRepositoryAuditEntry {

    /**
     * The action name
     */
    def action: SelectionBuilder[TeamAddRepositoryAuditEntry, String] =
      Field("action", Scalar())

    /**
     * The user who initiated the action
     */
    def actor[A](
                  onBot: SelectionBuilder[Bot, A],
                  onOrganization: SelectionBuilder[Organization, A],
                  onUser: SelectionBuilder[User, A]
                ): SelectionBuilder[TeamAddRepositoryAuditEntry, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> Obj(onBot),
              "Organization" -> Obj(onOrganization),
              "User" -> Obj(onUser)
            )
          )
        )
      )

    /**
     * The IP address of the actor
     */
    def actorIp: SelectionBuilder[TeamAddRepositoryAuditEntry, Option[String]] =
      Field("actorIp", OptionOf(Scalar()))

    /**
     * A readable representation of the actor's location
     */
    def actorLocation[A](
                          innerSelection: SelectionBuilder[ActorLocation, A]
                        ): SelectionBuilder[TeamAddRepositoryAuditEntry, Option[A]] =
      Field("actorLocation", OptionOf(Obj(innerSelection)))

    /**
     * The username of the user who initiated the action
     */
    def actorLogin
    : SelectionBuilder[TeamAddRepositoryAuditEntry, Option[String]] =
      Field("actorLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the actor.
     */
    def actorResourcePath
    : SelectionBuilder[TeamAddRepositoryAuditEntry, Option[URI]] =
      Field("actorResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the actor.
     */
    def actorUrl: SelectionBuilder[TeamAddRepositoryAuditEntry, Option[URI]] =
      Field("actorUrl", OptionOf(Scalar()))

    /**
     * The time the action was initiated
     */
    def createdAt
    : SelectionBuilder[TeamAddRepositoryAuditEntry, PreciseDateTime] =
      Field("createdAt", Scalar())

    def id: SelectionBuilder[TeamAddRepositoryAuditEntry, String] =
      Field("id", Scalar())

    /**
     * Whether the team was mapped to an LDAP Group.
     */
    def isLdapMapped
    : SelectionBuilder[TeamAddRepositoryAuditEntry, Option[Boolean]] =
      Field("isLdapMapped", OptionOf(Scalar()))

    /**
     * The corresponding operation type for the action
     */
    def operationType
    : SelectionBuilder[TeamAddRepositoryAuditEntry, Option[OperationType]] =
      Field("operationType", OptionOf(Scalar()))

    /**
     * The Organization associated with the Audit Entry.
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[TeamAddRepositoryAuditEntry, Option[A]] =
      Field("organization", OptionOf(Obj(innerSelection)))

    /**
     * The name of the Organization.
     */
    def organizationName
    : SelectionBuilder[TeamAddRepositoryAuditEntry, Option[String]] =
      Field("organizationName", OptionOf(Scalar()))

    /**
     * The HTTP path for the organization
     */
    def organizationResourcePath
    : SelectionBuilder[TeamAddRepositoryAuditEntry, Option[URI]] =
      Field("organizationResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the organization
     */
    def organizationUrl
    : SelectionBuilder[TeamAddRepositoryAuditEntry, Option[URI]] =
      Field("organizationUrl", OptionOf(Scalar()))

    /**
     * The repository associated with the action
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[TeamAddRepositoryAuditEntry, Option[A]] =
      Field("repository", OptionOf(Obj(innerSelection)))

    /**
     * The name of the repository
     */
    def repositoryName
    : SelectionBuilder[TeamAddRepositoryAuditEntry, Option[String]] =
      Field("repositoryName", OptionOf(Scalar()))

    /**
     * The HTTP path for the repository
     */
    def repositoryResourcePath
    : SelectionBuilder[TeamAddRepositoryAuditEntry, Option[URI]] =
      Field("repositoryResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the repository
     */
    def repositoryUrl
    : SelectionBuilder[TeamAddRepositoryAuditEntry, Option[URI]] =
      Field("repositoryUrl", OptionOf(Scalar()))

    /**
     * The team associated with the action
     */
    def team[A](
                 innerSelection: SelectionBuilder[Team, A]
               ): SelectionBuilder[TeamAddRepositoryAuditEntry, Option[A]] =
      Field("team", OptionOf(Obj(innerSelection)))

    /**
     * The name of the team
     */
    def teamName
    : SelectionBuilder[TeamAddRepositoryAuditEntry, Option[String]] =
      Field("teamName", OptionOf(Scalar()))

    /**
     * The HTTP path for this team
     */
    def teamResourcePath
    : SelectionBuilder[TeamAddRepositoryAuditEntry, Option[URI]] =
      Field("teamResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for this team
     */
    def teamUrl: SelectionBuilder[TeamAddRepositoryAuditEntry, Option[URI]] =
      Field("teamUrl", OptionOf(Scalar()))

    /**
     * The user affected by the action
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[TeamAddRepositoryAuditEntry, Option[A]] =
      Field("user", OptionOf(Obj(innerSelection)))

    /**
     * For actions involving two users, the actor is the initiator and the user is the affected user.
     */
    def userLogin
    : SelectionBuilder[TeamAddRepositoryAuditEntry, Option[String]] =
      Field("userLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the user.
     */
    def userResourcePath
    : SelectionBuilder[TeamAddRepositoryAuditEntry, Option[URI]] =
      Field("userResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the user.
     */
    def userUrl: SelectionBuilder[TeamAddRepositoryAuditEntry, Option[URI]] =
      Field("userUrl", OptionOf(Scalar()))
  }

  type TeamChangeParentTeamAuditEntry

  object TeamChangeParentTeamAuditEntry {

    /**
     * The action name
     */
    def action: SelectionBuilder[TeamChangeParentTeamAuditEntry, String] =
      Field("action", Scalar())

    /**
     * The user who initiated the action
     */
    def actor[A](
                  onBot: SelectionBuilder[Bot, A],
                  onOrganization: SelectionBuilder[Organization, A],
                  onUser: SelectionBuilder[User, A]
                ): SelectionBuilder[TeamChangeParentTeamAuditEntry, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> Obj(onBot),
              "Organization" -> Obj(onOrganization),
              "User" -> Obj(onUser)
            )
          )
        )
      )

    /**
     * The IP address of the actor
     */
    def actorIp
    : SelectionBuilder[TeamChangeParentTeamAuditEntry, Option[String]] =
      Field("actorIp", OptionOf(Scalar()))

    /**
     * A readable representation of the actor's location
     */
    def actorLocation[A](
                          innerSelection: SelectionBuilder[ActorLocation, A]
                        ): SelectionBuilder[TeamChangeParentTeamAuditEntry, Option[A]] =
      Field("actorLocation", OptionOf(Obj(innerSelection)))

    /**
     * The username of the user who initiated the action
     */
    def actorLogin
    : SelectionBuilder[TeamChangeParentTeamAuditEntry, Option[String]] =
      Field("actorLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the actor.
     */
    def actorResourcePath
    : SelectionBuilder[TeamChangeParentTeamAuditEntry, Option[URI]] =
      Field("actorResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the actor.
     */
    def actorUrl
    : SelectionBuilder[TeamChangeParentTeamAuditEntry, Option[URI]] =
      Field("actorUrl", OptionOf(Scalar()))

    /**
     * The time the action was initiated
     */
    def createdAt
    : SelectionBuilder[TeamChangeParentTeamAuditEntry, PreciseDateTime] =
      Field("createdAt", Scalar())

    def id: SelectionBuilder[TeamChangeParentTeamAuditEntry, String] =
      Field("id", Scalar())

    /**
     * Whether the team was mapped to an LDAP Group.
     */
    def isLdapMapped
    : SelectionBuilder[TeamChangeParentTeamAuditEntry, Option[Boolean]] =
      Field("isLdapMapped", OptionOf(Scalar()))

    /**
     * The corresponding operation type for the action
     */
    def operationType: SelectionBuilder[TeamChangeParentTeamAuditEntry, Option[
      OperationType
    ]] = Field("operationType", OptionOf(Scalar()))

    /**
     * The Organization associated with the Audit Entry.
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[TeamChangeParentTeamAuditEntry, Option[A]] =
      Field("organization", OptionOf(Obj(innerSelection)))

    /**
     * The name of the Organization.
     */
    def organizationName
    : SelectionBuilder[TeamChangeParentTeamAuditEntry, Option[String]] =
      Field("organizationName", OptionOf(Scalar()))

    /**
     * The HTTP path for the organization
     */
    def organizationResourcePath
    : SelectionBuilder[TeamChangeParentTeamAuditEntry, Option[URI]] =
      Field("organizationResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the organization
     */
    def organizationUrl
    : SelectionBuilder[TeamChangeParentTeamAuditEntry, Option[URI]] =
      Field("organizationUrl", OptionOf(Scalar()))

    /**
     * The new parent team.
     */
    def parentTeam[A](
                       innerSelection: SelectionBuilder[Team, A]
                     ): SelectionBuilder[TeamChangeParentTeamAuditEntry, Option[A]] =
      Field("parentTeam", OptionOf(Obj(innerSelection)))

    /**
     * The name of the new parent team
     */
    def parentTeamName
    : SelectionBuilder[TeamChangeParentTeamAuditEntry, Option[String]] =
      Field("parentTeamName", OptionOf(Scalar()))

    /**
     * The name of the former parent team
     */
    def parentTeamNameWas
    : SelectionBuilder[TeamChangeParentTeamAuditEntry, Option[String]] =
      Field("parentTeamNameWas", OptionOf(Scalar()))

    /**
     * The HTTP path for the parent team
     */
    def parentTeamResourcePath
    : SelectionBuilder[TeamChangeParentTeamAuditEntry, Option[URI]] =
      Field("parentTeamResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the parent team
     */
    def parentTeamUrl
    : SelectionBuilder[TeamChangeParentTeamAuditEntry, Option[URI]] =
      Field("parentTeamUrl", OptionOf(Scalar()))

    /**
     * The former parent team.
     */
    def parentTeamWas[A](
                          innerSelection: SelectionBuilder[Team, A]
                        ): SelectionBuilder[TeamChangeParentTeamAuditEntry, Option[A]] =
      Field("parentTeamWas", OptionOf(Obj(innerSelection)))

    /**
     * The HTTP path for the previous parent team
     */
    def parentTeamWasResourcePath
    : SelectionBuilder[TeamChangeParentTeamAuditEntry, Option[URI]] =
      Field("parentTeamWasResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the previous parent team
     */
    def parentTeamWasUrl
    : SelectionBuilder[TeamChangeParentTeamAuditEntry, Option[URI]] =
      Field("parentTeamWasUrl", OptionOf(Scalar()))

    /**
     * The team associated with the action
     */
    def team[A](
                 innerSelection: SelectionBuilder[Team, A]
               ): SelectionBuilder[TeamChangeParentTeamAuditEntry, Option[A]] =
      Field("team", OptionOf(Obj(innerSelection)))

    /**
     * The name of the team
     */
    def teamName
    : SelectionBuilder[TeamChangeParentTeamAuditEntry, Option[String]] =
      Field("teamName", OptionOf(Scalar()))

    /**
     * The HTTP path for this team
     */
    def teamResourcePath
    : SelectionBuilder[TeamChangeParentTeamAuditEntry, Option[URI]] =
      Field("teamResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for this team
     */
    def teamUrl: SelectionBuilder[TeamChangeParentTeamAuditEntry, Option[URI]] =
      Field("teamUrl", OptionOf(Scalar()))

    /**
     * The user affected by the action
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[TeamChangeParentTeamAuditEntry, Option[A]] =
      Field("user", OptionOf(Obj(innerSelection)))

    /**
     * For actions involving two users, the actor is the initiator and the user is the affected user.
     */
    def userLogin
    : SelectionBuilder[TeamChangeParentTeamAuditEntry, Option[String]] =
      Field("userLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the user.
     */
    def userResourcePath
    : SelectionBuilder[TeamChangeParentTeamAuditEntry, Option[URI]] =
      Field("userResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the user.
     */
    def userUrl: SelectionBuilder[TeamChangeParentTeamAuditEntry, Option[URI]] =
      Field("userUrl", OptionOf(Scalar()))
  }

  type TeamConnection

  object TeamConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[TeamEdge, A]
                ): SelectionBuilder[TeamConnection, Option[List[Option[A]]]] =
      Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[Team, A]
                ): SelectionBuilder[TeamConnection, Option[List[Option[A]]]] =
      Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[TeamConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[TeamConnection, Int] =
      Field("totalCount", Scalar())
  }

  type TeamDiscussion

  object TeamDiscussion {

    /**
     * The actor who authored the comment.
     */
    def author[A](
                   onBot: Option[SelectionBuilder[Bot, A]] = None,
                   onEnterpriseUserAccount: Option[
                     SelectionBuilder[EnterpriseUserAccount, A]
                   ] = None,
                   onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                   onUser: Option[SelectionBuilder[User, A]] = None,
                   onOrganization: Option[SelectionBuilder[Organization, A]] = None
                 ): SelectionBuilder[TeamDiscussion, Option[A]] =
      Field(
        "author",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * Author's association with the discussion's team.
     */
    def authorAssociation
    : SelectionBuilder[TeamDiscussion, CommentAuthorAssociation] =
      Field("authorAssociation", Scalar())

    /**
     * The body as Markdown.
     */
    def body: SelectionBuilder[TeamDiscussion, String] = Field("body", Scalar())

    /**
     * The body rendered to HTML.
     */
    def bodyHTML: SelectionBuilder[TeamDiscussion, HTML] =
      Field("bodyHTML", Scalar())

    /**
     * The body rendered to text.
     */
    def bodyText: SelectionBuilder[TeamDiscussion, String] =
      Field("bodyText", Scalar())

    /**
     * Identifies the discussion body hash.
     */
    def bodyVersion: SelectionBuilder[TeamDiscussion, String] =
      Field("bodyVersion", Scalar())

    /**
     * A list of comments on this discussion.
     */
    def comments[A](
                     after: Option[String] = None,
                     before: Option[String] = None,
                     first: Option[Int] = None,
                     fromComment: Option[Int] = None,
                     last: Option[Int] = None,
                     orderBy: Option[TeamDiscussionCommentOrder] = None
                   )(
                     innerSelection: SelectionBuilder[TeamDiscussionCommentConnection, A]
                   ): SelectionBuilder[TeamDiscussion, A] =
      Field(
        "comments",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("fromComment", fromComment),
          Argument("last", last),
          Argument("orderBy", orderBy)
        )
      )

    /**
     * The HTTP path for discussion comments
     */
    def commentsResourcePath: SelectionBuilder[TeamDiscussion, URI] =
      Field("commentsResourcePath", Scalar())

    /**
     * The HTTP URL for discussion comments
     */
    def commentsUrl: SelectionBuilder[TeamDiscussion, URI] =
      Field("commentsUrl", Scalar())

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[TeamDiscussion, DateTime] =
      Field("createdAt", Scalar())

    /**
     * Check if this comment was created via an email reply.
     */
    def createdViaEmail: SelectionBuilder[TeamDiscussion, Boolean] =
      Field("createdViaEmail", Scalar())

    /**
     * Identifies the primary key from the database.
     */
    def databaseId: SelectionBuilder[TeamDiscussion, Option[Int]] =
      Field("databaseId", OptionOf(Scalar()))

    /**
     * The actor who edited the comment.
     */
    def editor[A](
                   onBot: Option[SelectionBuilder[Bot, A]] = None,
                   onEnterpriseUserAccount: Option[
                     SelectionBuilder[EnterpriseUserAccount, A]
                   ] = None,
                   onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                   onUser: Option[SelectionBuilder[User, A]] = None,
                   onOrganization: Option[SelectionBuilder[Organization, A]] = None
                 ): SelectionBuilder[TeamDiscussion, Option[A]] =
      Field(
        "editor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    def id: SelectionBuilder[TeamDiscussion, String] = Field("id", Scalar())

    /**
     * Check if this comment was edited and includes an edit with the creation data
     */
    def includesCreatedEdit: SelectionBuilder[TeamDiscussion, Boolean] =
      Field("includesCreatedEdit", Scalar())

    /**
     * Whether or not the discussion is pinned.
     */
    def isPinned: SelectionBuilder[TeamDiscussion, Boolean] =
      Field("isPinned", Scalar())

    /**
     * Whether or not the discussion is only visible to team members and org admins.
     */
    def isPrivate: SelectionBuilder[TeamDiscussion, Boolean] =
      Field("isPrivate", Scalar())

    /**
     * The moment the editor made the last edit
     */
    def lastEditedAt: SelectionBuilder[TeamDiscussion, Option[DateTime]] =
      Field("lastEditedAt", OptionOf(Scalar()))

    /**
     * Identifies the discussion within its team.
     */
    def number: SelectionBuilder[TeamDiscussion, Int] =
      Field("number", Scalar())

    /**
     * Identifies when the comment was published at.
     */
    def publishedAt: SelectionBuilder[TeamDiscussion, Option[DateTime]] =
      Field("publishedAt", OptionOf(Scalar()))

    /**
     * A list of reactions grouped by content left on the subject.
     */
    def reactionGroups[A](
                           innerSelection: SelectionBuilder[ReactionGroup, A]
                         ): SelectionBuilder[TeamDiscussion, Option[List[A]]] =
      Field("reactionGroups", OptionOf(ListOf(Obj(innerSelection))))

    /**
     * A list of Reactions left on the Issue.
     */
    def reactions[A](
                      after: Option[String] = None,
                      before: Option[String] = None,
                      content: Option[ReactionContent] = None,
                      first: Option[Int] = None,
                      last: Option[Int] = None,
                      orderBy: Option[ReactionOrder] = None
                    )(
                      innerSelection: SelectionBuilder[ReactionConnection, A]
                    ): SelectionBuilder[TeamDiscussion, A] =
      Field(
        "reactions",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("content", content),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy)
        )
      )

    /**
     * The HTTP path for this discussion
     */
    def resourcePath: SelectionBuilder[TeamDiscussion, URI] =
      Field("resourcePath", Scalar())

    /**
     * The team that defines the context of this discussion.
     */
    def team[A](
                 innerSelection: SelectionBuilder[Team, A]
               ): SelectionBuilder[TeamDiscussion, A] = Field("team", Obj(innerSelection))

    /**
     * The title of the discussion
     */
    def title: SelectionBuilder[TeamDiscussion, String] =
      Field("title", Scalar())

    /**
     * Identifies the date and time when the object was last updated.
     */
    def updatedAt: SelectionBuilder[TeamDiscussion, DateTime] =
      Field("updatedAt", Scalar())

    /**
     * The HTTP URL for this discussion
     */
    def url: SelectionBuilder[TeamDiscussion, URI] = Field("url", Scalar())

    /**
     * A list of edits to this content.
     */
    def userContentEdits[A](
                             after: Option[String] = None,
                             before: Option[String] = None,
                             first: Option[Int] = None,
                             last: Option[Int] = None
                           )(
                             innerSelection: SelectionBuilder[UserContentEditConnection, A]
                           ): SelectionBuilder[TeamDiscussion, Option[A]] =
      Field(
        "userContentEdits",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )

    /**
     * Check if the current viewer can delete this object.
     */
    def viewerCanDelete: SelectionBuilder[TeamDiscussion, Boolean] =
      Field("viewerCanDelete", Scalar())

    /**
     * Whether or not the current viewer can pin this discussion.
     */
    def viewerCanPin: SelectionBuilder[TeamDiscussion, Boolean] =
      Field("viewerCanPin", Scalar())

    /**
     * Can user react to this subject
     */
    def viewerCanReact: SelectionBuilder[TeamDiscussion, Boolean] =
      Field("viewerCanReact", Scalar())

    /**
     * Check if the viewer is able to change their subscription status for the repository.
     */
    def viewerCanSubscribe: SelectionBuilder[TeamDiscussion, Boolean] =
      Field("viewerCanSubscribe", Scalar())

    /**
     * Check if the current viewer can update this object.
     */
    def viewerCanUpdate: SelectionBuilder[TeamDiscussion, Boolean] =
      Field("viewerCanUpdate", Scalar())

    /**
     * Reasons why the current viewer can not update this comment.
     */
    def viewerCannotUpdateReasons
    : SelectionBuilder[TeamDiscussion, List[CommentCannotUpdateReason]] =
      Field("viewerCannotUpdateReasons", ListOf(Scalar()))

    /**
     * Did the viewer author this comment.
     */
    def viewerDidAuthor: SelectionBuilder[TeamDiscussion, Boolean] =
      Field("viewerDidAuthor", Scalar())

    /**
     * Identifies if the viewer is watching, not watching, or ignoring the subscribable entity.
     */
    def viewerSubscription
    : SelectionBuilder[TeamDiscussion, Option[SubscriptionState]] =
      Field("viewerSubscription", OptionOf(Scalar()))
  }

  type TeamDiscussionComment

  object TeamDiscussionComment {

    /**
     * The actor who authored the comment.
     */
    def author[A](
                   onBot: Option[SelectionBuilder[Bot, A]] = None,
                   onEnterpriseUserAccount: Option[
                     SelectionBuilder[EnterpriseUserAccount, A]
                   ] = None,
                   onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                   onUser: Option[SelectionBuilder[User, A]] = None,
                   onOrganization: Option[SelectionBuilder[Organization, A]] = None
                 ): SelectionBuilder[TeamDiscussionComment, Option[A]] =
      Field(
        "author",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * Author's association with the comment's team.
     */
    def authorAssociation
    : SelectionBuilder[TeamDiscussionComment, CommentAuthorAssociation] =
      Field("authorAssociation", Scalar())

    /**
     * The body as Markdown.
     */
    def body: SelectionBuilder[TeamDiscussionComment, String] =
      Field("body", Scalar())

    /**
     * The body rendered to HTML.
     */
    def bodyHTML: SelectionBuilder[TeamDiscussionComment, HTML] =
      Field("bodyHTML", Scalar())

    /**
     * The body rendered to text.
     */
    def bodyText: SelectionBuilder[TeamDiscussionComment, String] =
      Field("bodyText", Scalar())

    /**
     * The current version of the body content.
     */
    def bodyVersion: SelectionBuilder[TeamDiscussionComment, String] =
      Field("bodyVersion", Scalar())

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[TeamDiscussionComment, DateTime] =
      Field("createdAt", Scalar())

    /**
     * Check if this comment was created via an email reply.
     */
    def createdViaEmail: SelectionBuilder[TeamDiscussionComment, Boolean] =
      Field("createdViaEmail", Scalar())

    /**
     * Identifies the primary key from the database.
     */
    def databaseId: SelectionBuilder[TeamDiscussionComment, Option[Int]] =
      Field("databaseId", OptionOf(Scalar()))

    /**
     * The discussion this comment is about.
     */
    def discussion[A](
                       innerSelection: SelectionBuilder[TeamDiscussion, A]
                     ): SelectionBuilder[TeamDiscussionComment, A] =
      Field("discussion", Obj(innerSelection))

    /**
     * The actor who edited the comment.
     */
    def editor[A](
                   onBot: Option[SelectionBuilder[Bot, A]] = None,
                   onEnterpriseUserAccount: Option[
                     SelectionBuilder[EnterpriseUserAccount, A]
                   ] = None,
                   onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                   onUser: Option[SelectionBuilder[User, A]] = None,
                   onOrganization: Option[SelectionBuilder[Organization, A]] = None
                 ): SelectionBuilder[TeamDiscussionComment, Option[A]] =
      Field(
        "editor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    def id: SelectionBuilder[TeamDiscussionComment, String] =
      Field("id", Scalar())

    /**
     * Check if this comment was edited and includes an edit with the creation data
     */
    def includesCreatedEdit: SelectionBuilder[TeamDiscussionComment, Boolean] =
      Field("includesCreatedEdit", Scalar())

    /**
     * The moment the editor made the last edit
     */
    def lastEditedAt
    : SelectionBuilder[TeamDiscussionComment, Option[DateTime]] =
      Field("lastEditedAt", OptionOf(Scalar()))

    /**
     * Identifies the comment number.
     */
    def number: SelectionBuilder[TeamDiscussionComment, Int] =
      Field("number", Scalar())

    /**
     * Identifies when the comment was published at.
     */
    def publishedAt: SelectionBuilder[TeamDiscussionComment, Option[DateTime]] =
      Field("publishedAt", OptionOf(Scalar()))

    /**
     * A list of reactions grouped by content left on the subject.
     */
    def reactionGroups[A](
                           innerSelection: SelectionBuilder[ReactionGroup, A]
                         ): SelectionBuilder[TeamDiscussionComment, Option[List[A]]] =
      Field("reactionGroups", OptionOf(ListOf(Obj(innerSelection))))

    /**
     * A list of Reactions left on the Issue.
     */
    def reactions[A](
                      after: Option[String] = None,
                      before: Option[String] = None,
                      content: Option[ReactionContent] = None,
                      first: Option[Int] = None,
                      last: Option[Int] = None,
                      orderBy: Option[ReactionOrder] = None
                    )(
                      innerSelection: SelectionBuilder[ReactionConnection, A]
                    ): SelectionBuilder[TeamDiscussionComment, A] =
      Field(
        "reactions",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("content", content),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy)
        )
      )

    /**
     * The HTTP path for this comment
     */
    def resourcePath: SelectionBuilder[TeamDiscussionComment, URI] =
      Field("resourcePath", Scalar())

    /**
     * Identifies the date and time when the object was last updated.
     */
    def updatedAt: SelectionBuilder[TeamDiscussionComment, DateTime] =
      Field("updatedAt", Scalar())

    /**
     * The HTTP URL for this comment
     */
    def url: SelectionBuilder[TeamDiscussionComment, URI] =
      Field("url", Scalar())

    /**
     * A list of edits to this content.
     */
    def userContentEdits[A](
                             after: Option[String] = None,
                             before: Option[String] = None,
                             first: Option[Int] = None,
                             last: Option[Int] = None
                           )(
                             innerSelection: SelectionBuilder[UserContentEditConnection, A]
                           ): SelectionBuilder[TeamDiscussionComment, Option[A]] =
      Field(
        "userContentEdits",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )

    /**
     * Check if the current viewer can delete this object.
     */
    def viewerCanDelete: SelectionBuilder[TeamDiscussionComment, Boolean] =
      Field("viewerCanDelete", Scalar())

    /**
     * Can user react to this subject
     */
    def viewerCanReact: SelectionBuilder[TeamDiscussionComment, Boolean] =
      Field("viewerCanReact", Scalar())

    /**
     * Check if the current viewer can update this object.
     */
    def viewerCanUpdate: SelectionBuilder[TeamDiscussionComment, Boolean] =
      Field("viewerCanUpdate", Scalar())

    /**
     * Reasons why the current viewer can not update this comment.
     */
    def viewerCannotUpdateReasons: SelectionBuilder[TeamDiscussionComment, List[
      CommentCannotUpdateReason
    ]] = Field("viewerCannotUpdateReasons", ListOf(Scalar()))

    /**
     * Did the viewer author this comment.
     */
    def viewerDidAuthor: SelectionBuilder[TeamDiscussionComment, Boolean] =
      Field("viewerDidAuthor", Scalar())
  }

  type TeamDiscussionCommentConnection

  object TeamDiscussionCommentConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[TeamDiscussionCommentEdge, A]
                ): SelectionBuilder[TeamDiscussionCommentConnection, Option[
      List[Option[A]]
    ]] = Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[TeamDiscussionComment, A]
                ): SelectionBuilder[TeamDiscussionCommentConnection, Option[
      List[Option[A]]
    ]] = Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[TeamDiscussionCommentConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[TeamDiscussionCommentConnection, Int] =
      Field("totalCount", Scalar())
  }

  type TeamDiscussionCommentEdge

  object TeamDiscussionCommentEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[TeamDiscussionCommentEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[TeamDiscussionComment, A]
               ): SelectionBuilder[TeamDiscussionCommentEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type TeamDiscussionConnection

  object TeamDiscussionConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[TeamDiscussionEdge, A]
                ): SelectionBuilder[TeamDiscussionConnection, Option[List[Option[A]]]] =
      Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[TeamDiscussion, A]
                ): SelectionBuilder[TeamDiscussionConnection, Option[List[Option[A]]]] =
      Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[TeamDiscussionConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[TeamDiscussionConnection, Int] =
      Field("totalCount", Scalar())
  }

  type TeamDiscussionEdge

  object TeamDiscussionEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[TeamDiscussionEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[TeamDiscussion, A]
               ): SelectionBuilder[TeamDiscussionEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type TeamEdge

  object TeamEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[TeamEdge, String] = Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[Team, A]
               ): SelectionBuilder[TeamEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type TeamMemberConnection

  object TeamMemberConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[TeamMemberEdge, A]
                ): SelectionBuilder[TeamMemberConnection, Option[List[Option[A]]]] =
      Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[User, A]
                ): SelectionBuilder[TeamMemberConnection, Option[List[Option[A]]]] =
      Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[TeamMemberConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[TeamMemberConnection, Int] =
      Field("totalCount", Scalar())
  }

  type TeamMemberEdge

  object TeamMemberEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[TeamMemberEdge, String] =
      Field("cursor", Scalar())

    /**
     * The HTTP path to the organization's member access page.
     */
    def memberAccessResourcePath: SelectionBuilder[TeamMemberEdge, URI] =
      Field("memberAccessResourcePath", Scalar())

    /**
     * The HTTP URL to the organization's member access page.
     */
    def memberAccessUrl: SelectionBuilder[TeamMemberEdge, URI] =
      Field("memberAccessUrl", Scalar())

    def node[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[TeamMemberEdge, A] = Field("node", Obj(innerSelection))

    /**
     * The role the member has on the team.
     */
    def role: SelectionBuilder[TeamMemberEdge, TeamMemberRole] =
      Field("role", Scalar())
  }

  type TeamRemoveMemberAuditEntry

  object TeamRemoveMemberAuditEntry {

    /**
     * The action name
     */
    def action: SelectionBuilder[TeamRemoveMemberAuditEntry, String] =
      Field("action", Scalar())

    /**
     * The user who initiated the action
     */
    def actor[A](
                  onBot: SelectionBuilder[Bot, A],
                  onOrganization: SelectionBuilder[Organization, A],
                  onUser: SelectionBuilder[User, A]
                ): SelectionBuilder[TeamRemoveMemberAuditEntry, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> Obj(onBot),
              "Organization" -> Obj(onOrganization),
              "User" -> Obj(onUser)
            )
          )
        )
      )

    /**
     * The IP address of the actor
     */
    def actorIp: SelectionBuilder[TeamRemoveMemberAuditEntry, Option[String]] =
      Field("actorIp", OptionOf(Scalar()))

    /**
     * A readable representation of the actor's location
     */
    def actorLocation[A](
                          innerSelection: SelectionBuilder[ActorLocation, A]
                        ): SelectionBuilder[TeamRemoveMemberAuditEntry, Option[A]] =
      Field("actorLocation", OptionOf(Obj(innerSelection)))

    /**
     * The username of the user who initiated the action
     */
    def actorLogin
    : SelectionBuilder[TeamRemoveMemberAuditEntry, Option[String]] =
      Field("actorLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the actor.
     */
    def actorResourcePath
    : SelectionBuilder[TeamRemoveMemberAuditEntry, Option[URI]] =
      Field("actorResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the actor.
     */
    def actorUrl: SelectionBuilder[TeamRemoveMemberAuditEntry, Option[URI]] =
      Field("actorUrl", OptionOf(Scalar()))

    /**
     * The time the action was initiated
     */
    def createdAt
    : SelectionBuilder[TeamRemoveMemberAuditEntry, PreciseDateTime] =
      Field("createdAt", Scalar())

    def id: SelectionBuilder[TeamRemoveMemberAuditEntry, String] =
      Field("id", Scalar())

    /**
     * Whether the team was mapped to an LDAP Group.
     */
    def isLdapMapped
    : SelectionBuilder[TeamRemoveMemberAuditEntry, Option[Boolean]] =
      Field("isLdapMapped", OptionOf(Scalar()))

    /**
     * The corresponding operation type for the action
     */
    def operationType
    : SelectionBuilder[TeamRemoveMemberAuditEntry, Option[OperationType]] =
      Field("operationType", OptionOf(Scalar()))

    /**
     * The Organization associated with the Audit Entry.
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[TeamRemoveMemberAuditEntry, Option[A]] =
      Field("organization", OptionOf(Obj(innerSelection)))

    /**
     * The name of the Organization.
     */
    def organizationName
    : SelectionBuilder[TeamRemoveMemberAuditEntry, Option[String]] =
      Field("organizationName", OptionOf(Scalar()))

    /**
     * The HTTP path for the organization
     */
    def organizationResourcePath
    : SelectionBuilder[TeamRemoveMemberAuditEntry, Option[URI]] =
      Field("organizationResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the organization
     */
    def organizationUrl
    : SelectionBuilder[TeamRemoveMemberAuditEntry, Option[URI]] =
      Field("organizationUrl", OptionOf(Scalar()))

    /**
     * The team associated with the action
     */
    def team[A](
                 innerSelection: SelectionBuilder[Team, A]
               ): SelectionBuilder[TeamRemoveMemberAuditEntry, Option[A]] =
      Field("team", OptionOf(Obj(innerSelection)))

    /**
     * The name of the team
     */
    def teamName: SelectionBuilder[TeamRemoveMemberAuditEntry, Option[String]] =
      Field("teamName", OptionOf(Scalar()))

    /**
     * The HTTP path for this team
     */
    def teamResourcePath
    : SelectionBuilder[TeamRemoveMemberAuditEntry, Option[URI]] =
      Field("teamResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for this team
     */
    def teamUrl: SelectionBuilder[TeamRemoveMemberAuditEntry, Option[URI]] =
      Field("teamUrl", OptionOf(Scalar()))

    /**
     * The user affected by the action
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[TeamRemoveMemberAuditEntry, Option[A]] =
      Field("user", OptionOf(Obj(innerSelection)))

    /**
     * For actions involving two users, the actor is the initiator and the user is the affected user.
     */
    def userLogin
    : SelectionBuilder[TeamRemoveMemberAuditEntry, Option[String]] =
      Field("userLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the user.
     */
    def userResourcePath
    : SelectionBuilder[TeamRemoveMemberAuditEntry, Option[URI]] =
      Field("userResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the user.
     */
    def userUrl: SelectionBuilder[TeamRemoveMemberAuditEntry, Option[URI]] =
      Field("userUrl", OptionOf(Scalar()))
  }

  type TeamRemoveRepositoryAuditEntry

  object TeamRemoveRepositoryAuditEntry {

    /**
     * The action name
     */
    def action: SelectionBuilder[TeamRemoveRepositoryAuditEntry, String] =
      Field("action", Scalar())

    /**
     * The user who initiated the action
     */
    def actor[A](
                  onBot: SelectionBuilder[Bot, A],
                  onOrganization: SelectionBuilder[Organization, A],
                  onUser: SelectionBuilder[User, A]
                ): SelectionBuilder[TeamRemoveRepositoryAuditEntry, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> Obj(onBot),
              "Organization" -> Obj(onOrganization),
              "User" -> Obj(onUser)
            )
          )
        )
      )

    /**
     * The IP address of the actor
     */
    def actorIp
    : SelectionBuilder[TeamRemoveRepositoryAuditEntry, Option[String]] =
      Field("actorIp", OptionOf(Scalar()))

    /**
     * A readable representation of the actor's location
     */
    def actorLocation[A](
                          innerSelection: SelectionBuilder[ActorLocation, A]
                        ): SelectionBuilder[TeamRemoveRepositoryAuditEntry, Option[A]] =
      Field("actorLocation", OptionOf(Obj(innerSelection)))

    /**
     * The username of the user who initiated the action
     */
    def actorLogin
    : SelectionBuilder[TeamRemoveRepositoryAuditEntry, Option[String]] =
      Field("actorLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the actor.
     */
    def actorResourcePath
    : SelectionBuilder[TeamRemoveRepositoryAuditEntry, Option[URI]] =
      Field("actorResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the actor.
     */
    def actorUrl
    : SelectionBuilder[TeamRemoveRepositoryAuditEntry, Option[URI]] =
      Field("actorUrl", OptionOf(Scalar()))

    /**
     * The time the action was initiated
     */
    def createdAt
    : SelectionBuilder[TeamRemoveRepositoryAuditEntry, PreciseDateTime] =
      Field("createdAt", Scalar())

    def id: SelectionBuilder[TeamRemoveRepositoryAuditEntry, String] =
      Field("id", Scalar())

    /**
     * Whether the team was mapped to an LDAP Group.
     */
    def isLdapMapped
    : SelectionBuilder[TeamRemoveRepositoryAuditEntry, Option[Boolean]] =
      Field("isLdapMapped", OptionOf(Scalar()))

    /**
     * The corresponding operation type for the action
     */
    def operationType: SelectionBuilder[TeamRemoveRepositoryAuditEntry, Option[
      OperationType
    ]] = Field("operationType", OptionOf(Scalar()))

    /**
     * The Organization associated with the Audit Entry.
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[TeamRemoveRepositoryAuditEntry, Option[A]] =
      Field("organization", OptionOf(Obj(innerSelection)))

    /**
     * The name of the Organization.
     */
    def organizationName
    : SelectionBuilder[TeamRemoveRepositoryAuditEntry, Option[String]] =
      Field("organizationName", OptionOf(Scalar()))

    /**
     * The HTTP path for the organization
     */
    def organizationResourcePath
    : SelectionBuilder[TeamRemoveRepositoryAuditEntry, Option[URI]] =
      Field("organizationResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the organization
     */
    def organizationUrl
    : SelectionBuilder[TeamRemoveRepositoryAuditEntry, Option[URI]] =
      Field("organizationUrl", OptionOf(Scalar()))

    /**
     * The repository associated with the action
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[TeamRemoveRepositoryAuditEntry, Option[A]] =
      Field("repository", OptionOf(Obj(innerSelection)))

    /**
     * The name of the repository
     */
    def repositoryName
    : SelectionBuilder[TeamRemoveRepositoryAuditEntry, Option[String]] =
      Field("repositoryName", OptionOf(Scalar()))

    /**
     * The HTTP path for the repository
     */
    def repositoryResourcePath
    : SelectionBuilder[TeamRemoveRepositoryAuditEntry, Option[URI]] =
      Field("repositoryResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the repository
     */
    def repositoryUrl
    : SelectionBuilder[TeamRemoveRepositoryAuditEntry, Option[URI]] =
      Field("repositoryUrl", OptionOf(Scalar()))

    /**
     * The team associated with the action
     */
    def team[A](
                 innerSelection: SelectionBuilder[Team, A]
               ): SelectionBuilder[TeamRemoveRepositoryAuditEntry, Option[A]] =
      Field("team", OptionOf(Obj(innerSelection)))

    /**
     * The name of the team
     */
    def teamName
    : SelectionBuilder[TeamRemoveRepositoryAuditEntry, Option[String]] =
      Field("teamName", OptionOf(Scalar()))

    /**
     * The HTTP path for this team
     */
    def teamResourcePath
    : SelectionBuilder[TeamRemoveRepositoryAuditEntry, Option[URI]] =
      Field("teamResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for this team
     */
    def teamUrl: SelectionBuilder[TeamRemoveRepositoryAuditEntry, Option[URI]] =
      Field("teamUrl", OptionOf(Scalar()))

    /**
     * The user affected by the action
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[TeamRemoveRepositoryAuditEntry, Option[A]] =
      Field("user", OptionOf(Obj(innerSelection)))

    /**
     * For actions involving two users, the actor is the initiator and the user is the affected user.
     */
    def userLogin
    : SelectionBuilder[TeamRemoveRepositoryAuditEntry, Option[String]] =
      Field("userLogin", OptionOf(Scalar()))

    /**
     * The HTTP path for the user.
     */
    def userResourcePath
    : SelectionBuilder[TeamRemoveRepositoryAuditEntry, Option[URI]] =
      Field("userResourcePath", OptionOf(Scalar()))

    /**
     * The HTTP URL for the user.
     */
    def userUrl: SelectionBuilder[TeamRemoveRepositoryAuditEntry, Option[URI]] =
      Field("userUrl", OptionOf(Scalar()))
  }

  type TeamRepositoryConnection

  object TeamRepositoryConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[TeamRepositoryEdge, A]
                ): SelectionBuilder[TeamRepositoryConnection, Option[List[Option[A]]]] =
      Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[Repository, A]
                ): SelectionBuilder[TeamRepositoryConnection, Option[List[Option[A]]]] =
      Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[TeamRepositoryConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[TeamRepositoryConnection, Int] =
      Field("totalCount", Scalar())
  }

  type TeamRepositoryEdge

  object TeamRepositoryEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[TeamRepositoryEdge, String] =
      Field("cursor", Scalar())

    def node[A](
                 innerSelection: SelectionBuilder[Repository, A]
               ): SelectionBuilder[TeamRepositoryEdge, A] =
      Field("node", Obj(innerSelection))

    /**
     * The permission level the team has on the repository
     *
     * *Upcoming Change on 2020-10-01 UTC**
     * *Description:** Type for `permission` will change from `RepositoryPermission!` to `String`.
     * *Reason:** This field may return additional values
     */
    def permission: SelectionBuilder[TeamRepositoryEdge, RepositoryPermission] =
      Field("permission", Scalar())
  }

  type TextMatch

  object TextMatch {

    /**
     * The specific text fragment within the property matched on.
     */
    def fragment: SelectionBuilder[TextMatch, String] =
      Field("fragment", Scalar())

    /**
     * Highlights within the matched fragment.
     */
    def highlights[A](
                       innerSelection: SelectionBuilder[TextMatchHighlight, A]
                     ): SelectionBuilder[TextMatch, List[A]] =
      Field("highlights", ListOf(Obj(innerSelection)))

    /**
     * The property matched on.
     */
    def property: SelectionBuilder[TextMatch, String] =
      Field("property", Scalar())
  }

  type TextMatchHighlight

  object TextMatchHighlight {

    /**
     * The indice in the fragment where the matched text begins.
     */
    def beginIndice: SelectionBuilder[TextMatchHighlight, Int] =
      Field("beginIndice", Scalar())

    /**
     * The indice in the fragment where the matched text ends.
     */
    def endIndice: SelectionBuilder[TextMatchHighlight, Int] =
      Field("endIndice", Scalar())

    /**
     * The text matched.
     */
    def text: SelectionBuilder[TextMatchHighlight, String] =
      Field("text", Scalar())
  }

  type Topic

  object Topic {
    def id: SelectionBuilder[Topic, String] = Field("id", Scalar())

    /**
     * The topic's name.
     */
    def name: SelectionBuilder[Topic, String] = Field("name", Scalar())

    /**
     * A list of related topics, including aliases of this topic, sorted with the most relevant
     * first. Returns up to 10 Topics.
     */
    def relatedTopics[A](first: Option[Int] = None)(
      innerSelection: SelectionBuilder[Topic, A]
    ): SelectionBuilder[Topic, List[A]] =
      Field(
        "relatedTopics",
        ListOf(Obj(innerSelection)),
        arguments = List(Argument("first", first))
      )

    /**
     * A list of users who have starred this starrable.
     */
    def stargazers[A](
                       after: Option[String] = None,
                       before: Option[String] = None,
                       first: Option[Int] = None,
                       last: Option[Int] = None,
                       orderBy: Option[StarOrder] = None
                     )(
                       innerSelection: SelectionBuilder[StargazerConnection, A]
                     ): SelectionBuilder[Topic, A] =
      Field(
        "stargazers",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy)
        )
      )

    /**
     * Returns a boolean indicating whether the viewing user has starred this starrable.
     */
    def viewerHasStarred: SelectionBuilder[Topic, Boolean] =
      Field("viewerHasStarred", Scalar())
  }

  type TransferIssuePayload

  object TransferIssuePayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[TransferIssuePayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The issue that was transferred
     */
    def issue[A](
                  innerSelection: SelectionBuilder[Issue, A]
                ): SelectionBuilder[TransferIssuePayload, Option[A]] =
      Field("issue", OptionOf(Obj(innerSelection)))
  }

  type TransferredEvent

  object TransferredEvent {

    /**
     * Identifies the actor who performed the event.
     */
    def actor[A](
                  onBot: Option[SelectionBuilder[Bot, A]] = None,
                  onEnterpriseUserAccount: Option[
                    SelectionBuilder[EnterpriseUserAccount, A]
                  ] = None,
                  onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                  onUser: Option[SelectionBuilder[User, A]] = None,
                  onOrganization: Option[SelectionBuilder[Organization, A]] = None
                ): SelectionBuilder[TransferredEvent, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[TransferredEvent, DateTime] =
      Field("createdAt", Scalar())

    /**
     * The repository this came from
     */
    def fromRepository[A](
                           innerSelection: SelectionBuilder[Repository, A]
                         ): SelectionBuilder[TransferredEvent, Option[A]] =
      Field("fromRepository", OptionOf(Obj(innerSelection)))

    def id: SelectionBuilder[TransferredEvent, String] = Field("id", Scalar())

    /**
     * Identifies the issue associated with the event.
     */
    def issue[A](
                  innerSelection: SelectionBuilder[Issue, A]
                ): SelectionBuilder[TransferredEvent, A] =
      Field("issue", Obj(innerSelection))
  }

  type Tree

  object Tree {

    /**
     * An abbreviated version of the Git object ID
     */
    def abbreviatedOid: SelectionBuilder[Tree, String] =
      Field("abbreviatedOid", Scalar())

    /**
     * The HTTP path for this Git object
     */
    def commitResourcePath: SelectionBuilder[Tree, URI] =
      Field("commitResourcePath", Scalar())

    /**
     * The HTTP URL for this Git object
     */
    def commitUrl: SelectionBuilder[Tree, URI] = Field("commitUrl", Scalar())

    /**
     * A list of tree entries.
     */
    def entries[A](
                    innerSelection: SelectionBuilder[TreeEntry, A]
                  ): SelectionBuilder[Tree, Option[List[A]]] =
      Field("entries", OptionOf(ListOf(Obj(innerSelection))))

    def id: SelectionBuilder[Tree, String] = Field("id", Scalar())

    /**
     * The Git object ID
     */
    def oid: SelectionBuilder[Tree, GitObjectID] = Field("oid", Scalar())

    /**
     * The Repository the Git object belongs to
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[Tree, A] = Field("repository", Obj(innerSelection))
  }

  type TreeEntry

  object TreeEntry {

    /**
     * The extension of the file
     */
    def extension: SelectionBuilder[TreeEntry, Option[String]] =
      Field("extension", OptionOf(Scalar()))

    /**
     * Whether or not this tree entry is generated
     */
    def isGenerated: SelectionBuilder[TreeEntry, Boolean] =
      Field("isGenerated", Scalar())

    /**
     * Entry file mode.
     */
    def mode: SelectionBuilder[TreeEntry, Int] = Field("mode", Scalar())

    /**
     * Entry file name.
     */
    def name: SelectionBuilder[TreeEntry, String] = Field("name", Scalar())

    /**
     * Entry file object.
     */
    def `object`[A](
                     onCommit: Option[SelectionBuilder[Commit, A]] = None,
                     onTree: Option[SelectionBuilder[Tree, A]] = None,
                     onBlob: Option[SelectionBuilder[Blob, A]] = None,
                     onTag: Option[SelectionBuilder[Tag, A]] = None
                   ): SelectionBuilder[TreeEntry, Option[A]] =
      Field(
        "object",
        OptionOf(
          ChoiceOf(
            Map(
              "Commit" -> onCommit,
              "Tree" -> onTree,
              "Blob" -> onBlob,
              "Tag" -> onTag
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * Entry file Git object ID.
     */
    def oid: SelectionBuilder[TreeEntry, GitObjectID] = Field("oid", Scalar())

    /**
     * The full path of the file.
     */
    def path: SelectionBuilder[TreeEntry, Option[String]] =
      Field("path", OptionOf(Scalar()))

    /**
     * The Repository the tree entry belongs to
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[TreeEntry, A] = Field("repository", Obj(innerSelection))

    /**
     * If the TreeEntry is for a directory occupied by a submodule project, this returns the corresponding submodule
     */
    def submodule[A](
                      innerSelection: SelectionBuilder[Submodule, A]
                    ): SelectionBuilder[TreeEntry, Option[A]] =
      Field("submodule", OptionOf(Obj(innerSelection)))

    /**
     * Entry file type.
     */
    def `type`: SelectionBuilder[TreeEntry, String] = Field("type", Scalar())
  }

  type UnarchiveRepositoryPayload

  object UnarchiveRepositoryPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[UnarchiveRepositoryPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The repository that was unarchived.
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[UnarchiveRepositoryPayload, Option[A]] =
      Field("repository", OptionOf(Obj(innerSelection)))
  }

  type UnassignedEvent

  object UnassignedEvent {

    /**
     * Identifies the actor who performed the event.
     */
    def actor[A](
                  onBot: Option[SelectionBuilder[Bot, A]] = None,
                  onEnterpriseUserAccount: Option[
                    SelectionBuilder[EnterpriseUserAccount, A]
                  ] = None,
                  onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                  onUser: Option[SelectionBuilder[User, A]] = None,
                  onOrganization: Option[SelectionBuilder[Organization, A]] = None
                ): SelectionBuilder[UnassignedEvent, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * Identifies the assignable associated with the event.
     */
    def assignable[A](
                       onIssue: Option[SelectionBuilder[Issue, A]] = None,
                       onPullRequest: Option[SelectionBuilder[PullRequest, A]] = None
                     ): SelectionBuilder[UnassignedEvent, A] =
      Field(
        "assignable",
        ChoiceOf(
          Map("Issue" -> onIssue, "PullRequest" -> onPullRequest).collect {
            case (k, Some(v)) => k -> Obj(v)
          }
        )
      )

    /**
     * Identifies the user or mannequin that was unassigned.
     */
    def assignee[A](
                     onBot: SelectionBuilder[Bot, A],
                     onMannequin: SelectionBuilder[Mannequin, A],
                     onOrganization: SelectionBuilder[Organization, A],
                     onUser: SelectionBuilder[User, A]
                   ): SelectionBuilder[UnassignedEvent, Option[A]] =
      Field(
        "assignee",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> Obj(onBot),
              "Mannequin" -> Obj(onMannequin),
              "Organization" -> Obj(onOrganization),
              "User" -> Obj(onUser)
            )
          )
        )
      )

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[UnassignedEvent, DateTime] =
      Field("createdAt", Scalar())

    def id: SelectionBuilder[UnassignedEvent, String] = Field("id", Scalar())

    /**
     * Identifies the subject (user) who was unassigned.
     */
    @deprecated(
      "Assignees can now be mannequins. Use the `assignee` field instead. Removal on 2020-01-01 UTC.",
      ""
    )
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[UnassignedEvent, Option[A]] =
      Field("user", OptionOf(Obj(innerSelection)))
  }

  type UnfollowUserPayload

  object UnfollowUserPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[UnfollowUserPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The user that was unfollowed.
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[UnfollowUserPayload, Option[A]] =
      Field("user", OptionOf(Obj(innerSelection)))
  }

  type UnknownSignature

  object UnknownSignature {

    /**
     * Email used to sign this object.
     */
    def email: SelectionBuilder[UnknownSignature, String] =
      Field("email", Scalar())

    /**
     * True if the signature is valid and verified by GitHub.
     */
    def isValid: SelectionBuilder[UnknownSignature, Boolean] =
      Field("isValid", Scalar())

    /**
     * Payload for GPG signing object. Raw ODB object without the signature header.
     */
    def payload: SelectionBuilder[UnknownSignature, String] =
      Field("payload", Scalar())

    /**
     * ASCII-armored signature header from object.
     */
    def signature: SelectionBuilder[UnknownSignature, String] =
      Field("signature", Scalar())

    /**
     * GitHub user corresponding to the email signing this commit.
     */
    def signer[A](
                   innerSelection: SelectionBuilder[User, A]
                 ): SelectionBuilder[UnknownSignature, Option[A]] =
      Field("signer", OptionOf(Obj(innerSelection)))

    /**
     * The state of this signature. `VALID` if signature is valid and verified by
     * GitHub, otherwise represents reason why signature is considered invalid.
     */
    def state: SelectionBuilder[UnknownSignature, GitSignatureState] =
      Field("state", Scalar())

    /**
     * True if the signature was made with GitHub's signing key.
     */
    def wasSignedByGitHub: SelectionBuilder[UnknownSignature, Boolean] =
      Field("wasSignedByGitHub", Scalar())
  }

  type UnlabeledEvent

  object UnlabeledEvent {

    /**
     * Identifies the actor who performed the event.
     */
    def actor[A](
                  onBot: Option[SelectionBuilder[Bot, A]] = None,
                  onEnterpriseUserAccount: Option[
                    SelectionBuilder[EnterpriseUserAccount, A]
                  ] = None,
                  onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                  onUser: Option[SelectionBuilder[User, A]] = None,
                  onOrganization: Option[SelectionBuilder[Organization, A]] = None
                ): SelectionBuilder[UnlabeledEvent, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[UnlabeledEvent, DateTime] =
      Field("createdAt", Scalar())

    def id: SelectionBuilder[UnlabeledEvent, String] = Field("id", Scalar())

    /**
     * Identifies the label associated with the 'unlabeled' event.
     */
    def label[A](
                  innerSelection: SelectionBuilder[Label, A]
                ): SelectionBuilder[UnlabeledEvent, A] = Field("label", Obj(innerSelection))

    /**
     * Identifies the `Labelable` associated with the event.
     */
    def labelable[A](
                      onIssue: Option[SelectionBuilder[Issue, A]] = None,
                      onPullRequest: Option[SelectionBuilder[PullRequest, A]] = None
                    ): SelectionBuilder[UnlabeledEvent, A] =
      Field(
        "labelable",
        ChoiceOf(
          Map("Issue" -> onIssue, "PullRequest" -> onPullRequest).collect {
            case (k, Some(v)) => k -> Obj(v)
          }
        )
      )
  }

  type UnlinkRepositoryFromProjectPayload

  object UnlinkRepositoryFromProjectPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[UnlinkRepositoryFromProjectPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The linked Project.
     */
    def project[A](
                    innerSelection: SelectionBuilder[Project, A]
                  ): SelectionBuilder[UnlinkRepositoryFromProjectPayload, Option[A]] =
      Field("project", OptionOf(Obj(innerSelection)))

    /**
     * The linked Repository.
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[UnlinkRepositoryFromProjectPayload, Option[A]] =
      Field("repository", OptionOf(Obj(innerSelection)))
  }

  type UnlockLockablePayload

  object UnlockLockablePayload {

    /**
     * Identifies the actor who performed the event.
     */
    def actor[A](
                  onBot: Option[SelectionBuilder[Bot, A]] = None,
                  onEnterpriseUserAccount: Option[
                    SelectionBuilder[EnterpriseUserAccount, A]
                  ] = None,
                  onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                  onUser: Option[SelectionBuilder[User, A]] = None,
                  onOrganization: Option[SelectionBuilder[Organization, A]] = None
                ): SelectionBuilder[UnlockLockablePayload, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[UnlockLockablePayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The item that was unlocked.
     */
    def unlockedRecord[A](
                           onIssue: Option[SelectionBuilder[Issue, A]] = None,
                           onPullRequest: Option[SelectionBuilder[PullRequest, A]] = None
                         ): SelectionBuilder[UnlockLockablePayload, Option[A]] =
      Field(
        "unlockedRecord",
        OptionOf(
          ChoiceOf(
            Map("Issue" -> onIssue, "PullRequest" -> onPullRequest).collect {
              case (k, Some(v)) => k -> Obj(v)
            }
          )
        )
      )
  }

  type UnlockedEvent

  object UnlockedEvent {

    /**
     * Identifies the actor who performed the event.
     */
    def actor[A](
                  onBot: Option[SelectionBuilder[Bot, A]] = None,
                  onEnterpriseUserAccount: Option[
                    SelectionBuilder[EnterpriseUserAccount, A]
                  ] = None,
                  onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                  onUser: Option[SelectionBuilder[User, A]] = None,
                  onOrganization: Option[SelectionBuilder[Organization, A]] = None
                ): SelectionBuilder[UnlockedEvent, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[UnlockedEvent, DateTime] =
      Field("createdAt", Scalar())

    def id: SelectionBuilder[UnlockedEvent, String] = Field("id", Scalar())

    /**
     * Object that was unlocked.
     */
    def lockable[A](
                     onIssue: Option[SelectionBuilder[Issue, A]] = None,
                     onPullRequest: Option[SelectionBuilder[PullRequest, A]] = None
                   ): SelectionBuilder[UnlockedEvent, A] =
      Field(
        "lockable",
        ChoiceOf(
          Map("Issue" -> onIssue, "PullRequest" -> onPullRequest).collect {
            case (k, Some(v)) => k -> Obj(v)
          }
        )
      )
  }

  type UnmarkFileAsViewedPayload

  object UnmarkFileAsViewedPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[UnmarkFileAsViewedPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The updated pull request.
     */
    def pullRequest[A](
                        innerSelection: SelectionBuilder[PullRequest, A]
                      ): SelectionBuilder[UnmarkFileAsViewedPayload, Option[A]] =
      Field("pullRequest", OptionOf(Obj(innerSelection)))
  }

  type UnmarkIssueAsDuplicatePayload

  object UnmarkIssueAsDuplicatePayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[UnmarkIssueAsDuplicatePayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The issue or pull request that was marked as a duplicate.
     */
    def duplicate[A](
                      onIssue: SelectionBuilder[Issue, A],
                      onPullRequest: SelectionBuilder[PullRequest, A]
                    ): SelectionBuilder[UnmarkIssueAsDuplicatePayload, Option[A]] =
      Field(
        "duplicate",
        OptionOf(
          ChoiceOf(
            Map("Issue" -> Obj(onIssue), "PullRequest" -> Obj(onPullRequest))
          )
        )
      )
  }

  type UnmarkedAsDuplicateEvent

  object UnmarkedAsDuplicateEvent {

    /**
     * Identifies the actor who performed the event.
     */
    def actor[A](
                  onBot: Option[SelectionBuilder[Bot, A]] = None,
                  onEnterpriseUserAccount: Option[
                    SelectionBuilder[EnterpriseUserAccount, A]
                  ] = None,
                  onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                  onUser: Option[SelectionBuilder[User, A]] = None,
                  onOrganization: Option[SelectionBuilder[Organization, A]] = None
                ): SelectionBuilder[UnmarkedAsDuplicateEvent, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * The authoritative issue or pull request which has been duplicated by another.
     */
    def canonical[A](
                      onIssue: SelectionBuilder[Issue, A],
                      onPullRequest: SelectionBuilder[PullRequest, A]
                    ): SelectionBuilder[UnmarkedAsDuplicateEvent, Option[A]] =
      Field(
        "canonical",
        OptionOf(
          ChoiceOf(
            Map("Issue" -> Obj(onIssue), "PullRequest" -> Obj(onPullRequest))
          )
        )
      )

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[UnmarkedAsDuplicateEvent, DateTime] =
      Field("createdAt", Scalar())

    /**
     * The issue or pull request which has been marked as a duplicate of another.
     */
    def duplicate[A](
                      onIssue: SelectionBuilder[Issue, A],
                      onPullRequest: SelectionBuilder[PullRequest, A]
                    ): SelectionBuilder[UnmarkedAsDuplicateEvent, Option[A]] =
      Field(
        "duplicate",
        OptionOf(
          ChoiceOf(
            Map("Issue" -> Obj(onIssue), "PullRequest" -> Obj(onPullRequest))
          )
        )
      )

    def id: SelectionBuilder[UnmarkedAsDuplicateEvent, String] =
      Field("id", Scalar())

    /**
     * Canonical and duplicate belong to different repositories.
     */
    def isCrossRepository: SelectionBuilder[UnmarkedAsDuplicateEvent, Boolean] =
      Field("isCrossRepository", Scalar())
  }

  type UnminimizeCommentPayload

  object UnminimizeCommentPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[UnminimizeCommentPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The comment that was unminimized.
     */
    def unminimizedComment[A](
                               onIssueComment: Option[SelectionBuilder[IssueComment, A]] = None,
                               onPullRequestReviewComment: Option[
                                 SelectionBuilder[PullRequestReviewComment, A]
                               ] = None,
                               onGistComment: Option[SelectionBuilder[GistComment, A]] = None,
                               onCommitComment: Option[SelectionBuilder[CommitComment, A]] = None
                             ): SelectionBuilder[UnminimizeCommentPayload, Option[A]] =
      Field(
        "unminimizedComment",
        OptionOf(
          ChoiceOf(
            Map(
              "IssueComment" -> onIssueComment,
              "PullRequestReviewComment" -> onPullRequestReviewComment,
              "GistComment" -> onGistComment,
              "CommitComment" -> onCommitComment
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )
  }

  type UnpinIssuePayload

  object UnpinIssuePayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId: SelectionBuilder[UnpinIssuePayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The issue that was unpinned
     */
    def issue[A](
                  innerSelection: SelectionBuilder[Issue, A]
                ): SelectionBuilder[UnpinIssuePayload, Option[A]] =
      Field("issue", OptionOf(Obj(innerSelection)))
  }

  type UnpinnedEvent

  object UnpinnedEvent {

    /**
     * Identifies the actor who performed the event.
     */
    def actor[A](
                  onBot: Option[SelectionBuilder[Bot, A]] = None,
                  onEnterpriseUserAccount: Option[
                    SelectionBuilder[EnterpriseUserAccount, A]
                  ] = None,
                  onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                  onUser: Option[SelectionBuilder[User, A]] = None,
                  onOrganization: Option[SelectionBuilder[Organization, A]] = None
                ): SelectionBuilder[UnpinnedEvent, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[UnpinnedEvent, DateTime] =
      Field("createdAt", Scalar())

    def id: SelectionBuilder[UnpinnedEvent, String] = Field("id", Scalar())

    /**
     * Identifies the issue associated with the event.
     */
    def issue[A](
                  innerSelection: SelectionBuilder[Issue, A]
                ): SelectionBuilder[UnpinnedEvent, A] = Field("issue", Obj(innerSelection))
  }

  type UnresolveReviewThreadPayload

  object UnresolveReviewThreadPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[UnresolveReviewThreadPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The thread to resolve.
     */
    def thread[A](
                   innerSelection: SelectionBuilder[PullRequestReviewThread, A]
                 ): SelectionBuilder[UnresolveReviewThreadPayload, Option[A]] =
      Field("thread", OptionOf(Obj(innerSelection)))
  }

  type UnsubscribedEvent

  object UnsubscribedEvent {

    /**
     * Identifies the actor who performed the event.
     */
    def actor[A](
                  onBot: Option[SelectionBuilder[Bot, A]] = None,
                  onEnterpriseUserAccount: Option[
                    SelectionBuilder[EnterpriseUserAccount, A]
                  ] = None,
                  onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                  onUser: Option[SelectionBuilder[User, A]] = None,
                  onOrganization: Option[SelectionBuilder[Organization, A]] = None
                ): SelectionBuilder[UnsubscribedEvent, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[UnsubscribedEvent, DateTime] =
      Field("createdAt", Scalar())

    def id: SelectionBuilder[UnsubscribedEvent, String] = Field("id", Scalar())

    /**
     * Object referenced by event.
     */
    def subscribable[A](
                         onCommit: Option[SelectionBuilder[Commit, A]] = None,
                         onTeam: Option[SelectionBuilder[Team, A]] = None,
                         onRepository: Option[SelectionBuilder[Repository, A]] = None,
                         onTeamDiscussion: Option[SelectionBuilder[TeamDiscussion, A]] = None,
                         onIssue: Option[SelectionBuilder[Issue, A]] = None,
                         onPullRequest: Option[SelectionBuilder[PullRequest, A]] = None
                       ): SelectionBuilder[UnsubscribedEvent, A] =
      Field(
        "subscribable",
        ChoiceOf(
          Map(
            "Commit" -> onCommit,
            "Team" -> onTeam,
            "Repository" -> onRepository,
            "TeamDiscussion" -> onTeamDiscussion,
            "Issue" -> onIssue,
            "PullRequest" -> onPullRequest
          ).collect { case (k, Some(v)) => k -> Obj(v) }
        )
      )
  }

  type UpdateBranchProtectionRulePayload

  object UpdateBranchProtectionRulePayload {

    /**
     * The newly created BranchProtectionRule.
     */
    def branchProtectionRule[A](
                                 innerSelection: SelectionBuilder[BranchProtectionRule, A]
                               ): SelectionBuilder[UpdateBranchProtectionRulePayload, Option[A]] =
      Field("branchProtectionRule", OptionOf(Obj(innerSelection)))

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[UpdateBranchProtectionRulePayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))
  }

  type UpdateCheckRunPayload

  object UpdateCheckRunPayload {

    /**
     * The updated check run.
     */
    def checkRun[A](
                     innerSelection: SelectionBuilder[CheckRun, A]
                   ): SelectionBuilder[UpdateCheckRunPayload, Option[A]] =
      Field("checkRun", OptionOf(Obj(innerSelection)))

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[UpdateCheckRunPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))
  }

  type UpdateCheckSuitePreferencesPayload

  object UpdateCheckSuitePreferencesPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[UpdateCheckSuitePreferencesPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The updated repository.
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[UpdateCheckSuitePreferencesPayload, Option[A]] =
      Field("repository", OptionOf(Obj(innerSelection)))
  }

  type UpdateEnterpriseActionExecutionCapabilitySettingPayload

  object UpdateEnterpriseActionExecutionCapabilitySettingPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId: SelectionBuilder[
      UpdateEnterpriseActionExecutionCapabilitySettingPayload,
      Option[String]
    ] = Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The enterprise with the updated action execution capability setting.
     */
    def enterprise[A](
                       innerSelection: SelectionBuilder[Enterprise, A]
                     ): SelectionBuilder[
      UpdateEnterpriseActionExecutionCapabilitySettingPayload,
      Option[A]
    ] = Field("enterprise", OptionOf(Obj(innerSelection)))

    /**
     * A message confirming the result of updating the action execution capability setting.
     */
    def message: SelectionBuilder[
      UpdateEnterpriseActionExecutionCapabilitySettingPayload,
      Option[String]
    ] = Field("message", OptionOf(Scalar()))
  }

  type UpdateEnterpriseAdministratorRolePayload

  object UpdateEnterpriseAdministratorRolePayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[UpdateEnterpriseAdministratorRolePayload, Option[
      String
    ]] = Field("clientMutationId", OptionOf(Scalar()))

    /**
     * A message confirming the result of changing the administrator's role.
     */
    def message
    : SelectionBuilder[UpdateEnterpriseAdministratorRolePayload, Option[
      String
    ]] = Field("message", OptionOf(Scalar()))
  }

  type UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload

  object UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId: SelectionBuilder[
      UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload,
      Option[String]
    ] = Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The enterprise with the updated allow private repository forking setting.
     */
    def enterprise[A](
                       innerSelection: SelectionBuilder[Enterprise, A]
                     ): SelectionBuilder[
      UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload,
      Option[A]
    ] = Field("enterprise", OptionOf(Obj(innerSelection)))

    /**
     * A message confirming the result of updating the allow private repository forking setting.
     */
    def message: SelectionBuilder[
      UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload,
      Option[String]
    ] = Field("message", OptionOf(Scalar()))
  }

  type UpdateEnterpriseDefaultRepositoryPermissionSettingPayload

  object UpdateEnterpriseDefaultRepositoryPermissionSettingPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId: SelectionBuilder[
      UpdateEnterpriseDefaultRepositoryPermissionSettingPayload,
      Option[String]
    ] = Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The enterprise with the updated default repository permission setting.
     */
    def enterprise[A](
                       innerSelection: SelectionBuilder[Enterprise, A]
                     ): SelectionBuilder[
      UpdateEnterpriseDefaultRepositoryPermissionSettingPayload,
      Option[A]
    ] = Field("enterprise", OptionOf(Obj(innerSelection)))

    /**
     * A message confirming the result of updating the default repository permission setting.
     */
    def message: SelectionBuilder[
      UpdateEnterpriseDefaultRepositoryPermissionSettingPayload,
      Option[String]
    ] = Field("message", OptionOf(Scalar()))
  }

  type UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload

  object UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId: SelectionBuilder[
      UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload,
      Option[String]
    ] = Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The enterprise with the updated members can change repository visibility setting.
     */
    def enterprise[A](
                       innerSelection: SelectionBuilder[Enterprise, A]
                     ): SelectionBuilder[
      UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload,
      Option[A]
    ] = Field("enterprise", OptionOf(Obj(innerSelection)))

    /**
     * A message confirming the result of updating the members can change repository visibility setting.
     */
    def message: SelectionBuilder[
      UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload,
      Option[String]
    ] = Field("message", OptionOf(Scalar()))
  }

  type UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload

  object UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId: SelectionBuilder[
      UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload,
      Option[String]
    ] = Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The enterprise with the updated members can create repositories setting.
     */
    def enterprise[A](
                       innerSelection: SelectionBuilder[Enterprise, A]
                     ): SelectionBuilder[
      UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload,
      Option[A]
    ] = Field("enterprise", OptionOf(Obj(innerSelection)))

    /**
     * A message confirming the result of updating the members can create repositories setting.
     */
    def message: SelectionBuilder[
      UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload,
      Option[String]
    ] = Field("message", OptionOf(Scalar()))
  }

  type UpdateEnterpriseMembersCanDeleteIssuesSettingPayload

  object UpdateEnterpriseMembersCanDeleteIssuesSettingPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId: SelectionBuilder[
      UpdateEnterpriseMembersCanDeleteIssuesSettingPayload,
      Option[String]
    ] = Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The enterprise with the updated members can delete issues setting.
     */
    def enterprise[A](
                       innerSelection: SelectionBuilder[Enterprise, A]
                     ): SelectionBuilder[
      UpdateEnterpriseMembersCanDeleteIssuesSettingPayload,
      Option[A]
    ] = Field("enterprise", OptionOf(Obj(innerSelection)))

    /**
     * A message confirming the result of updating the members can delete issues setting.
     */
    def message: SelectionBuilder[
      UpdateEnterpriseMembersCanDeleteIssuesSettingPayload,
      Option[String]
    ] = Field("message", OptionOf(Scalar()))
  }

  type UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload

  object UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId: SelectionBuilder[
      UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload,
      Option[String]
    ] = Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The enterprise with the updated members can delete repositories setting.
     */
    def enterprise[A](
                       innerSelection: SelectionBuilder[Enterprise, A]
                     ): SelectionBuilder[
      UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload,
      Option[A]
    ] = Field("enterprise", OptionOf(Obj(innerSelection)))

    /**
     * A message confirming the result of updating the members can delete repositories setting.
     */
    def message: SelectionBuilder[
      UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload,
      Option[String]
    ] = Field("message", OptionOf(Scalar()))
  }

  type UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload

  object UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId: SelectionBuilder[
      UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload,
      Option[String]
    ] = Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The enterprise with the updated members can invite collaborators setting.
     */
    def enterprise[A](
                       innerSelection: SelectionBuilder[Enterprise, A]
                     ): SelectionBuilder[
      UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload,
      Option[A]
    ] = Field("enterprise", OptionOf(Obj(innerSelection)))

    /**
     * A message confirming the result of updating the members can invite collaborators setting.
     */
    def message: SelectionBuilder[
      UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload,
      Option[String]
    ] = Field("message", OptionOf(Scalar()))
  }

  type UpdateEnterpriseMembersCanMakePurchasesSettingPayload

  object UpdateEnterpriseMembersCanMakePurchasesSettingPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId: SelectionBuilder[
      UpdateEnterpriseMembersCanMakePurchasesSettingPayload,
      Option[String]
    ] = Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The enterprise with the updated members can make purchases setting.
     */
    def enterprise[A](
                       innerSelection: SelectionBuilder[Enterprise, A]
                     ): SelectionBuilder[
      UpdateEnterpriseMembersCanMakePurchasesSettingPayload,
      Option[A]
    ] = Field("enterprise", OptionOf(Obj(innerSelection)))

    /**
     * A message confirming the result of updating the members can make purchases setting.
     */
    def message: SelectionBuilder[
      UpdateEnterpriseMembersCanMakePurchasesSettingPayload,
      Option[String]
    ] = Field("message", OptionOf(Scalar()))
  }

  type UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload

  object UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId: SelectionBuilder[
      UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload,
      Option[String]
    ] = Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The enterprise with the updated members can update protected branches setting.
     */
    def enterprise[A](
                       innerSelection: SelectionBuilder[Enterprise, A]
                     ): SelectionBuilder[
      UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload,
      Option[A]
    ] = Field("enterprise", OptionOf(Obj(innerSelection)))

    /**
     * A message confirming the result of updating the members can update protected branches setting.
     */
    def message: SelectionBuilder[
      UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload,
      Option[String]
    ] = Field("message", OptionOf(Scalar()))
  }

  type UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload

  object UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId: SelectionBuilder[
      UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload,
      Option[String]
    ] = Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The enterprise with the updated members can view dependency insights setting.
     */
    def enterprise[A](
                       innerSelection: SelectionBuilder[Enterprise, A]
                     ): SelectionBuilder[
      UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload,
      Option[A]
    ] = Field("enterprise", OptionOf(Obj(innerSelection)))

    /**
     * A message confirming the result of updating the members can view dependency insights setting.
     */
    def message: SelectionBuilder[
      UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload,
      Option[String]
    ] = Field("message", OptionOf(Scalar()))
  }

  type UpdateEnterpriseOrganizationProjectsSettingPayload

  object UpdateEnterpriseOrganizationProjectsSettingPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId: SelectionBuilder[
      UpdateEnterpriseOrganizationProjectsSettingPayload,
      Option[String]
    ] = Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The enterprise with the updated organization projects setting.
     */
    def enterprise[A](
                       innerSelection: SelectionBuilder[Enterprise, A]
                     ): SelectionBuilder[
      UpdateEnterpriseOrganizationProjectsSettingPayload,
      Option[A]
    ] = Field("enterprise", OptionOf(Obj(innerSelection)))

    /**
     * A message confirming the result of updating the organization projects setting.
     */
    def message: SelectionBuilder[
      UpdateEnterpriseOrganizationProjectsSettingPayload,
      Option[String]
    ] = Field("message", OptionOf(Scalar()))
  }

  type UpdateEnterpriseProfilePayload

  object UpdateEnterpriseProfilePayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[UpdateEnterpriseProfilePayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The updated enterprise.
     */
    def enterprise[A](
                       innerSelection: SelectionBuilder[Enterprise, A]
                     ): SelectionBuilder[UpdateEnterpriseProfilePayload, Option[A]] =
      Field("enterprise", OptionOf(Obj(innerSelection)))
  }

  type UpdateEnterpriseRepositoryProjectsSettingPayload

  object UpdateEnterpriseRepositoryProjectsSettingPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId: SelectionBuilder[
      UpdateEnterpriseRepositoryProjectsSettingPayload,
      Option[String]
    ] = Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The enterprise with the updated repository projects setting.
     */
    def enterprise[A](
                       innerSelection: SelectionBuilder[Enterprise, A]
                     ): SelectionBuilder[
      UpdateEnterpriseRepositoryProjectsSettingPayload,
      Option[A]
    ] = Field("enterprise", OptionOf(Obj(innerSelection)))

    /**
     * A message confirming the result of updating the repository projects setting.
     */
    def message: SelectionBuilder[
      UpdateEnterpriseRepositoryProjectsSettingPayload,
      Option[String]
    ] = Field("message", OptionOf(Scalar()))
  }

  type UpdateEnterpriseTeamDiscussionsSettingPayload

  object UpdateEnterpriseTeamDiscussionsSettingPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId: SelectionBuilder[
      UpdateEnterpriseTeamDiscussionsSettingPayload,
      Option[String]
    ] = Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The enterprise with the updated team discussions setting.
     */
    def enterprise[A](
                       innerSelection: SelectionBuilder[Enterprise, A]
                     ): SelectionBuilder[UpdateEnterpriseTeamDiscussionsSettingPayload, Option[
      A
    ]] = Field("enterprise", OptionOf(Obj(innerSelection)))

    /**
     * A message confirming the result of updating the team discussions setting.
     */
    def message: SelectionBuilder[
      UpdateEnterpriseTeamDiscussionsSettingPayload,
      Option[String]
    ] = Field("message", OptionOf(Scalar()))
  }

  type UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload

  object UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId: SelectionBuilder[
      UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload,
      Option[String]
    ] = Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The enterprise with the updated two factor authentication required setting.
     */
    def enterprise[A](
                       innerSelection: SelectionBuilder[Enterprise, A]
                     ): SelectionBuilder[
      UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload,
      Option[A]
    ] = Field("enterprise", OptionOf(Obj(innerSelection)))

    /**
     * A message confirming the result of updating the two factor authentication required setting.
     */
    def message: SelectionBuilder[
      UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload,
      Option[String]
    ] = Field("message", OptionOf(Scalar()))
  }

  type UpdateIpAllowListEnabledSettingPayload

  object UpdateIpAllowListEnabledSettingPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[UpdateIpAllowListEnabledSettingPayload, Option[
      String
    ]] = Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The IP allow list owner on which the setting was updated.
     */
    def owner[A](
                  onEnterprise: SelectionBuilder[Enterprise, A],
                  onOrganization: SelectionBuilder[Organization, A]
                ): SelectionBuilder[UpdateIpAllowListEnabledSettingPayload, Option[A]] =
      Field(
        "owner",
        OptionOf(
          ChoiceOf(
            Map(
              "Enterprise" -> Obj(onEnterprise),
              "Organization" -> Obj(onOrganization)
            )
          )
        )
      )
  }

  type UpdateIpAllowListEntryPayload

  object UpdateIpAllowListEntryPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[UpdateIpAllowListEntryPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The IP allow list entry that was updated.
     */
    def ipAllowListEntry[A](
                             innerSelection: SelectionBuilder[IpAllowListEntry, A]
                           ): SelectionBuilder[UpdateIpAllowListEntryPayload, Option[A]] =
      Field("ipAllowListEntry", OptionOf(Obj(innerSelection)))
  }

  type UpdateIssueCommentPayload

  object UpdateIssueCommentPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[UpdateIssueCommentPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The updated comment.
     */
    def issueComment[A](
                         innerSelection: SelectionBuilder[IssueComment, A]
                       ): SelectionBuilder[UpdateIssueCommentPayload, Option[A]] =
      Field("issueComment", OptionOf(Obj(innerSelection)))
  }

  type UpdateIssuePayload

  object UpdateIssuePayload {

    /**
     * Identifies the actor who performed the event.
     */
    def actor[A](
                  onBot: Option[SelectionBuilder[Bot, A]] = None,
                  onEnterpriseUserAccount: Option[
                    SelectionBuilder[EnterpriseUserAccount, A]
                  ] = None,
                  onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                  onUser: Option[SelectionBuilder[User, A]] = None,
                  onOrganization: Option[SelectionBuilder[Organization, A]] = None
                ): SelectionBuilder[UpdateIssuePayload, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId: SelectionBuilder[UpdateIssuePayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The issue.
     */
    def issue[A](
                  innerSelection: SelectionBuilder[Issue, A]
                ): SelectionBuilder[UpdateIssuePayload, Option[A]] =
      Field("issue", OptionOf(Obj(innerSelection)))
  }

  type UpdateLabelPayload

  object UpdateLabelPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId: SelectionBuilder[UpdateLabelPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The updated label.
     */
    def label[A](
                  innerSelection: SelectionBuilder[Label, A]
                ): SelectionBuilder[UpdateLabelPayload, Option[A]] =
      Field("label", OptionOf(Obj(innerSelection)))
  }

  type UpdateProjectCardPayload

  object UpdateProjectCardPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[UpdateProjectCardPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The updated ProjectCard.
     */
    def projectCard[A](
                        innerSelection: SelectionBuilder[ProjectCard, A]
                      ): SelectionBuilder[UpdateProjectCardPayload, Option[A]] =
      Field("projectCard", OptionOf(Obj(innerSelection)))
  }

  type UpdateProjectColumnPayload

  object UpdateProjectColumnPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[UpdateProjectColumnPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The updated project column.
     */
    def projectColumn[A](
                          innerSelection: SelectionBuilder[ProjectColumn, A]
                        ): SelectionBuilder[UpdateProjectColumnPayload, Option[A]] =
      Field("projectColumn", OptionOf(Obj(innerSelection)))
  }

  type UpdateProjectPayload

  object UpdateProjectPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[UpdateProjectPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The updated project.
     */
    def project[A](
                    innerSelection: SelectionBuilder[Project, A]
                  ): SelectionBuilder[UpdateProjectPayload, Option[A]] =
      Field("project", OptionOf(Obj(innerSelection)))
  }

  type UpdatePullRequestPayload

  object UpdatePullRequestPayload {

    /**
     * Identifies the actor who performed the event.
     */
    def actor[A](
                  onBot: Option[SelectionBuilder[Bot, A]] = None,
                  onEnterpriseUserAccount: Option[
                    SelectionBuilder[EnterpriseUserAccount, A]
                  ] = None,
                  onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                  onUser: Option[SelectionBuilder[User, A]] = None,
                  onOrganization: Option[SelectionBuilder[Organization, A]] = None
                ): SelectionBuilder[UpdatePullRequestPayload, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[UpdatePullRequestPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The updated pull request.
     */
    def pullRequest[A](
                        innerSelection: SelectionBuilder[PullRequest, A]
                      ): SelectionBuilder[UpdatePullRequestPayload, Option[A]] =
      Field("pullRequest", OptionOf(Obj(innerSelection)))
  }

  type UpdatePullRequestReviewCommentPayload

  object UpdatePullRequestReviewCommentPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[UpdatePullRequestReviewCommentPayload, Option[
      String
    ]] = Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The updated comment.
     */
    def pullRequestReviewComment[A](
                                     innerSelection: SelectionBuilder[PullRequestReviewComment, A]
                                   ): SelectionBuilder[UpdatePullRequestReviewCommentPayload, Option[A]] =
      Field("pullRequestReviewComment", OptionOf(Obj(innerSelection)))
  }

  type UpdatePullRequestReviewPayload

  object UpdatePullRequestReviewPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[UpdatePullRequestReviewPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The updated pull request review.
     */
    def pullRequestReview[A](
                              innerSelection: SelectionBuilder[PullRequestReview, A]
                            ): SelectionBuilder[UpdatePullRequestReviewPayload, Option[A]] =
      Field("pullRequestReview", OptionOf(Obj(innerSelection)))
  }

  type UpdateRefPayload

  object UpdateRefPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId: SelectionBuilder[UpdateRefPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The updated Ref.
     */
    def ref[A](
                innerSelection: SelectionBuilder[Ref, A]
              ): SelectionBuilder[UpdateRefPayload, Option[A]] =
      Field("ref", OptionOf(Obj(innerSelection)))
  }

  type UpdateRefsPayload

  object UpdateRefsPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId: SelectionBuilder[UpdateRefsPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))
  }

  type UpdateRepositoryPayload

  object UpdateRepositoryPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[UpdateRepositoryPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The updated repository.
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[UpdateRepositoryPayload, Option[A]] =
      Field("repository", OptionOf(Obj(innerSelection)))
  }

  type UpdateSubscriptionPayload

  object UpdateSubscriptionPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[UpdateSubscriptionPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The input subscribable entity.
     */
    def subscribable[A](
                         onCommit: Option[SelectionBuilder[Commit, A]] = None,
                         onTeam: Option[SelectionBuilder[Team, A]] = None,
                         onRepository: Option[SelectionBuilder[Repository, A]] = None,
                         onTeamDiscussion: Option[SelectionBuilder[TeamDiscussion, A]] = None,
                         onIssue: Option[SelectionBuilder[Issue, A]] = None,
                         onPullRequest: Option[SelectionBuilder[PullRequest, A]] = None
                       ): SelectionBuilder[UpdateSubscriptionPayload, Option[A]] =
      Field(
        "subscribable",
        OptionOf(
          ChoiceOf(
            Map(
              "Commit" -> onCommit,
              "Team" -> onTeam,
              "Repository" -> onRepository,
              "TeamDiscussion" -> onTeamDiscussion,
              "Issue" -> onIssue,
              "PullRequest" -> onPullRequest
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )
  }

  type UpdateTeamDiscussionCommentPayload

  object UpdateTeamDiscussionCommentPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[UpdateTeamDiscussionCommentPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The updated comment.
     */
    def teamDiscussionComment[A](
                                  innerSelection: SelectionBuilder[TeamDiscussionComment, A]
                                ): SelectionBuilder[UpdateTeamDiscussionCommentPayload, Option[A]] =
      Field("teamDiscussionComment", OptionOf(Obj(innerSelection)))
  }

  type UpdateTeamDiscussionPayload

  object UpdateTeamDiscussionPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[UpdateTeamDiscussionPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The updated discussion.
     */
    def teamDiscussion[A](
                           innerSelection: SelectionBuilder[TeamDiscussion, A]
                         ): SelectionBuilder[UpdateTeamDiscussionPayload, Option[A]] =
      Field("teamDiscussion", OptionOf(Obj(innerSelection)))
  }

  type UpdateTeamReviewAssignmentPayload

  object UpdateTeamReviewAssignmentPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[UpdateTeamReviewAssignmentPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * The team that was modified
     */
    def team[A](
                 innerSelection: SelectionBuilder[Team, A]
               ): SelectionBuilder[UpdateTeamReviewAssignmentPayload, Option[A]] =
      Field("team", OptionOf(Obj(innerSelection)))
  }

  type UpdateTopicsPayload

  object UpdateTopicsPayload {

    /**
     * A unique identifier for the client performing the mutation.
     */
    def clientMutationId
    : SelectionBuilder[UpdateTopicsPayload, Option[String]] =
      Field("clientMutationId", OptionOf(Scalar()))

    /**
     * Names of the provided topics that are not valid.
     */
    def invalidTopicNames
    : SelectionBuilder[UpdateTopicsPayload, Option[List[String]]] =
      Field("invalidTopicNames", OptionOf(ListOf(Scalar())))

    /**
     * The updated repository.
     */
    def repository[A](
                       innerSelection: SelectionBuilder[Repository, A]
                     ): SelectionBuilder[UpdateTopicsPayload, Option[A]] =
      Field("repository", OptionOf(Obj(innerSelection)))
  }

  type User

  object User {

    /**
     * Determine if this repository owner has any items that can be pinned to their profile.
     */
    def anyPinnableItems(
                          `type`: Option[PinnableItemType] = None
                        ): SelectionBuilder[User, Boolean] =
      Field(
        "anyPinnableItems",
        Scalar(),
        arguments = List(Argument("type", `type`))
      )

    /**
     * A URL pointing to the user's public avatar.
     */
    def avatarUrl(size: Option[Int] = None): SelectionBuilder[User, URI] =
      Field("avatarUrl", Scalar(), arguments = List(Argument("size", size)))

    /**
     * The user's public profile bio.
     */
    def bio: SelectionBuilder[User, Option[String]] =
      Field("bio", OptionOf(Scalar()))

    /**
     * The user's public profile bio as HTML.
     */
    def bioHTML: SelectionBuilder[User, HTML] = Field("bioHTML", Scalar())

    /**
     * A list of commit comments made by this user.
     */
    def commitComments[A](
                           after: Option[String] = None,
                           before: Option[String] = None,
                           first: Option[Int] = None,
                           last: Option[Int] = None
                         )(
                           innerSelection: SelectionBuilder[CommitCommentConnection, A]
                         ): SelectionBuilder[User, A] =
      Field(
        "commitComments",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )

    /**
     * The user's public profile company.
     */
    def company: SelectionBuilder[User, Option[String]] =
      Field("company", OptionOf(Scalar()))

    /**
     * The user's public profile company as HTML.
     */
    def companyHTML: SelectionBuilder[User, HTML] =
      Field("companyHTML", Scalar())

    /**
     * The collection of contributions this user has made to different repositories.
     */
    def contributionsCollection[A](
                                    from: Option[DateTime] = None,
                                    organizationID: Option[String] = None,
                                    to: Option[DateTime] = None
                                  )(
                                    innerSelection: SelectionBuilder[ContributionsCollection, A]
                                  ): SelectionBuilder[User, A] =
      Field(
        "contributionsCollection",
        Obj(innerSelection),
        arguments = List(
          Argument("from", from),
          Argument("organizationID", organizationID),
          Argument("to", to)
        )
      )

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[User, DateTime] =
      Field("createdAt", Scalar())

    /**
     * Identifies the primary key from the database.
     */
    def databaseId: SelectionBuilder[User, Option[Int]] =
      Field("databaseId", OptionOf(Scalar()))

    /**
     * The user's publicly visible profile email.
     */
    def email: SelectionBuilder[User, String] = Field("email", Scalar())

    /**
     * A list of users the given user is followed by.
     */
    def followers[A](
                      after: Option[String] = None,
                      before: Option[String] = None,
                      first: Option[Int] = None,
                      last: Option[Int] = None
                    )(
                      innerSelection: SelectionBuilder[FollowerConnection, A]
                    ): SelectionBuilder[User, A] =
      Field(
        "followers",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )

    /**
     * A list of users the given user is following.
     */
    def following[A](
                      after: Option[String] = None,
                      before: Option[String] = None,
                      first: Option[Int] = None,
                      last: Option[Int] = None
                    )(
                      innerSelection: SelectionBuilder[FollowingConnection, A]
                    ): SelectionBuilder[User, A] =
      Field(
        "following",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )

    /**
     * Find gist by repo name.
     */
    def gist[A](name: String)(
      innerSelection: SelectionBuilder[Gist, A]
    ): SelectionBuilder[User, Option[A]] =
      Field(
        "gist",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("name", name))
      )

    /**
     * A list of gist comments made by this user.
     */
    def gistComments[A](
                         after: Option[String] = None,
                         before: Option[String] = None,
                         first: Option[Int] = None,
                         last: Option[Int] = None
                       )(
                         innerSelection: SelectionBuilder[GistCommentConnection, A]
                       ): SelectionBuilder[User, A] =
      Field(
        "gistComments",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )

    /**
     * A list of the Gists the user has created.
     */
    def gists[A](
                  after: Option[String] = None,
                  before: Option[String] = None,
                  first: Option[Int] = None,
                  last: Option[Int] = None,
                  orderBy: Option[GistOrder] = None,
                  privacy: Option[GistPrivacy] = None
                )(
                  innerSelection: SelectionBuilder[GistConnection, A]
                ): SelectionBuilder[User, A] =
      Field(
        "gists",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy),
          Argument("privacy", privacy)
        )
      )

    /**
     * The hovercard information for this user in a given context
     */
    def hovercard[A](primarySubjectId: Option[String] = None)(
      innerSelection: SelectionBuilder[Hovercard, A]
    ): SelectionBuilder[User, A] =
      Field(
        "hovercard",
        Obj(innerSelection),
        arguments = List(Argument("primarySubjectId", primarySubjectId))
      )

    def id: SelectionBuilder[User, String] = Field("id", Scalar())

    /**
     * Whether or not this user is a participant in the GitHub Security Bug Bounty.
     */
    def isBountyHunter: SelectionBuilder[User, Boolean] =
      Field("isBountyHunter", Scalar())

    /**
     * Whether or not this user is a participant in the GitHub Campus Experts Program.
     */
    def isCampusExpert: SelectionBuilder[User, Boolean] =
      Field("isCampusExpert", Scalar())

    /**
     * Whether or not this user is a GitHub Developer Program member.
     */
    def isDeveloperProgramMember: SelectionBuilder[User, Boolean] =
      Field("isDeveloperProgramMember", Scalar())

    /**
     * Whether or not this user is a GitHub employee.
     */
    def isEmployee: SelectionBuilder[User, Boolean] =
      Field("isEmployee", Scalar())

    /**
     * Whether or not the user has marked themselves as for hire.
     */
    def isHireable: SelectionBuilder[User, Boolean] =
      Field("isHireable", Scalar())

    /**
     * Whether or not this user is a site administrator.
     */
    def isSiteAdmin: SelectionBuilder[User, Boolean] =
      Field("isSiteAdmin", Scalar())

    /**
     * Whether or not this user is the viewing user.
     */
    def isViewer: SelectionBuilder[User, Boolean] = Field("isViewer", Scalar())

    /**
     * A list of issue comments made by this user.
     */
    def issueComments[A](
                          after: Option[String] = None,
                          before: Option[String] = None,
                          first: Option[Int] = None,
                          last: Option[Int] = None
                        )(
                          innerSelection: SelectionBuilder[IssueCommentConnection, A]
                        ): SelectionBuilder[User, A] =
      Field(
        "issueComments",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )

    /**
     * A list of issues associated with this user.
     */
    def issues[A](
                   after: Option[String] = None,
                   before: Option[String] = None,
                   filterBy: Option[IssueFilters] = None,
                   first: Option[Int] = None,
                   labels: Option[List[String]] = None,
                   last: Option[Int] = None,
                   orderBy: Option[IssueOrder] = None,
                   states: Option[List[IssueState]] = None
                 )(
                   innerSelection: SelectionBuilder[IssueConnection, A]
                 ): SelectionBuilder[User, A] =
      Field(
        "issues",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("filterBy", filterBy),
          Argument("first", first),
          Argument("labels", labels),
          Argument("last", last),
          Argument("orderBy", orderBy),
          Argument("states", states)
        )
      )

    /**
     * Showcases a selection of repositories and gists that the profile owner has
     * either curated or that have been selected automatically based on popularity.
     */
    def itemShowcase[A](
                         innerSelection: SelectionBuilder[ProfileItemShowcase, A]
                       ): SelectionBuilder[User, A] = Field("itemShowcase", Obj(innerSelection))

    /**
     * The user's public profile location.
     */
    def location: SelectionBuilder[User, Option[String]] =
      Field("location", OptionOf(Scalar()))

    /**
     * The username used to login.
     */
    def login: SelectionBuilder[User, String] = Field("login", Scalar())

    /**
     * The user's public profile name.
     */
    def name: SelectionBuilder[User, Option[String]] =
      Field("name", OptionOf(Scalar()))

    /**
     * Find an organization by its login that the user belongs to.
     */
    def organization[A](login: String)(
      innerSelection: SelectionBuilder[Organization, A]
    ): SelectionBuilder[User, Option[A]] =
      Field(
        "organization",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("login", login))
      )

    /**
     * Verified email addresses that match verified domains for a specified organization the user is a member of.
     */
    def organizationVerifiedDomainEmails(
                                          login: String
                                        ): SelectionBuilder[User, List[String]] =
      Field(
        "organizationVerifiedDomainEmails",
        ListOf(Scalar()),
        arguments = List(Argument("login", login))
      )

    /**
     * A list of organizations the user belongs to.
     */
    def organizations[A](
                          after: Option[String] = None,
                          before: Option[String] = None,
                          first: Option[Int] = None,
                          last: Option[Int] = None
                        )(
                          innerSelection: SelectionBuilder[OrganizationConnection, A]
                        ): SelectionBuilder[User, A] =
      Field(
        "organizations",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )

    /**
     * A list of packages under the owner.
     */
    def packages[A](
                     after: Option[String] = None,
                     before: Option[String] = None,
                     first: Option[Int] = None,
                     last: Option[Int] = None,
                     names: Option[List[Option[String]]] = None,
                     orderBy: Option[PackageOrder] = None,
                     packageType: Option[PackageType] = None,
                     repositoryId: Option[String] = None
                   )(
                     innerSelection: SelectionBuilder[PackageConnection, A]
                   ): SelectionBuilder[User, A] =
      Field(
        "packages",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("names", names),
          Argument("orderBy", orderBy),
          Argument("packageType", packageType),
          Argument("repositoryId", repositoryId)
        )
      )

    /**
     * A list of repositories and gists this profile owner can pin to their profile.
     */
    def pinnableItems[A](
                          after: Option[String] = None,
                          before: Option[String] = None,
                          first: Option[Int] = None,
                          last: Option[Int] = None,
                          types: Option[List[PinnableItemType]] = None
                        )(
                          innerSelection: SelectionBuilder[PinnableItemConnection, A]
                        ): SelectionBuilder[User, A] =
      Field(
        "pinnableItems",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("types", types)
        )
      )

    /**
     * A list of repositories and gists this profile owner has pinned to their profile
     */
    def pinnedItems[A](
                        after: Option[String] = None,
                        before: Option[String] = None,
                        first: Option[Int] = None,
                        last: Option[Int] = None,
                        types: Option[List[PinnableItemType]] = None
                      )(
                        innerSelection: SelectionBuilder[PinnableItemConnection, A]
                      ): SelectionBuilder[User, A] =
      Field(
        "pinnedItems",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("types", types)
        )
      )

    /**
     * Returns how many more items this profile owner can pin to their profile.
     */
    def pinnedItemsRemaining: SelectionBuilder[User, Int] =
      Field("pinnedItemsRemaining", Scalar())

    /**
     * Find project by number.
     */
    def project[A](number: Int)(
      innerSelection: SelectionBuilder[Project, A]
    ): SelectionBuilder[User, Option[A]] =
      Field(
        "project",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("number", number))
      )

    /**
     * A list of projects under the owner.
     */
    def projects[A](
                     after: Option[String] = None,
                     before: Option[String] = None,
                     first: Option[Int] = None,
                     last: Option[Int] = None,
                     orderBy: Option[ProjectOrder] = None,
                     search: Option[String] = None,
                     states: Option[List[ProjectState]] = None
                   )(
                     innerSelection: SelectionBuilder[ProjectConnection, A]
                   ): SelectionBuilder[User, A] =
      Field(
        "projects",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy),
          Argument("search", search),
          Argument("states", states)
        )
      )

    /**
     * The HTTP path listing user's projects
     */
    def projectsResourcePath: SelectionBuilder[User, URI] =
      Field("projectsResourcePath", Scalar())

    /**
     * The HTTP URL listing user's projects
     */
    def projectsUrl: SelectionBuilder[User, URI] =
      Field("projectsUrl", Scalar())

    /**
     * A list of public keys associated with this user.
     */
    def publicKeys[A](
                       after: Option[String] = None,
                       before: Option[String] = None,
                       first: Option[Int] = None,
                       last: Option[Int] = None
                     )(
                       innerSelection: SelectionBuilder[PublicKeyConnection, A]
                     ): SelectionBuilder[User, A] =
      Field(
        "publicKeys",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last)
        )
      )

    /**
     * A list of pull requests associated with this user.
     */
    def pullRequests[A](
                         after: Option[String] = None,
                         baseRefName: Option[String] = None,
                         before: Option[String] = None,
                         first: Option[Int] = None,
                         headRefName: Option[String] = None,
                         labels: Option[List[String]] = None,
                         last: Option[Int] = None,
                         orderBy: Option[IssueOrder] = None,
                         states: Option[List[PullRequestState]] = None
                       )(
                         innerSelection: SelectionBuilder[PullRequestConnection, A]
                       ): SelectionBuilder[User, A] =
      Field(
        "pullRequests",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("baseRefName", baseRefName),
          Argument("before", before),
          Argument("first", first),
          Argument("headRefName", headRefName),
          Argument("labels", labels),
          Argument("last", last),
          Argument("orderBy", orderBy),
          Argument("states", states)
        )
      )

    /**
     * A list of repositories that the user owns.
     */
    def repositories[A](
                         affiliations: Option[List[Option[RepositoryAffiliation]]] = None,
                         after: Option[String] = None,
                         before: Option[String] = None,
                         first: Option[Int] = None,
                         isFork: Option[Boolean] = None,
                         isLocked: Option[Boolean] = None,
                         last: Option[Int] = None,
                         orderBy: Option[RepositoryOrder] = None,
                         ownerAffiliations: Option[List[Option[RepositoryAffiliation]]] = None,
                         privacy: Option[RepositoryPrivacy] = None
                       )(
                         innerSelection: SelectionBuilder[RepositoryConnection, A]
                       ): SelectionBuilder[User, A] =
      Field(
        "repositories",
        Obj(innerSelection),
        arguments = List(
          Argument("affiliations", affiliations),
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("isFork", isFork),
          Argument("isLocked", isLocked),
          Argument("last", last),
          Argument("orderBy", orderBy),
          Argument("ownerAffiliations", ownerAffiliations),
          Argument("privacy", privacy)
        )
      )

    /**
     * A list of repositories that the user recently contributed to.
     */
    def repositoriesContributedTo[A](
                                      after: Option[String] = None,
                                      before: Option[String] = None,
                                      contributionTypes: Option[List[Option[RepositoryContributionType]]] =
                                      None,
                                      first: Option[Int] = None,
                                      includeUserRepositories: Option[Boolean] = None,
                                      isLocked: Option[Boolean] = None,
                                      last: Option[Int] = None,
                                      orderBy: Option[RepositoryOrder] = None,
                                      privacy: Option[RepositoryPrivacy] = None
                                    )(
                                      innerSelection: SelectionBuilder[RepositoryConnection, A]
                                    ): SelectionBuilder[User, A] =
      Field(
        "repositoriesContributedTo",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("contributionTypes", contributionTypes),
          Argument("first", first),
          Argument("includeUserRepositories", includeUserRepositories),
          Argument("isLocked", isLocked),
          Argument("last", last),
          Argument("orderBy", orderBy),
          Argument("privacy", privacy)
        )
      )

    /**
     * Find Repository.
     */
    def repository[A](name: String)(
      innerSelection: SelectionBuilder[Repository, A]
    ): SelectionBuilder[User, Option[A]] =
      Field(
        "repository",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("name", name))
      )

    /**
     * The HTTP path for this user
     */
    def resourcePath: SelectionBuilder[User, URI] =
      Field("resourcePath", Scalar())

    /**
     * Replies this user has saved
     */
    def savedReplies[A](
                         after: Option[String] = None,
                         before: Option[String] = None,
                         first: Option[Int] = None,
                         last: Option[Int] = None,
                         orderBy: Option[SavedReplyOrder] = None
                       )(
                         innerSelection: SelectionBuilder[SavedReplyConnection, A]
                       ): SelectionBuilder[User, Option[A]] =
      Field(
        "savedReplies",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy)
        )
      )

    /**
     * The GitHub Sponsors listing for this user.
     */
    def sponsorsListing[A](
                            innerSelection: SelectionBuilder[SponsorsListing, A]
                          ): SelectionBuilder[User, Option[A]] =
      Field("sponsorsListing", OptionOf(Obj(innerSelection)))

    /**
     * This object's sponsorships as the maintainer.
     */
    def sponsorshipsAsMaintainer[A](
                                     after: Option[String] = None,
                                     before: Option[String] = None,
                                     first: Option[Int] = None,
                                     includePrivate: Option[Boolean] = None,
                                     last: Option[Int] = None,
                                     orderBy: Option[SponsorshipOrder] = None
                                   )(
                                     innerSelection: SelectionBuilder[SponsorshipConnection, A]
                                   ): SelectionBuilder[User, A] =
      Field(
        "sponsorshipsAsMaintainer",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("includePrivate", includePrivate),
          Argument("last", last),
          Argument("orderBy", orderBy)
        )
      )

    /**
     * This object's sponsorships as the sponsor.
     */
    def sponsorshipsAsSponsor[A](
                                  after: Option[String] = None,
                                  before: Option[String] = None,
                                  first: Option[Int] = None,
                                  last: Option[Int] = None,
                                  orderBy: Option[SponsorshipOrder] = None
                                )(
                                  innerSelection: SelectionBuilder[SponsorshipConnection, A]
                                ): SelectionBuilder[User, A] =
      Field(
        "sponsorshipsAsSponsor",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy)
        )
      )

    /**
     * Repositories the user has starred.
     */
    def starredRepositories[A](
                                after: Option[String] = None,
                                before: Option[String] = None,
                                first: Option[Int] = None,
                                last: Option[Int] = None,
                                orderBy: Option[StarOrder] = None,
                                ownedByViewer: Option[Boolean] = None
                              )(
                                innerSelection: SelectionBuilder[StarredRepositoryConnection, A]
                              ): SelectionBuilder[User, A] =
      Field(
        "starredRepositories",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy),
          Argument("ownedByViewer", ownedByViewer)
        )
      )

    /**
     * The user's description of what they're currently doing.
     */
    def status[A](
                   innerSelection: SelectionBuilder[UserStatus, A]
                 ): SelectionBuilder[User, Option[A]] =
      Field("status", OptionOf(Obj(innerSelection)))

    /**
     * Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created
     */
    def topRepositories[A](
                            after: Option[String] = None,
                            before: Option[String] = None,
                            first: Option[Int] = None,
                            last: Option[Int] = None,
                            orderBy: RepositoryOrder,
                            since: Option[DateTime] = None
                          )(
                            innerSelection: SelectionBuilder[RepositoryConnection, A]
                          ): SelectionBuilder[User, A] =
      Field(
        "topRepositories",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy),
          Argument("since", since)
        )
      )

    /**
     * The user's Twitter username.
     */
    def twitterUsername: SelectionBuilder[User, Option[String]] =
      Field("twitterUsername", OptionOf(Scalar()))

    /**
     * Identifies the date and time when the object was last updated.
     */
    def updatedAt: SelectionBuilder[User, DateTime] =
      Field("updatedAt", Scalar())

    /**
     * The HTTP URL for this user
     */
    def url: SelectionBuilder[User, URI] = Field("url", Scalar())

    /**
     * Can the viewer pin repositories and gists to the profile?
     */
    def viewerCanChangePinnedItems: SelectionBuilder[User, Boolean] =
      Field("viewerCanChangePinnedItems", Scalar())

    /**
     * Can the current viewer create new projects on this owner.
     */
    def viewerCanCreateProjects: SelectionBuilder[User, Boolean] =
      Field("viewerCanCreateProjects", Scalar())

    /**
     * Whether or not the viewer is able to follow the user.
     */
    def viewerCanFollow: SelectionBuilder[User, Boolean] =
      Field("viewerCanFollow", Scalar())

    /**
     * Whether or not this user is followed by the viewer.
     */
    def viewerIsFollowing: SelectionBuilder[User, Boolean] =
      Field("viewerIsFollowing", Scalar())

    /**
     * A list of repositories the given user is watching.
     */
    def watching[A](
                     affiliations: Option[List[Option[RepositoryAffiliation]]] = None,
                     after: Option[String] = None,
                     before: Option[String] = None,
                     first: Option[Int] = None,
                     isLocked: Option[Boolean] = None,
                     last: Option[Int] = None,
                     orderBy: Option[RepositoryOrder] = None,
                     ownerAffiliations: Option[List[Option[RepositoryAffiliation]]] = None,
                     privacy: Option[RepositoryPrivacy] = None
                   )(
                     innerSelection: SelectionBuilder[RepositoryConnection, A]
                   ): SelectionBuilder[User, A] =
      Field(
        "watching",
        Obj(innerSelection),
        arguments = List(
          Argument("affiliations", affiliations),
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("isLocked", isLocked),
          Argument("last", last),
          Argument("orderBy", orderBy),
          Argument("ownerAffiliations", ownerAffiliations),
          Argument("privacy", privacy)
        )
      )

    /**
     * A URL pointing to the user's public website/blog.
     */
    def websiteUrl: SelectionBuilder[User, Option[URI]] =
      Field("websiteUrl", OptionOf(Scalar()))
  }

  type UserBlockedEvent

  object UserBlockedEvent {

    /**
     * Identifies the actor who performed the event.
     */
    def actor[A](
                  onBot: Option[SelectionBuilder[Bot, A]] = None,
                  onEnterpriseUserAccount: Option[
                    SelectionBuilder[EnterpriseUserAccount, A]
                  ] = None,
                  onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                  onUser: Option[SelectionBuilder[User, A]] = None,
                  onOrganization: Option[SelectionBuilder[Organization, A]] = None
                ): SelectionBuilder[UserBlockedEvent, Option[A]] =
      Field(
        "actor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * Number of days that the user was blocked for.
     */
    def blockDuration: SelectionBuilder[UserBlockedEvent, UserBlockDuration] =
      Field("blockDuration", Scalar())

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[UserBlockedEvent, DateTime] =
      Field("createdAt", Scalar())

    def id: SelectionBuilder[UserBlockedEvent, String] = Field("id", Scalar())

    /**
     * The user who was blocked.
     */
    def subject[A](
                    innerSelection: SelectionBuilder[User, A]
                  ): SelectionBuilder[UserBlockedEvent, Option[A]] =
      Field("subject", OptionOf(Obj(innerSelection)))
  }

  type UserConnection

  object UserConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[UserEdge, A]
                ): SelectionBuilder[UserConnection, Option[List[Option[A]]]] =
      Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[User, A]
                ): SelectionBuilder[UserConnection, Option[List[Option[A]]]] =
      Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[UserConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[UserConnection, Int] =
      Field("totalCount", Scalar())
  }

  type UserContentEdit

  object UserContentEdit {

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[UserContentEdit, DateTime] =
      Field("createdAt", Scalar())

    /**
     * Identifies the date and time when the object was deleted.
     */
    def deletedAt: SelectionBuilder[UserContentEdit, Option[DateTime]] =
      Field("deletedAt", OptionOf(Scalar()))

    /**
     * The actor who deleted this content
     */
    def deletedBy[A](
                      onBot: Option[SelectionBuilder[Bot, A]] = None,
                      onEnterpriseUserAccount: Option[
                        SelectionBuilder[EnterpriseUserAccount, A]
                      ] = None,
                      onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                      onUser: Option[SelectionBuilder[User, A]] = None,
                      onOrganization: Option[SelectionBuilder[Organization, A]] = None
                    ): SelectionBuilder[UserContentEdit, Option[A]] =
      Field(
        "deletedBy",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    /**
     * A summary of the changes for this edit
     */
    def diff: SelectionBuilder[UserContentEdit, Option[String]] =
      Field("diff", OptionOf(Scalar()))

    /**
     * When this content was edited
     */
    def editedAt: SelectionBuilder[UserContentEdit, DateTime] =
      Field("editedAt", Scalar())

    /**
     * The actor who edited this content
     */
    def editor[A](
                   onBot: Option[SelectionBuilder[Bot, A]] = None,
                   onEnterpriseUserAccount: Option[
                     SelectionBuilder[EnterpriseUserAccount, A]
                   ] = None,
                   onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
                   onUser: Option[SelectionBuilder[User, A]] = None,
                   onOrganization: Option[SelectionBuilder[Organization, A]] = None
                 ): SelectionBuilder[UserContentEdit, Option[A]] =
      Field(
        "editor",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "Mannequin" -> onMannequin,
              "User" -> onUser,
              "Organization" -> onOrganization
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        )
      )

    def id: SelectionBuilder[UserContentEdit, String] = Field("id", Scalar())

    /**
     * Identifies the date and time when the object was last updated.
     */
    def updatedAt: SelectionBuilder[UserContentEdit, DateTime] =
      Field("updatedAt", Scalar())
  }

  type UserContentEditConnection

  object UserContentEditConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[UserContentEditEdge, A]
                ): SelectionBuilder[UserContentEditConnection, Option[List[Option[A]]]] =
      Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[UserContentEdit, A]
                ): SelectionBuilder[UserContentEditConnection, Option[List[Option[A]]]] =
      Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[UserContentEditConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[UserContentEditConnection, Int] =
      Field("totalCount", Scalar())
  }

  type UserContentEditEdge

  object UserContentEditEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[UserContentEditEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[UserContentEdit, A]
               ): SelectionBuilder[UserContentEditEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type UserEdge

  object UserEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[UserEdge, String] = Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[UserEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type UserEmailMetadata

  object UserEmailMetadata {

    /**
     * Boolean to identify primary emails
     */
    def primary: SelectionBuilder[UserEmailMetadata, Option[Boolean]] =
      Field("primary", OptionOf(Scalar()))

    /**
     * Type of email
     */
    def `type`: SelectionBuilder[UserEmailMetadata, Option[String]] =
      Field("type", OptionOf(Scalar()))

    /**
     * Email id
     */
    def value: SelectionBuilder[UserEmailMetadata, String] =
      Field("value", Scalar())
  }

  type UserStatus

  object UserStatus {

    /**
     * Identifies the date and time when the object was created.
     */
    def createdAt: SelectionBuilder[UserStatus, DateTime] =
      Field("createdAt", Scalar())

    /**
     * An emoji summarizing the user's status.
     */
    def emoji: SelectionBuilder[UserStatus, Option[String]] =
      Field("emoji", OptionOf(Scalar()))

    /**
     * The status emoji as HTML.
     */
    def emojiHTML: SelectionBuilder[UserStatus, Option[HTML]] =
      Field("emojiHTML", OptionOf(Scalar()))

    /**
     * If set, the status will not be shown after this date.
     */
    def expiresAt: SelectionBuilder[UserStatus, Option[DateTime]] =
      Field("expiresAt", OptionOf(Scalar()))

    /**
     * ID of the object.
     */
    def id: SelectionBuilder[UserStatus, String] = Field("id", Scalar())

    /**
     * Whether this status indicates the user is not fully available on GitHub.
     */
    def indicatesLimitedAvailability: SelectionBuilder[UserStatus, Boolean] =
      Field("indicatesLimitedAvailability", Scalar())

    /**
     * A brief message describing what the user is doing.
     */
    def message: SelectionBuilder[UserStatus, Option[String]] =
      Field("message", OptionOf(Scalar()))

    /**
     * The organization whose members can see this status. If null, this status is publicly visible.
     */
    def organization[A](
                         innerSelection: SelectionBuilder[Organization, A]
                       ): SelectionBuilder[UserStatus, Option[A]] =
      Field("organization", OptionOf(Obj(innerSelection)))

    /**
     * Identifies the date and time when the object was last updated.
     */
    def updatedAt: SelectionBuilder[UserStatus, DateTime] =
      Field("updatedAt", Scalar())

    /**
     * The user who has this status.
     */
    def user[A](
                 innerSelection: SelectionBuilder[User, A]
               ): SelectionBuilder[UserStatus, A] = Field("user", Obj(innerSelection))
  }

  type UserStatusConnection

  object UserStatusConnection {

    /**
     * A list of edges.
     */
    def edges[A](
                  innerSelection: SelectionBuilder[UserStatusEdge, A]
                ): SelectionBuilder[UserStatusConnection, Option[List[Option[A]]]] =
      Field("edges", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * A list of nodes.
     */
    def nodes[A](
                  innerSelection: SelectionBuilder[UserStatus, A]
                ): SelectionBuilder[UserStatusConnection, Option[List[Option[A]]]] =
      Field("nodes", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Information to aid in pagination.
     */
    def pageInfo[A](
                     innerSelection: SelectionBuilder[PageInfo, A]
                   ): SelectionBuilder[UserStatusConnection, A] =
      Field("pageInfo", Obj(innerSelection))

    /**
     * Identifies the total count of items in the connection.
     */
    def totalCount: SelectionBuilder[UserStatusConnection, Int] =
      Field("totalCount", Scalar())
  }

  type UserStatusEdge

  object UserStatusEdge {

    /**
     * A cursor for use in pagination.
     */
    def cursor: SelectionBuilder[UserStatusEdge, String] =
      Field("cursor", Scalar())

    /**
     * The item at the end of the edge.
     */
    def node[A](
                 innerSelection: SelectionBuilder[UserStatus, A]
               ): SelectionBuilder[UserStatusEdge, Option[A]] =
      Field("node", OptionOf(Obj(innerSelection)))
  }

  type ViewerHovercardContext

  object ViewerHovercardContext {

    /**
     * A string describing this context
     */
    def message: SelectionBuilder[ViewerHovercardContext, String] =
      Field("message", Scalar())

    /**
     * An octicon to accompany this context
     */
    def octicon: SelectionBuilder[ViewerHovercardContext, String] =
      Field("octicon", Scalar())

    /**
     * Identifies the user who is related to this context.
     */
    def viewer[A](
                   innerSelection: SelectionBuilder[User, A]
                 ): SelectionBuilder[ViewerHovercardContext, A] =
      Field("viewer", Obj(innerSelection))
  }

  case class AcceptEnterpriseAdministratorInvitationInput(
                                                           clientMutationId: Option[String] = None,
                                                           invitationId: String
                                                         )

  object AcceptEnterpriseAdministratorInvitationInput {
    implicit val encoder
    : ArgEncoder[AcceptEnterpriseAdministratorInvitationInput] =
      new ArgEncoder[AcceptEnterpriseAdministratorInvitationInput] {
        override def encode(
                             value: AcceptEnterpriseAdministratorInvitationInput
                           ): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "invitationId" -> implicitly[ArgEncoder[String]]
                .encode(value.invitationId)
            )
          )

        override def typeName: String =
          "AcceptEnterpriseAdministratorInvitationInput"
      }
  }

  case class AcceptTopicSuggestionInput(
                                         clientMutationId: Option[String] = None,
                                         name: String,
                                         repositoryId: String
                                       )

  object AcceptTopicSuggestionInput {
    implicit val encoder: ArgEncoder[AcceptTopicSuggestionInput] =
      new ArgEncoder[AcceptTopicSuggestionInput] {
        override def encode(value: AcceptTopicSuggestionInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "name" -> implicitly[ArgEncoder[String]].encode(value.name),
              "repositoryId" -> implicitly[ArgEncoder[String]]
                .encode(value.repositoryId)
            )
          )

        override def typeName: String = "AcceptTopicSuggestionInput"
      }
  }

  case class AddAssigneesToAssignableInput(
                                            assignableId: String,
                                            assigneeIds: List[String] = Nil,
                                            clientMutationId: Option[String] = None
                                          )

  object AddAssigneesToAssignableInput {
    implicit val encoder: ArgEncoder[AddAssigneesToAssignableInput] =
      new ArgEncoder[AddAssigneesToAssignableInput] {
        override def encode(value: AddAssigneesToAssignableInput): Value =
          ObjectValue(
            List(
              "assignableId" -> implicitly[ArgEncoder[String]]
                .encode(value.assignableId),
              "assigneeIds" -> ListValue(
                value.assigneeIds.map(value =>
                  implicitly[ArgEncoder[String]].encode(value)
                )
              ),
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value))
            )
          )

        override def typeName: String = "AddAssigneesToAssignableInput"
      }
  }

  case class AddCommentInput(
                              body: String,
                              clientMutationId: Option[String] = None,
                              subjectId: String
                            )

  object AddCommentInput {
    implicit val encoder: ArgEncoder[AddCommentInput] =
      new ArgEncoder[AddCommentInput] {
        override def encode(value: AddCommentInput): Value =
          ObjectValue(
            List(
              "body" -> implicitly[ArgEncoder[String]].encode(value.body),
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "subjectId" -> implicitly[ArgEncoder[String]]
                .encode(value.subjectId)
            )
          )

        override def typeName: String = "AddCommentInput"
      }
  }

  case class AddLabelsToLabelableInput(
                                        clientMutationId: Option[String] = None,
                                        labelIds: List[String] = Nil,
                                        labelableId: String
                                      )

  object AddLabelsToLabelableInput {
    implicit val encoder: ArgEncoder[AddLabelsToLabelableInput] =
      new ArgEncoder[AddLabelsToLabelableInput] {
        override def encode(value: AddLabelsToLabelableInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "labelIds" -> ListValue(
                value.labelIds.map(value =>
                  implicitly[ArgEncoder[String]].encode(value)
                )
              ),
              "labelableId" -> implicitly[ArgEncoder[String]]
                .encode(value.labelableId)
            )
          )

        override def typeName: String = "AddLabelsToLabelableInput"
      }
  }

  case class AddProjectCardInput(
                                  clientMutationId: Option[String] = None,
                                  contentId: Option[String] = None,
                                  note: Option[String] = None,
                                  projectColumnId: String
                                )

  object AddProjectCardInput {
    implicit val encoder: ArgEncoder[AddProjectCardInput] =
      new ArgEncoder[AddProjectCardInput] {
        override def encode(value: AddProjectCardInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "contentId" -> value.contentId.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              ),
              "note" -> value.note.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              ),
              "projectColumnId" -> implicitly[ArgEncoder[String]]
                .encode(value.projectColumnId)
            )
          )

        override def typeName: String = "AddProjectCardInput"
      }
  }

  case class AddProjectColumnInput(
                                    clientMutationId: Option[String] = None,
                                    name: String,
                                    projectId: String
                                  )

  object AddProjectColumnInput {
    implicit val encoder: ArgEncoder[AddProjectColumnInput] =
      new ArgEncoder[AddProjectColumnInput] {
        override def encode(value: AddProjectColumnInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "name" -> implicitly[ArgEncoder[String]].encode(value.name),
              "projectId" -> implicitly[ArgEncoder[String]]
                .encode(value.projectId)
            )
          )

        override def typeName: String = "AddProjectColumnInput"
      }
  }

  case class AddPullRequestReviewCommentInput(
                                               body: String,
                                               clientMutationId: Option[String] = None,
                                               commitOID: Option[GitObjectID] = None,
                                               inReplyTo: Option[String] = None,
                                               path: Option[String] = None,
                                               position: Option[Int] = None,
                                               pullRequestId: Option[String] = None,
                                               pullRequestReviewId: Option[String] = None
                                             )

  object AddPullRequestReviewCommentInput {
    implicit val encoder: ArgEncoder[AddPullRequestReviewCommentInput] =
      new ArgEncoder[AddPullRequestReviewCommentInput] {
        override def encode(value: AddPullRequestReviewCommentInput): Value =
          ObjectValue(
            List(
              "body" -> implicitly[ArgEncoder[String]].encode(value.body),
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "commitOID" -> value.commitOID.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[GitObjectID]].encode(value)
              ),
              "inReplyTo" -> value.inReplyTo.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              ),
              "path" -> value.path.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              ),
              "position" -> value.position.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[Int]].encode(value)
              ),
              "pullRequestId" -> value.pullRequestId.fold(NullValue: Value)(
                value => implicitly[ArgEncoder[String]].encode(value)
              ),
              "pullRequestReviewId" -> value.pullRequestReviewId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value))
            )
          )

        override def typeName: String = "AddPullRequestReviewCommentInput"
      }
  }

  case class AddPullRequestReviewInput(
                                        body: Option[String] = None,
                                        clientMutationId: Option[String] = None,
                                        comments: Option[List[Option[DraftPullRequestReviewComment]]] = None,
                                        commitOID: Option[GitObjectID] = None,
                                        event: Option[PullRequestReviewEvent] = None,
                                        pullRequestId: String,
                                        threads: Option[List[Option[DraftPullRequestReviewThread]]] = None
                                      )

  object AddPullRequestReviewInput {
    implicit val encoder: ArgEncoder[AddPullRequestReviewInput] =
      new ArgEncoder[AddPullRequestReviewInput] {
        override def encode(value: AddPullRequestReviewInput): Value =
          ObjectValue(
            List(
              "body" -> value.body.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              ),
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "comments" -> value.comments.fold(NullValue: Value)(value =>
                ListValue(
                  value.map(value =>
                    value.fold(NullValue: Value)(value =>
                      implicitly[ArgEncoder[DraftPullRequestReviewComment]]
                        .encode(value)
                    )
                  )
                )
              ),
              "commitOID" -> value.commitOID.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[GitObjectID]].encode(value)
              ),
              "event" -> value.event.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[PullRequestReviewEvent]].encode(value)
              ),
              "pullRequestId" -> implicitly[ArgEncoder[String]]
                .encode(value.pullRequestId),
              "threads" -> value.threads.fold(NullValue: Value)(value =>
                ListValue(
                  value.map(value =>
                    value.fold(NullValue: Value)(value =>
                      implicitly[ArgEncoder[DraftPullRequestReviewThread]]
                        .encode(value)
                    )
                  )
                )
              )
            )
          )

        override def typeName: String = "AddPullRequestReviewInput"
      }
  }

  case class AddPullRequestReviewThreadInput(
                                              body: String,
                                              clientMutationId: Option[String] = None,
                                              line: Int,
                                              path: String,
                                              pullRequestId: Option[String] = None,
                                              pullRequestReviewId: Option[String] = None,
                                              side: Option[DiffSide] = None,
                                              startLine: Option[Int] = None,
                                              startSide: Option[DiffSide] = None
                                            )

  object AddPullRequestReviewThreadInput {
    implicit val encoder: ArgEncoder[AddPullRequestReviewThreadInput] =
      new ArgEncoder[AddPullRequestReviewThreadInput] {
        override def encode(value: AddPullRequestReviewThreadInput): Value =
          ObjectValue(
            List(
              "body" -> implicitly[ArgEncoder[String]].encode(value.body),
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "line" -> implicitly[ArgEncoder[Int]].encode(value.line),
              "path" -> implicitly[ArgEncoder[String]].encode(value.path),
              "pullRequestId" -> value.pullRequestId.fold(NullValue: Value)(
                value => implicitly[ArgEncoder[String]].encode(value)
              ),
              "pullRequestReviewId" -> value.pullRequestReviewId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "side" -> value.side.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[DiffSide]].encode(value)
              ),
              "startLine" -> value.startLine.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[Int]].encode(value)
              ),
              "startSide" -> value.startSide.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[DiffSide]].encode(value)
              )
            )
          )

        override def typeName: String = "AddPullRequestReviewThreadInput"
      }
  }

  case class AddReactionInput(
                               clientMutationId: Option[String] = None,
                               content: ReactionContent,
                               subjectId: String
                             )

  object AddReactionInput {
    implicit val encoder: ArgEncoder[AddReactionInput] =
      new ArgEncoder[AddReactionInput] {
        override def encode(value: AddReactionInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "content" -> implicitly[ArgEncoder[ReactionContent]]
                .encode(value.content),
              "subjectId" -> implicitly[ArgEncoder[String]]
                .encode(value.subjectId)
            )
          )

        override def typeName: String = "AddReactionInput"
      }
  }

  case class AddStarInput(
                           clientMutationId: Option[String] = None,
                           starrableId: String
                         )

  object AddStarInput {
    implicit val encoder: ArgEncoder[AddStarInput] =
      new ArgEncoder[AddStarInput] {
        override def encode(value: AddStarInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "starrableId" -> implicitly[ArgEncoder[String]]
                .encode(value.starrableId)
            )
          )

        override def typeName: String = "AddStarInput"
      }
  }

  case class ArchiveRepositoryInput(
                                     clientMutationId: Option[String] = None,
                                     repositoryId: String
                                   )

  object ArchiveRepositoryInput {
    implicit val encoder: ArgEncoder[ArchiveRepositoryInput] =
      new ArgEncoder[ArchiveRepositoryInput] {
        override def encode(value: ArchiveRepositoryInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "repositoryId" -> implicitly[ArgEncoder[String]]
                .encode(value.repositoryId)
            )
          )

        override def typeName: String = "ArchiveRepositoryInput"
      }
  }

  case class AuditLogOrder(
                            direction: Option[OrderDirection] = None,
                            field: Option[AuditLogOrderField] = None
                          )

  object AuditLogOrder {
    implicit val encoder: ArgEncoder[AuditLogOrder] =
      new ArgEncoder[AuditLogOrder] {
        override def encode(value: AuditLogOrder): Value =
          ObjectValue(
            List(
              "direction" -> value.direction.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[OrderDirection]].encode(value)
              ),
              "field" -> value.field.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[AuditLogOrderField]].encode(value)
              )
            )
          )

        override def typeName: String = "AuditLogOrder"
      }
  }

  case class CancelEnterpriseAdminInvitationInput(
                                                   clientMutationId: Option[String] = None,
                                                   invitationId: String
                                                 )

  object CancelEnterpriseAdminInvitationInput {
    implicit val encoder: ArgEncoder[CancelEnterpriseAdminInvitationInput] =
      new ArgEncoder[CancelEnterpriseAdminInvitationInput] {
        override def encode(
                             value: CancelEnterpriseAdminInvitationInput
                           ): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "invitationId" -> implicitly[ArgEncoder[String]]
                .encode(value.invitationId)
            )
          )

        override def typeName: String = "CancelEnterpriseAdminInvitationInput"
      }
  }

  case class ChangeUserStatusInput(
                                    clientMutationId: Option[String] = None,
                                    emoji: Option[String] = None,
                                    expiresAt: Option[DateTime] = None,
                                    limitedAvailability: Option[Boolean] = None,
                                    message: Option[String] = None,
                                    organizationId: Option[String] = None
                                  )

  object ChangeUserStatusInput {
    implicit val encoder: ArgEncoder[ChangeUserStatusInput] =
      new ArgEncoder[ChangeUserStatusInput] {
        override def encode(value: ChangeUserStatusInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "emoji" -> value.emoji.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              ),
              "expiresAt" -> value.expiresAt.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[DateTime]].encode(value)
              ),
              "limitedAvailability" -> value.limitedAvailability.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[Boolean]].encode(value)),
              "message" -> value.message.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              ),
              "organizationId" -> value.organizationId.fold(NullValue: Value)(
                value => implicitly[ArgEncoder[String]].encode(value)
              )
            )
          )

        override def typeName: String = "ChangeUserStatusInput"
      }
  }

  case class CheckAnnotationData(
                                  annotationLevel: CheckAnnotationLevel,
                                  location: CheckAnnotationRange,
                                  message: String,
                                  path: String,
                                  rawDetails: Option[String] = None,
                                  title: Option[String] = None
                                )

  object CheckAnnotationData {
    implicit val encoder: ArgEncoder[CheckAnnotationData] =
      new ArgEncoder[CheckAnnotationData] {
        override def encode(value: CheckAnnotationData): Value =
          ObjectValue(
            List(
              "annotationLevel" -> implicitly[ArgEncoder[CheckAnnotationLevel]]
                .encode(value.annotationLevel),
              "location" -> implicitly[ArgEncoder[CheckAnnotationRange]]
                .encode(value.location),
              "message" -> implicitly[ArgEncoder[String]].encode(value.message),
              "path" -> implicitly[ArgEncoder[String]].encode(value.path),
              "rawDetails" -> value.rawDetails.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              ),
              "title" -> value.title.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              )
            )
          )

        override def typeName: String = "CheckAnnotationData"
      }
  }

  case class CheckAnnotationRange(
                                   endColumn: Option[Int] = None,
                                   endLine: Int,
                                   startColumn: Option[Int] = None,
                                   startLine: Int
                                 )

  object CheckAnnotationRange {
    implicit val encoder: ArgEncoder[CheckAnnotationRange] =
      new ArgEncoder[CheckAnnotationRange] {
        override def encode(value: CheckAnnotationRange): Value =
          ObjectValue(
            List(
              "endColumn" -> value.endColumn.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[Int]].encode(value)
              ),
              "endLine" -> implicitly[ArgEncoder[Int]].encode(value.endLine),
              "startColumn" -> value.startColumn.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[Int]].encode(value)
              ),
              "startLine" -> implicitly[ArgEncoder[Int]].encode(value.startLine)
            )
          )

        override def typeName: String = "CheckAnnotationRange"
      }
  }

  case class CheckRunAction(
                             description: String,
                             identifier: String,
                             label: String
                           )

  object CheckRunAction {
    implicit val encoder: ArgEncoder[CheckRunAction] =
      new ArgEncoder[CheckRunAction] {
        override def encode(value: CheckRunAction): Value =
          ObjectValue(
            List(
              "description" -> implicitly[ArgEncoder[String]]
                .encode(value.description),
              "identifier" -> implicitly[ArgEncoder[String]]
                .encode(value.identifier),
              "label" -> implicitly[ArgEncoder[String]].encode(value.label)
            )
          )

        override def typeName: String = "CheckRunAction"
      }
  }

  case class CheckRunFilter(
                             appId: Option[Int] = None,
                             checkName: Option[String] = None,
                             checkType: Option[CheckRunType] = None,
                             status: Option[CheckStatusState] = None
                           )

  object CheckRunFilter {
    implicit val encoder: ArgEncoder[CheckRunFilter] =
      new ArgEncoder[CheckRunFilter] {
        override def encode(value: CheckRunFilter): Value =
          ObjectValue(
            List(
              "appId" -> value.appId.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[Int]].encode(value)
              ),
              "checkName" -> value.checkName.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              ),
              "checkType" -> value.checkType.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[CheckRunType]].encode(value)
              ),
              "status" -> value.status.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[CheckStatusState]].encode(value)
              )
            )
          )

        override def typeName: String = "CheckRunFilter"
      }
  }

  case class CheckRunOutput(
                             annotations: Option[List[CheckAnnotationData]] = None,
                             images: Option[List[CheckRunOutputImage]] = None,
                             summary: String,
                             text: Option[String] = None,
                             title: String
                           )

  object CheckRunOutput {
    implicit val encoder: ArgEncoder[CheckRunOutput] =
      new ArgEncoder[CheckRunOutput] {
        override def encode(value: CheckRunOutput): Value =
          ObjectValue(
            List(
              "annotations" -> value.annotations.fold(NullValue: Value)(value =>
                ListValue(
                  value.map(value =>
                    implicitly[ArgEncoder[CheckAnnotationData]].encode(value)
                  )
                )
              ),
              "images" -> value.images.fold(NullValue: Value)(value =>
                ListValue(
                  value.map(value =>
                    implicitly[ArgEncoder[CheckRunOutputImage]].encode(value)
                  )
                )
              ),
              "summary" -> implicitly[ArgEncoder[String]].encode(value.summary),
              "text" -> value.text.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              ),
              "title" -> implicitly[ArgEncoder[String]].encode(value.title)
            )
          )

        override def typeName: String = "CheckRunOutput"
      }
  }

  case class CheckRunOutputImage(
                                  alt: String,
                                  caption: Option[String] = None,
                                  imageUrl: URI
                                )

  object CheckRunOutputImage {
    implicit val encoder: ArgEncoder[CheckRunOutputImage] =
      new ArgEncoder[CheckRunOutputImage] {
        override def encode(value: CheckRunOutputImage): Value =
          ObjectValue(
            List(
              "alt" -> implicitly[ArgEncoder[String]].encode(value.alt),
              "caption" -> value.caption.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              ),
              "imageUrl" -> implicitly[ArgEncoder[URI]].encode(value.imageUrl)
            )
          )

        override def typeName: String = "CheckRunOutputImage"
      }
  }

  case class CheckSuiteAutoTriggerPreference(appId: String, setting: Boolean)

  object CheckSuiteAutoTriggerPreference {
    implicit val encoder: ArgEncoder[CheckSuiteAutoTriggerPreference] =
      new ArgEncoder[CheckSuiteAutoTriggerPreference] {
        override def encode(value: CheckSuiteAutoTriggerPreference): Value =
          ObjectValue(
            List(
              "appId" -> implicitly[ArgEncoder[String]].encode(value.appId),
              "setting" -> implicitly[ArgEncoder[Boolean]].encode(value.setting)
            )
          )

        override def typeName: String = "CheckSuiteAutoTriggerPreference"
      }
  }

  case class CheckSuiteFilter(
                               appId: Option[Int] = None,
                               checkName: Option[String] = None
                             )

  object CheckSuiteFilter {
    implicit val encoder: ArgEncoder[CheckSuiteFilter] =
      new ArgEncoder[CheckSuiteFilter] {
        override def encode(value: CheckSuiteFilter): Value =
          ObjectValue(
            List(
              "appId" -> value.appId.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[Int]].encode(value)
              ),
              "checkName" -> value.checkName.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              )
            )
          )

        override def typeName: String = "CheckSuiteFilter"
      }
  }

  case class ClearLabelsFromLabelableInput(
                                            clientMutationId: Option[String] = None,
                                            labelableId: String
                                          )

  object ClearLabelsFromLabelableInput {
    implicit val encoder: ArgEncoder[ClearLabelsFromLabelableInput] =
      new ArgEncoder[ClearLabelsFromLabelableInput] {
        override def encode(value: ClearLabelsFromLabelableInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "labelableId" -> implicitly[ArgEncoder[String]]
                .encode(value.labelableId)
            )
          )

        override def typeName: String = "ClearLabelsFromLabelableInput"
      }
  }

  case class CloneProjectInput(
                                body: Option[String] = None,
                                clientMutationId: Option[String] = None,
                                includeWorkflows: Boolean,
                                name: String,
                                public: Option[Boolean] = None,
                                sourceId: String,
                                targetOwnerId: String
                              )

  object CloneProjectInput {
    implicit val encoder: ArgEncoder[CloneProjectInput] =
      new ArgEncoder[CloneProjectInput] {
        override def encode(value: CloneProjectInput): Value =
          ObjectValue(
            List(
              "body" -> value.body.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              ),
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "includeWorkflows" -> implicitly[ArgEncoder[Boolean]]
                .encode(value.includeWorkflows),
              "name" -> implicitly[ArgEncoder[String]].encode(value.name),
              "public" -> value.public.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[Boolean]].encode(value)
              ),
              "sourceId" -> implicitly[ArgEncoder[String]]
                .encode(value.sourceId),
              "targetOwnerId" -> implicitly[ArgEncoder[String]]
                .encode(value.targetOwnerId)
            )
          )

        override def typeName: String = "CloneProjectInput"
      }
  }

  case class CloneTemplateRepositoryInput(
                                           clientMutationId: Option[String] = None,
                                           description: Option[String] = None,
                                           includeAllBranches: Option[Boolean] = None,
                                           name: String,
                                           ownerId: String,
                                           repositoryId: String,
                                           visibility: RepositoryVisibility
                                         )

  object CloneTemplateRepositoryInput {
    implicit val encoder: ArgEncoder[CloneTemplateRepositoryInput] =
      new ArgEncoder[CloneTemplateRepositoryInput] {
        override def encode(value: CloneTemplateRepositoryInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "description" -> value.description.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              ),
              "includeAllBranches" -> value.includeAllBranches.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[Boolean]].encode(value)),
              "name" -> implicitly[ArgEncoder[String]].encode(value.name),
              "ownerId" -> implicitly[ArgEncoder[String]].encode(value.ownerId),
              "repositoryId" -> implicitly[ArgEncoder[String]]
                .encode(value.repositoryId),
              "visibility" -> implicitly[ArgEncoder[RepositoryVisibility]]
                .encode(value.visibility)
            )
          )

        override def typeName: String = "CloneTemplateRepositoryInput"
      }
  }

  case class CloseIssueInput(
                              clientMutationId: Option[String] = None,
                              issueId: String
                            )

  object CloseIssueInput {
    implicit val encoder: ArgEncoder[CloseIssueInput] =
      new ArgEncoder[CloseIssueInput] {
        override def encode(value: CloseIssueInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "issueId" -> implicitly[ArgEncoder[String]].encode(value.issueId)
            )
          )

        override def typeName: String = "CloseIssueInput"
      }
  }

  case class ClosePullRequestInput(
                                    clientMutationId: Option[String] = None,
                                    pullRequestId: String
                                  )

  object ClosePullRequestInput {
    implicit val encoder: ArgEncoder[ClosePullRequestInput] =
      new ArgEncoder[ClosePullRequestInput] {
        override def encode(value: ClosePullRequestInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "pullRequestId" -> implicitly[ArgEncoder[String]]
                .encode(value.pullRequestId)
            )
          )

        override def typeName: String = "ClosePullRequestInput"
      }
  }

  case class CommitAuthor(
                           emails: Option[List[String]] = None,
                           id: Option[String] = None
                         )

  object CommitAuthor {
    implicit val encoder: ArgEncoder[CommitAuthor] =
      new ArgEncoder[CommitAuthor] {
        override def encode(value: CommitAuthor): Value =
          ObjectValue(
            List(
              "emails" -> value.emails.fold(NullValue: Value)(value =>
                ListValue(
                  value.map(value =>
                    implicitly[ArgEncoder[String]].encode(value)
                  )
                )
              ),
              "id" -> value.id.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              )
            )
          )

        override def typeName: String = "CommitAuthor"
      }
  }

  case class CommitContributionOrder(
                                      direction: OrderDirection,
                                      field: CommitContributionOrderField
                                    )

  object CommitContributionOrder {
    implicit val encoder: ArgEncoder[CommitContributionOrder] =
      new ArgEncoder[CommitContributionOrder] {
        override def encode(value: CommitContributionOrder): Value =
          ObjectValue(
            List(
              "direction" -> implicitly[ArgEncoder[OrderDirection]]
                .encode(value.direction),
              "field" -> implicitly[ArgEncoder[CommitContributionOrderField]]
                .encode(value.field)
            )
          )

        override def typeName: String = "CommitContributionOrder"
      }
  }

  case class ContributionOrder(direction: OrderDirection)

  object ContributionOrder {
    implicit val encoder: ArgEncoder[ContributionOrder] =
      new ArgEncoder[ContributionOrder] {
        override def encode(value: ContributionOrder): Value =
          ObjectValue(
            List(
              "direction" -> implicitly[ArgEncoder[OrderDirection]]
                .encode(value.direction)
            )
          )

        override def typeName: String = "ContributionOrder"
      }
  }

  case class ConvertProjectCardNoteToIssueInput(
                                                 body: Option[String] = None,
                                                 clientMutationId: Option[String] = None,
                                                 projectCardId: String,
                                                 repositoryId: String,
                                                 title: Option[String] = None
                                               )

  object ConvertProjectCardNoteToIssueInput {
    implicit val encoder: ArgEncoder[ConvertProjectCardNoteToIssueInput] =
      new ArgEncoder[ConvertProjectCardNoteToIssueInput] {
        override def encode(value: ConvertProjectCardNoteToIssueInput): Value =
          ObjectValue(
            List(
              "body" -> value.body.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              ),
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "projectCardId" -> implicitly[ArgEncoder[String]]
                .encode(value.projectCardId),
              "repositoryId" -> implicitly[ArgEncoder[String]]
                .encode(value.repositoryId),
              "title" -> value.title.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              )
            )
          )

        override def typeName: String = "ConvertProjectCardNoteToIssueInput"
      }
  }

  case class CreateBranchProtectionRuleInput(
                                              clientMutationId: Option[String] = None,
                                              dismissesStaleReviews: Option[Boolean] = None,
                                              isAdminEnforced: Option[Boolean] = None,
                                              pattern: String,
                                              pushActorIds: Option[List[String]] = None,
                                              repositoryId: String,
                                              requiredApprovingReviewCount: Option[Int] = None,
                                              requiredStatusCheckContexts: Option[List[String]] = None,
                                              requiresApprovingReviews: Option[Boolean] = None,
                                              requiresCodeOwnerReviews: Option[Boolean] = None,
                                              requiresCommitSignatures: Option[Boolean] = None,
                                              requiresStatusChecks: Option[Boolean] = None,
                                              requiresStrictStatusChecks: Option[Boolean] = None,
                                              restrictsPushes: Option[Boolean] = None,
                                              restrictsReviewDismissals: Option[Boolean] = None,
                                              reviewDismissalActorIds: Option[List[String]] = None
                                            )

  object CreateBranchProtectionRuleInput {
    implicit val encoder: ArgEncoder[CreateBranchProtectionRuleInput] =
      new ArgEncoder[CreateBranchProtectionRuleInput] {
        override def encode(value: CreateBranchProtectionRuleInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "dismissesStaleReviews" -> value.dismissesStaleReviews.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[Boolean]].encode(value)),
              "isAdminEnforced" -> value.isAdminEnforced.fold(NullValue: Value)(
                value => implicitly[ArgEncoder[Boolean]].encode(value)
              ),
              "pattern" -> implicitly[ArgEncoder[String]].encode(value.pattern),
              "pushActorIds" -> value.pushActorIds.fold(NullValue: Value)(
                value =>
                  ListValue(
                    value.map(value =>
                      implicitly[ArgEncoder[String]].encode(value)
                    )
                  )
              ),
              "repositoryId" -> implicitly[ArgEncoder[String]]
                .encode(value.repositoryId),
              "requiredApprovingReviewCount" -> value.requiredApprovingReviewCount
                .fold(NullValue: Value)(value =>
                  implicitly[ArgEncoder[Int]].encode(value)
                ),
              "requiredStatusCheckContexts" -> value.requiredStatusCheckContexts
                .fold(NullValue: Value)(value =>
                  ListValue(
                    value.map(value =>
                      implicitly[ArgEncoder[String]].encode(value)
                    )
                  )
                ),
              "requiresApprovingReviews" -> value.requiresApprovingReviews.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[Boolean]].encode(value)),
              "requiresCodeOwnerReviews" -> value.requiresCodeOwnerReviews.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[Boolean]].encode(value)),
              "requiresCommitSignatures" -> value.requiresCommitSignatures.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[Boolean]].encode(value)),
              "requiresStatusChecks" -> value.requiresStatusChecks.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[Boolean]].encode(value)),
              "requiresStrictStatusChecks" -> value.requiresStrictStatusChecks
                .fold(NullValue: Value)(value =>
                  implicitly[ArgEncoder[Boolean]].encode(value)
                ),
              "restrictsPushes" -> value.restrictsPushes.fold(NullValue: Value)(
                value => implicitly[ArgEncoder[Boolean]].encode(value)
              ),
              "restrictsReviewDismissals" -> value.restrictsReviewDismissals
                .fold(NullValue: Value)(value =>
                  implicitly[ArgEncoder[Boolean]].encode(value)
                ),
              "reviewDismissalActorIds" -> value.reviewDismissalActorIds
                .fold(NullValue: Value)(value =>
                  ListValue(
                    value.map(value =>
                      implicitly[ArgEncoder[String]].encode(value)
                    )
                  )
                )
            )
          )

        override def typeName: String = "CreateBranchProtectionRuleInput"
      }
  }

  case class CreateCheckRunInput(
                                  actions: Option[List[CheckRunAction]] = None,
                                  clientMutationId: Option[String] = None,
                                  completedAt: Option[DateTime] = None,
                                  conclusion: Option[CheckConclusionState] = None,
                                  detailsUrl: Option[URI] = None,
                                  externalId: Option[String] = None,
                                  headSha: GitObjectID,
                                  name: String,
                                  output: Option[CheckRunOutput] = None,
                                  repositoryId: String,
                                  startedAt: Option[DateTime] = None,
                                  status: Option[RequestableCheckStatusState] = None
                                )

  object CreateCheckRunInput {
    implicit val encoder: ArgEncoder[CreateCheckRunInput] =
      new ArgEncoder[CreateCheckRunInput] {
        override def encode(value: CreateCheckRunInput): Value =
          ObjectValue(
            List(
              "actions" -> value.actions.fold(NullValue: Value)(value =>
                ListValue(
                  value.map(value =>
                    implicitly[ArgEncoder[CheckRunAction]].encode(value)
                  )
                )
              ),
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "completedAt" -> value.completedAt.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[DateTime]].encode(value)
              ),
              "conclusion" -> value.conclusion.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[CheckConclusionState]].encode(value)
              ),
              "detailsUrl" -> value.detailsUrl.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[URI]].encode(value)
              ),
              "externalId" -> value.externalId.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              ),
              "headSha" -> implicitly[ArgEncoder[GitObjectID]]
                .encode(value.headSha),
              "name" -> implicitly[ArgEncoder[String]].encode(value.name),
              "output" -> value.output.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[CheckRunOutput]].encode(value)
              ),
              "repositoryId" -> implicitly[ArgEncoder[String]]
                .encode(value.repositoryId),
              "startedAt" -> value.startedAt.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[DateTime]].encode(value)
              ),
              "status" -> value.status.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[RequestableCheckStatusState]]
                  .encode(value)
              )
            )
          )

        override def typeName: String = "CreateCheckRunInput"
      }
  }

  case class CreateCheckSuiteInput(
                                    clientMutationId: Option[String] = None,
                                    headSha: GitObjectID,
                                    repositoryId: String
                                  )

  object CreateCheckSuiteInput {
    implicit val encoder: ArgEncoder[CreateCheckSuiteInput] =
      new ArgEncoder[CreateCheckSuiteInput] {
        override def encode(value: CreateCheckSuiteInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "headSha" -> implicitly[ArgEncoder[GitObjectID]]
                .encode(value.headSha),
              "repositoryId" -> implicitly[ArgEncoder[String]]
                .encode(value.repositoryId)
            )
          )

        override def typeName: String = "CreateCheckSuiteInput"
      }
  }

  case class CreateContentAttachmentInput(
                                           body: String,
                                           clientMutationId: Option[String] = None,
                                           contentReferenceId: String,
                                           title: String
                                         )

  object CreateContentAttachmentInput {
    implicit val encoder: ArgEncoder[CreateContentAttachmentInput] =
      new ArgEncoder[CreateContentAttachmentInput] {
        override def encode(value: CreateContentAttachmentInput): Value =
          ObjectValue(
            List(
              "body" -> implicitly[ArgEncoder[String]].encode(value.body),
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "contentReferenceId" -> implicitly[ArgEncoder[String]]
                .encode(value.contentReferenceId),
              "title" -> implicitly[ArgEncoder[String]].encode(value.title)
            )
          )

        override def typeName: String = "CreateContentAttachmentInput"
      }
  }

  case class CreateDeploymentInput(
                                    autoMerge: Option[Boolean] = None,
                                    clientMutationId: Option[String] = None,
                                    description: Option[String] = None,
                                    environment: Option[String] = None,
                                    payload: Option[String] = None,
                                    refId: String,
                                    repositoryId: String,
                                    requiredContexts: Option[List[String]] = None,
                                    task: Option[String] = None
                                  )

  object CreateDeploymentInput {
    implicit val encoder: ArgEncoder[CreateDeploymentInput] =
      new ArgEncoder[CreateDeploymentInput] {
        override def encode(value: CreateDeploymentInput): Value =
          ObjectValue(
            List(
              "autoMerge" -> value.autoMerge.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[Boolean]].encode(value)
              ),
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "description" -> value.description.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              ),
              "environment" -> value.environment.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              ),
              "payload" -> value.payload.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              ),
              "refId" -> implicitly[ArgEncoder[String]].encode(value.refId),
              "repositoryId" -> implicitly[ArgEncoder[String]]
                .encode(value.repositoryId),
              "requiredContexts" -> value.requiredContexts
                .fold(NullValue: Value)(value =>
                  ListValue(
                    value.map(value =>
                      implicitly[ArgEncoder[String]].encode(value)
                    )
                  )
                ),
              "task" -> value.task.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              )
            )
          )

        override def typeName: String = "CreateDeploymentInput"
      }
  }

  case class CreateDeploymentStatusInput(
                                          autoInactive: Option[Boolean] = None,
                                          clientMutationId: Option[String] = None,
                                          deploymentId: String,
                                          description: Option[String] = None,
                                          environment: Option[String] = None,
                                          environmentUrl: Option[String] = None,
                                          logUrl: Option[String] = None,
                                          state: DeploymentStatusState
                                        )

  object CreateDeploymentStatusInput {
    implicit val encoder: ArgEncoder[CreateDeploymentStatusInput] =
      new ArgEncoder[CreateDeploymentStatusInput] {
        override def encode(value: CreateDeploymentStatusInput): Value =
          ObjectValue(
            List(
              "autoInactive" -> value.autoInactive.fold(NullValue: Value)(
                value => implicitly[ArgEncoder[Boolean]].encode(value)
              ),
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "deploymentId" -> implicitly[ArgEncoder[String]]
                .encode(value.deploymentId),
              "description" -> value.description.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              ),
              "environment" -> value.environment.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              ),
              "environmentUrl" -> value.environmentUrl.fold(NullValue: Value)(
                value => implicitly[ArgEncoder[String]].encode(value)
              ),
              "logUrl" -> value.logUrl.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              ),
              "state" -> implicitly[ArgEncoder[DeploymentStatusState]]
                .encode(value.state)
            )
          )

        override def typeName: String = "CreateDeploymentStatusInput"
      }
  }

  case class CreateEnterpriseOrganizationInput(
                                                adminLogins: List[String] = Nil,
                                                billingEmail: String,
                                                clientMutationId: Option[String] = None,
                                                enterpriseId: String,
                                                login: String,
                                                profileName: String
                                              )

  object CreateEnterpriseOrganizationInput {
    implicit val encoder: ArgEncoder[CreateEnterpriseOrganizationInput] =
      new ArgEncoder[CreateEnterpriseOrganizationInput] {
        override def encode(value: CreateEnterpriseOrganizationInput): Value =
          ObjectValue(
            List(
              "adminLogins" -> ListValue(
                value.adminLogins.map(value =>
                  implicitly[ArgEncoder[String]].encode(value)
                )
              ),
              "billingEmail" -> implicitly[ArgEncoder[String]]
                .encode(value.billingEmail),
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "enterpriseId" -> implicitly[ArgEncoder[String]]
                .encode(value.enterpriseId),
              "login" -> implicitly[ArgEncoder[String]].encode(value.login),
              "profileName" -> implicitly[ArgEncoder[String]]
                .encode(value.profileName)
            )
          )

        override def typeName: String = "CreateEnterpriseOrganizationInput"
      }
  }

  case class CreateIpAllowListEntryInput(
                                          allowListValue: String,
                                          clientMutationId: Option[String] = None,
                                          isActive: Boolean,
                                          name: Option[String] = None,
                                          ownerId: String
                                        )

  object CreateIpAllowListEntryInput {
    implicit val encoder: ArgEncoder[CreateIpAllowListEntryInput] =
      new ArgEncoder[CreateIpAllowListEntryInput] {
        override def encode(value: CreateIpAllowListEntryInput): Value =
          ObjectValue(
            List(
              "allowListValue" -> implicitly[ArgEncoder[String]]
                .encode(value.allowListValue),
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "isActive" -> implicitly[ArgEncoder[Boolean]]
                .encode(value.isActive),
              "name" -> value.name.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              ),
              "ownerId" -> implicitly[ArgEncoder[String]].encode(value.ownerId)
            )
          )

        override def typeName: String = "CreateIpAllowListEntryInput"
      }
  }

  case class CreateIssueInput(
                               assigneeIds: Option[List[String]] = None,
                               body: Option[String] = None,
                               clientMutationId: Option[String] = None,
                               issueTemplate: Option[String] = None,
                               labelIds: Option[List[String]] = None,
                               milestoneId: Option[String] = None,
                               projectIds: Option[List[String]] = None,
                               repositoryId: String,
                               title: String
                             )

  object CreateIssueInput {
    implicit val encoder: ArgEncoder[CreateIssueInput] =
      new ArgEncoder[CreateIssueInput] {
        override def encode(value: CreateIssueInput): Value =
          ObjectValue(
            List(
              "assigneeIds" -> value.assigneeIds.fold(NullValue: Value)(value =>
                ListValue(
                  value.map(value =>
                    implicitly[ArgEncoder[String]].encode(value)
                  )
                )
              ),
              "body" -> value.body.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              ),
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "issueTemplate" -> value.issueTemplate.fold(NullValue: Value)(
                value => implicitly[ArgEncoder[String]].encode(value)
              ),
              "labelIds" -> value.labelIds.fold(NullValue: Value)(value =>
                ListValue(
                  value.map(value =>
                    implicitly[ArgEncoder[String]].encode(value)
                  )
                )
              ),
              "milestoneId" -> value.milestoneId.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              ),
              "projectIds" -> value.projectIds.fold(NullValue: Value)(value =>
                ListValue(
                  value.map(value =>
                    implicitly[ArgEncoder[String]].encode(value)
                  )
                )
              ),
              "repositoryId" -> implicitly[ArgEncoder[String]]
                .encode(value.repositoryId),
              "title" -> implicitly[ArgEncoder[String]].encode(value.title)
            )
          )

        override def typeName: String = "CreateIssueInput"
      }
  }

  case class CreateLabelInput(
                               clientMutationId: Option[String] = None,
                               color: String,
                               description: Option[String] = None,
                               name: String,
                               repositoryId: String
                             )

  object CreateLabelInput {
    implicit val encoder: ArgEncoder[CreateLabelInput] =
      new ArgEncoder[CreateLabelInput] {
        override def encode(value: CreateLabelInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "color" -> implicitly[ArgEncoder[String]].encode(value.color),
              "description" -> value.description.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              ),
              "name" -> implicitly[ArgEncoder[String]].encode(value.name),
              "repositoryId" -> implicitly[ArgEncoder[String]]
                .encode(value.repositoryId)
            )
          )

        override def typeName: String = "CreateLabelInput"
      }
  }

  case class CreateProjectInput(
                                 body: Option[String] = None,
                                 clientMutationId: Option[String] = None,
                                 name: String,
                                 ownerId: String,
                                 repositoryIds: Option[List[String]] = None,
                                 template: Option[ProjectTemplate] = None
                               )

  object CreateProjectInput {
    implicit val encoder: ArgEncoder[CreateProjectInput] =
      new ArgEncoder[CreateProjectInput] {
        override def encode(value: CreateProjectInput): Value =
          ObjectValue(
            List(
              "body" -> value.body.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              ),
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "name" -> implicitly[ArgEncoder[String]].encode(value.name),
              "ownerId" -> implicitly[ArgEncoder[String]].encode(value.ownerId),
              "repositoryIds" -> value.repositoryIds.fold(NullValue: Value)(
                value =>
                  ListValue(
                    value.map(value =>
                      implicitly[ArgEncoder[String]].encode(value)
                    )
                  )
              ),
              "template" -> value.template.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[ProjectTemplate]].encode(value)
              )
            )
          )

        override def typeName: String = "CreateProjectInput"
      }
  }

  case class CreatePullRequestInput(
                                     baseRefName: String,
                                     body: Option[String] = None,
                                     clientMutationId: Option[String] = None,
                                     draft: Option[Boolean] = None,
                                     headRefName: String,
                                     maintainerCanModify: Option[Boolean] = None,
                                     repositoryId: String,
                                     title: String
                                   )

  object CreatePullRequestInput {
    implicit val encoder: ArgEncoder[CreatePullRequestInput] =
      new ArgEncoder[CreatePullRequestInput] {
        override def encode(value: CreatePullRequestInput): Value =
          ObjectValue(
            List(
              "baseRefName" -> implicitly[ArgEncoder[String]]
                .encode(value.baseRefName),
              "body" -> value.body.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              ),
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "draft" -> value.draft.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[Boolean]].encode(value)
              ),
              "headRefName" -> implicitly[ArgEncoder[String]]
                .encode(value.headRefName),
              "maintainerCanModify" -> value.maintainerCanModify.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[Boolean]].encode(value)),
              "repositoryId" -> implicitly[ArgEncoder[String]]
                .encode(value.repositoryId),
              "title" -> implicitly[ArgEncoder[String]].encode(value.title)
            )
          )

        override def typeName: String = "CreatePullRequestInput"
      }
  }

  case class CreateRefInput(
                             clientMutationId: Option[String] = None,
                             name: String,
                             oid: GitObjectID,
                             repositoryId: String
                           )

  object CreateRefInput {
    implicit val encoder: ArgEncoder[CreateRefInput] =
      new ArgEncoder[CreateRefInput] {
        override def encode(value: CreateRefInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "name" -> implicitly[ArgEncoder[String]].encode(value.name),
              "oid" -> implicitly[ArgEncoder[GitObjectID]].encode(value.oid),
              "repositoryId" -> implicitly[ArgEncoder[String]]
                .encode(value.repositoryId)
            )
          )

        override def typeName: String = "CreateRefInput"
      }
  }

  case class CreateRepositoryInput(
                                    clientMutationId: Option[String] = None,
                                    description: Option[String] = None,
                                    hasIssuesEnabled: Option[Boolean] = None,
                                    hasWikiEnabled: Option[Boolean] = None,
                                    homepageUrl: Option[URI] = None,
                                    name: String,
                                    ownerId: Option[String] = None,
                                    teamId: Option[String] = None,
                                    template: Option[Boolean] = None,
                                    visibility: RepositoryVisibility
                                  )

  object CreateRepositoryInput {
    implicit val encoder: ArgEncoder[CreateRepositoryInput] =
      new ArgEncoder[CreateRepositoryInput] {
        override def encode(value: CreateRepositoryInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "description" -> value.description.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              ),
              "hasIssuesEnabled" -> value.hasIssuesEnabled.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[Boolean]].encode(value)),
              "hasWikiEnabled" -> value.hasWikiEnabled.fold(NullValue: Value)(
                value => implicitly[ArgEncoder[Boolean]].encode(value)
              ),
              "homepageUrl" -> value.homepageUrl.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[URI]].encode(value)
              ),
              "name" -> implicitly[ArgEncoder[String]].encode(value.name),
              "ownerId" -> value.ownerId.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              ),
              "teamId" -> value.teamId.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              ),
              "template" -> value.template.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[Boolean]].encode(value)
              ),
              "visibility" -> implicitly[ArgEncoder[RepositoryVisibility]]
                .encode(value.visibility)
            )
          )

        override def typeName: String = "CreateRepositoryInput"
      }
  }

  case class CreateTeamDiscussionCommentInput(
                                               body: String,
                                               clientMutationId: Option[String] = None,
                                               discussionId: String
                                             )

  object CreateTeamDiscussionCommentInput {
    implicit val encoder: ArgEncoder[CreateTeamDiscussionCommentInput] =
      new ArgEncoder[CreateTeamDiscussionCommentInput] {
        override def encode(value: CreateTeamDiscussionCommentInput): Value =
          ObjectValue(
            List(
              "body" -> implicitly[ArgEncoder[String]].encode(value.body),
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "discussionId" -> implicitly[ArgEncoder[String]]
                .encode(value.discussionId)
            )
          )

        override def typeName: String = "CreateTeamDiscussionCommentInput"
      }
  }

  case class CreateTeamDiscussionInput(
                                        body: String,
                                        clientMutationId: Option[String] = None,
                                        `private`: Option[Boolean] = None,
                                        teamId: String,
                                        title: String
                                      )

  object CreateTeamDiscussionInput {
    implicit val encoder: ArgEncoder[CreateTeamDiscussionInput] =
      new ArgEncoder[CreateTeamDiscussionInput] {
        override def encode(value: CreateTeamDiscussionInput): Value =
          ObjectValue(
            List(
              "body" -> implicitly[ArgEncoder[String]].encode(value.body),
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "private" -> value.`private`.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[Boolean]].encode(value)
              ),
              "teamId" -> implicitly[ArgEncoder[String]].encode(value.teamId),
              "title" -> implicitly[ArgEncoder[String]].encode(value.title)
            )
          )

        override def typeName: String = "CreateTeamDiscussionInput"
      }
  }

  case class DeclineTopicSuggestionInput(
                                          clientMutationId: Option[String] = None,
                                          name: String,
                                          reason: TopicSuggestionDeclineReason,
                                          repositoryId: String
                                        )

  object DeclineTopicSuggestionInput {
    implicit val encoder: ArgEncoder[DeclineTopicSuggestionInput] =
      new ArgEncoder[DeclineTopicSuggestionInput] {
        override def encode(value: DeclineTopicSuggestionInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "name" -> implicitly[ArgEncoder[String]].encode(value.name),
              "reason" -> implicitly[ArgEncoder[TopicSuggestionDeclineReason]]
                .encode(value.reason),
              "repositoryId" -> implicitly[ArgEncoder[String]]
                .encode(value.repositoryId)
            )
          )

        override def typeName: String = "DeclineTopicSuggestionInput"
      }
  }

  case class DeleteBranchProtectionRuleInput(
                                              branchProtectionRuleId: String,
                                              clientMutationId: Option[String] = None
                                            )

  object DeleteBranchProtectionRuleInput {
    implicit val encoder: ArgEncoder[DeleteBranchProtectionRuleInput] =
      new ArgEncoder[DeleteBranchProtectionRuleInput] {
        override def encode(value: DeleteBranchProtectionRuleInput): Value =
          ObjectValue(
            List(
              "branchProtectionRuleId" -> implicitly[ArgEncoder[String]]
                .encode(value.branchProtectionRuleId),
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value))
            )
          )

        override def typeName: String = "DeleteBranchProtectionRuleInput"
      }
  }

  case class DeleteDeploymentInput(
                                    clientMutationId: Option[String] = None,
                                    id: String
                                  )

  object DeleteDeploymentInput {
    implicit val encoder: ArgEncoder[DeleteDeploymentInput] =
      new ArgEncoder[DeleteDeploymentInput] {
        override def encode(value: DeleteDeploymentInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "id" -> implicitly[ArgEncoder[String]].encode(value.id)
            )
          )

        override def typeName: String = "DeleteDeploymentInput"
      }
  }

  case class DeleteIpAllowListEntryInput(
                                          clientMutationId: Option[String] = None,
                                          ipAllowListEntryId: String
                                        )

  object DeleteIpAllowListEntryInput {
    implicit val encoder: ArgEncoder[DeleteIpAllowListEntryInput] =
      new ArgEncoder[DeleteIpAllowListEntryInput] {
        override def encode(value: DeleteIpAllowListEntryInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "ipAllowListEntryId" -> implicitly[ArgEncoder[String]]
                .encode(value.ipAllowListEntryId)
            )
          )

        override def typeName: String = "DeleteIpAllowListEntryInput"
      }
  }

  case class DeleteIssueCommentInput(
                                      clientMutationId: Option[String] = None,
                                      id: String
                                    )

  object DeleteIssueCommentInput {
    implicit val encoder: ArgEncoder[DeleteIssueCommentInput] =
      new ArgEncoder[DeleteIssueCommentInput] {
        override def encode(value: DeleteIssueCommentInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "id" -> implicitly[ArgEncoder[String]].encode(value.id)
            )
          )

        override def typeName: String = "DeleteIssueCommentInput"
      }
  }

  case class DeleteIssueInput(
                               clientMutationId: Option[String] = None,
                               issueId: String
                             )

  object DeleteIssueInput {
    implicit val encoder: ArgEncoder[DeleteIssueInput] =
      new ArgEncoder[DeleteIssueInput] {
        override def encode(value: DeleteIssueInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "issueId" -> implicitly[ArgEncoder[String]].encode(value.issueId)
            )
          )

        override def typeName: String = "DeleteIssueInput"
      }
  }

  case class DeleteLabelInput(
                               clientMutationId: Option[String] = None,
                               id: String
                             )

  object DeleteLabelInput {
    implicit val encoder: ArgEncoder[DeleteLabelInput] =
      new ArgEncoder[DeleteLabelInput] {
        override def encode(value: DeleteLabelInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "id" -> implicitly[ArgEncoder[String]].encode(value.id)
            )
          )

        override def typeName: String = "DeleteLabelInput"
      }
  }

  case class DeletePackageVersionInput(
                                        clientMutationId: Option[String] = None,
                                        packageVersionId: String
                                      )

  object DeletePackageVersionInput {
    implicit val encoder: ArgEncoder[DeletePackageVersionInput] =
      new ArgEncoder[DeletePackageVersionInput] {
        override def encode(value: DeletePackageVersionInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "packageVersionId" -> implicitly[ArgEncoder[String]]
                .encode(value.packageVersionId)
            )
          )

        override def typeName: String = "DeletePackageVersionInput"
      }
  }

  case class DeleteProjectCardInput(
                                     cardId: String,
                                     clientMutationId: Option[String] = None
                                   )

  object DeleteProjectCardInput {
    implicit val encoder: ArgEncoder[DeleteProjectCardInput] =
      new ArgEncoder[DeleteProjectCardInput] {
        override def encode(value: DeleteProjectCardInput): Value =
          ObjectValue(
            List(
              "cardId" -> implicitly[ArgEncoder[String]].encode(value.cardId),
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value))
            )
          )

        override def typeName: String = "DeleteProjectCardInput"
      }
  }

  case class DeleteProjectColumnInput(
                                       clientMutationId: Option[String] = None,
                                       columnId: String
                                     )

  object DeleteProjectColumnInput {
    implicit val encoder: ArgEncoder[DeleteProjectColumnInput] =
      new ArgEncoder[DeleteProjectColumnInput] {
        override def encode(value: DeleteProjectColumnInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "columnId" -> implicitly[ArgEncoder[String]]
                .encode(value.columnId)
            )
          )

        override def typeName: String = "DeleteProjectColumnInput"
      }
  }

  case class DeleteProjectInput(
                                 clientMutationId: Option[String] = None,
                                 projectId: String
                               )

  object DeleteProjectInput {
    implicit val encoder: ArgEncoder[DeleteProjectInput] =
      new ArgEncoder[DeleteProjectInput] {
        override def encode(value: DeleteProjectInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "projectId" -> implicitly[ArgEncoder[String]]
                .encode(value.projectId)
            )
          )

        override def typeName: String = "DeleteProjectInput"
      }
  }

  case class DeletePullRequestReviewCommentInput(
                                                  clientMutationId: Option[String] = None,
                                                  id: String
                                                )

  object DeletePullRequestReviewCommentInput {
    implicit val encoder: ArgEncoder[DeletePullRequestReviewCommentInput] =
      new ArgEncoder[DeletePullRequestReviewCommentInput] {
        override def encode(value: DeletePullRequestReviewCommentInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "id" -> implicitly[ArgEncoder[String]].encode(value.id)
            )
          )

        override def typeName: String = "DeletePullRequestReviewCommentInput"
      }
  }

  case class DeletePullRequestReviewInput(
                                           clientMutationId: Option[String] = None,
                                           pullRequestReviewId: String
                                         )

  object DeletePullRequestReviewInput {
    implicit val encoder: ArgEncoder[DeletePullRequestReviewInput] =
      new ArgEncoder[DeletePullRequestReviewInput] {
        override def encode(value: DeletePullRequestReviewInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "pullRequestReviewId" -> implicitly[ArgEncoder[String]]
                .encode(value.pullRequestReviewId)
            )
          )

        override def typeName: String = "DeletePullRequestReviewInput"
      }
  }

  case class DeleteRefInput(
                             clientMutationId: Option[String] = None,
                             refId: String
                           )

  object DeleteRefInput {
    implicit val encoder: ArgEncoder[DeleteRefInput] =
      new ArgEncoder[DeleteRefInput] {
        override def encode(value: DeleteRefInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "refId" -> implicitly[ArgEncoder[String]].encode(value.refId)
            )
          )

        override def typeName: String = "DeleteRefInput"
      }
  }

  case class DeleteTeamDiscussionCommentInput(
                                               clientMutationId: Option[String] = None,
                                               id: String
                                             )

  object DeleteTeamDiscussionCommentInput {
    implicit val encoder: ArgEncoder[DeleteTeamDiscussionCommentInput] =
      new ArgEncoder[DeleteTeamDiscussionCommentInput] {
        override def encode(value: DeleteTeamDiscussionCommentInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "id" -> implicitly[ArgEncoder[String]].encode(value.id)
            )
          )

        override def typeName: String = "DeleteTeamDiscussionCommentInput"
      }
  }

  case class DeleteTeamDiscussionInput(
                                        clientMutationId: Option[String] = None,
                                        id: String
                                      )

  object DeleteTeamDiscussionInput {
    implicit val encoder: ArgEncoder[DeleteTeamDiscussionInput] =
      new ArgEncoder[DeleteTeamDiscussionInput] {
        override def encode(value: DeleteTeamDiscussionInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "id" -> implicitly[ArgEncoder[String]].encode(value.id)
            )
          )

        override def typeName: String = "DeleteTeamDiscussionInput"
      }
  }

  case class DeploymentOrder(
                              direction: OrderDirection,
                              field: DeploymentOrderField
                            )

  object DeploymentOrder {
    implicit val encoder: ArgEncoder[DeploymentOrder] =
      new ArgEncoder[DeploymentOrder] {
        override def encode(value: DeploymentOrder): Value =
          ObjectValue(
            List(
              "direction" -> implicitly[ArgEncoder[OrderDirection]]
                .encode(value.direction),
              "field" -> implicitly[ArgEncoder[DeploymentOrderField]]
                .encode(value.field)
            )
          )

        override def typeName: String = "DeploymentOrder"
      }
  }

  case class DismissPullRequestReviewInput(
                                            clientMutationId: Option[String] = None,
                                            message: String,
                                            pullRequestReviewId: String
                                          )

  object DismissPullRequestReviewInput {
    implicit val encoder: ArgEncoder[DismissPullRequestReviewInput] =
      new ArgEncoder[DismissPullRequestReviewInput] {
        override def encode(value: DismissPullRequestReviewInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "message" -> implicitly[ArgEncoder[String]].encode(value.message),
              "pullRequestReviewId" -> implicitly[ArgEncoder[String]]
                .encode(value.pullRequestReviewId)
            )
          )

        override def typeName: String = "DismissPullRequestReviewInput"
      }
  }

  case class DraftPullRequestReviewComment(
                                            body: String,
                                            path: String,
                                            position: Int
                                          )

  object DraftPullRequestReviewComment {
    implicit val encoder: ArgEncoder[DraftPullRequestReviewComment] =
      new ArgEncoder[DraftPullRequestReviewComment] {
        override def encode(value: DraftPullRequestReviewComment): Value =
          ObjectValue(
            List(
              "body" -> implicitly[ArgEncoder[String]].encode(value.body),
              "path" -> implicitly[ArgEncoder[String]].encode(value.path),
              "position" -> implicitly[ArgEncoder[Int]].encode(value.position)
            )
          )

        override def typeName: String = "DraftPullRequestReviewComment"
      }
  }

  case class DraftPullRequestReviewThread(
                                           body: String,
                                           line: Int,
                                           path: String,
                                           side: Option[DiffSide] = None,
                                           startLine: Option[Int] = None,
                                           startSide: Option[DiffSide] = None
                                         )

  object DraftPullRequestReviewThread {
    implicit val encoder: ArgEncoder[DraftPullRequestReviewThread] =
      new ArgEncoder[DraftPullRequestReviewThread] {
        override def encode(value: DraftPullRequestReviewThread): Value =
          ObjectValue(
            List(
              "body" -> implicitly[ArgEncoder[String]].encode(value.body),
              "line" -> implicitly[ArgEncoder[Int]].encode(value.line),
              "path" -> implicitly[ArgEncoder[String]].encode(value.path),
              "side" -> value.side.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[DiffSide]].encode(value)
              ),
              "startLine" -> value.startLine.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[Int]].encode(value)
              ),
              "startSide" -> value.startSide.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[DiffSide]].encode(value)
              )
            )
          )

        override def typeName: String = "DraftPullRequestReviewThread"
      }
  }

  case class EnterpriseAdministratorInvitationOrder(
                                                     direction: OrderDirection,
                                                     field: EnterpriseAdministratorInvitationOrderField
                                                   )

  object EnterpriseAdministratorInvitationOrder {
    implicit val encoder: ArgEncoder[EnterpriseAdministratorInvitationOrder] =
      new ArgEncoder[EnterpriseAdministratorInvitationOrder] {
        override def encode(
                             value: EnterpriseAdministratorInvitationOrder
                           ): Value =
          ObjectValue(
            List(
              "direction" -> implicitly[ArgEncoder[OrderDirection]]
                .encode(value.direction),
              "field" -> implicitly[ArgEncoder[
                EnterpriseAdministratorInvitationOrderField
              ]].encode(value.field)
            )
          )

        override def typeName: String = "EnterpriseAdministratorInvitationOrder"
      }
  }

  case class EnterpriseMemberOrder(
                                    direction: OrderDirection,
                                    field: EnterpriseMemberOrderField
                                  )

  object EnterpriseMemberOrder {
    implicit val encoder: ArgEncoder[EnterpriseMemberOrder] =
      new ArgEncoder[EnterpriseMemberOrder] {
        override def encode(value: EnterpriseMemberOrder): Value =
          ObjectValue(
            List(
              "direction" -> implicitly[ArgEncoder[OrderDirection]]
                .encode(value.direction),
              "field" -> implicitly[ArgEncoder[EnterpriseMemberOrderField]]
                .encode(value.field)
            )
          )

        override def typeName: String = "EnterpriseMemberOrder"
      }
  }

  case class EnterpriseServerInstallationOrder(
                                                direction: OrderDirection,
                                                field: EnterpriseServerInstallationOrderField
                                              )

  object EnterpriseServerInstallationOrder {
    implicit val encoder: ArgEncoder[EnterpriseServerInstallationOrder] =
      new ArgEncoder[EnterpriseServerInstallationOrder] {
        override def encode(value: EnterpriseServerInstallationOrder): Value =
          ObjectValue(
            List(
              "direction" -> implicitly[ArgEncoder[OrderDirection]]
                .encode(value.direction),
              "field" -> implicitly[ArgEncoder[
                EnterpriseServerInstallationOrderField
              ]].encode(value.field)
            )
          )

        override def typeName: String = "EnterpriseServerInstallationOrder"
      }
  }

  case class EnterpriseServerUserAccountEmailOrder(
                                                    direction: OrderDirection,
                                                    field: EnterpriseServerUserAccountEmailOrderField
                                                  )

  object EnterpriseServerUserAccountEmailOrder {
    implicit val encoder: ArgEncoder[EnterpriseServerUserAccountEmailOrder] =
      new ArgEncoder[EnterpriseServerUserAccountEmailOrder] {
        override def encode(
                             value: EnterpriseServerUserAccountEmailOrder
                           ): Value =
          ObjectValue(
            List(
              "direction" -> implicitly[ArgEncoder[OrderDirection]]
                .encode(value.direction),
              "field" -> implicitly[ArgEncoder[
                EnterpriseServerUserAccountEmailOrderField
              ]].encode(value.field)
            )
          )

        override def typeName: String = "EnterpriseServerUserAccountEmailOrder"
      }
  }

  case class EnterpriseServerUserAccountOrder(
                                               direction: OrderDirection,
                                               field: EnterpriseServerUserAccountOrderField
                                             )

  object EnterpriseServerUserAccountOrder {
    implicit val encoder: ArgEncoder[EnterpriseServerUserAccountOrder] =
      new ArgEncoder[EnterpriseServerUserAccountOrder] {
        override def encode(value: EnterpriseServerUserAccountOrder): Value =
          ObjectValue(
            List(
              "direction" -> implicitly[ArgEncoder[OrderDirection]]
                .encode(value.direction),
              "field" -> implicitly[ArgEncoder[
                EnterpriseServerUserAccountOrderField
              ]].encode(value.field)
            )
          )

        override def typeName: String = "EnterpriseServerUserAccountOrder"
      }
  }

  case class EnterpriseServerUserAccountsUploadOrder(
                                                      direction: OrderDirection,
                                                      field: EnterpriseServerUserAccountsUploadOrderField
                                                    )

  object EnterpriseServerUserAccountsUploadOrder {
    implicit val encoder: ArgEncoder[EnterpriseServerUserAccountsUploadOrder] =
      new ArgEncoder[EnterpriseServerUserAccountsUploadOrder] {
        override def encode(
                             value: EnterpriseServerUserAccountsUploadOrder
                           ): Value =
          ObjectValue(
            List(
              "direction" -> implicitly[ArgEncoder[OrderDirection]]
                .encode(value.direction),
              "field" -> implicitly[ArgEncoder[
                EnterpriseServerUserAccountsUploadOrderField
              ]].encode(value.field)
            )
          )

        override def typeName: String =
          "EnterpriseServerUserAccountsUploadOrder"
      }
  }

  case class FollowUserInput(
                              clientMutationId: Option[String] = None,
                              userId: String
                            )

  object FollowUserInput {
    implicit val encoder: ArgEncoder[FollowUserInput] =
      new ArgEncoder[FollowUserInput] {
        override def encode(value: FollowUserInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "userId" -> implicitly[ArgEncoder[String]].encode(value.userId)
            )
          )

        override def typeName: String = "FollowUserInput"
      }
  }

  case class GistOrder(direction: OrderDirection, field: GistOrderField)

  object GistOrder {
    implicit val encoder: ArgEncoder[GistOrder] = new ArgEncoder[GistOrder] {
      override def encode(value: GistOrder): Value =
        ObjectValue(
          List(
            "direction" -> implicitly[ArgEncoder[OrderDirection]]
              .encode(value.direction),
            "field" -> implicitly[ArgEncoder[GistOrderField]]
              .encode(value.field)
          )
        )

      override def typeName: String = "GistOrder"
    }
  }

  case class ImportProjectInput(
                                 body: Option[String] = None,
                                 clientMutationId: Option[String] = None,
                                 columnImports: List[ProjectColumnImport] = Nil,
                                 name: String,
                                 ownerName: String,
                                 public: Option[Boolean] = None
                               )

  object ImportProjectInput {
    implicit val encoder: ArgEncoder[ImportProjectInput] =
      new ArgEncoder[ImportProjectInput] {
        override def encode(value: ImportProjectInput): Value =
          ObjectValue(
            List(
              "body" -> value.body.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              ),
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "columnImports" -> ListValue(
                value.columnImports.map(value =>
                  implicitly[ArgEncoder[ProjectColumnImport]].encode(value)
                )
              ),
              "name" -> implicitly[ArgEncoder[String]].encode(value.name),
              "ownerName" -> implicitly[ArgEncoder[String]]
                .encode(value.ownerName),
              "public" -> value.public.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[Boolean]].encode(value)
              )
            )
          )

        override def typeName: String = "ImportProjectInput"
      }
  }

  case class InviteEnterpriseAdminInput(
                                         clientMutationId: Option[String] = None,
                                         email: Option[String] = None,
                                         enterpriseId: String,
                                         invitee: Option[String] = None,
                                         role: Option[EnterpriseAdministratorRole] = None
                                       )

  object InviteEnterpriseAdminInput {
    implicit val encoder: ArgEncoder[InviteEnterpriseAdminInput] =
      new ArgEncoder[InviteEnterpriseAdminInput] {
        override def encode(value: InviteEnterpriseAdminInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "email" -> value.email.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              ),
              "enterpriseId" -> implicitly[ArgEncoder[String]]
                .encode(value.enterpriseId),
              "invitee" -> value.invitee.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              ),
              "role" -> value.role.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[EnterpriseAdministratorRole]]
                  .encode(value)
              )
            )
          )

        override def typeName: String = "InviteEnterpriseAdminInput"
      }
  }

  case class IpAllowListEntryOrder(
                                    direction: OrderDirection,
                                    field: IpAllowListEntryOrderField
                                  )

  object IpAllowListEntryOrder {
    implicit val encoder: ArgEncoder[IpAllowListEntryOrder] =
      new ArgEncoder[IpAllowListEntryOrder] {
        override def encode(value: IpAllowListEntryOrder): Value =
          ObjectValue(
            List(
              "direction" -> implicitly[ArgEncoder[OrderDirection]]
                .encode(value.direction),
              "field" -> implicitly[ArgEncoder[IpAllowListEntryOrderField]]
                .encode(value.field)
            )
          )

        override def typeName: String = "IpAllowListEntryOrder"
      }
  }

  case class IssueFilters(
                           assignee: Option[String] = None,
                           createdBy: Option[String] = None,
                           labels: Option[List[String]] = None,
                           mentioned: Option[String] = None,
                           milestone: Option[String] = None,
                           since: Option[DateTime] = None,
                           states: Option[List[IssueState]] = None,
                           viewerSubscribed: Option[Boolean] = None
                         )

  object IssueFilters {
    implicit val encoder: ArgEncoder[IssueFilters] =
      new ArgEncoder[IssueFilters] {
        override def encode(value: IssueFilters): Value =
          ObjectValue(
            List(
              "assignee" -> value.assignee.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              ),
              "createdBy" -> value.createdBy.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              ),
              "labels" -> value.labels.fold(NullValue: Value)(value =>
                ListValue(
                  value.map(value =>
                    implicitly[ArgEncoder[String]].encode(value)
                  )
                )
              ),
              "mentioned" -> value.mentioned.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              ),
              "milestone" -> value.milestone.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              ),
              "since" -> value.since.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[DateTime]].encode(value)
              ),
              "states" -> value.states.fold(NullValue: Value)(value =>
                ListValue(
                  value.map(value =>
                    implicitly[ArgEncoder[IssueState]].encode(value)
                  )
                )
              ),
              "viewerSubscribed" -> value.viewerSubscribed.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[Boolean]].encode(value))
            )
          )

        override def typeName: String = "IssueFilters"
      }
  }

  case class IssueOrder(direction: OrderDirection, field: IssueOrderField)

  object IssueOrder {
    implicit val encoder: ArgEncoder[IssueOrder] = new ArgEncoder[IssueOrder] {
      override def encode(value: IssueOrder): Value =
        ObjectValue(
          List(
            "direction" -> implicitly[ArgEncoder[OrderDirection]]
              .encode(value.direction),
            "field" -> implicitly[ArgEncoder[IssueOrderField]]
              .encode(value.field)
          )
        )

      override def typeName: String = "IssueOrder"
    }
  }

  case class LabelOrder(direction: OrderDirection, field: LabelOrderField)

  object LabelOrder {
    implicit val encoder: ArgEncoder[LabelOrder] = new ArgEncoder[LabelOrder] {
      override def encode(value: LabelOrder): Value =
        ObjectValue(
          List(
            "direction" -> implicitly[ArgEncoder[OrderDirection]]
              .encode(value.direction),
            "field" -> implicitly[ArgEncoder[LabelOrderField]]
              .encode(value.field)
          )
        )

      override def typeName: String = "LabelOrder"
    }
  }

  case class LanguageOrder(direction: OrderDirection, field: LanguageOrderField)

  object LanguageOrder {
    implicit val encoder: ArgEncoder[LanguageOrder] =
      new ArgEncoder[LanguageOrder] {
        override def encode(value: LanguageOrder): Value =
          ObjectValue(
            List(
              "direction" -> implicitly[ArgEncoder[OrderDirection]]
                .encode(value.direction),
              "field" -> implicitly[ArgEncoder[LanguageOrderField]]
                .encode(value.field)
            )
          )

        override def typeName: String = "LanguageOrder"
      }
  }

  case class LinkRepositoryToProjectInput(
                                           clientMutationId: Option[String] = None,
                                           projectId: String,
                                           repositoryId: String
                                         )

  object LinkRepositoryToProjectInput {
    implicit val encoder: ArgEncoder[LinkRepositoryToProjectInput] =
      new ArgEncoder[LinkRepositoryToProjectInput] {
        override def encode(value: LinkRepositoryToProjectInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "projectId" -> implicitly[ArgEncoder[String]]
                .encode(value.projectId),
              "repositoryId" -> implicitly[ArgEncoder[String]]
                .encode(value.repositoryId)
            )
          )

        override def typeName: String = "LinkRepositoryToProjectInput"
      }
  }

  case class LockLockableInput(
                                clientMutationId: Option[String] = None,
                                lockReason: Option[LockReason] = None,
                                lockableId: String
                              )

  object LockLockableInput {
    implicit val encoder: ArgEncoder[LockLockableInput] =
      new ArgEncoder[LockLockableInput] {
        override def encode(value: LockLockableInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "lockReason" -> value.lockReason.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[LockReason]].encode(value)
              ),
              "lockableId" -> implicitly[ArgEncoder[String]]
                .encode(value.lockableId)
            )
          )

        override def typeName: String = "LockLockableInput"
      }
  }

  case class MarkFileAsViewedInput(
                                    clientMutationId: Option[String] = None,
                                    path: String,
                                    pullRequestId: String
                                  )

  object MarkFileAsViewedInput {
    implicit val encoder: ArgEncoder[MarkFileAsViewedInput] =
      new ArgEncoder[MarkFileAsViewedInput] {
        override def encode(value: MarkFileAsViewedInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "path" -> implicitly[ArgEncoder[String]].encode(value.path),
              "pullRequestId" -> implicitly[ArgEncoder[String]]
                .encode(value.pullRequestId)
            )
          )

        override def typeName: String = "MarkFileAsViewedInput"
      }
  }

  case class MarkPullRequestReadyForReviewInput(
                                                 clientMutationId: Option[String] = None,
                                                 pullRequestId: String
                                               )

  object MarkPullRequestReadyForReviewInput {
    implicit val encoder: ArgEncoder[MarkPullRequestReadyForReviewInput] =
      new ArgEncoder[MarkPullRequestReadyForReviewInput] {
        override def encode(value: MarkPullRequestReadyForReviewInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "pullRequestId" -> implicitly[ArgEncoder[String]]
                .encode(value.pullRequestId)
            )
          )

        override def typeName: String = "MarkPullRequestReadyForReviewInput"
      }
  }

  case class MergeBranchInput(
                               authorEmail: Option[String] = None,
                               base: String,
                               clientMutationId: Option[String] = None,
                               commitMessage: Option[String] = None,
                               head: String,
                               repositoryId: String
                             )

  object MergeBranchInput {
    implicit val encoder: ArgEncoder[MergeBranchInput] =
      new ArgEncoder[MergeBranchInput] {
        override def encode(value: MergeBranchInput): Value =
          ObjectValue(
            List(
              "authorEmail" -> value.authorEmail.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              ),
              "base" -> implicitly[ArgEncoder[String]].encode(value.base),
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "commitMessage" -> value.commitMessage.fold(NullValue: Value)(
                value => implicitly[ArgEncoder[String]].encode(value)
              ),
              "head" -> implicitly[ArgEncoder[String]].encode(value.head),
              "repositoryId" -> implicitly[ArgEncoder[String]]
                .encode(value.repositoryId)
            )
          )

        override def typeName: String = "MergeBranchInput"
      }
  }

  case class MergePullRequestInput(
                                    authorEmail: Option[String] = None,
                                    clientMutationId: Option[String] = None,
                                    commitBody: Option[String] = None,
                                    commitHeadline: Option[String] = None,
                                    expectedHeadOid: Option[GitObjectID] = None,
                                    mergeMethod: Option[PullRequestMergeMethod] = None,
                                    pullRequestId: String
                                  )

  object MergePullRequestInput {
    implicit val encoder: ArgEncoder[MergePullRequestInput] =
      new ArgEncoder[MergePullRequestInput] {
        override def encode(value: MergePullRequestInput): Value =
          ObjectValue(
            List(
              "authorEmail" -> value.authorEmail.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              ),
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "commitBody" -> value.commitBody.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              ),
              "commitHeadline" -> value.commitHeadline.fold(NullValue: Value)(
                value => implicitly[ArgEncoder[String]].encode(value)
              ),
              "expectedHeadOid" -> value.expectedHeadOid.fold(NullValue: Value)(
                value => implicitly[ArgEncoder[GitObjectID]].encode(value)
              ),
              "mergeMethod" -> value.mergeMethod.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[PullRequestMergeMethod]].encode(value)
              ),
              "pullRequestId" -> implicitly[ArgEncoder[String]]
                .encode(value.pullRequestId)
            )
          )

        override def typeName: String = "MergePullRequestInput"
      }
  }

  case class MilestoneOrder(
                             direction: OrderDirection,
                             field: MilestoneOrderField
                           )

  object MilestoneOrder {
    implicit val encoder: ArgEncoder[MilestoneOrder] =
      new ArgEncoder[MilestoneOrder] {
        override def encode(value: MilestoneOrder): Value =
          ObjectValue(
            List(
              "direction" -> implicitly[ArgEncoder[OrderDirection]]
                .encode(value.direction),
              "field" -> implicitly[ArgEncoder[MilestoneOrderField]]
                .encode(value.field)
            )
          )

        override def typeName: String = "MilestoneOrder"
      }
  }

  case class MinimizeCommentInput(
                                   classifier: ReportedContentClassifiers,
                                   clientMutationId: Option[String] = None,
                                   subjectId: String
                                 )

  object MinimizeCommentInput {
    implicit val encoder: ArgEncoder[MinimizeCommentInput] =
      new ArgEncoder[MinimizeCommentInput] {
        override def encode(value: MinimizeCommentInput): Value =
          ObjectValue(
            List(
              "classifier" -> implicitly[ArgEncoder[ReportedContentClassifiers]]
                .encode(value.classifier),
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "subjectId" -> implicitly[ArgEncoder[String]]
                .encode(value.subjectId)
            )
          )

        override def typeName: String = "MinimizeCommentInput"
      }
  }

  case class MoveProjectCardInput(
                                   afterCardId: Option[String] = None,
                                   cardId: String,
                                   clientMutationId: Option[String] = None,
                                   columnId: String
                                 )

  object MoveProjectCardInput {
    implicit val encoder: ArgEncoder[MoveProjectCardInput] =
      new ArgEncoder[MoveProjectCardInput] {
        override def encode(value: MoveProjectCardInput): Value =
          ObjectValue(
            List(
              "afterCardId" -> value.afterCardId.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              ),
              "cardId" -> implicitly[ArgEncoder[String]].encode(value.cardId),
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "columnId" -> implicitly[ArgEncoder[String]]
                .encode(value.columnId)
            )
          )

        override def typeName: String = "MoveProjectCardInput"
      }
  }

  case class MoveProjectColumnInput(
                                     afterColumnId: Option[String] = None,
                                     clientMutationId: Option[String] = None,
                                     columnId: String
                                   )

  object MoveProjectColumnInput {
    implicit val encoder: ArgEncoder[MoveProjectColumnInput] =
      new ArgEncoder[MoveProjectColumnInput] {
        override def encode(value: MoveProjectColumnInput): Value =
          ObjectValue(
            List(
              "afterColumnId" -> value.afterColumnId.fold(NullValue: Value)(
                value => implicitly[ArgEncoder[String]].encode(value)
              ),
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "columnId" -> implicitly[ArgEncoder[String]]
                .encode(value.columnId)
            )
          )

        override def typeName: String = "MoveProjectColumnInput"
      }
  }

  case class OrganizationOrder(
                                direction: OrderDirection,
                                field: OrganizationOrderField
                              )

  object OrganizationOrder {
    implicit val encoder: ArgEncoder[OrganizationOrder] =
      new ArgEncoder[OrganizationOrder] {
        override def encode(value: OrganizationOrder): Value =
          ObjectValue(
            List(
              "direction" -> implicitly[ArgEncoder[OrderDirection]]
                .encode(value.direction),
              "field" -> implicitly[ArgEncoder[OrganizationOrderField]]
                .encode(value.field)
            )
          )

        override def typeName: String = "OrganizationOrder"
      }
  }

  case class PackageFileOrder(
                               direction: Option[OrderDirection] = None,
                               field: Option[PackageFileOrderField] = None
                             )

  object PackageFileOrder {
    implicit val encoder: ArgEncoder[PackageFileOrder] =
      new ArgEncoder[PackageFileOrder] {
        override def encode(value: PackageFileOrder): Value =
          ObjectValue(
            List(
              "direction" -> value.direction.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[OrderDirection]].encode(value)
              ),
              "field" -> value.field.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[PackageFileOrderField]].encode(value)
              )
            )
          )

        override def typeName: String = "PackageFileOrder"
      }
  }

  case class PackageOrder(
                           direction: Option[OrderDirection] = None,
                           field: Option[PackageOrderField] = None
                         )

  object PackageOrder {
    implicit val encoder: ArgEncoder[PackageOrder] =
      new ArgEncoder[PackageOrder] {
        override def encode(value: PackageOrder): Value =
          ObjectValue(
            List(
              "direction" -> value.direction.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[OrderDirection]].encode(value)
              ),
              "field" -> value.field.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[PackageOrderField]].encode(value)
              )
            )
          )

        override def typeName: String = "PackageOrder"
      }
  }

  case class PackageVersionOrder(
                                  direction: Option[OrderDirection] = None,
                                  field: Option[PackageVersionOrderField] = None
                                )

  object PackageVersionOrder {
    implicit val encoder: ArgEncoder[PackageVersionOrder] =
      new ArgEncoder[PackageVersionOrder] {
        override def encode(value: PackageVersionOrder): Value =
          ObjectValue(
            List(
              "direction" -> value.direction.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[OrderDirection]].encode(value)
              ),
              "field" -> value.field.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[PackageVersionOrderField]].encode(value)
              )
            )
          )

        override def typeName: String = "PackageVersionOrder"
      }
  }

  case class PinIssueInput(
                            clientMutationId: Option[String] = None,
                            issueId: String
                          )

  object PinIssueInput {
    implicit val encoder: ArgEncoder[PinIssueInput] =
      new ArgEncoder[PinIssueInput] {
        override def encode(value: PinIssueInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "issueId" -> implicitly[ArgEncoder[String]].encode(value.issueId)
            )
          )

        override def typeName: String = "PinIssueInput"
      }
  }

  case class ProjectCardImport(number: Int, repository: String)

  object ProjectCardImport {
    implicit val encoder: ArgEncoder[ProjectCardImport] =
      new ArgEncoder[ProjectCardImport] {
        override def encode(value: ProjectCardImport): Value =
          ObjectValue(
            List(
              "number" -> implicitly[ArgEncoder[Int]].encode(value.number),
              "repository" -> implicitly[ArgEncoder[String]]
                .encode(value.repository)
            )
          )

        override def typeName: String = "ProjectCardImport"
      }
  }

  case class ProjectColumnImport(
                                  columnName: String,
                                  issues: Option[List[ProjectCardImport]] = None,
                                  position: Int
                                )

  object ProjectColumnImport {
    implicit val encoder: ArgEncoder[ProjectColumnImport] =
      new ArgEncoder[ProjectColumnImport] {
        override def encode(value: ProjectColumnImport): Value =
          ObjectValue(
            List(
              "columnName" -> implicitly[ArgEncoder[String]]
                .encode(value.columnName),
              "issues" -> value.issues.fold(NullValue: Value)(value =>
                ListValue(
                  value.map(value =>
                    implicitly[ArgEncoder[ProjectCardImport]].encode(value)
                  )
                )
              ),
              "position" -> implicitly[ArgEncoder[Int]].encode(value.position)
            )
          )

        override def typeName: String = "ProjectColumnImport"
      }
  }

  case class ProjectOrder(direction: OrderDirection, field: ProjectOrderField)

  object ProjectOrder {
    implicit val encoder: ArgEncoder[ProjectOrder] =
      new ArgEncoder[ProjectOrder] {
        override def encode(value: ProjectOrder): Value =
          ObjectValue(
            List(
              "direction" -> implicitly[ArgEncoder[OrderDirection]]
                .encode(value.direction),
              "field" -> implicitly[ArgEncoder[ProjectOrderField]]
                .encode(value.field)
            )
          )

        override def typeName: String = "ProjectOrder"
      }
  }

  case class PullRequestOrder(
                               direction: OrderDirection,
                               field: PullRequestOrderField
                             )

  object PullRequestOrder {
    implicit val encoder: ArgEncoder[PullRequestOrder] =
      new ArgEncoder[PullRequestOrder] {
        override def encode(value: PullRequestOrder): Value =
          ObjectValue(
            List(
              "direction" -> implicitly[ArgEncoder[OrderDirection]]
                .encode(value.direction),
              "field" -> implicitly[ArgEncoder[PullRequestOrderField]]
                .encode(value.field)
            )
          )

        override def typeName: String = "PullRequestOrder"
      }
  }

  case class ReactionOrder(direction: OrderDirection, field: ReactionOrderField)

  object ReactionOrder {
    implicit val encoder: ArgEncoder[ReactionOrder] =
      new ArgEncoder[ReactionOrder] {
        override def encode(value: ReactionOrder): Value =
          ObjectValue(
            List(
              "direction" -> implicitly[ArgEncoder[OrderDirection]]
                .encode(value.direction),
              "field" -> implicitly[ArgEncoder[ReactionOrderField]]
                .encode(value.field)
            )
          )

        override def typeName: String = "ReactionOrder"
      }
  }

  case class RefOrder(direction: OrderDirection, field: RefOrderField)

  object RefOrder {
    implicit val encoder: ArgEncoder[RefOrder] = new ArgEncoder[RefOrder] {
      override def encode(value: RefOrder): Value =
        ObjectValue(
          List(
            "direction" -> implicitly[ArgEncoder[OrderDirection]]
              .encode(value.direction),
            "field" -> implicitly[ArgEncoder[RefOrderField]].encode(value.field)
          )
        )

      override def typeName: String = "RefOrder"
    }
  }

  case class RefUpdate(
                        afterOid: GitObjectID,
                        beforeOid: Option[GitObjectID] = None,
                        force: Option[Boolean] = None,
                        name: GitRefname
                      )

  object RefUpdate {
    implicit val encoder: ArgEncoder[RefUpdate] = new ArgEncoder[RefUpdate] {
      override def encode(value: RefUpdate): Value =
        ObjectValue(
          List(
            "afterOid" -> implicitly[ArgEncoder[GitObjectID]]
              .encode(value.afterOid),
            "beforeOid" -> value.beforeOid.fold(NullValue: Value)(value =>
              implicitly[ArgEncoder[GitObjectID]].encode(value)
            ),
            "force" -> value.force.fold(NullValue: Value)(value =>
              implicitly[ArgEncoder[Boolean]].encode(value)
            ),
            "name" -> implicitly[ArgEncoder[GitRefname]].encode(value.name)
          )
        )

      override def typeName: String = "RefUpdate"
    }
  }

  case class RegenerateEnterpriseIdentityProviderRecoveryCodesInput(
                                                                     clientMutationId: Option[String] = None,
                                                                     enterpriseId: String
                                                                   )

  object RegenerateEnterpriseIdentityProviderRecoveryCodesInput {
    implicit val encoder
    : ArgEncoder[RegenerateEnterpriseIdentityProviderRecoveryCodesInput] =
      new ArgEncoder[RegenerateEnterpriseIdentityProviderRecoveryCodesInput] {
        override def encode(
                             value: RegenerateEnterpriseIdentityProviderRecoveryCodesInput
                           ): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "enterpriseId" -> implicitly[ArgEncoder[String]]
                .encode(value.enterpriseId)
            )
          )

        override def typeName: String =
          "RegenerateEnterpriseIdentityProviderRecoveryCodesInput"
      }
  }

  case class ReleaseOrder(direction: OrderDirection, field: ReleaseOrderField)

  object ReleaseOrder {
    implicit val encoder: ArgEncoder[ReleaseOrder] =
      new ArgEncoder[ReleaseOrder] {
        override def encode(value: ReleaseOrder): Value =
          ObjectValue(
            List(
              "direction" -> implicitly[ArgEncoder[OrderDirection]]
                .encode(value.direction),
              "field" -> implicitly[ArgEncoder[ReleaseOrderField]]
                .encode(value.field)
            )
          )

        override def typeName: String = "ReleaseOrder"
      }
  }

  case class RemoveAssigneesFromAssignableInput(
                                                 assignableId: String,
                                                 assigneeIds: List[String] = Nil,
                                                 clientMutationId: Option[String] = None
                                               )

  object RemoveAssigneesFromAssignableInput {
    implicit val encoder: ArgEncoder[RemoveAssigneesFromAssignableInput] =
      new ArgEncoder[RemoveAssigneesFromAssignableInput] {
        override def encode(value: RemoveAssigneesFromAssignableInput): Value =
          ObjectValue(
            List(
              "assignableId" -> implicitly[ArgEncoder[String]]
                .encode(value.assignableId),
              "assigneeIds" -> ListValue(
                value.assigneeIds.map(value =>
                  implicitly[ArgEncoder[String]].encode(value)
                )
              ),
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value))
            )
          )

        override def typeName: String = "RemoveAssigneesFromAssignableInput"
      }
  }

  case class RemoveEnterpriseAdminInput(
                                         clientMutationId: Option[String] = None,
                                         enterpriseId: String,
                                         login: String
                                       )

  object RemoveEnterpriseAdminInput {
    implicit val encoder: ArgEncoder[RemoveEnterpriseAdminInput] =
      new ArgEncoder[RemoveEnterpriseAdminInput] {
        override def encode(value: RemoveEnterpriseAdminInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "enterpriseId" -> implicitly[ArgEncoder[String]]
                .encode(value.enterpriseId),
              "login" -> implicitly[ArgEncoder[String]].encode(value.login)
            )
          )

        override def typeName: String = "RemoveEnterpriseAdminInput"
      }
  }

  case class RemoveEnterpriseIdentityProviderInput(
                                                    clientMutationId: Option[String] = None,
                                                    enterpriseId: String
                                                  )

  object RemoveEnterpriseIdentityProviderInput {
    implicit val encoder: ArgEncoder[RemoveEnterpriseIdentityProviderInput] =
      new ArgEncoder[RemoveEnterpriseIdentityProviderInput] {
        override def encode(
                             value: RemoveEnterpriseIdentityProviderInput
                           ): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "enterpriseId" -> implicitly[ArgEncoder[String]]
                .encode(value.enterpriseId)
            )
          )

        override def typeName: String = "RemoveEnterpriseIdentityProviderInput"
      }
  }

  case class RemoveEnterpriseOrganizationInput(
                                                clientMutationId: Option[String] = None,
                                                enterpriseId: String,
                                                organizationId: String
                                              )

  object RemoveEnterpriseOrganizationInput {
    implicit val encoder: ArgEncoder[RemoveEnterpriseOrganizationInput] =
      new ArgEncoder[RemoveEnterpriseOrganizationInput] {
        override def encode(value: RemoveEnterpriseOrganizationInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "enterpriseId" -> implicitly[ArgEncoder[String]]
                .encode(value.enterpriseId),
              "organizationId" -> implicitly[ArgEncoder[String]]
                .encode(value.organizationId)
            )
          )

        override def typeName: String = "RemoveEnterpriseOrganizationInput"
      }
  }

  case class RemoveLabelsFromLabelableInput(
                                             clientMutationId: Option[String] = None,
                                             labelIds: List[String] = Nil,
                                             labelableId: String
                                           )

  object RemoveLabelsFromLabelableInput {
    implicit val encoder: ArgEncoder[RemoveLabelsFromLabelableInput] =
      new ArgEncoder[RemoveLabelsFromLabelableInput] {
        override def encode(value: RemoveLabelsFromLabelableInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "labelIds" -> ListValue(
                value.labelIds.map(value =>
                  implicitly[ArgEncoder[String]].encode(value)
                )
              ),
              "labelableId" -> implicitly[ArgEncoder[String]]
                .encode(value.labelableId)
            )
          )

        override def typeName: String = "RemoveLabelsFromLabelableInput"
      }
  }

  case class RemoveOutsideCollaboratorInput(
                                             clientMutationId: Option[String] = None,
                                             organizationId: String,
                                             userId: String
                                           )

  object RemoveOutsideCollaboratorInput {
    implicit val encoder: ArgEncoder[RemoveOutsideCollaboratorInput] =
      new ArgEncoder[RemoveOutsideCollaboratorInput] {
        override def encode(value: RemoveOutsideCollaboratorInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "organizationId" -> implicitly[ArgEncoder[String]]
                .encode(value.organizationId),
              "userId" -> implicitly[ArgEncoder[String]].encode(value.userId)
            )
          )

        override def typeName: String = "RemoveOutsideCollaboratorInput"
      }
  }

  case class RemoveReactionInput(
                                  clientMutationId: Option[String] = None,
                                  content: ReactionContent,
                                  subjectId: String
                                )

  object RemoveReactionInput {
    implicit val encoder: ArgEncoder[RemoveReactionInput] =
      new ArgEncoder[RemoveReactionInput] {
        override def encode(value: RemoveReactionInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "content" -> implicitly[ArgEncoder[ReactionContent]]
                .encode(value.content),
              "subjectId" -> implicitly[ArgEncoder[String]]
                .encode(value.subjectId)
            )
          )

        override def typeName: String = "RemoveReactionInput"
      }
  }

  case class RemoveStarInput(
                              clientMutationId: Option[String] = None,
                              starrableId: String
                            )

  object RemoveStarInput {
    implicit val encoder: ArgEncoder[RemoveStarInput] =
      new ArgEncoder[RemoveStarInput] {
        override def encode(value: RemoveStarInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "starrableId" -> implicitly[ArgEncoder[String]]
                .encode(value.starrableId)
            )
          )

        override def typeName: String = "RemoveStarInput"
      }
  }

  case class ReopenIssueInput(
                               clientMutationId: Option[String] = None,
                               issueId: String
                             )

  object ReopenIssueInput {
    implicit val encoder: ArgEncoder[ReopenIssueInput] =
      new ArgEncoder[ReopenIssueInput] {
        override def encode(value: ReopenIssueInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "issueId" -> implicitly[ArgEncoder[String]].encode(value.issueId)
            )
          )

        override def typeName: String = "ReopenIssueInput"
      }
  }

  case class ReopenPullRequestInput(
                                     clientMutationId: Option[String] = None,
                                     pullRequestId: String
                                   )

  object ReopenPullRequestInput {
    implicit val encoder: ArgEncoder[ReopenPullRequestInput] =
      new ArgEncoder[ReopenPullRequestInput] {
        override def encode(value: ReopenPullRequestInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "pullRequestId" -> implicitly[ArgEncoder[String]]
                .encode(value.pullRequestId)
            )
          )

        override def typeName: String = "ReopenPullRequestInput"
      }
  }

  case class RepositoryInvitationOrder(
                                        direction: OrderDirection,
                                        field: RepositoryInvitationOrderField
                                      )

  object RepositoryInvitationOrder {
    implicit val encoder: ArgEncoder[RepositoryInvitationOrder] =
      new ArgEncoder[RepositoryInvitationOrder] {
        override def encode(value: RepositoryInvitationOrder): Value =
          ObjectValue(
            List(
              "direction" -> implicitly[ArgEncoder[OrderDirection]]
                .encode(value.direction),
              "field" -> implicitly[ArgEncoder[RepositoryInvitationOrderField]]
                .encode(value.field)
            )
          )

        override def typeName: String = "RepositoryInvitationOrder"
      }
  }

  case class RepositoryOrder(
                              direction: OrderDirection,
                              field: RepositoryOrderField
                            )

  object RepositoryOrder {
    implicit val encoder: ArgEncoder[RepositoryOrder] =
      new ArgEncoder[RepositoryOrder] {
        override def encode(value: RepositoryOrder): Value =
          ObjectValue(
            List(
              "direction" -> implicitly[ArgEncoder[OrderDirection]]
                .encode(value.direction),
              "field" -> implicitly[ArgEncoder[RepositoryOrderField]]
                .encode(value.field)
            )
          )

        override def typeName: String = "RepositoryOrder"
      }
  }

  case class RequestReviewsInput(
                                  clientMutationId: Option[String] = None,
                                  pullRequestId: String,
                                  teamIds: Option[List[String]] = None,
                                  union: Option[Boolean] = None,
                                  userIds: Option[List[String]] = None
                                )

  object RequestReviewsInput {
    implicit val encoder: ArgEncoder[RequestReviewsInput] =
      new ArgEncoder[RequestReviewsInput] {
        override def encode(value: RequestReviewsInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "pullRequestId" -> implicitly[ArgEncoder[String]]
                .encode(value.pullRequestId),
              "teamIds" -> value.teamIds.fold(NullValue: Value)(value =>
                ListValue(
                  value.map(value =>
                    implicitly[ArgEncoder[String]].encode(value)
                  )
                )
              ),
              "union" -> value.union.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[Boolean]].encode(value)
              ),
              "userIds" -> value.userIds.fold(NullValue: Value)(value =>
                ListValue(
                  value.map(value =>
                    implicitly[ArgEncoder[String]].encode(value)
                  )
                )
              )
            )
          )

        override def typeName: String = "RequestReviewsInput"
      }
  }

  case class RerequestCheckSuiteInput(
                                       checkSuiteId: String,
                                       clientMutationId: Option[String] = None,
                                       repositoryId: String
                                     )

  object RerequestCheckSuiteInput {
    implicit val encoder: ArgEncoder[RerequestCheckSuiteInput] =
      new ArgEncoder[RerequestCheckSuiteInput] {
        override def encode(value: RerequestCheckSuiteInput): Value =
          ObjectValue(
            List(
              "checkSuiteId" -> implicitly[ArgEncoder[String]]
                .encode(value.checkSuiteId),
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "repositoryId" -> implicitly[ArgEncoder[String]]
                .encode(value.repositoryId)
            )
          )

        override def typeName: String = "RerequestCheckSuiteInput"
      }
  }

  case class ResolveReviewThreadInput(
                                       clientMutationId: Option[String] = None,
                                       threadId: String
                                     )

  object ResolveReviewThreadInput {
    implicit val encoder: ArgEncoder[ResolveReviewThreadInput] =
      new ArgEncoder[ResolveReviewThreadInput] {
        override def encode(value: ResolveReviewThreadInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "threadId" -> implicitly[ArgEncoder[String]]
                .encode(value.threadId)
            )
          )

        override def typeName: String = "ResolveReviewThreadInput"
      }
  }

  case class SavedReplyOrder(
                              direction: OrderDirection,
                              field: SavedReplyOrderField
                            )

  object SavedReplyOrder {
    implicit val encoder: ArgEncoder[SavedReplyOrder] =
      new ArgEncoder[SavedReplyOrder] {
        override def encode(value: SavedReplyOrder): Value =
          ObjectValue(
            List(
              "direction" -> implicitly[ArgEncoder[OrderDirection]]
                .encode(value.direction),
              "field" -> implicitly[ArgEncoder[SavedReplyOrderField]]
                .encode(value.field)
            )
          )

        override def typeName: String = "SavedReplyOrder"
      }
  }

  case class SecurityAdvisoryIdentifierFilter(
                                               `type`: SecurityAdvisoryIdentifierType,
                                               value: String
                                             )

  object SecurityAdvisoryIdentifierFilter {
    implicit val encoder: ArgEncoder[SecurityAdvisoryIdentifierFilter] =
      new ArgEncoder[SecurityAdvisoryIdentifierFilter] {
        override def encode(value: SecurityAdvisoryIdentifierFilter): Value =
          ObjectValue(
            List(
              "type" -> implicitly[ArgEncoder[SecurityAdvisoryIdentifierType]]
                .encode(value.`type`),
              "value" -> implicitly[ArgEncoder[String]].encode(value.value)
            )
          )

        override def typeName: String = "SecurityAdvisoryIdentifierFilter"
      }
  }

  case class SecurityAdvisoryOrder(
                                    direction: OrderDirection,
                                    field: SecurityAdvisoryOrderField
                                  )

  object SecurityAdvisoryOrder {
    implicit val encoder: ArgEncoder[SecurityAdvisoryOrder] =
      new ArgEncoder[SecurityAdvisoryOrder] {
        override def encode(value: SecurityAdvisoryOrder): Value =
          ObjectValue(
            List(
              "direction" -> implicitly[ArgEncoder[OrderDirection]]
                .encode(value.direction),
              "field" -> implicitly[ArgEncoder[SecurityAdvisoryOrderField]]
                .encode(value.field)
            )
          )

        override def typeName: String = "SecurityAdvisoryOrder"
      }
  }

  case class SecurityVulnerabilityOrder(
                                         direction: OrderDirection,
                                         field: SecurityVulnerabilityOrderField
                                       )

  object SecurityVulnerabilityOrder {
    implicit val encoder: ArgEncoder[SecurityVulnerabilityOrder] =
      new ArgEncoder[SecurityVulnerabilityOrder] {
        override def encode(value: SecurityVulnerabilityOrder): Value =
          ObjectValue(
            List(
              "direction" -> implicitly[ArgEncoder[OrderDirection]]
                .encode(value.direction),
              "field" -> implicitly[ArgEncoder[SecurityVulnerabilityOrderField]]
                .encode(value.field)
            )
          )

        override def typeName: String = "SecurityVulnerabilityOrder"
      }
  }

  case class SetEnterpriseIdentityProviderInput(
                                                 clientMutationId: Option[String] = None,
                                                 digestMethod: SamlDigestAlgorithm,
                                                 enterpriseId: String,
                                                 idpCertificate: String,
                                                 issuer: Option[String] = None,
                                                 signatureMethod: SamlSignatureAlgorithm,
                                                 ssoUrl: URI
                                               )

  object SetEnterpriseIdentityProviderInput {
    implicit val encoder: ArgEncoder[SetEnterpriseIdentityProviderInput] =
      new ArgEncoder[SetEnterpriseIdentityProviderInput] {
        override def encode(value: SetEnterpriseIdentityProviderInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "digestMethod" -> implicitly[ArgEncoder[SamlDigestAlgorithm]]
                .encode(value.digestMethod),
              "enterpriseId" -> implicitly[ArgEncoder[String]]
                .encode(value.enterpriseId),
              "idpCertificate" -> implicitly[ArgEncoder[String]]
                .encode(value.idpCertificate),
              "issuer" -> value.issuer.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              ),
              "signatureMethod" -> implicitly[ArgEncoder[
                SamlSignatureAlgorithm
              ]].encode(value.signatureMethod),
              "ssoUrl" -> implicitly[ArgEncoder[URI]].encode(value.ssoUrl)
            )
          )

        override def typeName: String = "SetEnterpriseIdentityProviderInput"
      }
  }

  case class SponsorsTierOrder(
                                direction: OrderDirection,
                                field: SponsorsTierOrderField
                              )

  object SponsorsTierOrder {
    implicit val encoder: ArgEncoder[SponsorsTierOrder] =
      new ArgEncoder[SponsorsTierOrder] {
        override def encode(value: SponsorsTierOrder): Value =
          ObjectValue(
            List(
              "direction" -> implicitly[ArgEncoder[OrderDirection]]
                .encode(value.direction),
              "field" -> implicitly[ArgEncoder[SponsorsTierOrderField]]
                .encode(value.field)
            )
          )

        override def typeName: String = "SponsorsTierOrder"
      }
  }

  case class SponsorshipOrder(
                               direction: OrderDirection,
                               field: SponsorshipOrderField
                             )

  object SponsorshipOrder {
    implicit val encoder: ArgEncoder[SponsorshipOrder] =
      new ArgEncoder[SponsorshipOrder] {
        override def encode(value: SponsorshipOrder): Value =
          ObjectValue(
            List(
              "direction" -> implicitly[ArgEncoder[OrderDirection]]
                .encode(value.direction),
              "field" -> implicitly[ArgEncoder[SponsorshipOrderField]]
                .encode(value.field)
            )
          )

        override def typeName: String = "SponsorshipOrder"
      }
  }

  case class StarOrder(direction: OrderDirection, field: StarOrderField)

  object StarOrder {
    implicit val encoder: ArgEncoder[StarOrder] = new ArgEncoder[StarOrder] {
      override def encode(value: StarOrder): Value =
        ObjectValue(
          List(
            "direction" -> implicitly[ArgEncoder[OrderDirection]]
              .encode(value.direction),
            "field" -> implicitly[ArgEncoder[StarOrderField]]
              .encode(value.field)
          )
        )

      override def typeName: String = "StarOrder"
    }
  }

  case class SubmitPullRequestReviewInput(
                                           body: Option[String] = None,
                                           clientMutationId: Option[String] = None,
                                           event: PullRequestReviewEvent,
                                           pullRequestId: Option[String] = None,
                                           pullRequestReviewId: Option[String] = None
                                         )

  object SubmitPullRequestReviewInput {
    implicit val encoder: ArgEncoder[SubmitPullRequestReviewInput] =
      new ArgEncoder[SubmitPullRequestReviewInput] {
        override def encode(value: SubmitPullRequestReviewInput): Value =
          ObjectValue(
            List(
              "body" -> value.body.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              ),
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "event" -> implicitly[ArgEncoder[PullRequestReviewEvent]]
                .encode(value.event),
              "pullRequestId" -> value.pullRequestId.fold(NullValue: Value)(
                value => implicitly[ArgEncoder[String]].encode(value)
              ),
              "pullRequestReviewId" -> value.pullRequestReviewId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value))
            )
          )

        override def typeName: String = "SubmitPullRequestReviewInput"
      }
  }

  case class TeamDiscussionCommentOrder(
                                         direction: OrderDirection,
                                         field: TeamDiscussionCommentOrderField
                                       )

  object TeamDiscussionCommentOrder {
    implicit val encoder: ArgEncoder[TeamDiscussionCommentOrder] =
      new ArgEncoder[TeamDiscussionCommentOrder] {
        override def encode(value: TeamDiscussionCommentOrder): Value =
          ObjectValue(
            List(
              "direction" -> implicitly[ArgEncoder[OrderDirection]]
                .encode(value.direction),
              "field" -> implicitly[ArgEncoder[TeamDiscussionCommentOrderField]]
                .encode(value.field)
            )
          )

        override def typeName: String = "TeamDiscussionCommentOrder"
      }
  }

  case class TeamDiscussionOrder(
                                  direction: OrderDirection,
                                  field: TeamDiscussionOrderField
                                )

  object TeamDiscussionOrder {
    implicit val encoder: ArgEncoder[TeamDiscussionOrder] =
      new ArgEncoder[TeamDiscussionOrder] {
        override def encode(value: TeamDiscussionOrder): Value =
          ObjectValue(
            List(
              "direction" -> implicitly[ArgEncoder[OrderDirection]]
                .encode(value.direction),
              "field" -> implicitly[ArgEncoder[TeamDiscussionOrderField]]
                .encode(value.field)
            )
          )

        override def typeName: String = "TeamDiscussionOrder"
      }
  }

  case class TeamMemberOrder(
                              direction: OrderDirection,
                              field: TeamMemberOrderField
                            )

  object TeamMemberOrder {
    implicit val encoder: ArgEncoder[TeamMemberOrder] =
      new ArgEncoder[TeamMemberOrder] {
        override def encode(value: TeamMemberOrder): Value =
          ObjectValue(
            List(
              "direction" -> implicitly[ArgEncoder[OrderDirection]]
                .encode(value.direction),
              "field" -> implicitly[ArgEncoder[TeamMemberOrderField]]
                .encode(value.field)
            )
          )

        override def typeName: String = "TeamMemberOrder"
      }
  }

  case class TeamOrder(direction: OrderDirection, field: TeamOrderField)

  object TeamOrder {
    implicit val encoder: ArgEncoder[TeamOrder] = new ArgEncoder[TeamOrder] {
      override def encode(value: TeamOrder): Value =
        ObjectValue(
          List(
            "direction" -> implicitly[ArgEncoder[OrderDirection]]
              .encode(value.direction),
            "field" -> implicitly[ArgEncoder[TeamOrderField]]
              .encode(value.field)
          )
        )

      override def typeName: String = "TeamOrder"
    }
  }

  case class TeamRepositoryOrder(
                                  direction: OrderDirection,
                                  field: TeamRepositoryOrderField
                                )

  object TeamRepositoryOrder {
    implicit val encoder: ArgEncoder[TeamRepositoryOrder] =
      new ArgEncoder[TeamRepositoryOrder] {
        override def encode(value: TeamRepositoryOrder): Value =
          ObjectValue(
            List(
              "direction" -> implicitly[ArgEncoder[OrderDirection]]
                .encode(value.direction),
              "field" -> implicitly[ArgEncoder[TeamRepositoryOrderField]]
                .encode(value.field)
            )
          )

        override def typeName: String = "TeamRepositoryOrder"
      }
  }

  case class TransferIssueInput(
                                 clientMutationId: Option[String] = None,
                                 issueId: String,
                                 repositoryId: String
                               )

  object TransferIssueInput {
    implicit val encoder: ArgEncoder[TransferIssueInput] =
      new ArgEncoder[TransferIssueInput] {
        override def encode(value: TransferIssueInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "issueId" -> implicitly[ArgEncoder[String]].encode(value.issueId),
              "repositoryId" -> implicitly[ArgEncoder[String]]
                .encode(value.repositoryId)
            )
          )

        override def typeName: String = "TransferIssueInput"
      }
  }

  case class UnarchiveRepositoryInput(
                                       clientMutationId: Option[String] = None,
                                       repositoryId: String
                                     )

  object UnarchiveRepositoryInput {
    implicit val encoder: ArgEncoder[UnarchiveRepositoryInput] =
      new ArgEncoder[UnarchiveRepositoryInput] {
        override def encode(value: UnarchiveRepositoryInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "repositoryId" -> implicitly[ArgEncoder[String]]
                .encode(value.repositoryId)
            )
          )

        override def typeName: String = "UnarchiveRepositoryInput"
      }
  }

  case class UnfollowUserInput(
                                clientMutationId: Option[String] = None,
                                userId: String
                              )

  object UnfollowUserInput {
    implicit val encoder: ArgEncoder[UnfollowUserInput] =
      new ArgEncoder[UnfollowUserInput] {
        override def encode(value: UnfollowUserInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "userId" -> implicitly[ArgEncoder[String]].encode(value.userId)
            )
          )

        override def typeName: String = "UnfollowUserInput"
      }
  }

  case class UnlinkRepositoryFromProjectInput(
                                               clientMutationId: Option[String] = None,
                                               projectId: String,
                                               repositoryId: String
                                             )

  object UnlinkRepositoryFromProjectInput {
    implicit val encoder: ArgEncoder[UnlinkRepositoryFromProjectInput] =
      new ArgEncoder[UnlinkRepositoryFromProjectInput] {
        override def encode(value: UnlinkRepositoryFromProjectInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "projectId" -> implicitly[ArgEncoder[String]]
                .encode(value.projectId),
              "repositoryId" -> implicitly[ArgEncoder[String]]
                .encode(value.repositoryId)
            )
          )

        override def typeName: String = "UnlinkRepositoryFromProjectInput"
      }
  }

  case class UnlockLockableInput(
                                  clientMutationId: Option[String] = None,
                                  lockableId: String
                                )

  object UnlockLockableInput {
    implicit val encoder: ArgEncoder[UnlockLockableInput] =
      new ArgEncoder[UnlockLockableInput] {
        override def encode(value: UnlockLockableInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "lockableId" -> implicitly[ArgEncoder[String]]
                .encode(value.lockableId)
            )
          )

        override def typeName: String = "UnlockLockableInput"
      }
  }

  case class UnmarkFileAsViewedInput(
                                      clientMutationId: Option[String] = None,
                                      path: String,
                                      pullRequestId: String
                                    )

  object UnmarkFileAsViewedInput {
    implicit val encoder: ArgEncoder[UnmarkFileAsViewedInput] =
      new ArgEncoder[UnmarkFileAsViewedInput] {
        override def encode(value: UnmarkFileAsViewedInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "path" -> implicitly[ArgEncoder[String]].encode(value.path),
              "pullRequestId" -> implicitly[ArgEncoder[String]]
                .encode(value.pullRequestId)
            )
          )

        override def typeName: String = "UnmarkFileAsViewedInput"
      }
  }

  case class UnmarkIssueAsDuplicateInput(
                                          canonicalId: String,
                                          clientMutationId: Option[String] = None,
                                          duplicateId: String
                                        )

  object UnmarkIssueAsDuplicateInput {
    implicit val encoder: ArgEncoder[UnmarkIssueAsDuplicateInput] =
      new ArgEncoder[UnmarkIssueAsDuplicateInput] {
        override def encode(value: UnmarkIssueAsDuplicateInput): Value =
          ObjectValue(
            List(
              "canonicalId" -> implicitly[ArgEncoder[String]]
                .encode(value.canonicalId),
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "duplicateId" -> implicitly[ArgEncoder[String]]
                .encode(value.duplicateId)
            )
          )

        override def typeName: String = "UnmarkIssueAsDuplicateInput"
      }
  }

  case class UnminimizeCommentInput(
                                     clientMutationId: Option[String] = None,
                                     subjectId: String
                                   )

  object UnminimizeCommentInput {
    implicit val encoder: ArgEncoder[UnminimizeCommentInput] =
      new ArgEncoder[UnminimizeCommentInput] {
        override def encode(value: UnminimizeCommentInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "subjectId" -> implicitly[ArgEncoder[String]]
                .encode(value.subjectId)
            )
          )

        override def typeName: String = "UnminimizeCommentInput"
      }
  }

  case class UnpinIssueInput(
                              clientMutationId: Option[String] = None,
                              issueId: String
                            )

  object UnpinIssueInput {
    implicit val encoder: ArgEncoder[UnpinIssueInput] =
      new ArgEncoder[UnpinIssueInput] {
        override def encode(value: UnpinIssueInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "issueId" -> implicitly[ArgEncoder[String]].encode(value.issueId)
            )
          )

        override def typeName: String = "UnpinIssueInput"
      }
  }

  case class UnresolveReviewThreadInput(
                                         clientMutationId: Option[String] = None,
                                         threadId: String
                                       )

  object UnresolveReviewThreadInput {
    implicit val encoder: ArgEncoder[UnresolveReviewThreadInput] =
      new ArgEncoder[UnresolveReviewThreadInput] {
        override def encode(value: UnresolveReviewThreadInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "threadId" -> implicitly[ArgEncoder[String]]
                .encode(value.threadId)
            )
          )

        override def typeName: String = "UnresolveReviewThreadInput"
      }
  }

  case class UpdateBranchProtectionRuleInput(
                                              branchProtectionRuleId: String,
                                              clientMutationId: Option[String] = None,
                                              dismissesStaleReviews: Option[Boolean] = None,
                                              isAdminEnforced: Option[Boolean] = None,
                                              pattern: Option[String] = None,
                                              pushActorIds: Option[List[String]] = None,
                                              requiredApprovingReviewCount: Option[Int] = None,
                                              requiredStatusCheckContexts: Option[List[String]] = None,
                                              requiresApprovingReviews: Option[Boolean] = None,
                                              requiresCodeOwnerReviews: Option[Boolean] = None,
                                              requiresCommitSignatures: Option[Boolean] = None,
                                              requiresStatusChecks: Option[Boolean] = None,
                                              requiresStrictStatusChecks: Option[Boolean] = None,
                                              restrictsPushes: Option[Boolean] = None,
                                              restrictsReviewDismissals: Option[Boolean] = None,
                                              reviewDismissalActorIds: Option[List[String]] = None
                                            )

  object UpdateBranchProtectionRuleInput {
    implicit val encoder: ArgEncoder[UpdateBranchProtectionRuleInput] =
      new ArgEncoder[UpdateBranchProtectionRuleInput] {
        override def encode(value: UpdateBranchProtectionRuleInput): Value =
          ObjectValue(
            List(
              "branchProtectionRuleId" -> implicitly[ArgEncoder[String]]
                .encode(value.branchProtectionRuleId),
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "dismissesStaleReviews" -> value.dismissesStaleReviews.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[Boolean]].encode(value)),
              "isAdminEnforced" -> value.isAdminEnforced.fold(NullValue: Value)(
                value => implicitly[ArgEncoder[Boolean]].encode(value)
              ),
              "pattern" -> value.pattern.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              ),
              "pushActorIds" -> value.pushActorIds.fold(NullValue: Value)(
                value =>
                  ListValue(
                    value.map(value =>
                      implicitly[ArgEncoder[String]].encode(value)
                    )
                  )
              ),
              "requiredApprovingReviewCount" -> value.requiredApprovingReviewCount
                .fold(NullValue: Value)(value =>
                  implicitly[ArgEncoder[Int]].encode(value)
                ),
              "requiredStatusCheckContexts" -> value.requiredStatusCheckContexts
                .fold(NullValue: Value)(value =>
                  ListValue(
                    value.map(value =>
                      implicitly[ArgEncoder[String]].encode(value)
                    )
                  )
                ),
              "requiresApprovingReviews" -> value.requiresApprovingReviews.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[Boolean]].encode(value)),
              "requiresCodeOwnerReviews" -> value.requiresCodeOwnerReviews.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[Boolean]].encode(value)),
              "requiresCommitSignatures" -> value.requiresCommitSignatures.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[Boolean]].encode(value)),
              "requiresStatusChecks" -> value.requiresStatusChecks.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[Boolean]].encode(value)),
              "requiresStrictStatusChecks" -> value.requiresStrictStatusChecks
                .fold(NullValue: Value)(value =>
                  implicitly[ArgEncoder[Boolean]].encode(value)
                ),
              "restrictsPushes" -> value.restrictsPushes.fold(NullValue: Value)(
                value => implicitly[ArgEncoder[Boolean]].encode(value)
              ),
              "restrictsReviewDismissals" -> value.restrictsReviewDismissals
                .fold(NullValue: Value)(value =>
                  implicitly[ArgEncoder[Boolean]].encode(value)
                ),
              "reviewDismissalActorIds" -> value.reviewDismissalActorIds
                .fold(NullValue: Value)(value =>
                  ListValue(
                    value.map(value =>
                      implicitly[ArgEncoder[String]].encode(value)
                    )
                  )
                )
            )
          )

        override def typeName: String = "UpdateBranchProtectionRuleInput"
      }
  }

  case class UpdateCheckRunInput(
                                  actions: Option[List[CheckRunAction]] = None,
                                  checkRunId: String,
                                  clientMutationId: Option[String] = None,
                                  completedAt: Option[DateTime] = None,
                                  conclusion: Option[CheckConclusionState] = None,
                                  detailsUrl: Option[URI] = None,
                                  externalId: Option[String] = None,
                                  name: Option[String] = None,
                                  output: Option[CheckRunOutput] = None,
                                  repositoryId: String,
                                  startedAt: Option[DateTime] = None,
                                  status: Option[RequestableCheckStatusState] = None
                                )

  object UpdateCheckRunInput {
    implicit val encoder: ArgEncoder[UpdateCheckRunInput] =
      new ArgEncoder[UpdateCheckRunInput] {
        override def encode(value: UpdateCheckRunInput): Value =
          ObjectValue(
            List(
              "actions" -> value.actions.fold(NullValue: Value)(value =>
                ListValue(
                  value.map(value =>
                    implicitly[ArgEncoder[CheckRunAction]].encode(value)
                  )
                )
              ),
              "checkRunId" -> implicitly[ArgEncoder[String]]
                .encode(value.checkRunId),
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "completedAt" -> value.completedAt.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[DateTime]].encode(value)
              ),
              "conclusion" -> value.conclusion.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[CheckConclusionState]].encode(value)
              ),
              "detailsUrl" -> value.detailsUrl.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[URI]].encode(value)
              ),
              "externalId" -> value.externalId.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              ),
              "name" -> value.name.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              ),
              "output" -> value.output.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[CheckRunOutput]].encode(value)
              ),
              "repositoryId" -> implicitly[ArgEncoder[String]]
                .encode(value.repositoryId),
              "startedAt" -> value.startedAt.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[DateTime]].encode(value)
              ),
              "status" -> value.status.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[RequestableCheckStatusState]]
                  .encode(value)
              )
            )
          )

        override def typeName: String = "UpdateCheckRunInput"
      }
  }

  case class UpdateCheckSuitePreferencesInput(
                                               autoTriggerPreferences: List[CheckSuiteAutoTriggerPreference] = Nil,
                                               clientMutationId: Option[String] = None,
                                               repositoryId: String
                                             )

  object UpdateCheckSuitePreferencesInput {
    implicit val encoder: ArgEncoder[UpdateCheckSuitePreferencesInput] =
      new ArgEncoder[UpdateCheckSuitePreferencesInput] {
        override def encode(value: UpdateCheckSuitePreferencesInput): Value =
          ObjectValue(
            List(
              "autoTriggerPreferences" -> ListValue(
                value.autoTriggerPreferences.map(value =>
                  implicitly[ArgEncoder[CheckSuiteAutoTriggerPreference]]
                    .encode(value)
                )
              ),
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "repositoryId" -> implicitly[ArgEncoder[String]]
                .encode(value.repositoryId)
            )
          )

        override def typeName: String = "UpdateCheckSuitePreferencesInput"
      }
  }

  case class UpdateEnterpriseActionExecutionCapabilitySettingInput(
                                                                    capability: ActionExecutionCapabilitySetting,
                                                                    clientMutationId: Option[String] = None,
                                                                    enterpriseId: String
                                                                  )

  object UpdateEnterpriseActionExecutionCapabilitySettingInput {
    implicit val encoder
    : ArgEncoder[UpdateEnterpriseActionExecutionCapabilitySettingInput] =
      new ArgEncoder[UpdateEnterpriseActionExecutionCapabilitySettingInput] {
        override def encode(
                             value: UpdateEnterpriseActionExecutionCapabilitySettingInput
                           ): Value =
          ObjectValue(
            List(
              "capability" -> implicitly[ArgEncoder[
                ActionExecutionCapabilitySetting
              ]].encode(value.capability),
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "enterpriseId" -> implicitly[ArgEncoder[String]]
                .encode(value.enterpriseId)
            )
          )

        override def typeName: String =
          "UpdateEnterpriseActionExecutionCapabilitySettingInput"
      }
  }

  case class UpdateEnterpriseAdministratorRoleInput(
                                                     clientMutationId: Option[String] = None,
                                                     enterpriseId: String,
                                                     login: String,
                                                     role: EnterpriseAdministratorRole
                                                   )

  object UpdateEnterpriseAdministratorRoleInput {
    implicit val encoder: ArgEncoder[UpdateEnterpriseAdministratorRoleInput] =
      new ArgEncoder[UpdateEnterpriseAdministratorRoleInput] {
        override def encode(
                             value: UpdateEnterpriseAdministratorRoleInput
                           ): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "enterpriseId" -> implicitly[ArgEncoder[String]]
                .encode(value.enterpriseId),
              "login" -> implicitly[ArgEncoder[String]].encode(value.login),
              "role" -> implicitly[ArgEncoder[EnterpriseAdministratorRole]]
                .encode(value.role)
            )
          )

        override def typeName: String = "UpdateEnterpriseAdministratorRoleInput"
      }
  }

  case class UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput(
                                                                        clientMutationId: Option[String] = None,
                                                                        enterpriseId: String,
                                                                        settingValue: EnterpriseEnabledDisabledSettingValue
                                                                      )

  object UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput {
    implicit val encoder: ArgEncoder[
      UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput
    ] = new ArgEncoder[
      UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput
    ] {
      override def encode(
                           value: UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput
                         ): Value =
        ObjectValue(
          List(
            "clientMutationId" -> value.clientMutationId.fold(NullValue: Value)(
              value => implicitly[ArgEncoder[String]].encode(value)
            ),
            "enterpriseId" -> implicitly[ArgEncoder[String]]
              .encode(value.enterpriseId),
            "settingValue" -> implicitly[ArgEncoder[
              EnterpriseEnabledDisabledSettingValue
            ]].encode(value.settingValue)
          )
        )

      override def typeName: String =
        "UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput"
    }
  }

  case class UpdateEnterpriseDefaultRepositoryPermissionSettingInput(
                                                                      clientMutationId: Option[String] = None,
                                                                      enterpriseId: String,
                                                                      settingValue: EnterpriseDefaultRepositoryPermissionSettingValue
                                                                    )

  object UpdateEnterpriseDefaultRepositoryPermissionSettingInput {
    implicit val encoder
    : ArgEncoder[UpdateEnterpriseDefaultRepositoryPermissionSettingInput] =
      new ArgEncoder[UpdateEnterpriseDefaultRepositoryPermissionSettingInput] {
        override def encode(
                             value: UpdateEnterpriseDefaultRepositoryPermissionSettingInput
                           ): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "enterpriseId" -> implicitly[ArgEncoder[String]]
                .encode(value.enterpriseId),
              "settingValue" -> implicitly[ArgEncoder[
                EnterpriseDefaultRepositoryPermissionSettingValue
              ]].encode(value.settingValue)
            )
          )

        override def typeName: String =
          "UpdateEnterpriseDefaultRepositoryPermissionSettingInput"
      }
  }

  case class UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput(
                                                                               clientMutationId: Option[String] = None,
                                                                               enterpriseId: String,
                                                                               settingValue: EnterpriseEnabledDisabledSettingValue
                                                                             )

  object UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput {
    implicit val encoder: ArgEncoder[
      UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput
    ] = new ArgEncoder[
      UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput
    ] {
      override def encode(
                           value: UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput
                         ): Value =
        ObjectValue(
          List(
            "clientMutationId" -> value.clientMutationId.fold(NullValue: Value)(
              value => implicitly[ArgEncoder[String]].encode(value)
            ),
            "enterpriseId" -> implicitly[ArgEncoder[String]]
              .encode(value.enterpriseId),
            "settingValue" -> implicitly[ArgEncoder[
              EnterpriseEnabledDisabledSettingValue
            ]].encode(value.settingValue)
          )
        )

      override def typeName: String =
        "UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput"
    }
  }

  case class UpdateEnterpriseMembersCanCreateRepositoriesSettingInput(
                                                                       clientMutationId: Option[String] = None,
                                                                       enterpriseId: String,
                                                                       membersCanCreateInternalRepositories: Option[Boolean] = None,
                                                                       membersCanCreatePrivateRepositories: Option[Boolean] = None,
                                                                       membersCanCreatePublicRepositories: Option[Boolean] = None,
                                                                       membersCanCreateRepositoriesPolicyEnabled: Option[Boolean] = None,
                                                                       settingValue: Option[EnterpriseMembersCanCreateRepositoriesSettingValue] =
                                                                       None
                                                                     )

  object UpdateEnterpriseMembersCanCreateRepositoriesSettingInput {
    implicit val encoder
    : ArgEncoder[UpdateEnterpriseMembersCanCreateRepositoriesSettingInput] =
      new ArgEncoder[UpdateEnterpriseMembersCanCreateRepositoriesSettingInput] {
        override def encode(
                             value: UpdateEnterpriseMembersCanCreateRepositoriesSettingInput
                           ): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "enterpriseId" -> implicitly[ArgEncoder[String]]
                .encode(value.enterpriseId),
              "membersCanCreateInternalRepositories" -> value.membersCanCreateInternalRepositories
                .fold(NullValue: Value)(value =>
                  implicitly[ArgEncoder[Boolean]].encode(value)
                ),
              "membersCanCreatePrivateRepositories" -> value.membersCanCreatePrivateRepositories
                .fold(NullValue: Value)(value =>
                  implicitly[ArgEncoder[Boolean]].encode(value)
                ),
              "membersCanCreatePublicRepositories" -> value.membersCanCreatePublicRepositories
                .fold(NullValue: Value)(value =>
                  implicitly[ArgEncoder[Boolean]].encode(value)
                ),
              "membersCanCreateRepositoriesPolicyEnabled" -> value.membersCanCreateRepositoriesPolicyEnabled
                .fold(NullValue: Value)(value =>
                  implicitly[ArgEncoder[Boolean]].encode(value)
                ),
              "settingValue" -> value.settingValue.fold(NullValue: Value)(
                value =>
                  implicitly[ArgEncoder[
                    EnterpriseMembersCanCreateRepositoriesSettingValue
                  ]].encode(value)
              )
            )
          )

        override def typeName: String =
          "UpdateEnterpriseMembersCanCreateRepositoriesSettingInput"
      }
  }

  case class UpdateEnterpriseMembersCanDeleteIssuesSettingInput(
                                                                 clientMutationId: Option[String] = None,
                                                                 enterpriseId: String,
                                                                 settingValue: EnterpriseEnabledDisabledSettingValue
                                                               )

  object UpdateEnterpriseMembersCanDeleteIssuesSettingInput {
    implicit val encoder
    : ArgEncoder[UpdateEnterpriseMembersCanDeleteIssuesSettingInput] =
      new ArgEncoder[UpdateEnterpriseMembersCanDeleteIssuesSettingInput] {
        override def encode(
                             value: UpdateEnterpriseMembersCanDeleteIssuesSettingInput
                           ): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "enterpriseId" -> implicitly[ArgEncoder[String]]
                .encode(value.enterpriseId),
              "settingValue" -> implicitly[ArgEncoder[
                EnterpriseEnabledDisabledSettingValue
              ]].encode(value.settingValue)
            )
          )

        override def typeName: String =
          "UpdateEnterpriseMembersCanDeleteIssuesSettingInput"
      }
  }

  case class UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput(
                                                                       clientMutationId: Option[String] = None,
                                                                       enterpriseId: String,
                                                                       settingValue: EnterpriseEnabledDisabledSettingValue
                                                                     )

  object UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput {
    implicit val encoder
    : ArgEncoder[UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput] =
      new ArgEncoder[UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput] {
        override def encode(
                             value: UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput
                           ): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "enterpriseId" -> implicitly[ArgEncoder[String]]
                .encode(value.enterpriseId),
              "settingValue" -> implicitly[ArgEncoder[
                EnterpriseEnabledDisabledSettingValue
              ]].encode(value.settingValue)
            )
          )

        override def typeName: String =
          "UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput"
      }
  }

  case class UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput(
                                                                        clientMutationId: Option[String] = None,
                                                                        enterpriseId: String,
                                                                        settingValue: EnterpriseEnabledDisabledSettingValue
                                                                      )

  object UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput {
    implicit val encoder: ArgEncoder[
      UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput
    ] = new ArgEncoder[
      UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput
    ] {
      override def encode(
                           value: UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput
                         ): Value =
        ObjectValue(
          List(
            "clientMutationId" -> value.clientMutationId.fold(NullValue: Value)(
              value => implicitly[ArgEncoder[String]].encode(value)
            ),
            "enterpriseId" -> implicitly[ArgEncoder[String]]
              .encode(value.enterpriseId),
            "settingValue" -> implicitly[ArgEncoder[
              EnterpriseEnabledDisabledSettingValue
            ]].encode(value.settingValue)
          )
        )

      override def typeName: String =
        "UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput"
    }
  }

  case class UpdateEnterpriseMembersCanMakePurchasesSettingInput(
                                                                  clientMutationId: Option[String] = None,
                                                                  enterpriseId: String,
                                                                  settingValue: EnterpriseMembersCanMakePurchasesSettingValue
                                                                )

  object UpdateEnterpriseMembersCanMakePurchasesSettingInput {
    implicit val encoder
    : ArgEncoder[UpdateEnterpriseMembersCanMakePurchasesSettingInput] =
      new ArgEncoder[UpdateEnterpriseMembersCanMakePurchasesSettingInput] {
        override def encode(
                             value: UpdateEnterpriseMembersCanMakePurchasesSettingInput
                           ): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "enterpriseId" -> implicitly[ArgEncoder[String]]
                .encode(value.enterpriseId),
              "settingValue" -> implicitly[ArgEncoder[
                EnterpriseMembersCanMakePurchasesSettingValue
              ]].encode(value.settingValue)
            )
          )

        override def typeName: String =
          "UpdateEnterpriseMembersCanMakePurchasesSettingInput"
      }
  }

  case class UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput(
                                                                            clientMutationId: Option[String] = None,
                                                                            enterpriseId: String,
                                                                            settingValue: EnterpriseEnabledDisabledSettingValue
                                                                          )

  object UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput {
    implicit val encoder: ArgEncoder[
      UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput
    ] = new ArgEncoder[
      UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput
    ] {
      override def encode(
                           value: UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput
                         ): Value =
        ObjectValue(
          List(
            "clientMutationId" -> value.clientMutationId.fold(NullValue: Value)(
              value => implicitly[ArgEncoder[String]].encode(value)
            ),
            "enterpriseId" -> implicitly[ArgEncoder[String]]
              .encode(value.enterpriseId),
            "settingValue" -> implicitly[ArgEncoder[
              EnterpriseEnabledDisabledSettingValue
            ]].encode(value.settingValue)
          )
        )

      override def typeName: String =
        "UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput"
    }
  }

  case class UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput(
                                                                           clientMutationId: Option[String] = None,
                                                                           enterpriseId: String,
                                                                           settingValue: EnterpriseEnabledDisabledSettingValue
                                                                         )

  object UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput {
    implicit val encoder: ArgEncoder[
      UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput
    ] = new ArgEncoder[
      UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput
    ] {
      override def encode(
                           value: UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput
                         ): Value =
        ObjectValue(
          List(
            "clientMutationId" -> value.clientMutationId.fold(NullValue: Value)(
              value => implicitly[ArgEncoder[String]].encode(value)
            ),
            "enterpriseId" -> implicitly[ArgEncoder[String]]
              .encode(value.enterpriseId),
            "settingValue" -> implicitly[ArgEncoder[
              EnterpriseEnabledDisabledSettingValue
            ]].encode(value.settingValue)
          )
        )

      override def typeName: String =
        "UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput"
    }
  }

  case class UpdateEnterpriseOrganizationProjectsSettingInput(
                                                               clientMutationId: Option[String] = None,
                                                               enterpriseId: String,
                                                               settingValue: EnterpriseEnabledDisabledSettingValue
                                                             )

  object UpdateEnterpriseOrganizationProjectsSettingInput {
    implicit val encoder
    : ArgEncoder[UpdateEnterpriseOrganizationProjectsSettingInput] =
      new ArgEncoder[UpdateEnterpriseOrganizationProjectsSettingInput] {
        override def encode(
                             value: UpdateEnterpriseOrganizationProjectsSettingInput
                           ): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "enterpriseId" -> implicitly[ArgEncoder[String]]
                .encode(value.enterpriseId),
              "settingValue" -> implicitly[ArgEncoder[
                EnterpriseEnabledDisabledSettingValue
              ]].encode(value.settingValue)
            )
          )

        override def typeName: String =
          "UpdateEnterpriseOrganizationProjectsSettingInput"
      }
  }

  case class UpdateEnterpriseProfileInput(
                                           clientMutationId: Option[String] = None,
                                           description: Option[String] = None,
                                           enterpriseId: String,
                                           location: Option[String] = None,
                                           name: Option[String] = None,
                                           websiteUrl: Option[String] = None
                                         )

  object UpdateEnterpriseProfileInput {
    implicit val encoder: ArgEncoder[UpdateEnterpriseProfileInput] =
      new ArgEncoder[UpdateEnterpriseProfileInput] {
        override def encode(value: UpdateEnterpriseProfileInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "description" -> value.description.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              ),
              "enterpriseId" -> implicitly[ArgEncoder[String]]
                .encode(value.enterpriseId),
              "location" -> value.location.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              ),
              "name" -> value.name.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              ),
              "websiteUrl" -> value.websiteUrl.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              )
            )
          )

        override def typeName: String = "UpdateEnterpriseProfileInput"
      }
  }

  case class UpdateEnterpriseRepositoryProjectsSettingInput(
                                                             clientMutationId: Option[String] = None,
                                                             enterpriseId: String,
                                                             settingValue: EnterpriseEnabledDisabledSettingValue
                                                           )

  object UpdateEnterpriseRepositoryProjectsSettingInput {
    implicit val encoder
    : ArgEncoder[UpdateEnterpriseRepositoryProjectsSettingInput] =
      new ArgEncoder[UpdateEnterpriseRepositoryProjectsSettingInput] {
        override def encode(
                             value: UpdateEnterpriseRepositoryProjectsSettingInput
                           ): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "enterpriseId" -> implicitly[ArgEncoder[String]]
                .encode(value.enterpriseId),
              "settingValue" -> implicitly[ArgEncoder[
                EnterpriseEnabledDisabledSettingValue
              ]].encode(value.settingValue)
            )
          )

        override def typeName: String =
          "UpdateEnterpriseRepositoryProjectsSettingInput"
      }
  }

  case class UpdateEnterpriseTeamDiscussionsSettingInput(
                                                          clientMutationId: Option[String] = None,
                                                          enterpriseId: String,
                                                          settingValue: EnterpriseEnabledDisabledSettingValue
                                                        )

  object UpdateEnterpriseTeamDiscussionsSettingInput {
    implicit val encoder
    : ArgEncoder[UpdateEnterpriseTeamDiscussionsSettingInput] =
      new ArgEncoder[UpdateEnterpriseTeamDiscussionsSettingInput] {
        override def encode(
                             value: UpdateEnterpriseTeamDiscussionsSettingInput
                           ): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "enterpriseId" -> implicitly[ArgEncoder[String]]
                .encode(value.enterpriseId),
              "settingValue" -> implicitly[ArgEncoder[
                EnterpriseEnabledDisabledSettingValue
              ]].encode(value.settingValue)
            )
          )

        override def typeName: String =
          "UpdateEnterpriseTeamDiscussionsSettingInput"
      }
  }

  case class UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput(
                                                                          clientMutationId: Option[String] = None,
                                                                          enterpriseId: String,
                                                                          settingValue: EnterpriseEnabledSettingValue
                                                                        )

  object UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput {
    implicit val encoder: ArgEncoder[
      UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput
    ] = new ArgEncoder[
      UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput
    ] {
      override def encode(
                           value: UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput
                         ): Value =
        ObjectValue(
          List(
            "clientMutationId" -> value.clientMutationId.fold(NullValue: Value)(
              value => implicitly[ArgEncoder[String]].encode(value)
            ),
            "enterpriseId" -> implicitly[ArgEncoder[String]]
              .encode(value.enterpriseId),
            "settingValue" -> implicitly[ArgEncoder[
              EnterpriseEnabledSettingValue
            ]].encode(value.settingValue)
          )
        )

      override def typeName: String =
        "UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput"
    }
  }

  case class UpdateIpAllowListEnabledSettingInput(
                                                   clientMutationId: Option[String] = None,
                                                   ownerId: String,
                                                   settingValue: IpAllowListEnabledSettingValue
                                                 )

  object UpdateIpAllowListEnabledSettingInput {
    implicit val encoder: ArgEncoder[UpdateIpAllowListEnabledSettingInput] =
      new ArgEncoder[UpdateIpAllowListEnabledSettingInput] {
        override def encode(
                             value: UpdateIpAllowListEnabledSettingInput
                           ): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "ownerId" -> implicitly[ArgEncoder[String]].encode(value.ownerId),
              "settingValue" -> implicitly[ArgEncoder[
                IpAllowListEnabledSettingValue
              ]].encode(value.settingValue)
            )
          )

        override def typeName: String = "UpdateIpAllowListEnabledSettingInput"
      }
  }

  case class UpdateIpAllowListEntryInput(
                                          allowListValue: String,
                                          clientMutationId: Option[String] = None,
                                          ipAllowListEntryId: String,
                                          isActive: Boolean,
                                          name: Option[String] = None
                                        )

  object UpdateIpAllowListEntryInput {
    implicit val encoder: ArgEncoder[UpdateIpAllowListEntryInput] =
      new ArgEncoder[UpdateIpAllowListEntryInput] {
        override def encode(value: UpdateIpAllowListEntryInput): Value =
          ObjectValue(
            List(
              "allowListValue" -> implicitly[ArgEncoder[String]]
                .encode(value.allowListValue),
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "ipAllowListEntryId" -> implicitly[ArgEncoder[String]]
                .encode(value.ipAllowListEntryId),
              "isActive" -> implicitly[ArgEncoder[Boolean]]
                .encode(value.isActive),
              "name" -> value.name.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              )
            )
          )

        override def typeName: String = "UpdateIpAllowListEntryInput"
      }
  }

  case class UpdateIssueCommentInput(
                                      body: String,
                                      clientMutationId: Option[String] = None,
                                      id: String
                                    )

  object UpdateIssueCommentInput {
    implicit val encoder: ArgEncoder[UpdateIssueCommentInput] =
      new ArgEncoder[UpdateIssueCommentInput] {
        override def encode(value: UpdateIssueCommentInput): Value =
          ObjectValue(
            List(
              "body" -> implicitly[ArgEncoder[String]].encode(value.body),
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "id" -> implicitly[ArgEncoder[String]].encode(value.id)
            )
          )

        override def typeName: String = "UpdateIssueCommentInput"
      }
  }

  case class UpdateIssueInput(
                               assigneeIds: Option[List[String]] = None,
                               body: Option[String] = None,
                               clientMutationId: Option[String] = None,
                               id: String,
                               labelIds: Option[List[String]] = None,
                               milestoneId: Option[String] = None,
                               projectIds: Option[List[String]] = None,
                               state: Option[IssueState] = None,
                               title: Option[String] = None
                             )

  object UpdateIssueInput {
    implicit val encoder: ArgEncoder[UpdateIssueInput] =
      new ArgEncoder[UpdateIssueInput] {
        override def encode(value: UpdateIssueInput): Value =
          ObjectValue(
            List(
              "assigneeIds" -> value.assigneeIds.fold(NullValue: Value)(value =>
                ListValue(
                  value.map(value =>
                    implicitly[ArgEncoder[String]].encode(value)
                  )
                )
              ),
              "body" -> value.body.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              ),
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "id" -> implicitly[ArgEncoder[String]].encode(value.id),
              "labelIds" -> value.labelIds.fold(NullValue: Value)(value =>
                ListValue(
                  value.map(value =>
                    implicitly[ArgEncoder[String]].encode(value)
                  )
                )
              ),
              "milestoneId" -> value.milestoneId.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              ),
              "projectIds" -> value.projectIds.fold(NullValue: Value)(value =>
                ListValue(
                  value.map(value =>
                    implicitly[ArgEncoder[String]].encode(value)
                  )
                )
              ),
              "state" -> value.state.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[IssueState]].encode(value)
              ),
              "title" -> value.title.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              )
            )
          )

        override def typeName: String = "UpdateIssueInput"
      }
  }

  case class UpdateLabelInput(
                               clientMutationId: Option[String] = None,
                               color: Option[String] = None,
                               description: Option[String] = None,
                               id: String,
                               name: Option[String] = None
                             )

  object UpdateLabelInput {
    implicit val encoder: ArgEncoder[UpdateLabelInput] =
      new ArgEncoder[UpdateLabelInput] {
        override def encode(value: UpdateLabelInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "color" -> value.color.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              ),
              "description" -> value.description.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              ),
              "id" -> implicitly[ArgEncoder[String]].encode(value.id),
              "name" -> value.name.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              )
            )
          )

        override def typeName: String = "UpdateLabelInput"
      }
  }

  case class UpdateProjectCardInput(
                                     clientMutationId: Option[String] = None,
                                     isArchived: Option[Boolean] = None,
                                     note: Option[String] = None,
                                     projectCardId: String
                                   )

  object UpdateProjectCardInput {
    implicit val encoder: ArgEncoder[UpdateProjectCardInput] =
      new ArgEncoder[UpdateProjectCardInput] {
        override def encode(value: UpdateProjectCardInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "isArchived" -> value.isArchived.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[Boolean]].encode(value)
              ),
              "note" -> value.note.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              ),
              "projectCardId" -> implicitly[ArgEncoder[String]]
                .encode(value.projectCardId)
            )
          )

        override def typeName: String = "UpdateProjectCardInput"
      }
  }

  case class UpdateProjectColumnInput(
                                       clientMutationId: Option[String] = None,
                                       name: String,
                                       projectColumnId: String
                                     )

  object UpdateProjectColumnInput {
    implicit val encoder: ArgEncoder[UpdateProjectColumnInput] =
      new ArgEncoder[UpdateProjectColumnInput] {
        override def encode(value: UpdateProjectColumnInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "name" -> implicitly[ArgEncoder[String]].encode(value.name),
              "projectColumnId" -> implicitly[ArgEncoder[String]]
                .encode(value.projectColumnId)
            )
          )

        override def typeName: String = "UpdateProjectColumnInput"
      }
  }

  case class UpdateProjectInput(
                                 body: Option[String] = None,
                                 clientMutationId: Option[String] = None,
                                 name: Option[String] = None,
                                 projectId: String,
                                 public: Option[Boolean] = None,
                                 state: Option[ProjectState] = None
                               )

  object UpdateProjectInput {
    implicit val encoder: ArgEncoder[UpdateProjectInput] =
      new ArgEncoder[UpdateProjectInput] {
        override def encode(value: UpdateProjectInput): Value =
          ObjectValue(
            List(
              "body" -> value.body.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              ),
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "name" -> value.name.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              ),
              "projectId" -> implicitly[ArgEncoder[String]]
                .encode(value.projectId),
              "public" -> value.public.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[Boolean]].encode(value)
              ),
              "state" -> value.state.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[ProjectState]].encode(value)
              )
            )
          )

        override def typeName: String = "UpdateProjectInput"
      }
  }

  case class UpdatePullRequestInput(
                                     assigneeIds: Option[List[String]] = None,
                                     baseRefName: Option[String] = None,
                                     body: Option[String] = None,
                                     clientMutationId: Option[String] = None,
                                     labelIds: Option[List[String]] = None,
                                     maintainerCanModify: Option[Boolean] = None,
                                     milestoneId: Option[String] = None,
                                     projectIds: Option[List[String]] = None,
                                     pullRequestId: String,
                                     state: Option[PullRequestUpdateState] = None,
                                     title: Option[String] = None
                                   )

  object UpdatePullRequestInput {
    implicit val encoder: ArgEncoder[UpdatePullRequestInput] =
      new ArgEncoder[UpdatePullRequestInput] {
        override def encode(value: UpdatePullRequestInput): Value =
          ObjectValue(
            List(
              "assigneeIds" -> value.assigneeIds.fold(NullValue: Value)(value =>
                ListValue(
                  value.map(value =>
                    implicitly[ArgEncoder[String]].encode(value)
                  )
                )
              ),
              "baseRefName" -> value.baseRefName.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              ),
              "body" -> value.body.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              ),
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "labelIds" -> value.labelIds.fold(NullValue: Value)(value =>
                ListValue(
                  value.map(value =>
                    implicitly[ArgEncoder[String]].encode(value)
                  )
                )
              ),
              "maintainerCanModify" -> value.maintainerCanModify.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[Boolean]].encode(value)),
              "milestoneId" -> value.milestoneId.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              ),
              "projectIds" -> value.projectIds.fold(NullValue: Value)(value =>
                ListValue(
                  value.map(value =>
                    implicitly[ArgEncoder[String]].encode(value)
                  )
                )
              ),
              "pullRequestId" -> implicitly[ArgEncoder[String]]
                .encode(value.pullRequestId),
              "state" -> value.state.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[PullRequestUpdateState]].encode(value)
              ),
              "title" -> value.title.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              )
            )
          )

        override def typeName: String = "UpdatePullRequestInput"
      }
  }

  case class UpdatePullRequestReviewCommentInput(
                                                  body: String,
                                                  clientMutationId: Option[String] = None,
                                                  pullRequestReviewCommentId: String
                                                )

  object UpdatePullRequestReviewCommentInput {
    implicit val encoder: ArgEncoder[UpdatePullRequestReviewCommentInput] =
      new ArgEncoder[UpdatePullRequestReviewCommentInput] {
        override def encode(value: UpdatePullRequestReviewCommentInput): Value =
          ObjectValue(
            List(
              "body" -> implicitly[ArgEncoder[String]].encode(value.body),
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "pullRequestReviewCommentId" -> implicitly[ArgEncoder[String]]
                .encode(value.pullRequestReviewCommentId)
            )
          )

        override def typeName: String = "UpdatePullRequestReviewCommentInput"
      }
  }

  case class UpdatePullRequestReviewInput(
                                           body: String,
                                           clientMutationId: Option[String] = None,
                                           pullRequestReviewId: String
                                         )

  object UpdatePullRequestReviewInput {
    implicit val encoder: ArgEncoder[UpdatePullRequestReviewInput] =
      new ArgEncoder[UpdatePullRequestReviewInput] {
        override def encode(value: UpdatePullRequestReviewInput): Value =
          ObjectValue(
            List(
              "body" -> implicitly[ArgEncoder[String]].encode(value.body),
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "pullRequestReviewId" -> implicitly[ArgEncoder[String]]
                .encode(value.pullRequestReviewId)
            )
          )

        override def typeName: String = "UpdatePullRequestReviewInput"
      }
  }

  case class UpdateRefInput(
                             clientMutationId: Option[String] = None,
                             force: Option[Boolean] = None,
                             oid: GitObjectID,
                             refId: String
                           )

  object UpdateRefInput {
    implicit val encoder: ArgEncoder[UpdateRefInput] =
      new ArgEncoder[UpdateRefInput] {
        override def encode(value: UpdateRefInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "force" -> value.force.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[Boolean]].encode(value)
              ),
              "oid" -> implicitly[ArgEncoder[GitObjectID]].encode(value.oid),
              "refId" -> implicitly[ArgEncoder[String]].encode(value.refId)
            )
          )

        override def typeName: String = "UpdateRefInput"
      }
  }

  case class UpdateRefsInput(
                              clientMutationId: Option[String] = None,
                              refUpdates: List[RefUpdate] = Nil,
                              repositoryId: String
                            )

  object UpdateRefsInput {
    implicit val encoder: ArgEncoder[UpdateRefsInput] =
      new ArgEncoder[UpdateRefsInput] {
        override def encode(value: UpdateRefsInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "refUpdates" -> ListValue(
                value.refUpdates.map(value =>
                  implicitly[ArgEncoder[RefUpdate]].encode(value)
                )
              ),
              "repositoryId" -> implicitly[ArgEncoder[String]]
                .encode(value.repositoryId)
            )
          )

        override def typeName: String = "UpdateRefsInput"
      }
  }

  case class UpdateRepositoryInput(
                                    clientMutationId: Option[String] = None,
                                    description: Option[String] = None,
                                    hasIssuesEnabled: Option[Boolean] = None,
                                    hasProjectsEnabled: Option[Boolean] = None,
                                    hasWikiEnabled: Option[Boolean] = None,
                                    homepageUrl: Option[URI] = None,
                                    name: Option[String] = None,
                                    repositoryId: String,
                                    template: Option[Boolean] = None
                                  )

  object UpdateRepositoryInput {
    implicit val encoder: ArgEncoder[UpdateRepositoryInput] =
      new ArgEncoder[UpdateRepositoryInput] {
        override def encode(value: UpdateRepositoryInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "description" -> value.description.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              ),
              "hasIssuesEnabled" -> value.hasIssuesEnabled.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[Boolean]].encode(value)),
              "hasProjectsEnabled" -> value.hasProjectsEnabled.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[Boolean]].encode(value)),
              "hasWikiEnabled" -> value.hasWikiEnabled.fold(NullValue: Value)(
                value => implicitly[ArgEncoder[Boolean]].encode(value)
              ),
              "homepageUrl" -> value.homepageUrl.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[URI]].encode(value)
              ),
              "name" -> value.name.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              ),
              "repositoryId" -> implicitly[ArgEncoder[String]]
                .encode(value.repositoryId),
              "template" -> value.template.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[Boolean]].encode(value)
              )
            )
          )

        override def typeName: String = "UpdateRepositoryInput"
      }
  }

  case class UpdateSubscriptionInput(
                                      clientMutationId: Option[String] = None,
                                      state: SubscriptionState,
                                      subscribableId: String
                                    )

  object UpdateSubscriptionInput {
    implicit val encoder: ArgEncoder[UpdateSubscriptionInput] =
      new ArgEncoder[UpdateSubscriptionInput] {
        override def encode(value: UpdateSubscriptionInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "state" -> implicitly[ArgEncoder[SubscriptionState]]
                .encode(value.state),
              "subscribableId" -> implicitly[ArgEncoder[String]]
                .encode(value.subscribableId)
            )
          )

        override def typeName: String = "UpdateSubscriptionInput"
      }
  }

  case class UpdateTeamDiscussionCommentInput(
                                               body: String,
                                               bodyVersion: Option[String] = None,
                                               clientMutationId: Option[String] = None,
                                               id: String
                                             )

  object UpdateTeamDiscussionCommentInput {
    implicit val encoder: ArgEncoder[UpdateTeamDiscussionCommentInput] =
      new ArgEncoder[UpdateTeamDiscussionCommentInput] {
        override def encode(value: UpdateTeamDiscussionCommentInput): Value =
          ObjectValue(
            List(
              "body" -> implicitly[ArgEncoder[String]].encode(value.body),
              "bodyVersion" -> value.bodyVersion.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              ),
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "id" -> implicitly[ArgEncoder[String]].encode(value.id)
            )
          )

        override def typeName: String = "UpdateTeamDiscussionCommentInput"
      }
  }

  case class UpdateTeamDiscussionInput(
                                        body: Option[String] = None,
                                        bodyVersion: Option[String] = None,
                                        clientMutationId: Option[String] = None,
                                        id: String,
                                        pinned: Option[Boolean] = None,
                                        title: Option[String] = None
                                      )

  object UpdateTeamDiscussionInput {
    implicit val encoder: ArgEncoder[UpdateTeamDiscussionInput] =
      new ArgEncoder[UpdateTeamDiscussionInput] {
        override def encode(value: UpdateTeamDiscussionInput): Value =
          ObjectValue(
            List(
              "body" -> value.body.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              ),
              "bodyVersion" -> value.bodyVersion.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              ),
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "id" -> implicitly[ArgEncoder[String]].encode(value.id),
              "pinned" -> value.pinned.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[Boolean]].encode(value)
              ),
              "title" -> value.title.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[String]].encode(value)
              )
            )
          )

        override def typeName: String = "UpdateTeamDiscussionInput"
      }
  }

  case class UpdateTeamReviewAssignmentInput(
                                              algorithm: Option[TeamReviewAssignmentAlgorithm] = None,
                                              clientMutationId: Option[String] = None,
                                              enabled: Boolean,
                                              excludedTeamMemberIds: Option[List[String]] = None,
                                              id: String,
                                              notifyTeam: Option[Boolean] = None,
                                              teamMemberCount: Option[Int] = None
                                            )

  object UpdateTeamReviewAssignmentInput {
    implicit val encoder: ArgEncoder[UpdateTeamReviewAssignmentInput] =
      new ArgEncoder[UpdateTeamReviewAssignmentInput] {
        override def encode(value: UpdateTeamReviewAssignmentInput): Value =
          ObjectValue(
            List(
              "algorithm" -> value.algorithm.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[TeamReviewAssignmentAlgorithm]]
                  .encode(value)
              ),
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "enabled" -> implicitly[ArgEncoder[Boolean]]
                .encode(value.enabled),
              "excludedTeamMemberIds" -> value.excludedTeamMemberIds
                .fold(NullValue: Value)(value =>
                  ListValue(
                    value.map(value =>
                      implicitly[ArgEncoder[String]].encode(value)
                    )
                  )
                ),
              "id" -> implicitly[ArgEncoder[String]].encode(value.id),
              "notifyTeam" -> value.notifyTeam.fold(NullValue: Value)(value =>
                implicitly[ArgEncoder[Boolean]].encode(value)
              ),
              "teamMemberCount" -> value.teamMemberCount.fold(NullValue: Value)(
                value => implicitly[ArgEncoder[Int]].encode(value)
              )
            )
          )

        override def typeName: String = "UpdateTeamReviewAssignmentInput"
      }
  }

  case class UpdateTopicsInput(
                                clientMutationId: Option[String] = None,
                                repositoryId: String,
                                topicNames: List[String] = Nil
                              )

  object UpdateTopicsInput {
    implicit val encoder: ArgEncoder[UpdateTopicsInput] =
      new ArgEncoder[UpdateTopicsInput] {
        override def encode(value: UpdateTopicsInput): Value =
          ObjectValue(
            List(
              "clientMutationId" -> value.clientMutationId.fold(
                NullValue: Value
              )(value => implicitly[ArgEncoder[String]].encode(value)),
              "repositoryId" -> implicitly[ArgEncoder[String]]
                .encode(value.repositoryId),
              "topicNames" -> ListValue(
                value.topicNames.map(value =>
                  implicitly[ArgEncoder[String]].encode(value)
                )
              )
            )
          )

        override def typeName: String = "UpdateTopicsInput"
      }
  }

  case class UserStatusOrder(
                              direction: OrderDirection,
                              field: UserStatusOrderField
                            )

  object UserStatusOrder {
    implicit val encoder: ArgEncoder[UserStatusOrder] =
      new ArgEncoder[UserStatusOrder] {
        override def encode(value: UserStatusOrder): Value =
          ObjectValue(
            List(
              "direction" -> implicitly[ArgEncoder[OrderDirection]]
                .encode(value.direction),
              "field" -> implicitly[ArgEncoder[UserStatusOrderField]]
                .encode(value.field)
            )
          )

        override def typeName: String = "UserStatusOrder"
      }
  }

  type Query = RootQuery

  object Query {

    /**
     * Look up a code of conduct by its key
     */
    def codeOfConduct[A](key: String)(
      innerSelection: SelectionBuilder[CodeOfConduct, A]
    ): SelectionBuilder[RootQuery, Option[A]] =
      Field(
        "codeOfConduct",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("key", key))
      )

    /**
     * Look up a code of conduct by its key
     */
    def codesOfConduct[A](
                           innerSelection: SelectionBuilder[CodeOfConduct, A]
                         ): SelectionBuilder[RootQuery, Option[List[Option[A]]]] =
      Field("codesOfConduct", OptionOf(ListOf(OptionOf(Obj(innerSelection)))))

    /**
     * Look up an enterprise by URL slug.
     */
    def enterprise[A](invitationToken: Option[String] = None, slug: String)(
      innerSelection: SelectionBuilder[Enterprise, A]
    ): SelectionBuilder[RootQuery, Option[A]] =
      Field(
        "enterprise",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("invitationToken", invitationToken),
          Argument("slug", slug)
        )
      )

    /**
     * Look up a pending enterprise administrator invitation by invitee, enterprise and role.
     */
    def enterpriseAdministratorInvitation[A](
                                              enterpriseSlug: String,
                                              role: EnterpriseAdministratorRole,
                                              userLogin: String
                                            )(
                                              innerSelection: SelectionBuilder[EnterpriseAdministratorInvitation, A]
                                            ): SelectionBuilder[RootQuery, Option[A]] =
      Field(
        "enterpriseAdministratorInvitation",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("enterpriseSlug", enterpriseSlug),
          Argument("role", role),
          Argument("userLogin", userLogin)
        )
      )

    /**
     * Look up a pending enterprise administrator invitation by invitation token.
     */
    def enterpriseAdministratorInvitationByToken[A](invitationToken: String)(
      innerSelection: SelectionBuilder[EnterpriseAdministratorInvitation, A]
    ): SelectionBuilder[RootQuery, Option[A]] =
      Field(
        "enterpriseAdministratorInvitationByToken",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("invitationToken", invitationToken))
      )

    /**
     * Look up an open source license by its key
     */
    def license[A](key: String)(
      innerSelection: SelectionBuilder[License, A]
    ): SelectionBuilder[RootQuery, Option[A]] =
      Field(
        "license",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("key", key))
      )

    /**
     * Return a list of known open source licenses
     */
    def licenses[A](
                     innerSelection: SelectionBuilder[License, A]
                   ): SelectionBuilder[RootQuery, List[Option[A]]] =
      Field("licenses", ListOf(OptionOf(Obj(innerSelection))))

    /**
     * Get alphabetically sorted list of Marketplace categories
     */
    def marketplaceCategories[A](
                                  excludeEmpty: Option[Boolean] = None,
                                  excludeSubcategories: Option[Boolean] = None,
                                  includeCategories: Option[List[String]] = None
                                )(
                                  innerSelection: SelectionBuilder[MarketplaceCategory, A]
                                ): SelectionBuilder[RootQuery, List[A]] =
      Field(
        "marketplaceCategories",
        ListOf(Obj(innerSelection)),
        arguments = List(
          Argument("excludeEmpty", excludeEmpty),
          Argument("excludeSubcategories", excludeSubcategories),
          Argument("includeCategories", includeCategories)
        )
      )

    /**
     * Look up a Marketplace category by its slug.
     */
    def marketplaceCategory[A](
                                slug: String,
                                useTopicAliases: Option[Boolean] = None
                              )(
                                innerSelection: SelectionBuilder[MarketplaceCategory, A]
                              ): SelectionBuilder[RootQuery, Option[A]] =
      Field(
        "marketplaceCategory",
        OptionOf(Obj(innerSelection)),
        arguments = List(
          Argument("slug", slug),
          Argument("useTopicAliases", useTopicAliases)
        )
      )

    /**
     * Look up a single Marketplace listing
     */
    def marketplaceListing[A](slug: String)(
      innerSelection: SelectionBuilder[MarketplaceListing, A]
    ): SelectionBuilder[RootQuery, Option[A]] =
      Field(
        "marketplaceListing",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("slug", slug))
      )

    /**
     * Look up Marketplace listings
     */
    def marketplaceListings[A](
                                adminId: Option[String] = None,
                                after: Option[String] = None,
                                allStates: Option[Boolean] = None,
                                before: Option[String] = None,
                                categorySlug: Option[String] = None,
                                first: Option[Int] = None,
                                last: Option[Int] = None,
                                organizationId: Option[String] = None,
                                primaryCategoryOnly: Option[Boolean] = None,
                                slugs: Option[List[Option[String]]] = None,
                                useTopicAliases: Option[Boolean] = None,
                                viewerCanAdmin: Option[Boolean] = None,
                                withFreeTrialsOnly: Option[Boolean] = None
                              )(
                                innerSelection: SelectionBuilder[MarketplaceListingConnection, A]
                              ): SelectionBuilder[RootQuery, A] =
      Field(
        "marketplaceListings",
        Obj(innerSelection),
        arguments = List(
          Argument("adminId", adminId),
          Argument("after", after),
          Argument("allStates", allStates),
          Argument("before", before),
          Argument("categorySlug", categorySlug),
          Argument("first", first),
          Argument("last", last),
          Argument("organizationId", organizationId),
          Argument("primaryCategoryOnly", primaryCategoryOnly),
          Argument("slugs", slugs),
          Argument("useTopicAliases", useTopicAliases),
          Argument("viewerCanAdmin", viewerCanAdmin),
          Argument("withFreeTrialsOnly", withFreeTrialsOnly)
        )
      )

    /**
     * Return information about the GitHub instance
     */
    def meta[A](
                 innerSelection: SelectionBuilder[GitHubMetadata, A]
               ): SelectionBuilder[RootQuery, A] = Field("meta", Obj(innerSelection))

    /**
     * Fetches an object given its ID.
     */
    def node[A](id: String)(
      onMarkedAsDuplicateEvent: Option[
        SelectionBuilder[MarkedAsDuplicateEvent, A]
      ] = None,
      onOrganizationInvitation: Option[
        SelectionBuilder[OrganizationInvitation, A]
      ] = None,
      onIssueComment: Option[SelectionBuilder[IssueComment, A]] = None,
      onCheckSuite: Option[SelectionBuilder[CheckSuite, A]] = None,
      onTeamRemoveRepositoryAuditEntry: Option[
        SelectionBuilder[TeamRemoveRepositoryAuditEntry, A]
      ] = None,
      onBot: Option[SelectionBuilder[Bot, A]] = None,
      onRepoCreateAuditEntry: Option[
        SelectionBuilder[RepoCreateAuditEntry, A]
      ] = None,
      onRepoDestroyAuditEntry: Option[
        SelectionBuilder[RepoDestroyAuditEntry, A]
      ] = None,
      onOrgRemoveOutsideCollaboratorAuditEntry: Option[
        SelectionBuilder[OrgRemoveOutsideCollaboratorAuditEntry, A]
      ] = None,
      onRepoArchivedAuditEntry: Option[
        SelectionBuilder[RepoArchivedAuditEntry, A]
      ] = None,
      onOrgEnableSamlAuditEntry: Option[
        SelectionBuilder[OrgEnableSamlAuditEntry, A]
      ] = None,
      onRepositoryInvitation: Option[
        SelectionBuilder[RepositoryInvitation, A]
      ] = None,
      onBaseRefForcePushedEvent: Option[
        SelectionBuilder[BaseRefForcePushedEvent, A]
      ] = None,
      onCheckRun: Option[SelectionBuilder[CheckRun, A]] = None,
      onAutomaticBaseChangeSucceededEvent: Option[
        SelectionBuilder[AutomaticBaseChangeSucceededEvent, A]
      ] = None,
      onReadyForReviewEvent: Option[
        SelectionBuilder[ReadyForReviewEvent, A]
      ] = None,
      onMembersCanDeleteReposDisableAuditEntry: Option[
        SelectionBuilder[MembersCanDeleteReposDisableAuditEntry, A]
      ] = None,
      onTeamDiscussionComment: Option[
        SelectionBuilder[TeamDiscussionComment, A]
      ] = None,
      onEnterpriseServerUserAccountEmail: Option[
        SelectionBuilder[EnterpriseServerUserAccountEmail, A]
      ] = None,
      onBaseRefDeletedEvent: Option[
        SelectionBuilder[BaseRefDeletedEvent, A]
      ] = None,
      onEnterpriseUserAccount: Option[
        SelectionBuilder[EnterpriseUserAccount, A]
      ] = None,
      onOauthApplicationCreateAuditEntry: Option[
        SelectionBuilder[OauthApplicationCreateAuditEntry, A]
      ] = None,
      onSponsorsListing: Option[SelectionBuilder[SponsorsListing, A]] = None,
      onOrgConfigDisableCollaboratorsOnlyAuditEntry: Option[
        SelectionBuilder[OrgConfigDisableCollaboratorsOnlyAuditEntry, A]
      ] = None,
      onOrgCreateAuditEntry: Option[
        SelectionBuilder[OrgCreateAuditEntry, A]
      ] = None,
      onUserStatus: Option[SelectionBuilder[UserStatus, A]] = None,
      onCommitCommentThread: Option[
        SelectionBuilder[CommitCommentThread, A]
      ] = None,
      onUnsubscribedEvent: Option[SelectionBuilder[UnsubscribedEvent, A]] =
      None,
      onDemilestonedEvent: Option[SelectionBuilder[DemilestonedEvent, A]] =
      None,
      onReopenedEvent: Option[SelectionBuilder[ReopenedEvent, A]] = None,
      onOrgRemoveMemberAuditEntry: Option[
        SelectionBuilder[OrgRemoveMemberAuditEntry, A]
      ] = None,
      onUnassignedEvent: Option[SelectionBuilder[UnassignedEvent, A]] = None,
      onCommit: Option[SelectionBuilder[Commit, A]] = None,
      onPullRequestReviewComment: Option[
        SelectionBuilder[PullRequestReviewComment, A]
      ] = None,
      onMentionedEvent: Option[SelectionBuilder[MentionedEvent, A]] = None,
      onLicense: Option[SelectionBuilder[License, A]] = None,
      onOrgAddBillingManagerAuditEntry: Option[
        SelectionBuilder[OrgAddBillingManagerAuditEntry, A]
      ] = None,
      onTopic: Option[SelectionBuilder[Topic, A]] = None,
      onHeadRefForcePushedEvent: Option[
        SelectionBuilder[HeadRefForcePushedEvent, A]
      ] = None,
      onAutomaticBaseChangeFailedEvent: Option[
        SelectionBuilder[AutomaticBaseChangeFailedEvent, A]
      ] = None,
      onHeadRefDeletedEvent: Option[
        SelectionBuilder[HeadRefDeletedEvent, A]
      ] = None,
      onOrgConfigEnableCollaboratorsOnlyAuditEntry: Option[
        SelectionBuilder[OrgConfigEnableCollaboratorsOnlyAuditEntry, A]
      ] = None,
      onPushAllowance: Option[SelectionBuilder[PushAllowance, A]] = None,
      onOrgRemoveBillingManagerAuditEntry: Option[
        SelectionBuilder[OrgRemoveBillingManagerAuditEntry, A]
      ] = None,
      onRelease: Option[SelectionBuilder[Release, A]] = None,
      onApp: Option[SelectionBuilder[App, A]] = None,
      onConvertedNoteToIssueEvent: Option[
        SelectionBuilder[ConvertedNoteToIssueEvent, A]
      ] = None,
      onReviewRequestedEvent: Option[
        SelectionBuilder[ReviewRequestedEvent, A]
      ] = None,
      onIpAllowListEntry: Option[SelectionBuilder[IpAllowListEntry, A]] =
      None,
      onEnterpriseRepositoryInfo: Option[
        SelectionBuilder[EnterpriseRepositoryInfo, A]
      ] = None,
      onGistComment: Option[SelectionBuilder[GistComment, A]] = None,
      onReviewDismissedEvent: Option[
        SelectionBuilder[ReviewDismissedEvent, A]
      ] = None,
      onTree: Option[SelectionBuilder[Tree, A]] = None,
      onRepoConfigDisableAnonymousGitAccessAuditEntry: Option[
        SelectionBuilder[RepoConfigDisableAnonymousGitAccessAuditEntry, A]
      ] = None,
      onClosedEvent: Option[SelectionBuilder[ClosedEvent, A]] = None,
      onSubscribedEvent: Option[SelectionBuilder[SubscribedEvent, A]] = None,
      onBlob: Option[SelectionBuilder[Blob, A]] = None,
      onMarketplaceListing: Option[SelectionBuilder[MarketplaceListing, A]] =
      None,
      onSavedReply: Option[SelectionBuilder[SavedReply, A]] = None,
      onProjectColumn: Option[SelectionBuilder[ProjectColumn, A]] = None,
      onPackageTag: Option[SelectionBuilder[PackageTag, A]] = None,
      onRepoConfigEnableAnonymousGitAccessAuditEntry: Option[
        SelectionBuilder[RepoConfigEnableAnonymousGitAccessAuditEntry, A]
      ] = None,
      onPinnedIssue: Option[SelectionBuilder[PinnedIssue, A]] = None,
      onOrgUpdateMemberRepositoryCreationPermissionAuditEntry: Option[
        SelectionBuilder[
          OrgUpdateMemberRepositoryCreationPermissionAuditEntry,
          A
        ]
      ] = None,
      onTransferredEvent: Option[SelectionBuilder[TransferredEvent, A]] =
      None,
      onRepositoryTopic: Option[SelectionBuilder[RepositoryTopic, A]] = None,
      onOrgUpdateDefaultRepositoryPermissionAuditEntry: Option[
        SelectionBuilder[OrgUpdateDefaultRepositoryPermissionAuditEntry, A]
      ] = None,
      onRepoConfigDisableCollaboratorsOnlyAuditEntry: Option[
        SelectionBuilder[RepoConfigDisableCollaboratorsOnlyAuditEntry, A]
      ] = None,
      onTeamAddRepositoryAuditEntry: Option[
        SelectionBuilder[TeamAddRepositoryAuditEntry, A]
      ] = None,
      onOrgAddMemberAuditEntry: Option[
        SelectionBuilder[OrgAddMemberAuditEntry, A]
      ] = None,
      onUnmarkedAsDuplicateEvent: Option[
        SelectionBuilder[UnmarkedAsDuplicateEvent, A]
      ] = None,
      onTeamChangeParentTeamAuditEntry: Option[
        SelectionBuilder[TeamChangeParentTeamAuditEntry, A]
      ] = None,
      onDeployKey: Option[SelectionBuilder[DeployKey, A]] = None,
      onOrgEnableOauthAppRestrictionsAuditEntry: Option[
        SelectionBuilder[OrgEnableOauthAppRestrictionsAuditEntry, A]
      ] = None,
      onDeployment: Option[SelectionBuilder[Deployment, A]] = None,
      onEnterpriseIdentityProvider: Option[
        SelectionBuilder[EnterpriseIdentityProvider, A]
      ] = None,
      onProjectCard: Option[SelectionBuilder[ProjectCard, A]] = None,
      onPush: Option[SelectionBuilder[Push, A]] = None,
      onEnterpriseServerUserAccount: Option[
        SelectionBuilder[EnterpriseServerUserAccount, A]
      ] = None,
      onPullRequestReview: Option[SelectionBuilder[PullRequestReview, A]] =
      None,
      onRepoConfigLockAnonymousGitAccessAuditEntry: Option[
        SelectionBuilder[RepoConfigLockAnonymousGitAccessAuditEntry, A]
      ] = None,
      onOrgOauthAppAccessRequestedAuditEntry: Option[
        SelectionBuilder[OrgOauthAppAccessRequestedAuditEntry, A]
      ] = None,
      onRepositoryVisibilityChangeEnableAuditEntry: Option[
        SelectionBuilder[RepositoryVisibilityChangeEnableAuditEntry, A]
      ] = None,
      onMovedColumnsInProjectEvent: Option[
        SelectionBuilder[MovedColumnsInProjectEvent, A]
      ] = None,
      onUnlockedEvent: Option[SelectionBuilder[UnlockedEvent, A]] = None,
      onTeam: Option[SelectionBuilder[Team, A]] = None,
      onReaction: Option[SelectionBuilder[Reaction, A]] = None,
      onMergedEvent: Option[SelectionBuilder[MergedEvent, A]] = None,
      onExternalIdentity: Option[SelectionBuilder[ExternalIdentity, A]] =
      None,
      onPackageFile: Option[SelectionBuilder[PackageFile, A]] = None,
      onPackageVersion: Option[SelectionBuilder[PackageVersion, A]] = None,
      onReferencedEvent: Option[SelectionBuilder[ReferencedEvent, A]] = None,
      onCommitComment: Option[SelectionBuilder[CommitComment, A]] = None,
      onPullRequestReviewThread: Option[
        SelectionBuilder[PullRequestReviewThread, A]
      ] = None,
      onHeadRefRestoredEvent: Option[
        SelectionBuilder[HeadRefRestoredEvent, A]
      ] = None,
      onPrivateRepositoryForkingEnableAuditEntry: Option[
        SelectionBuilder[PrivateRepositoryForkingEnableAuditEntry, A]
      ] = None,
      onLabeledEvent: Option[SelectionBuilder[LabeledEvent, A]] = None,
      onLanguage: Option[SelectionBuilder[Language, A]] = None,
      onRepoAddMemberAuditEntry: Option[
        SelectionBuilder[RepoAddMemberAuditEntry, A]
      ] = None,
      onUnpinnedEvent: Option[SelectionBuilder[UnpinnedEvent, A]] = None,
      onDeploymentStatus: Option[SelectionBuilder[DeploymentStatus, A]] =
      None,
      onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
      onRepoConfigEnableSockpuppetDisallowedAuditEntry: Option[
        SelectionBuilder[RepoConfigEnableSockpuppetDisallowedAuditEntry, A]
      ] = None,
      onConvertToDraftEvent: Option[
        SelectionBuilder[ConvertToDraftEvent, A]
      ] = None,
      onGist: Option[SelectionBuilder[Gist, A]] = None,
      onOrgInviteMemberAuditEntry: Option[
        SelectionBuilder[OrgInviteMemberAuditEntry, A]
      ] = None,
      onTeamRemoveMemberAuditEntry: Option[
        SelectionBuilder[TeamRemoveMemberAuditEntry, A]
      ] = None,
      onOrgInviteToBusinessAuditEntry: Option[
        SelectionBuilder[OrgInviteToBusinessAuditEntry, A]
      ] = None,
      onRepoAddTopicAuditEntry: Option[
        SelectionBuilder[RepoAddTopicAuditEntry, A]
      ] = None,
      onPackage: Option[SelectionBuilder[Package, A]] = None,
      onRepoConfigDisableSockpuppetDisallowedAuditEntry: Option[
        SelectionBuilder[RepoConfigDisableSockpuppetDisallowedAuditEntry, A]
      ] = None,
      onLabel: Option[SelectionBuilder[Label, A]] = None,
      onProject: Option[SelectionBuilder[Project, A]] = None,
      onDeployedEvent: Option[SelectionBuilder[DeployedEvent, A]] = None,
      onOrgUnblockUserAuditEntry: Option[
        SelectionBuilder[OrgUnblockUserAuditEntry, A]
      ] = None,
      onCodeOfConduct: Option[SelectionBuilder[CodeOfConduct, A]] = None,
      onOrgEnableTwoFactorRequirementAuditEntry: Option[
        SelectionBuilder[OrgEnableTwoFactorRequirementAuditEntry, A]
      ] = None,
      onStatusContext: Option[SelectionBuilder[StatusContext, A]] = None,
      onUnlabeledEvent: Option[SelectionBuilder[UnlabeledEvent, A]] = None,
      onOrgBlockUserAuditEntry: Option[
        SelectionBuilder[OrgBlockUserAuditEntry, A]
      ] = None,
      onTag: Option[SelectionBuilder[Tag, A]] = None,
      onOrgOauthAppAccessApprovedAuditEntry: Option[
        SelectionBuilder[OrgOauthAppAccessApprovedAuditEntry, A]
      ] = None,
      onCrossReferencedEvent: Option[
        SelectionBuilder[CrossReferencedEvent, A]
      ] = None,
      onOrgUpdateMemberAuditEntry: Option[
        SelectionBuilder[OrgUpdateMemberAuditEntry, A]
      ] = None,
      onRepoRemoveTopicAuditEntry: Option[
        SelectionBuilder[RepoRemoveTopicAuditEntry, A]
      ] = None,
      onAssignedEvent: Option[SelectionBuilder[AssignedEvent, A]] = None,
      onRepositoryVulnerabilityAlert: Option[
        SelectionBuilder[RepositoryVulnerabilityAlert, A]
      ] = None,
      onOrgDisableSamlAuditEntry: Option[
        SelectionBuilder[OrgDisableSamlAuditEntry, A]
      ] = None,
      onRepoAccessAuditEntry: Option[
        SelectionBuilder[RepoAccessAuditEntry, A]
      ] = None,
      onPullRequestCommit: Option[SelectionBuilder[PullRequestCommit, A]] =
      None,
      onSecurityAdvisory: Option[SelectionBuilder[SecurityAdvisory, A]] =
      None,
      onRemovedFromProjectEvent: Option[
        SelectionBuilder[RemovedFromProjectEvent, A]
      ] = None,
      onRepository: Option[SelectionBuilder[Repository, A]] = None,
      onEnterpriseServerInstallation: Option[
        SelectionBuilder[EnterpriseServerInstallation, A]
      ] = None,
      onPrivateRepositoryForkingDisableAuditEntry: Option[
        SelectionBuilder[PrivateRepositoryForkingDisableAuditEntry, A]
      ] = None,
      onReviewDismissalAllowance: Option[
        SelectionBuilder[ReviewDismissalAllowance, A]
      ] = None,
      onRepoConfigUnlockAnonymousGitAccessAuditEntry: Option[
        SelectionBuilder[RepoConfigUnlockAnonymousGitAccessAuditEntry, A]
      ] = None,
      onUser: Option[SelectionBuilder[User, A]] = None,
      onTeamAddMemberAuditEntry: Option[
        SelectionBuilder[TeamAddMemberAuditEntry, A]
      ] = None,
      onDeploymentEnvironmentChangedEvent: Option[
        SelectionBuilder[DeploymentEnvironmentChangedEvent, A]
      ] = None,
      onDependencyGraphManifest: Option[
        SelectionBuilder[DependencyGraphManifest, A]
      ] = None,
      onMembersCanDeleteReposClearAuditEntry: Option[
        SelectionBuilder[MembersCanDeleteReposClearAuditEntry, A]
      ] = None,
      onEnterpriseServerUserAccountsUpload: Option[
        SelectionBuilder[EnterpriseServerUserAccountsUpload, A]
      ] = None,
      onReleaseAsset: Option[SelectionBuilder[ReleaseAsset, A]] = None,
      onRepoConfigEnableContributorsOnlyAuditEntry: Option[
        SelectionBuilder[RepoConfigEnableContributorsOnlyAuditEntry, A]
      ] = None,
      onPullRequestCommitCommentThread: Option[
        SelectionBuilder[PullRequestCommitCommentThread, A]
      ] = None,
      onTeamDiscussion: Option[SelectionBuilder[TeamDiscussion, A]] = None,
      onAddedToProjectEvent: Option[
        SelectionBuilder[AddedToProjectEvent, A]
      ] = None,
      onBranchProtectionRule: Option[
        SelectionBuilder[BranchProtectionRule, A]
      ] = None,
      onPublicKey: Option[SelectionBuilder[PublicKey, A]] = None,
      onMarketplaceCategory: Option[
        SelectionBuilder[MarketplaceCategory, A]
      ] = None,
      onIssue: Option[SelectionBuilder[Issue, A]] = None,
      onRepoConfigDisableContributorsOnlyAuditEntry: Option[
        SelectionBuilder[RepoConfigDisableContributorsOnlyAuditEntry, A]
      ] = None,
      onReviewRequestRemovedEvent: Option[
        SelectionBuilder[ReviewRequestRemovedEvent, A]
      ] = None,
      onOrganization: Option[SelectionBuilder[Organization, A]] = None,
      onCommentDeletedEvent: Option[
        SelectionBuilder[CommentDeletedEvent, A]
      ] = None,
      onRepoRemoveMemberAuditEntry: Option[
        SelectionBuilder[RepoRemoveMemberAuditEntry, A]
      ] = None,
      onMilestone: Option[SelectionBuilder[Milestone, A]] = None,
      onEnterprise: Option[SelectionBuilder[Enterprise, A]] = None,
      onRepositoryVisibilityChangeDisableAuditEntry: Option[
        SelectionBuilder[RepositoryVisibilityChangeDisableAuditEntry, A]
      ] = None,
      onOrgDisableOauthAppRestrictionsAuditEntry: Option[
        SelectionBuilder[OrgDisableOauthAppRestrictionsAuditEntry, A]
      ] = None,
      onRenamedTitleEvent: Option[SelectionBuilder[RenamedTitleEvent, A]] =
      None,
      onSponsorship: Option[SelectionBuilder[Sponsorship, A]] = None,
      onConnectedEvent: Option[SelectionBuilder[ConnectedEvent, A]] = None,
      onOrgDisableTwoFactorRequirementAuditEntry: Option[
        SelectionBuilder[OrgDisableTwoFactorRequirementAuditEntry, A]
      ] = None,
      onBaseRefChangedEvent: Option[
        SelectionBuilder[BaseRefChangedEvent, A]
      ] = None,
      onPinnedEvent: Option[SelectionBuilder[PinnedEvent, A]] = None,
      onSponsorsTier: Option[SelectionBuilder[SponsorsTier, A]] = None,
      onOrganizationIdentityProvider: Option[
        SelectionBuilder[OrganizationIdentityProvider, A]
      ] = None,
      onMilestonedEvent: Option[SelectionBuilder[MilestonedEvent, A]] = None,
      onMembersCanDeleteReposEnableAuditEntry: Option[
        SelectionBuilder[MembersCanDeleteReposEnableAuditEntry, A]
      ] = None,
      onStatusCheckRollup: Option[SelectionBuilder[StatusCheckRollup, A]] =
      None,
      onOrgOauthAppAccessDeniedAuditEntry: Option[
        SelectionBuilder[OrgOauthAppAccessDeniedAuditEntry, A]
      ] = None,
      onRepoChangeMergeSettingAuditEntry: Option[
        SelectionBuilder[RepoChangeMergeSettingAuditEntry, A]
      ] = None,
      onReviewRequest: Option[SelectionBuilder[ReviewRequest, A]] = None,
      onEnterpriseAdministratorInvitation: Option[
        SelectionBuilder[EnterpriseAdministratorInvitation, A]
      ] = None,
      onDisconnectedEvent: Option[SelectionBuilder[DisconnectedEvent, A]] =
      None,
      onRepoConfigEnableCollaboratorsOnlyAuditEntry: Option[
        SelectionBuilder[RepoConfigEnableCollaboratorsOnlyAuditEntry, A]
      ] = None,
      onUserContentEdit: Option[SelectionBuilder[UserContentEdit, A]] = None,
      onPullRequest: Option[SelectionBuilder[PullRequest, A]] = None,
      onRef: Option[SelectionBuilder[Ref, A]] = None,
      onUserBlockedEvent: Option[SelectionBuilder[UserBlockedEvent, A]] =
      None,
      onLockedEvent: Option[SelectionBuilder[LockedEvent, A]] = None,
      onOrgUpdateMemberRepositoryInvitationPermissionAuditEntry: Option[
        SelectionBuilder[
          OrgUpdateMemberRepositoryInvitationPermissionAuditEntry,
          A
        ]
      ] = None,
      onStatus: Option[SelectionBuilder[Status, A]] = None,
      onOrgRestoreMemberAuditEntry: Option[
        SelectionBuilder[OrgRestoreMemberAuditEntry, A]
      ] = None
    ): SelectionBuilder[RootQuery, Option[A]] =
      Field(
        "node",
        OptionOf(
          ChoiceOf(
            Map(
              "MarkedAsDuplicateEvent" -> onMarkedAsDuplicateEvent,
              "OrganizationInvitation" -> onOrganizationInvitation,
              "IssueComment" -> onIssueComment,
              "CheckSuite" -> onCheckSuite,
              "TeamRemoveRepositoryAuditEntry" -> onTeamRemoveRepositoryAuditEntry,
              "Bot" -> onBot,
              "RepoCreateAuditEntry" -> onRepoCreateAuditEntry,
              "RepoDestroyAuditEntry" -> onRepoDestroyAuditEntry,
              "OrgRemoveOutsideCollaboratorAuditEntry" -> onOrgRemoveOutsideCollaboratorAuditEntry,
              "RepoArchivedAuditEntry" -> onRepoArchivedAuditEntry,
              "OrgEnableSamlAuditEntry" -> onOrgEnableSamlAuditEntry,
              "RepositoryInvitation" -> onRepositoryInvitation,
              "BaseRefForcePushedEvent" -> onBaseRefForcePushedEvent,
              "CheckRun" -> onCheckRun,
              "AutomaticBaseChangeSucceededEvent" -> onAutomaticBaseChangeSucceededEvent,
              "ReadyForReviewEvent" -> onReadyForReviewEvent,
              "MembersCanDeleteReposDisableAuditEntry" -> onMembersCanDeleteReposDisableAuditEntry,
              "TeamDiscussionComment" -> onTeamDiscussionComment,
              "EnterpriseServerUserAccountEmail" -> onEnterpriseServerUserAccountEmail,
              "BaseRefDeletedEvent" -> onBaseRefDeletedEvent,
              "EnterpriseUserAccount" -> onEnterpriseUserAccount,
              "OauthApplicationCreateAuditEntry" -> onOauthApplicationCreateAuditEntry,
              "SponsorsListing" -> onSponsorsListing,
              "OrgConfigDisableCollaboratorsOnlyAuditEntry" -> onOrgConfigDisableCollaboratorsOnlyAuditEntry,
              "OrgCreateAuditEntry" -> onOrgCreateAuditEntry,
              "UserStatus" -> onUserStatus,
              "CommitCommentThread" -> onCommitCommentThread,
              "UnsubscribedEvent" -> onUnsubscribedEvent,
              "DemilestonedEvent" -> onDemilestonedEvent,
              "ReopenedEvent" -> onReopenedEvent,
              "OrgRemoveMemberAuditEntry" -> onOrgRemoveMemberAuditEntry,
              "UnassignedEvent" -> onUnassignedEvent,
              "Commit" -> onCommit,
              "PullRequestReviewComment" -> onPullRequestReviewComment,
              "MentionedEvent" -> onMentionedEvent,
              "License" -> onLicense,
              "OrgAddBillingManagerAuditEntry" -> onOrgAddBillingManagerAuditEntry,
              "Topic" -> onTopic,
              "HeadRefForcePushedEvent" -> onHeadRefForcePushedEvent,
              "AutomaticBaseChangeFailedEvent" -> onAutomaticBaseChangeFailedEvent,
              "HeadRefDeletedEvent" -> onHeadRefDeletedEvent,
              "OrgConfigEnableCollaboratorsOnlyAuditEntry" -> onOrgConfigEnableCollaboratorsOnlyAuditEntry,
              "PushAllowance" -> onPushAllowance,
              "OrgRemoveBillingManagerAuditEntry" -> onOrgRemoveBillingManagerAuditEntry,
              "Release" -> onRelease,
              "App" -> onApp,
              "ConvertedNoteToIssueEvent" -> onConvertedNoteToIssueEvent,
              "ReviewRequestedEvent" -> onReviewRequestedEvent,
              "IpAllowListEntry" -> onIpAllowListEntry,
              "EnterpriseRepositoryInfo" -> onEnterpriseRepositoryInfo,
              "GistComment" -> onGistComment,
              "ReviewDismissedEvent" -> onReviewDismissedEvent,
              "Tree" -> onTree,
              "RepoConfigDisableAnonymousGitAccessAuditEntry" -> onRepoConfigDisableAnonymousGitAccessAuditEntry,
              "ClosedEvent" -> onClosedEvent,
              "SubscribedEvent" -> onSubscribedEvent,
              "Blob" -> onBlob,
              "MarketplaceListing" -> onMarketplaceListing,
              "SavedReply" -> onSavedReply,
              "ProjectColumn" -> onProjectColumn,
              "PackageTag" -> onPackageTag,
              "RepoConfigEnableAnonymousGitAccessAuditEntry" -> onRepoConfigEnableAnonymousGitAccessAuditEntry,
              "PinnedIssue" -> onPinnedIssue,
              "OrgUpdateMemberRepositoryCreationPermissionAuditEntry" -> onOrgUpdateMemberRepositoryCreationPermissionAuditEntry,
              "TransferredEvent" -> onTransferredEvent,
              "RepositoryTopic" -> onRepositoryTopic,
              "OrgUpdateDefaultRepositoryPermissionAuditEntry" -> onOrgUpdateDefaultRepositoryPermissionAuditEntry,
              "RepoConfigDisableCollaboratorsOnlyAuditEntry" -> onRepoConfigDisableCollaboratorsOnlyAuditEntry,
              "TeamAddRepositoryAuditEntry" -> onTeamAddRepositoryAuditEntry,
              "OrgAddMemberAuditEntry" -> onOrgAddMemberAuditEntry,
              "UnmarkedAsDuplicateEvent" -> onUnmarkedAsDuplicateEvent,
              "TeamChangeParentTeamAuditEntry" -> onTeamChangeParentTeamAuditEntry,
              "DeployKey" -> onDeployKey,
              "OrgEnableOauthAppRestrictionsAuditEntry" -> onOrgEnableOauthAppRestrictionsAuditEntry,
              "Deployment" -> onDeployment,
              "EnterpriseIdentityProvider" -> onEnterpriseIdentityProvider,
              "ProjectCard" -> onProjectCard,
              "Push" -> onPush,
              "EnterpriseServerUserAccount" -> onEnterpriseServerUserAccount,
              "PullRequestReview" -> onPullRequestReview,
              "RepoConfigLockAnonymousGitAccessAuditEntry" -> onRepoConfigLockAnonymousGitAccessAuditEntry,
              "OrgOauthAppAccessRequestedAuditEntry" -> onOrgOauthAppAccessRequestedAuditEntry,
              "RepositoryVisibilityChangeEnableAuditEntry" -> onRepositoryVisibilityChangeEnableAuditEntry,
              "MovedColumnsInProjectEvent" -> onMovedColumnsInProjectEvent,
              "UnlockedEvent" -> onUnlockedEvent,
              "Team" -> onTeam,
              "Reaction" -> onReaction,
              "MergedEvent" -> onMergedEvent,
              "ExternalIdentity" -> onExternalIdentity,
              "PackageFile" -> onPackageFile,
              "PackageVersion" -> onPackageVersion,
              "ReferencedEvent" -> onReferencedEvent,
              "CommitComment" -> onCommitComment,
              "PullRequestReviewThread" -> onPullRequestReviewThread,
              "HeadRefRestoredEvent" -> onHeadRefRestoredEvent,
              "PrivateRepositoryForkingEnableAuditEntry" -> onPrivateRepositoryForkingEnableAuditEntry,
              "LabeledEvent" -> onLabeledEvent,
              "Language" -> onLanguage,
              "RepoAddMemberAuditEntry" -> onRepoAddMemberAuditEntry,
              "UnpinnedEvent" -> onUnpinnedEvent,
              "DeploymentStatus" -> onDeploymentStatus,
              "Mannequin" -> onMannequin,
              "RepoConfigEnableSockpuppetDisallowedAuditEntry" -> onRepoConfigEnableSockpuppetDisallowedAuditEntry,
              "ConvertToDraftEvent" -> onConvertToDraftEvent,
              "Gist" -> onGist,
              "OrgInviteMemberAuditEntry" -> onOrgInviteMemberAuditEntry,
              "TeamRemoveMemberAuditEntry" -> onTeamRemoveMemberAuditEntry,
              "OrgInviteToBusinessAuditEntry" -> onOrgInviteToBusinessAuditEntry,
              "RepoAddTopicAuditEntry" -> onRepoAddTopicAuditEntry,
              "Package" -> onPackage,
              "RepoConfigDisableSockpuppetDisallowedAuditEntry" -> onRepoConfigDisableSockpuppetDisallowedAuditEntry,
              "Label" -> onLabel,
              "Project" -> onProject,
              "DeployedEvent" -> onDeployedEvent,
              "OrgUnblockUserAuditEntry" -> onOrgUnblockUserAuditEntry,
              "CodeOfConduct" -> onCodeOfConduct,
              "OrgEnableTwoFactorRequirementAuditEntry" -> onOrgEnableTwoFactorRequirementAuditEntry,
              "StatusContext" -> onStatusContext,
              "UnlabeledEvent" -> onUnlabeledEvent,
              "OrgBlockUserAuditEntry" -> onOrgBlockUserAuditEntry,
              "Tag" -> onTag,
              "OrgOauthAppAccessApprovedAuditEntry" -> onOrgOauthAppAccessApprovedAuditEntry,
              "CrossReferencedEvent" -> onCrossReferencedEvent,
              "OrgUpdateMemberAuditEntry" -> onOrgUpdateMemberAuditEntry,
              "RepoRemoveTopicAuditEntry" -> onRepoRemoveTopicAuditEntry,
              "AssignedEvent" -> onAssignedEvent,
              "RepositoryVulnerabilityAlert" -> onRepositoryVulnerabilityAlert,
              "OrgDisableSamlAuditEntry" -> onOrgDisableSamlAuditEntry,
              "RepoAccessAuditEntry" -> onRepoAccessAuditEntry,
              "PullRequestCommit" -> onPullRequestCommit,
              "SecurityAdvisory" -> onSecurityAdvisory,
              "RemovedFromProjectEvent" -> onRemovedFromProjectEvent,
              "Repository" -> onRepository,
              "EnterpriseServerInstallation" -> onEnterpriseServerInstallation,
              "PrivateRepositoryForkingDisableAuditEntry" -> onPrivateRepositoryForkingDisableAuditEntry,
              "ReviewDismissalAllowance" -> onReviewDismissalAllowance,
              "RepoConfigUnlockAnonymousGitAccessAuditEntry" -> onRepoConfigUnlockAnonymousGitAccessAuditEntry,
              "User" -> onUser,
              "TeamAddMemberAuditEntry" -> onTeamAddMemberAuditEntry,
              "DeploymentEnvironmentChangedEvent" -> onDeploymentEnvironmentChangedEvent,
              "DependencyGraphManifest" -> onDependencyGraphManifest,
              "MembersCanDeleteReposClearAuditEntry" -> onMembersCanDeleteReposClearAuditEntry,
              "EnterpriseServerUserAccountsUpload" -> onEnterpriseServerUserAccountsUpload,
              "ReleaseAsset" -> onReleaseAsset,
              "RepoConfigEnableContributorsOnlyAuditEntry" -> onRepoConfigEnableContributorsOnlyAuditEntry,
              "PullRequestCommitCommentThread" -> onPullRequestCommitCommentThread,
              "TeamDiscussion" -> onTeamDiscussion,
              "AddedToProjectEvent" -> onAddedToProjectEvent,
              "BranchProtectionRule" -> onBranchProtectionRule,
              "PublicKey" -> onPublicKey,
              "MarketplaceCategory" -> onMarketplaceCategory,
              "Issue" -> onIssue,
              "RepoConfigDisableContributorsOnlyAuditEntry" -> onRepoConfigDisableContributorsOnlyAuditEntry,
              "ReviewRequestRemovedEvent" -> onReviewRequestRemovedEvent,
              "Organization" -> onOrganization,
              "CommentDeletedEvent" -> onCommentDeletedEvent,
              "RepoRemoveMemberAuditEntry" -> onRepoRemoveMemberAuditEntry,
              "Milestone" -> onMilestone,
              "Enterprise" -> onEnterprise,
              "RepositoryVisibilityChangeDisableAuditEntry" -> onRepositoryVisibilityChangeDisableAuditEntry,
              "OrgDisableOauthAppRestrictionsAuditEntry" -> onOrgDisableOauthAppRestrictionsAuditEntry,
              "RenamedTitleEvent" -> onRenamedTitleEvent,
              "Sponsorship" -> onSponsorship,
              "ConnectedEvent" -> onConnectedEvent,
              "OrgDisableTwoFactorRequirementAuditEntry" -> onOrgDisableTwoFactorRequirementAuditEntry,
              "BaseRefChangedEvent" -> onBaseRefChangedEvent,
              "PinnedEvent" -> onPinnedEvent,
              "SponsorsTier" -> onSponsorsTier,
              "OrganizationIdentityProvider" -> onOrganizationIdentityProvider,
              "MilestonedEvent" -> onMilestonedEvent,
              "MembersCanDeleteReposEnableAuditEntry" -> onMembersCanDeleteReposEnableAuditEntry,
              "StatusCheckRollup" -> onStatusCheckRollup,
              "OrgOauthAppAccessDeniedAuditEntry" -> onOrgOauthAppAccessDeniedAuditEntry,
              "RepoChangeMergeSettingAuditEntry" -> onRepoChangeMergeSettingAuditEntry,
              "ReviewRequest" -> onReviewRequest,
              "EnterpriseAdministratorInvitation" -> onEnterpriseAdministratorInvitation,
              "DisconnectedEvent" -> onDisconnectedEvent,
              "RepoConfigEnableCollaboratorsOnlyAuditEntry" -> onRepoConfigEnableCollaboratorsOnlyAuditEntry,
              "UserContentEdit" -> onUserContentEdit,
              "PullRequest" -> onPullRequest,
              "Ref" -> onRef,
              "UserBlockedEvent" -> onUserBlockedEvent,
              "LockedEvent" -> onLockedEvent,
              "OrgUpdateMemberRepositoryInvitationPermissionAuditEntry" -> onOrgUpdateMemberRepositoryInvitationPermissionAuditEntry,
              "Status" -> onStatus,
              "OrgRestoreMemberAuditEntry" -> onOrgRestoreMemberAuditEntry
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        ),
        arguments = List(Argument("id", id))
      )

    /**
     * Lookup nodes by a list of IDs.
     */
    def nodes[A](ids: List[String] = Nil)(
      onMarkedAsDuplicateEvent: Option[
        SelectionBuilder[MarkedAsDuplicateEvent, A]
      ] = None,
      onOrganizationInvitation: Option[
        SelectionBuilder[OrganizationInvitation, A]
      ] = None,
      onIssueComment: Option[SelectionBuilder[IssueComment, A]] = None,
      onCheckSuite: Option[SelectionBuilder[CheckSuite, A]] = None,
      onTeamRemoveRepositoryAuditEntry: Option[
        SelectionBuilder[TeamRemoveRepositoryAuditEntry, A]
      ] = None,
      onBot: Option[SelectionBuilder[Bot, A]] = None,
      onRepoCreateAuditEntry: Option[
        SelectionBuilder[RepoCreateAuditEntry, A]
      ] = None,
      onRepoDestroyAuditEntry: Option[
        SelectionBuilder[RepoDestroyAuditEntry, A]
      ] = None,
      onOrgRemoveOutsideCollaboratorAuditEntry: Option[
        SelectionBuilder[OrgRemoveOutsideCollaboratorAuditEntry, A]
      ] = None,
      onRepoArchivedAuditEntry: Option[
        SelectionBuilder[RepoArchivedAuditEntry, A]
      ] = None,
      onOrgEnableSamlAuditEntry: Option[
        SelectionBuilder[OrgEnableSamlAuditEntry, A]
      ] = None,
      onRepositoryInvitation: Option[
        SelectionBuilder[RepositoryInvitation, A]
      ] = None,
      onBaseRefForcePushedEvent: Option[
        SelectionBuilder[BaseRefForcePushedEvent, A]
      ] = None,
      onCheckRun: Option[SelectionBuilder[CheckRun, A]] = None,
      onAutomaticBaseChangeSucceededEvent: Option[
        SelectionBuilder[AutomaticBaseChangeSucceededEvent, A]
      ] = None,
      onReadyForReviewEvent: Option[
        SelectionBuilder[ReadyForReviewEvent, A]
      ] = None,
      onMembersCanDeleteReposDisableAuditEntry: Option[
        SelectionBuilder[MembersCanDeleteReposDisableAuditEntry, A]
      ] = None,
      onTeamDiscussionComment: Option[
        SelectionBuilder[TeamDiscussionComment, A]
      ] = None,
      onEnterpriseServerUserAccountEmail: Option[
        SelectionBuilder[EnterpriseServerUserAccountEmail, A]
      ] = None,
      onBaseRefDeletedEvent: Option[
        SelectionBuilder[BaseRefDeletedEvent, A]
      ] = None,
      onEnterpriseUserAccount: Option[
        SelectionBuilder[EnterpriseUserAccount, A]
      ] = None,
      onOauthApplicationCreateAuditEntry: Option[
        SelectionBuilder[OauthApplicationCreateAuditEntry, A]
      ] = None,
      onSponsorsListing: Option[SelectionBuilder[SponsorsListing, A]] = None,
      onOrgConfigDisableCollaboratorsOnlyAuditEntry: Option[
        SelectionBuilder[OrgConfigDisableCollaboratorsOnlyAuditEntry, A]
      ] = None,
      onOrgCreateAuditEntry: Option[
        SelectionBuilder[OrgCreateAuditEntry, A]
      ] = None,
      onUserStatus: Option[SelectionBuilder[UserStatus, A]] = None,
      onCommitCommentThread: Option[
        SelectionBuilder[CommitCommentThread, A]
      ] = None,
      onUnsubscribedEvent: Option[SelectionBuilder[UnsubscribedEvent, A]] =
      None,
      onDemilestonedEvent: Option[SelectionBuilder[DemilestonedEvent, A]] =
      None,
      onReopenedEvent: Option[SelectionBuilder[ReopenedEvent, A]] = None,
      onOrgRemoveMemberAuditEntry: Option[
        SelectionBuilder[OrgRemoveMemberAuditEntry, A]
      ] = None,
      onUnassignedEvent: Option[SelectionBuilder[UnassignedEvent, A]] = None,
      onCommit: Option[SelectionBuilder[Commit, A]] = None,
      onPullRequestReviewComment: Option[
        SelectionBuilder[PullRequestReviewComment, A]
      ] = None,
      onMentionedEvent: Option[SelectionBuilder[MentionedEvent, A]] = None,
      onLicense: Option[SelectionBuilder[License, A]] = None,
      onOrgAddBillingManagerAuditEntry: Option[
        SelectionBuilder[OrgAddBillingManagerAuditEntry, A]
      ] = None,
      onTopic: Option[SelectionBuilder[Topic, A]] = None,
      onHeadRefForcePushedEvent: Option[
        SelectionBuilder[HeadRefForcePushedEvent, A]
      ] = None,
      onAutomaticBaseChangeFailedEvent: Option[
        SelectionBuilder[AutomaticBaseChangeFailedEvent, A]
      ] = None,
      onHeadRefDeletedEvent: Option[
        SelectionBuilder[HeadRefDeletedEvent, A]
      ] = None,
      onOrgConfigEnableCollaboratorsOnlyAuditEntry: Option[
        SelectionBuilder[OrgConfigEnableCollaboratorsOnlyAuditEntry, A]
      ] = None,
      onPushAllowance: Option[SelectionBuilder[PushAllowance, A]] = None,
      onOrgRemoveBillingManagerAuditEntry: Option[
        SelectionBuilder[OrgRemoveBillingManagerAuditEntry, A]
      ] = None,
      onRelease: Option[SelectionBuilder[Release, A]] = None,
      onApp: Option[SelectionBuilder[App, A]] = None,
      onConvertedNoteToIssueEvent: Option[
        SelectionBuilder[ConvertedNoteToIssueEvent, A]
      ] = None,
      onReviewRequestedEvent: Option[
        SelectionBuilder[ReviewRequestedEvent, A]
      ] = None,
      onIpAllowListEntry: Option[SelectionBuilder[IpAllowListEntry, A]] =
      None,
      onEnterpriseRepositoryInfo: Option[
        SelectionBuilder[EnterpriseRepositoryInfo, A]
      ] = None,
      onGistComment: Option[SelectionBuilder[GistComment, A]] = None,
      onReviewDismissedEvent: Option[
        SelectionBuilder[ReviewDismissedEvent, A]
      ] = None,
      onTree: Option[SelectionBuilder[Tree, A]] = None,
      onRepoConfigDisableAnonymousGitAccessAuditEntry: Option[
        SelectionBuilder[RepoConfigDisableAnonymousGitAccessAuditEntry, A]
      ] = None,
      onClosedEvent: Option[SelectionBuilder[ClosedEvent, A]] = None,
      onSubscribedEvent: Option[SelectionBuilder[SubscribedEvent, A]] = None,
      onBlob: Option[SelectionBuilder[Blob, A]] = None,
      onMarketplaceListing: Option[SelectionBuilder[MarketplaceListing, A]] =
      None,
      onSavedReply: Option[SelectionBuilder[SavedReply, A]] = None,
      onProjectColumn: Option[SelectionBuilder[ProjectColumn, A]] = None,
      onPackageTag: Option[SelectionBuilder[PackageTag, A]] = None,
      onRepoConfigEnableAnonymousGitAccessAuditEntry: Option[
        SelectionBuilder[RepoConfigEnableAnonymousGitAccessAuditEntry, A]
      ] = None,
      onPinnedIssue: Option[SelectionBuilder[PinnedIssue, A]] = None,
      onOrgUpdateMemberRepositoryCreationPermissionAuditEntry: Option[
        SelectionBuilder[
          OrgUpdateMemberRepositoryCreationPermissionAuditEntry,
          A
        ]
      ] = None,
      onTransferredEvent: Option[SelectionBuilder[TransferredEvent, A]] =
      None,
      onRepositoryTopic: Option[SelectionBuilder[RepositoryTopic, A]] = None,
      onOrgUpdateDefaultRepositoryPermissionAuditEntry: Option[
        SelectionBuilder[OrgUpdateDefaultRepositoryPermissionAuditEntry, A]
      ] = None,
      onRepoConfigDisableCollaboratorsOnlyAuditEntry: Option[
        SelectionBuilder[RepoConfigDisableCollaboratorsOnlyAuditEntry, A]
      ] = None,
      onTeamAddRepositoryAuditEntry: Option[
        SelectionBuilder[TeamAddRepositoryAuditEntry, A]
      ] = None,
      onOrgAddMemberAuditEntry: Option[
        SelectionBuilder[OrgAddMemberAuditEntry, A]
      ] = None,
      onUnmarkedAsDuplicateEvent: Option[
        SelectionBuilder[UnmarkedAsDuplicateEvent, A]
      ] = None,
      onTeamChangeParentTeamAuditEntry: Option[
        SelectionBuilder[TeamChangeParentTeamAuditEntry, A]
      ] = None,
      onDeployKey: Option[SelectionBuilder[DeployKey, A]] = None,
      onOrgEnableOauthAppRestrictionsAuditEntry: Option[
        SelectionBuilder[OrgEnableOauthAppRestrictionsAuditEntry, A]
      ] = None,
      onDeployment: Option[SelectionBuilder[Deployment, A]] = None,
      onEnterpriseIdentityProvider: Option[
        SelectionBuilder[EnterpriseIdentityProvider, A]
      ] = None,
      onProjectCard: Option[SelectionBuilder[ProjectCard, A]] = None,
      onPush: Option[SelectionBuilder[Push, A]] = None,
      onEnterpriseServerUserAccount: Option[
        SelectionBuilder[EnterpriseServerUserAccount, A]
      ] = None,
      onPullRequestReview: Option[SelectionBuilder[PullRequestReview, A]] =
      None,
      onRepoConfigLockAnonymousGitAccessAuditEntry: Option[
        SelectionBuilder[RepoConfigLockAnonymousGitAccessAuditEntry, A]
      ] = None,
      onOrgOauthAppAccessRequestedAuditEntry: Option[
        SelectionBuilder[OrgOauthAppAccessRequestedAuditEntry, A]
      ] = None,
      onRepositoryVisibilityChangeEnableAuditEntry: Option[
        SelectionBuilder[RepositoryVisibilityChangeEnableAuditEntry, A]
      ] = None,
      onMovedColumnsInProjectEvent: Option[
        SelectionBuilder[MovedColumnsInProjectEvent, A]
      ] = None,
      onUnlockedEvent: Option[SelectionBuilder[UnlockedEvent, A]] = None,
      onTeam: Option[SelectionBuilder[Team, A]] = None,
      onReaction: Option[SelectionBuilder[Reaction, A]] = None,
      onMergedEvent: Option[SelectionBuilder[MergedEvent, A]] = None,
      onExternalIdentity: Option[SelectionBuilder[ExternalIdentity, A]] =
      None,
      onPackageFile: Option[SelectionBuilder[PackageFile, A]] = None,
      onPackageVersion: Option[SelectionBuilder[PackageVersion, A]] = None,
      onReferencedEvent: Option[SelectionBuilder[ReferencedEvent, A]] = None,
      onCommitComment: Option[SelectionBuilder[CommitComment, A]] = None,
      onPullRequestReviewThread: Option[
        SelectionBuilder[PullRequestReviewThread, A]
      ] = None,
      onHeadRefRestoredEvent: Option[
        SelectionBuilder[HeadRefRestoredEvent, A]
      ] = None,
      onPrivateRepositoryForkingEnableAuditEntry: Option[
        SelectionBuilder[PrivateRepositoryForkingEnableAuditEntry, A]
      ] = None,
      onLabeledEvent: Option[SelectionBuilder[LabeledEvent, A]] = None,
      onLanguage: Option[SelectionBuilder[Language, A]] = None,
      onRepoAddMemberAuditEntry: Option[
        SelectionBuilder[RepoAddMemberAuditEntry, A]
      ] = None,
      onUnpinnedEvent: Option[SelectionBuilder[UnpinnedEvent, A]] = None,
      onDeploymentStatus: Option[SelectionBuilder[DeploymentStatus, A]] =
      None,
      onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
      onRepoConfigEnableSockpuppetDisallowedAuditEntry: Option[
        SelectionBuilder[RepoConfigEnableSockpuppetDisallowedAuditEntry, A]
      ] = None,
      onConvertToDraftEvent: Option[
        SelectionBuilder[ConvertToDraftEvent, A]
      ] = None,
      onGist: Option[SelectionBuilder[Gist, A]] = None,
      onOrgInviteMemberAuditEntry: Option[
        SelectionBuilder[OrgInviteMemberAuditEntry, A]
      ] = None,
      onTeamRemoveMemberAuditEntry: Option[
        SelectionBuilder[TeamRemoveMemberAuditEntry, A]
      ] = None,
      onOrgInviteToBusinessAuditEntry: Option[
        SelectionBuilder[OrgInviteToBusinessAuditEntry, A]
      ] = None,
      onRepoAddTopicAuditEntry: Option[
        SelectionBuilder[RepoAddTopicAuditEntry, A]
      ] = None,
      onPackage: Option[SelectionBuilder[Package, A]] = None,
      onRepoConfigDisableSockpuppetDisallowedAuditEntry: Option[
        SelectionBuilder[RepoConfigDisableSockpuppetDisallowedAuditEntry, A]
      ] = None,
      onLabel: Option[SelectionBuilder[Label, A]] = None,
      onProject: Option[SelectionBuilder[Project, A]] = None,
      onDeployedEvent: Option[SelectionBuilder[DeployedEvent, A]] = None,
      onOrgUnblockUserAuditEntry: Option[
        SelectionBuilder[OrgUnblockUserAuditEntry, A]
      ] = None,
      onCodeOfConduct: Option[SelectionBuilder[CodeOfConduct, A]] = None,
      onOrgEnableTwoFactorRequirementAuditEntry: Option[
        SelectionBuilder[OrgEnableTwoFactorRequirementAuditEntry, A]
      ] = None,
      onStatusContext: Option[SelectionBuilder[StatusContext, A]] = None,
      onUnlabeledEvent: Option[SelectionBuilder[UnlabeledEvent, A]] = None,
      onOrgBlockUserAuditEntry: Option[
        SelectionBuilder[OrgBlockUserAuditEntry, A]
      ] = None,
      onTag: Option[SelectionBuilder[Tag, A]] = None,
      onOrgOauthAppAccessApprovedAuditEntry: Option[
        SelectionBuilder[OrgOauthAppAccessApprovedAuditEntry, A]
      ] = None,
      onCrossReferencedEvent: Option[
        SelectionBuilder[CrossReferencedEvent, A]
      ] = None,
      onOrgUpdateMemberAuditEntry: Option[
        SelectionBuilder[OrgUpdateMemberAuditEntry, A]
      ] = None,
      onRepoRemoveTopicAuditEntry: Option[
        SelectionBuilder[RepoRemoveTopicAuditEntry, A]
      ] = None,
      onAssignedEvent: Option[SelectionBuilder[AssignedEvent, A]] = None,
      onRepositoryVulnerabilityAlert: Option[
        SelectionBuilder[RepositoryVulnerabilityAlert, A]
      ] = None,
      onOrgDisableSamlAuditEntry: Option[
        SelectionBuilder[OrgDisableSamlAuditEntry, A]
      ] = None,
      onRepoAccessAuditEntry: Option[
        SelectionBuilder[RepoAccessAuditEntry, A]
      ] = None,
      onPullRequestCommit: Option[SelectionBuilder[PullRequestCommit, A]] =
      None,
      onSecurityAdvisory: Option[SelectionBuilder[SecurityAdvisory, A]] =
      None,
      onRemovedFromProjectEvent: Option[
        SelectionBuilder[RemovedFromProjectEvent, A]
      ] = None,
      onRepository: Option[SelectionBuilder[Repository, A]] = None,
      onEnterpriseServerInstallation: Option[
        SelectionBuilder[EnterpriseServerInstallation, A]
      ] = None,
      onPrivateRepositoryForkingDisableAuditEntry: Option[
        SelectionBuilder[PrivateRepositoryForkingDisableAuditEntry, A]
      ] = None,
      onReviewDismissalAllowance: Option[
        SelectionBuilder[ReviewDismissalAllowance, A]
      ] = None,
      onRepoConfigUnlockAnonymousGitAccessAuditEntry: Option[
        SelectionBuilder[RepoConfigUnlockAnonymousGitAccessAuditEntry, A]
      ] = None,
      onUser: Option[SelectionBuilder[User, A]] = None,
      onTeamAddMemberAuditEntry: Option[
        SelectionBuilder[TeamAddMemberAuditEntry, A]
      ] = None,
      onDeploymentEnvironmentChangedEvent: Option[
        SelectionBuilder[DeploymentEnvironmentChangedEvent, A]
      ] = None,
      onDependencyGraphManifest: Option[
        SelectionBuilder[DependencyGraphManifest, A]
      ] = None,
      onMembersCanDeleteReposClearAuditEntry: Option[
        SelectionBuilder[MembersCanDeleteReposClearAuditEntry, A]
      ] = None,
      onEnterpriseServerUserAccountsUpload: Option[
        SelectionBuilder[EnterpriseServerUserAccountsUpload, A]
      ] = None,
      onReleaseAsset: Option[SelectionBuilder[ReleaseAsset, A]] = None,
      onRepoConfigEnableContributorsOnlyAuditEntry: Option[
        SelectionBuilder[RepoConfigEnableContributorsOnlyAuditEntry, A]
      ] = None,
      onPullRequestCommitCommentThread: Option[
        SelectionBuilder[PullRequestCommitCommentThread, A]
      ] = None,
      onTeamDiscussion: Option[SelectionBuilder[TeamDiscussion, A]] = None,
      onAddedToProjectEvent: Option[
        SelectionBuilder[AddedToProjectEvent, A]
      ] = None,
      onBranchProtectionRule: Option[
        SelectionBuilder[BranchProtectionRule, A]
      ] = None,
      onPublicKey: Option[SelectionBuilder[PublicKey, A]] = None,
      onMarketplaceCategory: Option[
        SelectionBuilder[MarketplaceCategory, A]
      ] = None,
      onIssue: Option[SelectionBuilder[Issue, A]] = None,
      onRepoConfigDisableContributorsOnlyAuditEntry: Option[
        SelectionBuilder[RepoConfigDisableContributorsOnlyAuditEntry, A]
      ] = None,
      onReviewRequestRemovedEvent: Option[
        SelectionBuilder[ReviewRequestRemovedEvent, A]
      ] = None,
      onOrganization: Option[SelectionBuilder[Organization, A]] = None,
      onCommentDeletedEvent: Option[
        SelectionBuilder[CommentDeletedEvent, A]
      ] = None,
      onRepoRemoveMemberAuditEntry: Option[
        SelectionBuilder[RepoRemoveMemberAuditEntry, A]
      ] = None,
      onMilestone: Option[SelectionBuilder[Milestone, A]] = None,
      onEnterprise: Option[SelectionBuilder[Enterprise, A]] = None,
      onRepositoryVisibilityChangeDisableAuditEntry: Option[
        SelectionBuilder[RepositoryVisibilityChangeDisableAuditEntry, A]
      ] = None,
      onOrgDisableOauthAppRestrictionsAuditEntry: Option[
        SelectionBuilder[OrgDisableOauthAppRestrictionsAuditEntry, A]
      ] = None,
      onRenamedTitleEvent: Option[SelectionBuilder[RenamedTitleEvent, A]] =
      None,
      onSponsorship: Option[SelectionBuilder[Sponsorship, A]] = None,
      onConnectedEvent: Option[SelectionBuilder[ConnectedEvent, A]] = None,
      onOrgDisableTwoFactorRequirementAuditEntry: Option[
        SelectionBuilder[OrgDisableTwoFactorRequirementAuditEntry, A]
      ] = None,
      onBaseRefChangedEvent: Option[
        SelectionBuilder[BaseRefChangedEvent, A]
      ] = None,
      onPinnedEvent: Option[SelectionBuilder[PinnedEvent, A]] = None,
      onSponsorsTier: Option[SelectionBuilder[SponsorsTier, A]] = None,
      onOrganizationIdentityProvider: Option[
        SelectionBuilder[OrganizationIdentityProvider, A]
      ] = None,
      onMilestonedEvent: Option[SelectionBuilder[MilestonedEvent, A]] = None,
      onMembersCanDeleteReposEnableAuditEntry: Option[
        SelectionBuilder[MembersCanDeleteReposEnableAuditEntry, A]
      ] = None,
      onStatusCheckRollup: Option[SelectionBuilder[StatusCheckRollup, A]] =
      None,
      onOrgOauthAppAccessDeniedAuditEntry: Option[
        SelectionBuilder[OrgOauthAppAccessDeniedAuditEntry, A]
      ] = None,
      onRepoChangeMergeSettingAuditEntry: Option[
        SelectionBuilder[RepoChangeMergeSettingAuditEntry, A]
      ] = None,
      onReviewRequest: Option[SelectionBuilder[ReviewRequest, A]] = None,
      onEnterpriseAdministratorInvitation: Option[
        SelectionBuilder[EnterpriseAdministratorInvitation, A]
      ] = None,
      onDisconnectedEvent: Option[SelectionBuilder[DisconnectedEvent, A]] =
      None,
      onRepoConfigEnableCollaboratorsOnlyAuditEntry: Option[
        SelectionBuilder[RepoConfigEnableCollaboratorsOnlyAuditEntry, A]
      ] = None,
      onUserContentEdit: Option[SelectionBuilder[UserContentEdit, A]] = None,
      onPullRequest: Option[SelectionBuilder[PullRequest, A]] = None,
      onRef: Option[SelectionBuilder[Ref, A]] = None,
      onUserBlockedEvent: Option[SelectionBuilder[UserBlockedEvent, A]] =
      None,
      onLockedEvent: Option[SelectionBuilder[LockedEvent, A]] = None,
      onOrgUpdateMemberRepositoryInvitationPermissionAuditEntry: Option[
        SelectionBuilder[
          OrgUpdateMemberRepositoryInvitationPermissionAuditEntry,
          A
        ]
      ] = None,
      onStatus: Option[SelectionBuilder[Status, A]] = None,
      onOrgRestoreMemberAuditEntry: Option[
        SelectionBuilder[OrgRestoreMemberAuditEntry, A]
      ] = None
    ): SelectionBuilder[RootQuery, List[Option[A]]] =
      Field(
        "nodes",
        ListOf(
          OptionOf(
            ChoiceOf(
              Map(
                "MarkedAsDuplicateEvent" -> onMarkedAsDuplicateEvent,
                "OrganizationInvitation" -> onOrganizationInvitation,
                "IssueComment" -> onIssueComment,
                "CheckSuite" -> onCheckSuite,
                "TeamRemoveRepositoryAuditEntry" -> onTeamRemoveRepositoryAuditEntry,
                "Bot" -> onBot,
                "RepoCreateAuditEntry" -> onRepoCreateAuditEntry,
                "RepoDestroyAuditEntry" -> onRepoDestroyAuditEntry,
                "OrgRemoveOutsideCollaboratorAuditEntry" -> onOrgRemoveOutsideCollaboratorAuditEntry,
                "RepoArchivedAuditEntry" -> onRepoArchivedAuditEntry,
                "OrgEnableSamlAuditEntry" -> onOrgEnableSamlAuditEntry,
                "RepositoryInvitation" -> onRepositoryInvitation,
                "BaseRefForcePushedEvent" -> onBaseRefForcePushedEvent,
                "CheckRun" -> onCheckRun,
                "AutomaticBaseChangeSucceededEvent" -> onAutomaticBaseChangeSucceededEvent,
                "ReadyForReviewEvent" -> onReadyForReviewEvent,
                "MembersCanDeleteReposDisableAuditEntry" -> onMembersCanDeleteReposDisableAuditEntry,
                "TeamDiscussionComment" -> onTeamDiscussionComment,
                "EnterpriseServerUserAccountEmail" -> onEnterpriseServerUserAccountEmail,
                "BaseRefDeletedEvent" -> onBaseRefDeletedEvent,
                "EnterpriseUserAccount" -> onEnterpriseUserAccount,
                "OauthApplicationCreateAuditEntry" -> onOauthApplicationCreateAuditEntry,
                "SponsorsListing" -> onSponsorsListing,
                "OrgConfigDisableCollaboratorsOnlyAuditEntry" -> onOrgConfigDisableCollaboratorsOnlyAuditEntry,
                "OrgCreateAuditEntry" -> onOrgCreateAuditEntry,
                "UserStatus" -> onUserStatus,
                "CommitCommentThread" -> onCommitCommentThread,
                "UnsubscribedEvent" -> onUnsubscribedEvent,
                "DemilestonedEvent" -> onDemilestonedEvent,
                "ReopenedEvent" -> onReopenedEvent,
                "OrgRemoveMemberAuditEntry" -> onOrgRemoveMemberAuditEntry,
                "UnassignedEvent" -> onUnassignedEvent,
                "Commit" -> onCommit,
                "PullRequestReviewComment" -> onPullRequestReviewComment,
                "MentionedEvent" -> onMentionedEvent,
                "License" -> onLicense,
                "OrgAddBillingManagerAuditEntry" -> onOrgAddBillingManagerAuditEntry,
                "Topic" -> onTopic,
                "HeadRefForcePushedEvent" -> onHeadRefForcePushedEvent,
                "AutomaticBaseChangeFailedEvent" -> onAutomaticBaseChangeFailedEvent,
                "HeadRefDeletedEvent" -> onHeadRefDeletedEvent,
                "OrgConfigEnableCollaboratorsOnlyAuditEntry" -> onOrgConfigEnableCollaboratorsOnlyAuditEntry,
                "PushAllowance" -> onPushAllowance,
                "OrgRemoveBillingManagerAuditEntry" -> onOrgRemoveBillingManagerAuditEntry,
                "Release" -> onRelease,
                "App" -> onApp,
                "ConvertedNoteToIssueEvent" -> onConvertedNoteToIssueEvent,
                "ReviewRequestedEvent" -> onReviewRequestedEvent,
                "IpAllowListEntry" -> onIpAllowListEntry,
                "EnterpriseRepositoryInfo" -> onEnterpriseRepositoryInfo,
                "GistComment" -> onGistComment,
                "ReviewDismissedEvent" -> onReviewDismissedEvent,
                "Tree" -> onTree,
                "RepoConfigDisableAnonymousGitAccessAuditEntry" -> onRepoConfigDisableAnonymousGitAccessAuditEntry,
                "ClosedEvent" -> onClosedEvent,
                "SubscribedEvent" -> onSubscribedEvent,
                "Blob" -> onBlob,
                "MarketplaceListing" -> onMarketplaceListing,
                "SavedReply" -> onSavedReply,
                "ProjectColumn" -> onProjectColumn,
                "PackageTag" -> onPackageTag,
                "RepoConfigEnableAnonymousGitAccessAuditEntry" -> onRepoConfigEnableAnonymousGitAccessAuditEntry,
                "PinnedIssue" -> onPinnedIssue,
                "OrgUpdateMemberRepositoryCreationPermissionAuditEntry" -> onOrgUpdateMemberRepositoryCreationPermissionAuditEntry,
                "TransferredEvent" -> onTransferredEvent,
                "RepositoryTopic" -> onRepositoryTopic,
                "OrgUpdateDefaultRepositoryPermissionAuditEntry" -> onOrgUpdateDefaultRepositoryPermissionAuditEntry,
                "RepoConfigDisableCollaboratorsOnlyAuditEntry" -> onRepoConfigDisableCollaboratorsOnlyAuditEntry,
                "TeamAddRepositoryAuditEntry" -> onTeamAddRepositoryAuditEntry,
                "OrgAddMemberAuditEntry" -> onOrgAddMemberAuditEntry,
                "UnmarkedAsDuplicateEvent" -> onUnmarkedAsDuplicateEvent,
                "TeamChangeParentTeamAuditEntry" -> onTeamChangeParentTeamAuditEntry,
                "DeployKey" -> onDeployKey,
                "OrgEnableOauthAppRestrictionsAuditEntry" -> onOrgEnableOauthAppRestrictionsAuditEntry,
                "Deployment" -> onDeployment,
                "EnterpriseIdentityProvider" -> onEnterpriseIdentityProvider,
                "ProjectCard" -> onProjectCard,
                "Push" -> onPush,
                "EnterpriseServerUserAccount" -> onEnterpriseServerUserAccount,
                "PullRequestReview" -> onPullRequestReview,
                "RepoConfigLockAnonymousGitAccessAuditEntry" -> onRepoConfigLockAnonymousGitAccessAuditEntry,
                "OrgOauthAppAccessRequestedAuditEntry" -> onOrgOauthAppAccessRequestedAuditEntry,
                "RepositoryVisibilityChangeEnableAuditEntry" -> onRepositoryVisibilityChangeEnableAuditEntry,
                "MovedColumnsInProjectEvent" -> onMovedColumnsInProjectEvent,
                "UnlockedEvent" -> onUnlockedEvent,
                "Team" -> onTeam,
                "Reaction" -> onReaction,
                "MergedEvent" -> onMergedEvent,
                "ExternalIdentity" -> onExternalIdentity,
                "PackageFile" -> onPackageFile,
                "PackageVersion" -> onPackageVersion,
                "ReferencedEvent" -> onReferencedEvent,
                "CommitComment" -> onCommitComment,
                "PullRequestReviewThread" -> onPullRequestReviewThread,
                "HeadRefRestoredEvent" -> onHeadRefRestoredEvent,
                "PrivateRepositoryForkingEnableAuditEntry" -> onPrivateRepositoryForkingEnableAuditEntry,
                "LabeledEvent" -> onLabeledEvent,
                "Language" -> onLanguage,
                "RepoAddMemberAuditEntry" -> onRepoAddMemberAuditEntry,
                "UnpinnedEvent" -> onUnpinnedEvent,
                "DeploymentStatus" -> onDeploymentStatus,
                "Mannequin" -> onMannequin,
                "RepoConfigEnableSockpuppetDisallowedAuditEntry" -> onRepoConfigEnableSockpuppetDisallowedAuditEntry,
                "ConvertToDraftEvent" -> onConvertToDraftEvent,
                "Gist" -> onGist,
                "OrgInviteMemberAuditEntry" -> onOrgInviteMemberAuditEntry,
                "TeamRemoveMemberAuditEntry" -> onTeamRemoveMemberAuditEntry,
                "OrgInviteToBusinessAuditEntry" -> onOrgInviteToBusinessAuditEntry,
                "RepoAddTopicAuditEntry" -> onRepoAddTopicAuditEntry,
                "Package" -> onPackage,
                "RepoConfigDisableSockpuppetDisallowedAuditEntry" -> onRepoConfigDisableSockpuppetDisallowedAuditEntry,
                "Label" -> onLabel,
                "Project" -> onProject,
                "DeployedEvent" -> onDeployedEvent,
                "OrgUnblockUserAuditEntry" -> onOrgUnblockUserAuditEntry,
                "CodeOfConduct" -> onCodeOfConduct,
                "OrgEnableTwoFactorRequirementAuditEntry" -> onOrgEnableTwoFactorRequirementAuditEntry,
                "StatusContext" -> onStatusContext,
                "UnlabeledEvent" -> onUnlabeledEvent,
                "OrgBlockUserAuditEntry" -> onOrgBlockUserAuditEntry,
                "Tag" -> onTag,
                "OrgOauthAppAccessApprovedAuditEntry" -> onOrgOauthAppAccessApprovedAuditEntry,
                "CrossReferencedEvent" -> onCrossReferencedEvent,
                "OrgUpdateMemberAuditEntry" -> onOrgUpdateMemberAuditEntry,
                "RepoRemoveTopicAuditEntry" -> onRepoRemoveTopicAuditEntry,
                "AssignedEvent" -> onAssignedEvent,
                "RepositoryVulnerabilityAlert" -> onRepositoryVulnerabilityAlert,
                "OrgDisableSamlAuditEntry" -> onOrgDisableSamlAuditEntry,
                "RepoAccessAuditEntry" -> onRepoAccessAuditEntry,
                "PullRequestCommit" -> onPullRequestCommit,
                "SecurityAdvisory" -> onSecurityAdvisory,
                "RemovedFromProjectEvent" -> onRemovedFromProjectEvent,
                "Repository" -> onRepository,
                "EnterpriseServerInstallation" -> onEnterpriseServerInstallation,
                "PrivateRepositoryForkingDisableAuditEntry" -> onPrivateRepositoryForkingDisableAuditEntry,
                "ReviewDismissalAllowance" -> onReviewDismissalAllowance,
                "RepoConfigUnlockAnonymousGitAccessAuditEntry" -> onRepoConfigUnlockAnonymousGitAccessAuditEntry,
                "User" -> onUser,
                "TeamAddMemberAuditEntry" -> onTeamAddMemberAuditEntry,
                "DeploymentEnvironmentChangedEvent" -> onDeploymentEnvironmentChangedEvent,
                "DependencyGraphManifest" -> onDependencyGraphManifest,
                "MembersCanDeleteReposClearAuditEntry" -> onMembersCanDeleteReposClearAuditEntry,
                "EnterpriseServerUserAccountsUpload" -> onEnterpriseServerUserAccountsUpload,
                "ReleaseAsset" -> onReleaseAsset,
                "RepoConfigEnableContributorsOnlyAuditEntry" -> onRepoConfigEnableContributorsOnlyAuditEntry,
                "PullRequestCommitCommentThread" -> onPullRequestCommitCommentThread,
                "TeamDiscussion" -> onTeamDiscussion,
                "AddedToProjectEvent" -> onAddedToProjectEvent,
                "BranchProtectionRule" -> onBranchProtectionRule,
                "PublicKey" -> onPublicKey,
                "MarketplaceCategory" -> onMarketplaceCategory,
                "Issue" -> onIssue,
                "RepoConfigDisableContributorsOnlyAuditEntry" -> onRepoConfigDisableContributorsOnlyAuditEntry,
                "ReviewRequestRemovedEvent" -> onReviewRequestRemovedEvent,
                "Organization" -> onOrganization,
                "CommentDeletedEvent" -> onCommentDeletedEvent,
                "RepoRemoveMemberAuditEntry" -> onRepoRemoveMemberAuditEntry,
                "Milestone" -> onMilestone,
                "Enterprise" -> onEnterprise,
                "RepositoryVisibilityChangeDisableAuditEntry" -> onRepositoryVisibilityChangeDisableAuditEntry,
                "OrgDisableOauthAppRestrictionsAuditEntry" -> onOrgDisableOauthAppRestrictionsAuditEntry,
                "RenamedTitleEvent" -> onRenamedTitleEvent,
                "Sponsorship" -> onSponsorship,
                "ConnectedEvent" -> onConnectedEvent,
                "OrgDisableTwoFactorRequirementAuditEntry" -> onOrgDisableTwoFactorRequirementAuditEntry,
                "BaseRefChangedEvent" -> onBaseRefChangedEvent,
                "PinnedEvent" -> onPinnedEvent,
                "SponsorsTier" -> onSponsorsTier,
                "OrganizationIdentityProvider" -> onOrganizationIdentityProvider,
                "MilestonedEvent" -> onMilestonedEvent,
                "MembersCanDeleteReposEnableAuditEntry" -> onMembersCanDeleteReposEnableAuditEntry,
                "StatusCheckRollup" -> onStatusCheckRollup,
                "OrgOauthAppAccessDeniedAuditEntry" -> onOrgOauthAppAccessDeniedAuditEntry,
                "RepoChangeMergeSettingAuditEntry" -> onRepoChangeMergeSettingAuditEntry,
                "ReviewRequest" -> onReviewRequest,
                "EnterpriseAdministratorInvitation" -> onEnterpriseAdministratorInvitation,
                "DisconnectedEvent" -> onDisconnectedEvent,
                "RepoConfigEnableCollaboratorsOnlyAuditEntry" -> onRepoConfigEnableCollaboratorsOnlyAuditEntry,
                "UserContentEdit" -> onUserContentEdit,
                "PullRequest" -> onPullRequest,
                "Ref" -> onRef,
                "UserBlockedEvent" -> onUserBlockedEvent,
                "LockedEvent" -> onLockedEvent,
                "OrgUpdateMemberRepositoryInvitationPermissionAuditEntry" -> onOrgUpdateMemberRepositoryInvitationPermissionAuditEntry,
                "Status" -> onStatus,
                "OrgRestoreMemberAuditEntry" -> onOrgRestoreMemberAuditEntry
              ).collect { case (k, Some(v)) => k -> Obj(v) }
            )
          )
        ),
        arguments = List(Argument("ids", ids))
      )

    /**
     * Lookup a organization by login.
     */
    def organization[A](login: String)(
      innerSelection: SelectionBuilder[Organization, A]
    ): SelectionBuilder[RootQuery, Option[A]] =
      Field(
        "organization",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("login", login))
      )

    /**
     * The client's rate limit information.
     */
    def rateLimit[A](dryRun: Option[Boolean] = None)(
      innerSelection: SelectionBuilder[RateLimit, A]
    ): SelectionBuilder[RootQuery, Option[A]] =
      Field(
        "rateLimit",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("dryRun", dryRun))
      )

    /**
     * Hack to workaround https://github.com/facebook/relay/issues/112 re-exposing the root query object
     */
    def relay[A](
                  innerSelection: SelectionBuilder[Query, A]
                ): SelectionBuilder[RootQuery, A] = Field("relay", Obj(innerSelection))

    /**
     * Lookup a given repository by the owner and repository name.
     */
    def repository[A](name: String, owner: String)(
      innerSelection: SelectionBuilder[Repository, A]
    ): SelectionBuilder[RootQuery, Option[A]] =
      Field(
        "repository",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("name", name), Argument("owner", owner))
      )

    /**
     * Lookup a repository owner (ie. either a User or an Organization) by login.
     */
    def repositoryOwner[A](login: String)(
      onUser: Option[SelectionBuilder[User, A]] = None,
      onOrganization: Option[SelectionBuilder[Organization, A]] = None
    ): SelectionBuilder[RootQuery, Option[A]] =
      Field(
        "repositoryOwner",
        OptionOf(
          ChoiceOf(
            Map("User" -> onUser, "Organization" -> onOrganization).collect {
              case (k, Some(v)) => k -> Obj(v)
            }
          )
        ),
        arguments = List(Argument("login", login))
      )

    /**
     * Lookup resource by a URL.
     */
    def resource[A](url: URI)(
      onBot: Option[SelectionBuilder[Bot, A]] = None,
      onCheckRun: Option[SelectionBuilder[CheckRun, A]] = None,
      onReadyForReviewEvent: Option[
        SelectionBuilder[ReadyForReviewEvent, A]
      ] = None,
      onTeamDiscussionComment: Option[
        SelectionBuilder[TeamDiscussionComment, A]
      ] = None,
      onCommit: Option[SelectionBuilder[Commit, A]] = None,
      onRelease: Option[SelectionBuilder[Release, A]] = None,
      onReviewDismissedEvent: Option[
        SelectionBuilder[ReviewDismissedEvent, A]
      ] = None,
      onClosedEvent: Option[SelectionBuilder[ClosedEvent, A]] = None,
      onRepositoryTopic: Option[SelectionBuilder[RepositoryTopic, A]] = None,
      onMergedEvent: Option[SelectionBuilder[MergedEvent, A]] = None,
      onMannequin: Option[SelectionBuilder[Mannequin, A]] = None,
      onConvertToDraftEvent: Option[
        SelectionBuilder[ConvertToDraftEvent, A]
      ] = None,
      onGist: Option[SelectionBuilder[Gist, A]] = None,
      onCrossReferencedEvent: Option[
        SelectionBuilder[CrossReferencedEvent, A]
      ] = None,
      onPullRequestCommit: Option[SelectionBuilder[PullRequestCommit, A]] =
      None,
      onRepository: Option[SelectionBuilder[Repository, A]] = None,
      onUser: Option[SelectionBuilder[User, A]] = None,
      onTeamDiscussion: Option[SelectionBuilder[TeamDiscussion, A]] = None,
      onIssue: Option[SelectionBuilder[Issue, A]] = None,
      onOrganization: Option[SelectionBuilder[Organization, A]] = None,
      onMilestone: Option[SelectionBuilder[Milestone, A]] = None,
      onPullRequest: Option[SelectionBuilder[PullRequest, A]] = None
    ): SelectionBuilder[RootQuery, Option[A]] =
      Field(
        "resource",
        OptionOf(
          ChoiceOf(
            Map(
              "Bot" -> onBot,
              "CheckRun" -> onCheckRun,
              "ReadyForReviewEvent" -> onReadyForReviewEvent,
              "TeamDiscussionComment" -> onTeamDiscussionComment,
              "Commit" -> onCommit,
              "Release" -> onRelease,
              "ReviewDismissedEvent" -> onReviewDismissedEvent,
              "ClosedEvent" -> onClosedEvent,
              "RepositoryTopic" -> onRepositoryTopic,
              "MergedEvent" -> onMergedEvent,
              "Mannequin" -> onMannequin,
              "ConvertToDraftEvent" -> onConvertToDraftEvent,
              "Gist" -> onGist,
              "CrossReferencedEvent" -> onCrossReferencedEvent,
              "PullRequestCommit" -> onPullRequestCommit,
              "Repository" -> onRepository,
              "User" -> onUser,
              "TeamDiscussion" -> onTeamDiscussion,
              "Issue" -> onIssue,
              "Organization" -> onOrganization,
              "Milestone" -> onMilestone,
              "PullRequest" -> onPullRequest
            ).collect { case (k, Some(v)) => k -> Obj(v) }
          )
        ),
        arguments = List(Argument("url", url))
      )

    /**
     * Perform a search across resources.
     */
    def search[A](
                   after: Option[String] = None,
                   before: Option[String] = None,
                   first: Option[Int] = None,
                   last: Option[Int] = None,
                   query: String,
                   `type`: SearchType
                 )(
                   innerSelection: SelectionBuilder[SearchResultItemConnection, A]
                 ): SelectionBuilder[RootQuery, A] =
      Field(
        "search",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("last", last),
          Argument("query", query),
          Argument("type", `type`)
        )
      )

    /**
     * GitHub Security Advisories
     */
    def securityAdvisories[A](
                               after: Option[String] = None,
                               before: Option[String] = None,
                               first: Option[Int] = None,
                               identifier: Option[SecurityAdvisoryIdentifierFilter] = None,
                               last: Option[Int] = None,
                               orderBy: Option[SecurityAdvisoryOrder] = None,
                               publishedSince: Option[DateTime] = None,
                               updatedSince: Option[DateTime] = None
                             )(
                               innerSelection: SelectionBuilder[SecurityAdvisoryConnection, A]
                             ): SelectionBuilder[RootQuery, A] =
      Field(
        "securityAdvisories",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("first", first),
          Argument("identifier", identifier),
          Argument("last", last),
          Argument("orderBy", orderBy),
          Argument("publishedSince", publishedSince),
          Argument("updatedSince", updatedSince)
        )
      )

    /**
     * Fetch a Security Advisory by its GHSA ID
     */
    def securityAdvisory[A](ghsaId: String)(
      innerSelection: SelectionBuilder[SecurityAdvisory, A]
    ): SelectionBuilder[RootQuery, Option[A]] =
      Field(
        "securityAdvisory",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("ghsaId", ghsaId))
      )

    /**
     * Software Vulnerabilities documented by GitHub Security Advisories
     */
    def securityVulnerabilities[A](
                                    after: Option[String] = None,
                                    before: Option[String] = None,
                                    ecosystem: Option[SecurityAdvisoryEcosystem] = None,
                                    first: Option[Int] = None,
                                    last: Option[Int] = None,
                                    orderBy: Option[SecurityVulnerabilityOrder] = None,
                                    `package`: Option[String] = None,
                                    severities: Option[List[SecurityAdvisorySeverity]] = None
                                  )(
                                    innerSelection: SelectionBuilder[SecurityVulnerabilityConnection, A]
                                  ): SelectionBuilder[RootQuery, A] =
      Field(
        "securityVulnerabilities",
        Obj(innerSelection),
        arguments = List(
          Argument("after", after),
          Argument("before", before),
          Argument("ecosystem", ecosystem),
          Argument("first", first),
          Argument("last", last),
          Argument("orderBy", orderBy),
          Argument("package", `package`),
          Argument("severities", severities)
        )
      )

    /**
     * Look up a single Sponsors Listing
     */
    @deprecated(
      "`Query.sponsorsListing` will be removed. Use `Sponsorable.sponsorsListing` instead. Removal on 2020-04-01 UTC.",
      ""
    )
    def sponsorsListing[A](slug: String)(
      innerSelection: SelectionBuilder[SponsorsListing, A]
    ): SelectionBuilder[RootQuery, Option[A]] =
      Field(
        "sponsorsListing",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("slug", slug))
      )

    /**
     * Look up a topic by name.
     */
    def topic[A](name: String)(
      innerSelection: SelectionBuilder[Topic, A]
    ): SelectionBuilder[RootQuery, Option[A]] =
      Field(
        "topic",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("name", name))
      )

    /**
     * Lookup a user by login.
     */
    def user[A](login: String)(
      innerSelection: SelectionBuilder[User, A]
    ): SelectionBuilder[RootQuery, Option[A]] =
      Field(
        "user",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("login", login))
      )

    /**
     * The currently authenticated user.
     */
    def viewer[A](
                   innerSelection: SelectionBuilder[User, A]
                 ): SelectionBuilder[RootQuery, A] = Field("viewer", Obj(innerSelection))
  }

  type Mutation = RootMutation

  object Mutation {

    /**
     * Accepts a pending invitation for a user to become an administrator of an enterprise.
     */
    def acceptEnterpriseAdministratorInvitation[A](
                                                    input: AcceptEnterpriseAdministratorInvitationInput
                                                  )(
                                                    innerSelection: SelectionBuilder[
                                                      AcceptEnterpriseAdministratorInvitationPayload,
                                                      A
                                                    ]
                                                  ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "acceptEnterpriseAdministratorInvitation",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Applies a suggested topic to the repository.
     */
    def acceptTopicSuggestion[A](input: AcceptTopicSuggestionInput)(
      innerSelection: SelectionBuilder[AcceptTopicSuggestionPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "acceptTopicSuggestion",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Adds assignees to an assignable object.
     */
    def addAssigneesToAssignable[A](input: AddAssigneesToAssignableInput)(
      innerSelection: SelectionBuilder[AddAssigneesToAssignablePayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "addAssigneesToAssignable",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Adds a comment to an Issue or Pull Request.
     */
    def addComment[A](input: AddCommentInput)(
      innerSelection: SelectionBuilder[AddCommentPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "addComment",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Adds labels to a labelable object.
     */
    def addLabelsToLabelable[A](input: AddLabelsToLabelableInput)(
      innerSelection: SelectionBuilder[AddLabelsToLabelablePayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "addLabelsToLabelable",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Adds a card to a ProjectColumn. Either `contentId` or `note` must be provided but **not** both.
     */
    def addProjectCard[A](input: AddProjectCardInput)(
      innerSelection: SelectionBuilder[AddProjectCardPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "addProjectCard",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Adds a column to a Project.
     */
    def addProjectColumn[A](input: AddProjectColumnInput)(
      innerSelection: SelectionBuilder[AddProjectColumnPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "addProjectColumn",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Adds a review to a Pull Request.
     */
    def addPullRequestReview[A](input: AddPullRequestReviewInput)(
      innerSelection: SelectionBuilder[AddPullRequestReviewPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "addPullRequestReview",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Adds a comment to a review.
     */
    def addPullRequestReviewComment[A](input: AddPullRequestReviewCommentInput)(
      innerSelection: SelectionBuilder[AddPullRequestReviewCommentPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "addPullRequestReviewComment",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Adds a new thread to a pending Pull Request Review.
     */
    def addPullRequestReviewThread[A](input: AddPullRequestReviewThreadInput)(
      innerSelection: SelectionBuilder[AddPullRequestReviewThreadPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "addPullRequestReviewThread",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Adds a reaction to a subject.
     */
    def addReaction[A](input: AddReactionInput)(
      innerSelection: SelectionBuilder[AddReactionPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "addReaction",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Adds a star to a Starrable.
     */
    def addStar[A](input: AddStarInput)(
      innerSelection: SelectionBuilder[AddStarPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "addStar",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Marks a repository as archived.
     */
    def archiveRepository[A](input: ArchiveRepositoryInput)(
      innerSelection: SelectionBuilder[ArchiveRepositoryPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "archiveRepository",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Cancels a pending invitation for an administrator to join an enterprise.
     */
    def cancelEnterpriseAdminInvitation[A](
                                            input: CancelEnterpriseAdminInvitationInput
                                          )(
                                            innerSelection: SelectionBuilder[
                                              CancelEnterpriseAdminInvitationPayload,
                                              A
                                            ]
                                          ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "cancelEnterpriseAdminInvitation",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Update your status on GitHub.
     */
    def changeUserStatus[A](input: ChangeUserStatusInput)(
      innerSelection: SelectionBuilder[ChangeUserStatusPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "changeUserStatus",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Clears all labels from a labelable object.
     */
    def clearLabelsFromLabelable[A](input: ClearLabelsFromLabelableInput)(
      innerSelection: SelectionBuilder[ClearLabelsFromLabelablePayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "clearLabelsFromLabelable",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Creates a new project by cloning configuration from an existing project.
     */
    def cloneProject[A](input: CloneProjectInput)(
      innerSelection: SelectionBuilder[CloneProjectPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "cloneProject",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Create a new repository with the same files and directory structure as a template repository.
     */
    def cloneTemplateRepository[A](input: CloneTemplateRepositoryInput)(
      innerSelection: SelectionBuilder[CloneTemplateRepositoryPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "cloneTemplateRepository",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Close an issue.
     */
    def closeIssue[A](input: CloseIssueInput)(
      innerSelection: SelectionBuilder[CloseIssuePayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "closeIssue",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Close a pull request.
     */
    def closePullRequest[A](input: ClosePullRequestInput)(
      innerSelection: SelectionBuilder[ClosePullRequestPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "closePullRequest",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Convert a project note card to one associated with a newly created issue.
     */
    def convertProjectCardNoteToIssue[A](
                                          input: ConvertProjectCardNoteToIssueInput
                                        )(innerSelection: SelectionBuilder[ConvertProjectCardNoteToIssuePayload, A])
    : SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "convertProjectCardNoteToIssue",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Create a new branch protection rule
     */
    def createBranchProtectionRule[A](input: CreateBranchProtectionRuleInput)(
      innerSelection: SelectionBuilder[CreateBranchProtectionRulePayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "createBranchProtectionRule",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Create a check run.
     */
    def createCheckRun[A](input: CreateCheckRunInput)(
      innerSelection: SelectionBuilder[CreateCheckRunPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "createCheckRun",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Create a check suite
     */
    def createCheckSuite[A](input: CreateCheckSuiteInput)(
      innerSelection: SelectionBuilder[CreateCheckSuitePayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "createCheckSuite",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Create a content attachment.
     */
    def createContentAttachment[A](input: CreateContentAttachmentInput)(
      innerSelection: SelectionBuilder[CreateContentAttachmentPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "createContentAttachment",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Creates a new deployment event.
     */
    def createDeployment[A](input: CreateDeploymentInput)(
      innerSelection: SelectionBuilder[CreateDeploymentPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "createDeployment",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Create a deployment status.
     */
    def createDeploymentStatus[A](input: CreateDeploymentStatusInput)(
      innerSelection: SelectionBuilder[CreateDeploymentStatusPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "createDeploymentStatus",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Creates an organization as part of an enterprise account.
     */
    def createEnterpriseOrganization[A](
                                         input: CreateEnterpriseOrganizationInput
                                       )(
                                         innerSelection: SelectionBuilder[CreateEnterpriseOrganizationPayload, A]
                                       ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "createEnterpriseOrganization",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Creates a new IP allow list entry.
     */
    def createIpAllowListEntry[A](input: CreateIpAllowListEntryInput)(
      innerSelection: SelectionBuilder[CreateIpAllowListEntryPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "createIpAllowListEntry",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Creates a new issue.
     */
    def createIssue[A](input: CreateIssueInput)(
      innerSelection: SelectionBuilder[CreateIssuePayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "createIssue",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Creates a new label.
     */
    def createLabel[A](input: CreateLabelInput)(
      innerSelection: SelectionBuilder[CreateLabelPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "createLabel",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Creates a new project.
     */
    def createProject[A](input: CreateProjectInput)(
      innerSelection: SelectionBuilder[CreateProjectPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "createProject",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Create a new pull request
     */
    def createPullRequest[A](input: CreatePullRequestInput)(
      innerSelection: SelectionBuilder[CreatePullRequestPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "createPullRequest",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Create a new Git Ref.
     */
    def createRef[A](input: CreateRefInput)(
      innerSelection: SelectionBuilder[CreateRefPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "createRef",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Create a new repository.
     */
    def createRepository[A](input: CreateRepositoryInput)(
      innerSelection: SelectionBuilder[CreateRepositoryPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "createRepository",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Creates a new team discussion.
     */
    def createTeamDiscussion[A](input: CreateTeamDiscussionInput)(
      innerSelection: SelectionBuilder[CreateTeamDiscussionPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "createTeamDiscussion",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Creates a new team discussion comment.
     */
    def createTeamDiscussionComment[A](input: CreateTeamDiscussionCommentInput)(
      innerSelection: SelectionBuilder[CreateTeamDiscussionCommentPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "createTeamDiscussionComment",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Rejects a suggested topic for the repository.
     */
    def declineTopicSuggestion[A](input: DeclineTopicSuggestionInput)(
      innerSelection: SelectionBuilder[DeclineTopicSuggestionPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "declineTopicSuggestion",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Delete a branch protection rule
     */
    def deleteBranchProtectionRule[A](input: DeleteBranchProtectionRuleInput)(
      innerSelection: SelectionBuilder[DeleteBranchProtectionRulePayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "deleteBranchProtectionRule",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Deletes a deployment.
     */
    def deleteDeployment[A](input: DeleteDeploymentInput)(
      innerSelection: SelectionBuilder[DeleteDeploymentPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "deleteDeployment",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Deletes an IP allow list entry.
     */
    def deleteIpAllowListEntry[A](input: DeleteIpAllowListEntryInput)(
      innerSelection: SelectionBuilder[DeleteIpAllowListEntryPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "deleteIpAllowListEntry",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Deletes an Issue object.
     */
    def deleteIssue[A](input: DeleteIssueInput)(
      innerSelection: SelectionBuilder[DeleteIssuePayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "deleteIssue",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Deletes an IssueComment object.
     */
    def deleteIssueComment[A](input: DeleteIssueCommentInput)(
      innerSelection: SelectionBuilder[DeleteIssueCommentPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "deleteIssueComment",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Deletes a label.
     */
    def deleteLabel[A](input: DeleteLabelInput)(
      innerSelection: SelectionBuilder[DeleteLabelPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "deleteLabel",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Delete a package version.
     */
    def deletePackageVersion[A](input: DeletePackageVersionInput)(
      innerSelection: SelectionBuilder[DeletePackageVersionPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "deletePackageVersion",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Deletes a project.
     */
    def deleteProject[A](input: DeleteProjectInput)(
      innerSelection: SelectionBuilder[DeleteProjectPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "deleteProject",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Deletes a project card.
     */
    def deleteProjectCard[A](input: DeleteProjectCardInput)(
      innerSelection: SelectionBuilder[DeleteProjectCardPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "deleteProjectCard",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Deletes a project column.
     */
    def deleteProjectColumn[A](input: DeleteProjectColumnInput)(
      innerSelection: SelectionBuilder[DeleteProjectColumnPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "deleteProjectColumn",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Deletes a pull request review.
     */
    def deletePullRequestReview[A](input: DeletePullRequestReviewInput)(
      innerSelection: SelectionBuilder[DeletePullRequestReviewPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "deletePullRequestReview",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Deletes a pull request review comment.
     */
    def deletePullRequestReviewComment[A](
                                           input: DeletePullRequestReviewCommentInput
                                         )(
                                           innerSelection: SelectionBuilder[
                                             DeletePullRequestReviewCommentPayload,
                                             A
                                           ]
                                         ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "deletePullRequestReviewComment",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Delete a Git Ref.
     */
    def deleteRef[A](input: DeleteRefInput)(
      innerSelection: SelectionBuilder[DeleteRefPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "deleteRef",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Deletes a team discussion.
     */
    def deleteTeamDiscussion[A](input: DeleteTeamDiscussionInput)(
      innerSelection: SelectionBuilder[DeleteTeamDiscussionPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "deleteTeamDiscussion",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Deletes a team discussion comment.
     */
    def deleteTeamDiscussionComment[A](input: DeleteTeamDiscussionCommentInput)(
      innerSelection: SelectionBuilder[DeleteTeamDiscussionCommentPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "deleteTeamDiscussionComment",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Dismisses an approved or rejected pull request review.
     */
    def dismissPullRequestReview[A](input: DismissPullRequestReviewInput)(
      innerSelection: SelectionBuilder[DismissPullRequestReviewPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "dismissPullRequestReview",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Follow a user.
     */
    def followUser[A](input: FollowUserInput)(
      innerSelection: SelectionBuilder[FollowUserPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "followUser",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Creates a new project by importing columns and a list of issues/PRs.
     */
    def importProject[A](input: ImportProjectInput)(
      innerSelection: SelectionBuilder[ImportProjectPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "importProject",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Invite someone to become an administrator of the enterprise.
     */
    def inviteEnterpriseAdmin[A](input: InviteEnterpriseAdminInput)(
      innerSelection: SelectionBuilder[InviteEnterpriseAdminPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "inviteEnterpriseAdmin",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Creates a repository link for a project.
     */
    def linkRepositoryToProject[A](input: LinkRepositoryToProjectInput)(
      innerSelection: SelectionBuilder[LinkRepositoryToProjectPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "linkRepositoryToProject",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Lock a lockable object
     */
    def lockLockable[A](input: LockLockableInput)(
      innerSelection: SelectionBuilder[LockLockablePayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "lockLockable",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Mark a pull request file as viewed
     */
    def markFileAsViewed[A](input: MarkFileAsViewedInput)(
      innerSelection: SelectionBuilder[MarkFileAsViewedPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "markFileAsViewed",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Marks a pull request ready for review.
     */
    def markPullRequestReadyForReview[A](
                                          input: MarkPullRequestReadyForReviewInput
                                        )(innerSelection: SelectionBuilder[MarkPullRequestReadyForReviewPayload, A])
    : SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "markPullRequestReadyForReview",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Merge a head into a branch.
     */
    def mergeBranch[A](input: MergeBranchInput)(
      innerSelection: SelectionBuilder[MergeBranchPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "mergeBranch",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Merge a pull request.
     */
    def mergePullRequest[A](input: MergePullRequestInput)(
      innerSelection: SelectionBuilder[MergePullRequestPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "mergePullRequest",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Minimizes a comment on an Issue, Commit, Pull Request, or Gist
     */
    def minimizeComment[A](input: MinimizeCommentInput)(
      innerSelection: SelectionBuilder[MinimizeCommentPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "minimizeComment",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Moves a project card to another place.
     */
    def moveProjectCard[A](input: MoveProjectCardInput)(
      innerSelection: SelectionBuilder[MoveProjectCardPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "moveProjectCard",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Moves a project column to another place.
     */
    def moveProjectColumn[A](input: MoveProjectColumnInput)(
      innerSelection: SelectionBuilder[MoveProjectColumnPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "moveProjectColumn",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Pin an issue to a repository
     */
    def pinIssue[A](input: PinIssueInput)(
      innerSelection: SelectionBuilder[PinIssuePayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "pinIssue",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Regenerates the identity provider recovery codes for an enterprise
     */
    def regenerateEnterpriseIdentityProviderRecoveryCodes[A](
                                                              input: RegenerateEnterpriseIdentityProviderRecoveryCodesInput
                                                            )(
                                                              innerSelection: SelectionBuilder[
                                                                RegenerateEnterpriseIdentityProviderRecoveryCodesPayload,
                                                                A
                                                              ]
                                                            ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "regenerateEnterpriseIdentityProviderRecoveryCodes",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Removes assignees from an assignable object.
     */
    def removeAssigneesFromAssignable[A](
                                          input: RemoveAssigneesFromAssignableInput
                                        )(innerSelection: SelectionBuilder[RemoveAssigneesFromAssignablePayload, A])
    : SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "removeAssigneesFromAssignable",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Removes an administrator from the enterprise.
     */
    def removeEnterpriseAdmin[A](input: RemoveEnterpriseAdminInput)(
      innerSelection: SelectionBuilder[RemoveEnterpriseAdminPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "removeEnterpriseAdmin",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Removes the identity provider from an enterprise
     */
    def removeEnterpriseIdentityProvider[A](
                                             input: RemoveEnterpriseIdentityProviderInput
                                           )(
                                             innerSelection: SelectionBuilder[
                                               RemoveEnterpriseIdentityProviderPayload,
                                               A
                                             ]
                                           ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "removeEnterpriseIdentityProvider",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Removes an organization from the enterprise
     */
    def removeEnterpriseOrganization[A](
                                         input: RemoveEnterpriseOrganizationInput
                                       )(
                                         innerSelection: SelectionBuilder[RemoveEnterpriseOrganizationPayload, A]
                                       ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "removeEnterpriseOrganization",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Removes labels from a Labelable object.
     */
    def removeLabelsFromLabelable[A](input: RemoveLabelsFromLabelableInput)(
      innerSelection: SelectionBuilder[RemoveLabelsFromLabelablePayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "removeLabelsFromLabelable",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Removes outside collaborator from all repositories in an organization.
     */
    def removeOutsideCollaborator[A](input: RemoveOutsideCollaboratorInput)(
      innerSelection: SelectionBuilder[RemoveOutsideCollaboratorPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "removeOutsideCollaborator",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Removes a reaction from a subject.
     */
    def removeReaction[A](input: RemoveReactionInput)(
      innerSelection: SelectionBuilder[RemoveReactionPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "removeReaction",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Removes a star from a Starrable.
     */
    def removeStar[A](input: RemoveStarInput)(
      innerSelection: SelectionBuilder[RemoveStarPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "removeStar",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Reopen a issue.
     */
    def reopenIssue[A](input: ReopenIssueInput)(
      innerSelection: SelectionBuilder[ReopenIssuePayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "reopenIssue",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Reopen a pull request.
     */
    def reopenPullRequest[A](input: ReopenPullRequestInput)(
      innerSelection: SelectionBuilder[ReopenPullRequestPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "reopenPullRequest",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Set review requests on a pull request.
     */
    def requestReviews[A](input: RequestReviewsInput)(
      innerSelection: SelectionBuilder[RequestReviewsPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "requestReviews",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Rerequests an existing check suite.
     */
    def rerequestCheckSuite[A](input: RerequestCheckSuiteInput)(
      innerSelection: SelectionBuilder[RerequestCheckSuitePayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "rerequestCheckSuite",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Marks a review thread as resolved.
     */
    def resolveReviewThread[A](input: ResolveReviewThreadInput)(
      innerSelection: SelectionBuilder[ResolveReviewThreadPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "resolveReviewThread",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Creates or updates the identity provider for an enterprise.
     */
    def setEnterpriseIdentityProvider[A](
                                          input: SetEnterpriseIdentityProviderInput
                                        )(innerSelection: SelectionBuilder[SetEnterpriseIdentityProviderPayload, A])
    : SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "setEnterpriseIdentityProvider",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Submits a pending pull request review.
     */
    def submitPullRequestReview[A](input: SubmitPullRequestReviewInput)(
      innerSelection: SelectionBuilder[SubmitPullRequestReviewPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "submitPullRequestReview",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Transfer an issue to a different repository
     */
    def transferIssue[A](input: TransferIssueInput)(
      innerSelection: SelectionBuilder[TransferIssuePayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "transferIssue",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Unarchives a repository.
     */
    def unarchiveRepository[A](input: UnarchiveRepositoryInput)(
      innerSelection: SelectionBuilder[UnarchiveRepositoryPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "unarchiveRepository",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Unfollow a user.
     */
    def unfollowUser[A](input: UnfollowUserInput)(
      innerSelection: SelectionBuilder[UnfollowUserPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "unfollowUser",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Deletes a repository link from a project.
     */
    def unlinkRepositoryFromProject[A](input: UnlinkRepositoryFromProjectInput)(
      innerSelection: SelectionBuilder[UnlinkRepositoryFromProjectPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "unlinkRepositoryFromProject",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Unlock a lockable object
     */
    def unlockLockable[A](input: UnlockLockableInput)(
      innerSelection: SelectionBuilder[UnlockLockablePayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "unlockLockable",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Unmark a pull request file as viewed
     */
    def unmarkFileAsViewed[A](input: UnmarkFileAsViewedInput)(
      innerSelection: SelectionBuilder[UnmarkFileAsViewedPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "unmarkFileAsViewed",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Unmark an issue as a duplicate of another issue.
     */
    def unmarkIssueAsDuplicate[A](input: UnmarkIssueAsDuplicateInput)(
      innerSelection: SelectionBuilder[UnmarkIssueAsDuplicatePayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "unmarkIssueAsDuplicate",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Unminimizes a comment on an Issue, Commit, Pull Request, or Gist
     */
    def unminimizeComment[A](input: UnminimizeCommentInput)(
      innerSelection: SelectionBuilder[UnminimizeCommentPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "unminimizeComment",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Unpin a pinned issue from a repository
     */
    def unpinIssue[A](input: UnpinIssueInput)(
      innerSelection: SelectionBuilder[UnpinIssuePayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "unpinIssue",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Marks a review thread as unresolved.
     */
    def unresolveReviewThread[A](input: UnresolveReviewThreadInput)(
      innerSelection: SelectionBuilder[UnresolveReviewThreadPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "unresolveReviewThread",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Create a new branch protection rule
     */
    def updateBranchProtectionRule[A](input: UpdateBranchProtectionRuleInput)(
      innerSelection: SelectionBuilder[UpdateBranchProtectionRulePayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "updateBranchProtectionRule",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Update a check run
     */
    def updateCheckRun[A](input: UpdateCheckRunInput)(
      innerSelection: SelectionBuilder[UpdateCheckRunPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "updateCheckRun",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Modifies the settings of an existing check suite
     */
    def updateCheckSuitePreferences[A](input: UpdateCheckSuitePreferencesInput)(
      innerSelection: SelectionBuilder[UpdateCheckSuitePreferencesPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "updateCheckSuitePreferences",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Sets the action execution capability setting for an enterprise.
     */
    def updateEnterpriseActionExecutionCapabilitySetting[A](
                                                             input: UpdateEnterpriseActionExecutionCapabilitySettingInput
                                                           )(
                                                             innerSelection: SelectionBuilder[
                                                               UpdateEnterpriseActionExecutionCapabilitySettingPayload,
                                                               A
                                                             ]
                                                           ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "updateEnterpriseActionExecutionCapabilitySetting",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Updates the role of an enterprise administrator.
     */
    def updateEnterpriseAdministratorRole[A](
                                              input: UpdateEnterpriseAdministratorRoleInput
                                            )(
                                              innerSelection: SelectionBuilder[
                                                UpdateEnterpriseAdministratorRolePayload,
                                                A
                                              ]
                                            ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "updateEnterpriseAdministratorRole",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Sets whether private repository forks are enabled for an enterprise.
     */
    def updateEnterpriseAllowPrivateRepositoryForkingSetting[A](
                                                                 input: UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput
                                                               )(
                                                                 innerSelection: SelectionBuilder[
                                                                   UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload,
                                                                   A
                                                                 ]
                                                               ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "updateEnterpriseAllowPrivateRepositoryForkingSetting",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Sets the default repository permission for organizations in an enterprise.
     */
    def updateEnterpriseDefaultRepositoryPermissionSetting[A](
                                                               input: UpdateEnterpriseDefaultRepositoryPermissionSettingInput
                                                             )(
                                                               innerSelection: SelectionBuilder[
                                                                 UpdateEnterpriseDefaultRepositoryPermissionSettingPayload,
                                                                 A
                                                               ]
                                                             ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "updateEnterpriseDefaultRepositoryPermissionSetting",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Sets whether organization members with admin permissions on a repository can change repository visibility.
     */
    def updateEnterpriseMembersCanChangeRepositoryVisibilitySetting[A](
                                                                        input: UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput
                                                                      )(
                                                                        innerSelection: SelectionBuilder[
                                                                          UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload,
                                                                          A
                                                                        ]
                                                                      ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "updateEnterpriseMembersCanChangeRepositoryVisibilitySetting",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Sets the members can create repositories setting for an enterprise.
     */
    def updateEnterpriseMembersCanCreateRepositoriesSetting[A](
                                                                input: UpdateEnterpriseMembersCanCreateRepositoriesSettingInput
                                                              )(
                                                                innerSelection: SelectionBuilder[
                                                                  UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload,
                                                                  A
                                                                ]
                                                              ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "updateEnterpriseMembersCanCreateRepositoriesSetting",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Sets the members can delete issues setting for an enterprise.
     */
    def updateEnterpriseMembersCanDeleteIssuesSetting[A](
                                                          input: UpdateEnterpriseMembersCanDeleteIssuesSettingInput
                                                        )(
                                                          innerSelection: SelectionBuilder[
                                                            UpdateEnterpriseMembersCanDeleteIssuesSettingPayload,
                                                            A
                                                          ]
                                                        ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "updateEnterpriseMembersCanDeleteIssuesSetting",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Sets the members can delete repositories setting for an enterprise.
     */
    def updateEnterpriseMembersCanDeleteRepositoriesSetting[A](
                                                                input: UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput
                                                              )(
                                                                innerSelection: SelectionBuilder[
                                                                  UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload,
                                                                  A
                                                                ]
                                                              ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "updateEnterpriseMembersCanDeleteRepositoriesSetting",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Sets whether members can invite collaborators are enabled for an enterprise.
     */
    def updateEnterpriseMembersCanInviteCollaboratorsSetting[A](
                                                                 input: UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput
                                                               )(
                                                                 innerSelection: SelectionBuilder[
                                                                   UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload,
                                                                   A
                                                                 ]
                                                               ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "updateEnterpriseMembersCanInviteCollaboratorsSetting",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Sets whether or not an organization admin can make purchases.
     */
    def updateEnterpriseMembersCanMakePurchasesSetting[A](
                                                           input: UpdateEnterpriseMembersCanMakePurchasesSettingInput
                                                         )(
                                                           innerSelection: SelectionBuilder[
                                                             UpdateEnterpriseMembersCanMakePurchasesSettingPayload,
                                                             A
                                                           ]
                                                         ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "updateEnterpriseMembersCanMakePurchasesSetting",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Sets the members can update protected branches setting for an enterprise.
     */
    def updateEnterpriseMembersCanUpdateProtectedBranchesSetting[A](
                                                                     input: UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput
                                                                   )(
                                                                     innerSelection: SelectionBuilder[
                                                                       UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload,
                                                                       A
                                                                     ]
                                                                   ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "updateEnterpriseMembersCanUpdateProtectedBranchesSetting",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Sets the members can view dependency insights for an enterprise.
     */
    def updateEnterpriseMembersCanViewDependencyInsightsSetting[A](
                                                                    input: UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput
                                                                  )(
                                                                    innerSelection: SelectionBuilder[
                                                                      UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload,
                                                                      A
                                                                    ]
                                                                  ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "updateEnterpriseMembersCanViewDependencyInsightsSetting",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Sets whether organization projects are enabled for an enterprise.
     */
    def updateEnterpriseOrganizationProjectsSetting[A](
                                                        input: UpdateEnterpriseOrganizationProjectsSettingInput
                                                      )(
                                                        innerSelection: SelectionBuilder[
                                                          UpdateEnterpriseOrganizationProjectsSettingPayload,
                                                          A
                                                        ]
                                                      ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "updateEnterpriseOrganizationProjectsSetting",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Updates an enterprise's profile.
     */
    def updateEnterpriseProfile[A](input: UpdateEnterpriseProfileInput)(
      innerSelection: SelectionBuilder[UpdateEnterpriseProfilePayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "updateEnterpriseProfile",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Sets whether repository projects are enabled for a enterprise.
     */
    def updateEnterpriseRepositoryProjectsSetting[A](
                                                      input: UpdateEnterpriseRepositoryProjectsSettingInput
                                                    )(
                                                      innerSelection: SelectionBuilder[
                                                        UpdateEnterpriseRepositoryProjectsSettingPayload,
                                                        A
                                                      ]
                                                    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "updateEnterpriseRepositoryProjectsSetting",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Sets whether team discussions are enabled for an enterprise.
     */
    def updateEnterpriseTeamDiscussionsSetting[A](
                                                   input: UpdateEnterpriseTeamDiscussionsSettingInput
                                                 )(
                                                   innerSelection: SelectionBuilder[
                                                     UpdateEnterpriseTeamDiscussionsSettingPayload,
                                                     A
                                                   ]
                                                 ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "updateEnterpriseTeamDiscussionsSetting",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Sets whether two factor authentication is required for all users in an enterprise.
     */
    def updateEnterpriseTwoFactorAuthenticationRequiredSetting[A](
                                                                   input: UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput
                                                                 )(
                                                                   innerSelection: SelectionBuilder[
                                                                     UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload,
                                                                     A
                                                                   ]
                                                                 ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "updateEnterpriseTwoFactorAuthenticationRequiredSetting",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Sets whether an IP allow list is enabled on an owner.
     */
    def updateIpAllowListEnabledSetting[A](
                                            input: UpdateIpAllowListEnabledSettingInput
                                          )(
                                            innerSelection: SelectionBuilder[
                                              UpdateIpAllowListEnabledSettingPayload,
                                              A
                                            ]
                                          ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "updateIpAllowListEnabledSetting",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Updates an IP allow list entry.
     */
    def updateIpAllowListEntry[A](input: UpdateIpAllowListEntryInput)(
      innerSelection: SelectionBuilder[UpdateIpAllowListEntryPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "updateIpAllowListEntry",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Updates an Issue.
     */
    def updateIssue[A](input: UpdateIssueInput)(
      innerSelection: SelectionBuilder[UpdateIssuePayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "updateIssue",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Updates an IssueComment object.
     */
    def updateIssueComment[A](input: UpdateIssueCommentInput)(
      innerSelection: SelectionBuilder[UpdateIssueCommentPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "updateIssueComment",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Updates an existing label.
     */
    def updateLabel[A](input: UpdateLabelInput)(
      innerSelection: SelectionBuilder[UpdateLabelPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "updateLabel",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Updates an existing project.
     */
    def updateProject[A](input: UpdateProjectInput)(
      innerSelection: SelectionBuilder[UpdateProjectPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "updateProject",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Updates an existing project card.
     */
    def updateProjectCard[A](input: UpdateProjectCardInput)(
      innerSelection: SelectionBuilder[UpdateProjectCardPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "updateProjectCard",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Updates an existing project column.
     */
    def updateProjectColumn[A](input: UpdateProjectColumnInput)(
      innerSelection: SelectionBuilder[UpdateProjectColumnPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "updateProjectColumn",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Update a pull request
     */
    def updatePullRequest[A](input: UpdatePullRequestInput)(
      innerSelection: SelectionBuilder[UpdatePullRequestPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "updatePullRequest",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Updates the body of a pull request review.
     */
    def updatePullRequestReview[A](input: UpdatePullRequestReviewInput)(
      innerSelection: SelectionBuilder[UpdatePullRequestReviewPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "updatePullRequestReview",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Updates a pull request review comment.
     */
    def updatePullRequestReviewComment[A](
                                           input: UpdatePullRequestReviewCommentInput
                                         )(
                                           innerSelection: SelectionBuilder[
                                             UpdatePullRequestReviewCommentPayload,
                                             A
                                           ]
                                         ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "updatePullRequestReviewComment",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Update a Git Ref.
     */
    def updateRef[A](input: UpdateRefInput)(
      innerSelection: SelectionBuilder[UpdateRefPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "updateRef",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Creates, updates and/or deletes multiple refs in a repository.
     *
     * This mutation takes a list of `RefUpdate`s and performs these updates
     * on the repository. All updates are performed atomically, meaning that
     * if one of them is rejected, no other ref will be modified.
     *
     * `RefUpdate.beforeOid` specifies that the given reference needs to point
     * to the given value before performing any updates. A value of
     * `0000000000000000000000000000000000000000` can be used to verify that
     * the references should not exist.
     *
     * `RefUpdate.afterOid` specifies the value that the given reference
     * will point to after performing all updates. A value of
     * `0000000000000000000000000000000000000000` can be used to delete a
     * reference.
     *
     * If `RefUpdate.force` is set to `true`, a non-fast-forward updates
     * for the given reference will be allowed.
     */
    def updateRefs[A](input: UpdateRefsInput)(
      innerSelection: SelectionBuilder[UpdateRefsPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "updateRefs",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Update information about a repository.
     */
    def updateRepository[A](input: UpdateRepositoryInput)(
      innerSelection: SelectionBuilder[UpdateRepositoryPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "updateRepository",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Updates the state for subscribable subjects.
     */
    def updateSubscription[A](input: UpdateSubscriptionInput)(
      innerSelection: SelectionBuilder[UpdateSubscriptionPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "updateSubscription",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Updates a team discussion.
     */
    def updateTeamDiscussion[A](input: UpdateTeamDiscussionInput)(
      innerSelection: SelectionBuilder[UpdateTeamDiscussionPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "updateTeamDiscussion",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Updates a discussion comment.
     */
    def updateTeamDiscussionComment[A](input: UpdateTeamDiscussionCommentInput)(
      innerSelection: SelectionBuilder[UpdateTeamDiscussionCommentPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "updateTeamDiscussionComment",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Updates team review assignment.
     */
    def updateTeamReviewAssignment[A](input: UpdateTeamReviewAssignmentInput)(
      innerSelection: SelectionBuilder[UpdateTeamReviewAssignmentPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "updateTeamReviewAssignment",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )

    /**
     * Replaces the repository's topics with the given topics.
     */
    def updateTopics[A](input: UpdateTopicsInput)(
      innerSelection: SelectionBuilder[UpdateTopicsPayload, A]
    ): SelectionBuilder[RootMutation, Option[A]] =
      Field(
        "updateTopics",
        OptionOf(Obj(innerSelection)),
        arguments = List(Argument("input", input))
      )
  }

}
